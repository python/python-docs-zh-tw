# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-18 00:04+0000\n"
"PO-Revision-Date: 2018-05-23 16:17+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr ""

#: ../../reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of "
"*tokens*, generated by the *lexical analyzer*.  This chapter describes how "
"the lexical analyzer breaks a file into tokens."
msgstr ""

#: ../../reference/lexical_analysis.rst:14
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see :pep:"
"`3120` for details.  If the source file cannot be decoded, a :exc:"
"`SyntaxError` is raised."
msgstr ""

#: ../../reference/lexical_analysis.rst:23
msgid "Line structure"
msgstr ""

#: ../../reference/lexical_analysis.rst:27
msgid "A Python program is divided into a number of *logical lines*."
msgstr ""

#: ../../reference/lexical_analysis.rst:33
msgid "Logical lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:37
msgid ""
"The end of a logical line is represented by the token NEWLINE.  Statements "
"cannot cross logical line boundaries except where NEWLINE is allowed by the "
"syntax (e.g., between statements in compound statements). A logical line is "
"constructed from one or more *physical lines* by following the explicit or "
"implicit *line joining* rules."
msgstr ""

#: ../../reference/lexical_analysis.rst:47
msgid "Physical lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:49
msgid ""
"A physical line is a sequence of characters terminated by an end-of-line "
"sequence.  In source files and strings, any of the standard platform line "
"termination sequences can be used - the Unix form using ASCII LF (linefeed), "
"the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed), or the old Macintosh form using the ASCII CR (return) character.  "
"All of these forms can be used equally, regardless of platform. The end of "
"input also serves as an implicit terminator for the final physical line."
msgstr ""

#: ../../reference/lexical_analysis.rst:57
msgid ""
"When embedding Python, source code strings should be passed to Python APIs "
"using the standard C conventions for newline characters (the ``\\n`` "
"character, representing ASCII LF, is the line terminator)."
msgstr ""

#: ../../reference/lexical_analysis.rst:65
msgid "Comments"
msgstr ""

#: ../../reference/lexical_analysis.rst:70
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax."
msgstr ""

#: ../../reference/lexical_analysis.rst:79
msgid "Encoding declarations"
msgstr ""

#: ../../reference/lexical_analysis.rst:84
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""

#: ../../reference/lexical_analysis.rst:93
msgid "which is recognized also by GNU Emacs, and ::"
msgstr ""

#: ../../reference/lexical_analysis.rst:97
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr ""

#: ../../reference/lexical_analysis.rst:99
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  If the "
"implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-"
"order mark (b'\\xef\\xbb\\xbf') is ignored rather than being a syntax error."
msgstr ""

#: ../../reference/lexical_analysis.rst:103
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python "
"(see :ref:`standard-encodings`). The encoding is used for all lexical "
"analysis, including string literals, comments and identifiers."
msgstr ""

#: ../../reference/lexical_analysis.rst:112
msgid "Explicit line joining"
msgstr ""

#: ../../reference/lexical_analysis.rst:116
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:127
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string "
"literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""

#: ../../reference/lexical_analysis.rst:137
msgid "Implicit line joining"
msgstr ""

#: ../../reference/lexical_analysis.rst:139
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:147
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""

#: ../../reference/lexical_analysis.rst:157
msgid "Blank lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:161
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no NEWLINE token is generated).  During "
"interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop.  In the "
"standard interactive interpreter, an entirely blank logical line (i.e. one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:172
msgid "Indentation"
msgstr ""

#: ../../reference/lexical_analysis.rst:176
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr ""

#: ../../reference/lexical_analysis.rst:180
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple "
"of eight (this is intended to be the same rule as used by Unix).  The total "
"number of spaces preceding the first non-blank character then determines the "
"line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines "
"the indentation."
msgstr ""

#: ../../reference/lexical_analysis.rst:188
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""

#: ../../reference/lexical_analysis.rst:192
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors "
"on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for "
"the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""

#: ../../reference/lexical_analysis.rst:197
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""

#: ../../reference/lexical_analysis.rst:204
msgid ""
"The indentation levels of consecutive lines are used to generate INDENT and "
"DEDENT tokens, using a stack, as follows."
msgstr ""

#: ../../reference/lexical_analysis.rst:207
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack "
"will always be strictly increasing from bottom to top.  At the beginning of "
"each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on "
"the stack, and one INDENT token is generated.  If it is smaller, it *must* "
"be one of the numbers occurring on the stack; all numbers on the stack that "
"are larger are popped off, and for each number popped off a DEDENT token is "
"generated.  At the end of the file, a DEDENT token is generated for each "
"number remaining on the stack that is larger than zero."
msgstr ""

#: ../../reference/lexical_analysis.rst:218
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr ""

#: ../../reference/lexical_analysis.rst:233
msgid "The following example shows various indentation errors::"
msgstr ""

#: ../../reference/lexical_analysis.rst:243
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:251
msgid "Whitespace between tokens"
msgstr ""

#: ../../reference/lexical_analysis.rst:253
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to "
"separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token (e.g., ab "
"is one token, but a b is two tokens)."
msgstr ""

#: ../../reference/lexical_analysis.rst:263
msgid "Other tokens"
msgstr ""

#: ../../reference/lexical_analysis.rst:265
msgid ""
"Besides NEWLINE, INDENT and DEDENT, the following categories of tokens "
"exist: *identifiers*, *keywords*, *literals*, *operators*, and *delimiters*. "
"Whitespace characters (other than line terminators, discussed earlier) are "
"not tokens, but serve to delimit tokens. Where ambiguity exists, a token "
"comprises the longest possible string that forms a legal token, when read "
"from left to right."
msgstr ""

#: ../../reference/lexical_analysis.rst:275
msgid "Identifiers and keywords"
msgstr ""

#: ../../reference/lexical_analysis.rst:279
msgid ""
"Identifiers (also referred to as *names*) are described by the following "
"lexical definitions."
msgstr ""

#: ../../reference/lexical_analysis.rst:282
msgid ""
"The syntax of identifiers in Python is based on the Unicode standard annex "
"UAX-31, with elaboration and changes as defined below; see also :pep:`3131` "
"for further details."
msgstr ""

#: ../../reference/lexical_analysis.rst:286
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for "
"identifiers are the same as in Python 2.x: the uppercase and lowercase "
"letters ``A`` through ``Z``, the underscore ``_`` and, except for the first "
"character, the digits ``0`` through ``9``."
msgstr ""

#: ../../reference/lexical_analysis.rst:291
msgid ""
"Python 3.0 introduces additional characters from outside the ASCII range "
"(see :pep:`3131`).  For these characters, the classification uses the "
"version of the Unicode Character Database as included in the :mod:"
"`unicodedata` module."
msgstr ""

#: ../../reference/lexical_analysis.rst:295
msgid "Identifiers are unlimited in length.  Case is significant."
msgstr ""

#: ../../reference/lexical_analysis.rst:304
msgid "The Unicode category codes mentioned above stand for:"
msgstr ""

#: ../../reference/lexical_analysis.rst:306
msgid "*Lu* - uppercase letters"
msgstr "*Lu* - 大寫字母"

#: ../../reference/lexical_analysis.rst:307
msgid "*Ll* - lowercase letters"
msgstr "*Ll* - 小寫字母"

#: ../../reference/lexical_analysis.rst:308
msgid "*Lt* - titlecase letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:309
msgid "*Lm* - modifier letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:310
msgid "*Lo* - other letters"
msgstr "*Lo* - 其他字母"

#: ../../reference/lexical_analysis.rst:311
msgid "*Nl* - letter numbers"
msgstr ""

#: ../../reference/lexical_analysis.rst:312
msgid "*Mn* - nonspacing marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:313
msgid "*Mc* - spacing combining marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:314
msgid "*Nd* - decimal numbers"
msgstr "*Nd* - 十進位數字"

#: ../../reference/lexical_analysis.rst:315
msgid "*Pc* - connector punctuations"
msgstr ""

#: ../../reference/lexical_analysis.rst:316
msgid ""
"*Other_ID_Start* - explicit list of characters in `PropList.txt <https://www."
"unicode.org/Public/15.0.0/ucd/PropList.txt>`_ to support backwards "
"compatibility"
msgstr ""

#: ../../reference/lexical_analysis.rst:319
msgid "*Other_ID_Continue* - likewise"
msgstr ""

#: ../../reference/lexical_analysis.rst:321
msgid ""
"All identifiers are converted into the normal form NFKC while parsing; "
"comparison of identifiers is based on NFKC."
msgstr ""

#: ../../reference/lexical_analysis.rst:324
msgid ""
"A non-normative HTML file listing all valid identifier characters for "
"Unicode 15.0.0 can be found at https://www.unicode.org/Public/15.0.0/ucd/"
"DerivedCoreProperties.txt"
msgstr ""

#: ../../reference/lexical_analysis.rst:332
msgid "Keywords"
msgstr "關鍵字"

#: ../../reference/lexical_analysis.rst:338
msgid ""
"The following identifiers are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr ""

#: ../../reference/lexical_analysis.rst:356
msgid "Soft Keywords"
msgstr "軟關鍵字"

#: ../../reference/lexical_analysis.rst:362
msgid ""
"Some identifiers are only reserved under specific contexts. These are known "
"as *soft keywords*.  The identifiers ``match``, ``case``, ``type`` and ``_`` "
"can syntactically act as keywords in certain contexts, but this distinction "
"is done at the parser level, not when tokenizing."
msgstr ""

#: ../../reference/lexical_analysis.rst:367
msgid ""
"As soft keywords, their use in the grammar is possible while still "
"preserving compatibility with existing code that uses these names as "
"identifier names."
msgstr ""

#: ../../reference/lexical_analysis.rst:371
msgid ""
"``match``, ``case``, and ``_`` are used in the :keyword:`match` statement. "
"``type`` is used in the :keyword:`type` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:374
msgid "``type`` is now a soft keyword."
msgstr "``type`` 現在是軟關鍵字。"

#: ../../reference/lexical_analysis.rst:383
msgid "Reserved classes of identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:385
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""

#: ../../reference/lexical_analysis.rst:389
msgid "``_*``"
msgstr "``_*``"

#: ../../reference/lexical_analysis.rst:390
msgid "Not imported by ``from module import *``."
msgstr ""

#: ../../reference/lexical_analysis.rst:392
msgid "``_``"
msgstr "``_``"

#: ../../reference/lexical_analysis.rst:393
msgid ""
"In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a :ref:"
"`soft keyword <soft-keywords>` that denotes a :ref:`wildcard <wildcard-"
"patterns>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:397
msgid ""
"Separately, the interactive interpreter makes the result of the last "
"evaluation available in the variable ``_``. (It is stored in the :mod:"
"`builtins` module, alongside built-in functions like ``print``.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:402
msgid ""
"Elsewhere, ``_`` is a regular identifier. It is often used to name "
"\"special\" items, but it is not special to Python itself."
msgstr ""

#: ../../reference/lexical_analysis.rst:407
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer "
"to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr ""

#: ../../reference/lexical_analysis.rst:411
msgid "It is also commonly used for unused variables."
msgstr ""

#: ../../reference/lexical_analysis.rst:413
msgid "``__*__``"
msgstr "``__*__``"

#: ../../reference/lexical_analysis.rst:414
msgid ""
"System-defined names, informally known as \"dunder\" names. These names are "
"defined by the interpreter and its implementation (including the standard "
"library). Current system names are discussed in the :ref:`specialnames` "
"section and elsewhere. More will likely be defined in future versions of "
"Python.  *Any* use of ``__*__`` names, in any context, that does not follow "
"explicitly documented use, is subject to breakage without warning."
msgstr ""

#: ../../reference/lexical_analysis.rst:421
msgid "``__*``"
msgstr "``__*``"

#: ../../reference/lexical_analysis.rst:422
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See "
"section :ref:`atom-identifiers`."
msgstr ""

#: ../../reference/lexical_analysis.rst:431
msgid "Literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:435
msgid "Literals are notations for constant values of some built-in types."
msgstr ""

#: ../../reference/lexical_analysis.rst:446
msgid "String and Bytes literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:448
msgid "String literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:473
msgid ""
"One syntactic restriction not indicated by these productions is that "
"whitespace is not allowed between the :token:`~python-grammar:stringprefix` "
"or :token:`~python-grammar:bytesprefix` and the rest of the literal. The "
"source character set is defined by the encoding declaration; it is UTF-8 if "
"no encoding declaration is given in the source file; see section :ref:"
"`encodings`."
msgstr ""

#: ../../reference/lexical_analysis.rst:483
msgid ""
"In plain English: Both types of literals can be enclosed in matching single "
"quotes (``'``) or double quotes (``\"``).  They can also be enclosed in "
"matching groups of three single or double quotes (these are generally "
"referred to as *triple-quoted strings*). The backslash (``\\``) character is "
"used to give special meaning to otherwise ordinary characters like ``n``, "
"which means 'newline' when escaped (``\\n``). It can also be used to escape "
"characters that otherwise have a special meaning, such as newline, backslash "
"itself, or the quote character. See :ref:`escape sequences <escape-"
"sequences>` below for examples."
msgstr ""

#: ../../reference/lexical_analysis.rst:496
msgid ""
"Bytes literals are always prefixed with ``'b'`` or ``'B'``; they produce an "
"instance of the :class:`bytes` type instead of the :class:`str` type.  They "
"may only contain ASCII characters; bytes with a numeric value of 128 or "
"greater must be expressed with escapes."
msgstr ""

#: ../../reference/lexical_analysis.rst:505
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"``'r'`` or ``'R'``; such strings are called :dfn:`raw strings` and treat "
"backslashes as literal characters.  As a result, in string literals, "
"``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated specially. "
"Given that Python 2.x's raw unicode literals behave differently than Python "
"3.x's the ``'ur'`` syntax is not supported."
msgstr ""

#: ../../reference/lexical_analysis.rst:512
msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:516
msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See :pep:"
"`414` for more information."
msgstr ""

#: ../../reference/lexical_analysis.rst:524
msgid ""
"A string literal with ``'f'`` or ``'F'`` in its prefix is a :dfn:`formatted "
"string literal`; see :ref:`f-strings`.  The ``'f'`` may be combined with "
"``'r'``, but not with ``'b'`` or ``'u'``, therefore raw formatted strings "
"are possible, but formatted bytes literals are not."
msgstr ""

#: ../../reference/lexical_analysis.rst:529
msgid ""
"In triple-quoted literals, unescaped newlines and quotes are allowed (and "
"are retained), except that three unescaped quotes in a row terminate the "
"literal.  (A \"quote\" is the character used to open the literal, i.e. "
"either ``'`` or ``\"``.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:552
msgid "Escape sequences"
msgstr "跳脫序列"

#: ../../reference/lexical_analysis.rst:554
msgid ""
"Unless an ``'r'`` or ``'R'`` prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""

#: ../../reference/lexical_analysis.rst:559
#: ../../reference/lexical_analysis.rst:592
msgid "Escape Sequence"
msgstr ""

#: ../../reference/lexical_analysis.rst:559
#: ../../reference/lexical_analysis.rst:592
msgid "Meaning"
msgstr ""

#: ../../reference/lexical_analysis.rst:559
#: ../../reference/lexical_analysis.rst:592
msgid "Notes"
msgstr "註解"

#: ../../reference/lexical_analysis.rst:561
msgid "``\\``\\ <newline>"
msgstr "``\\``\\ <newline>"

#: ../../reference/lexical_analysis.rst:561
msgid "Backslash and newline ignored"
msgstr ""

#: ../../reference/lexical_analysis.rst:561
msgid "\\(1)"
msgstr "\\(1)"

#: ../../reference/lexical_analysis.rst:563
msgid "``\\\\``"
msgstr "``\\\\``"

#: ../../reference/lexical_analysis.rst:563
msgid "Backslash (``\\``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:565
msgid "``\\'``"
msgstr "``\\'``"

#: ../../reference/lexical_analysis.rst:565
msgid "Single quote (``'``)"
msgstr "單引號 (``'``)"

#: ../../reference/lexical_analysis.rst:567
msgid "``\\\"``"
msgstr "``\\\"``"

#: ../../reference/lexical_analysis.rst:567
msgid "Double quote (``\"``)"
msgstr "雙引號 (``\"``)"

#: ../../reference/lexical_analysis.rst:569
msgid "``\\a``"
msgstr "``\\a``"

#: ../../reference/lexical_analysis.rst:569
msgid "ASCII Bell (BEL)"
msgstr ""

#: ../../reference/lexical_analysis.rst:571
msgid "``\\b``"
msgstr "``\\b``"

#: ../../reference/lexical_analysis.rst:571
msgid "ASCII Backspace (BS)"
msgstr ""

#: ../../reference/lexical_analysis.rst:573
msgid "``\\f``"
msgstr "``\\f``"

#: ../../reference/lexical_analysis.rst:573
msgid "ASCII Formfeed (FF)"
msgstr ""

#: ../../reference/lexical_analysis.rst:575
msgid "``\\n``"
msgstr "``\\n``"

#: ../../reference/lexical_analysis.rst:575
msgid "ASCII Linefeed (LF)"
msgstr ""

#: ../../reference/lexical_analysis.rst:577
msgid "``\\r``"
msgstr "``\\r``"

#: ../../reference/lexical_analysis.rst:577
msgid "ASCII Carriage Return (CR)"
msgstr ""

#: ../../reference/lexical_analysis.rst:579
msgid "``\\t``"
msgstr "``\\t``"

#: ../../reference/lexical_analysis.rst:579
msgid "ASCII Horizontal Tab (TAB)"
msgstr ""

#: ../../reference/lexical_analysis.rst:581
msgid "``\\v``"
msgstr "``\\v``"

#: ../../reference/lexical_analysis.rst:581
msgid "ASCII Vertical Tab (VT)"
msgstr ""

#: ../../reference/lexical_analysis.rst:583
msgid ":samp:`\\\\\\\\{ooo}`"
msgstr ":samp:`\\\\\\\\{ooo}`"

#: ../../reference/lexical_analysis.rst:583
msgid "Character with octal value *ooo*"
msgstr ""

#: ../../reference/lexical_analysis.rst:583
msgid "(2,4)"
msgstr "(2,4)"

#: ../../reference/lexical_analysis.rst:586
msgid ":samp:`\\\\x{hh}`"
msgstr ":samp:`\\\\x{hh}`"

#: ../../reference/lexical_analysis.rst:586
msgid "Character with hex value *hh*"
msgstr ""

#: ../../reference/lexical_analysis.rst:586
msgid "(3,4)"
msgstr "(3,4)"

#: ../../reference/lexical_analysis.rst:589
msgid "Escape sequences only recognized in string literals are:"
msgstr ""

#: ../../reference/lexical_analysis.rst:594
msgid ":samp:`\\\\N\\\\{{name}\\\\}`"
msgstr ":samp:`\\\\N\\\\{{name}\\\\}`"

#: ../../reference/lexical_analysis.rst:594
msgid "Character named *name* in the Unicode database"
msgstr ""

#: ../../reference/lexical_analysis.rst:594
msgid "\\(5)"
msgstr "\\(5)"

#: ../../reference/lexical_analysis.rst:597
msgid ":samp:`\\\\u{xxxx}`"
msgstr ":samp:`\\\\u{xxxx}`"

#: ../../reference/lexical_analysis.rst:597
msgid "Character with 16-bit hex value *xxxx*"
msgstr ""

#: ../../reference/lexical_analysis.rst:597
msgid "\\(6)"
msgstr "\\(6)"

#: ../../reference/lexical_analysis.rst:600
msgid ":samp:`\\\\U{xxxxxxxx}`"
msgstr ":samp:`\\\\U{xxxxxxxx}`"

#: ../../reference/lexical_analysis.rst:600
msgid "Character with 32-bit hex value *xxxxxxxx*"
msgstr ""

#: ../../reference/lexical_analysis.rst:600
msgid "\\(7)"
msgstr "\\(7)"

#: ../../reference/lexical_analysis.rst:604
msgid "Notes:"
msgstr "註解："

#: ../../reference/lexical_analysis.rst:607
msgid "A backslash can be added at the end of a line to ignore the newline::"
msgstr ""

#: ../../reference/lexical_analysis.rst:613
msgid ""
"The same result can be achieved using :ref:`triple-quoted strings "
"<strings>`, or parentheses and :ref:`string literal concatenation <string-"
"concatenation>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:618
msgid "As in Standard C, up to three octal digits are accepted."
msgstr ""

#: ../../reference/lexical_analysis.rst:620
msgid ""
"Octal escapes with value larger than ``0o377`` produce a :exc:"
"`DeprecationWarning`."
msgstr ""

#: ../../reference/lexical_analysis.rst:624
msgid ""
"Octal escapes with value larger than ``0o377`` produce a :exc:"
"`SyntaxWarning`. In a future Python version they will be eventually a :exc:"
"`SyntaxError`."
msgstr ""

#: ../../reference/lexical_analysis.rst:630
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr ""

#: ../../reference/lexical_analysis.rst:633
msgid ""
"In a bytes literal, hexadecimal and octal escapes denote the byte with the "
"given value. In a string literal, these escapes denote a Unicode character "
"with the given value."
msgstr ""

#: ../../reference/lexical_analysis.rst:638
msgid "Support for name aliases [#]_ has been added."
msgstr ""

#: ../../reference/lexical_analysis.rst:642
msgid "Exactly four hex digits are required."
msgstr ""

#: ../../reference/lexical_analysis.rst:645
msgid ""
"Any Unicode character can be encoded this way.  Exactly eight hex digits are "
"required."
msgstr ""

#: ../../reference/lexical_analysis.rst:651
msgid ""
"Unlike Standard C, all unrecognized escape sequences are left in the string "
"unchanged, i.e., *the backslash is left in the result*.  (This behavior is "
"useful when debugging: if an escape sequence is mistyped, the resulting "
"output is more easily recognized as broken.)  It is also important to note "
"that the escape sequences only recognized in string literals fall into the "
"category of unrecognized escapes for bytes literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:658
msgid "Unrecognized escape sequences produce a :exc:`DeprecationWarning`."
msgstr ""

#: ../../reference/lexical_analysis.rst:661
msgid ""
"Unrecognized escape sequences produce a :exc:`SyntaxWarning`. In a future "
"Python version they will be eventually a :exc:`SyntaxError`."
msgstr ""

#: ../../reference/lexical_analysis.rst:665
msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote; "
"``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a "
"single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""

#: ../../reference/lexical_analysis.rst:678
msgid "String literal concatenation"
msgstr ""

#: ../../reference/lexical_analysis.rst:680
msgid ""
"Multiple adjacent string or bytes literals (delimited by whitespace), "
"possibly using different quoting conventions, are allowed, and their meaning "
"is the same as their concatenation.  Thus, ``\"hello\" 'world'`` is "
"equivalent to ``\"helloworld\"``.  This feature can be used to reduce the "
"number of backslashes needed, to split long strings conveniently across long "
"lines, or even to add comments to parts of strings, for example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:691
msgid ""
"Note that this feature is defined at the syntactical level, but implemented "
"at compile time.  The '+' operator must be used to concatenate string "
"expressions at run time.  Also note that literal concatenation can use "
"different quoting styles for each component (even mixing raw strings and "
"triple quoted strings), and formatted string literals may be concatenated "
"with plain string literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:714
msgid "f-strings"
msgstr "f-string（f 字串）"

#: ../../reference/lexical_analysis.rst:718
msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with ``'f'`` or ``'F'``.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""

#: ../../reference/lexical_analysis.rst:724
msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a "
"literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr ""

#: ../../reference/lexical_analysis.rst:738
msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression. To display "
"both the expression text and its value after evaluation, (useful in "
"debugging), an equal sign ``'='`` may be added after the expression. A "
"conversion field, introduced by an exclamation point ``'!'`` may follow.  A "
"format specifier may also be appended, introduced by a colon ``':'``. A "
"replacement field ends with a closing curly bracket ``'}'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:748
msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and both :keyword:`lambda`  and assignment "
"expressions ``:=`` must be surrounded by explicit parentheses. Each "
"expression is evaluated in the context where the formatted string literal "
"appears, in order from left to right.  Replacement expressions can contain "
"newlines in both single-quoted and triple-quoted f-strings and they can "
"contain comments.  Everything that comes after a ``#`` inside a replacement "
"field is a comment (even closing braces and quotes). In that case, "
"replacement fields must be closed in a different line."
msgstr ""

#: ../../reference/lexical_analysis.rst:765
msgid ""
"Prior to Python 3.7, an :keyword:`await` expression and comprehensions "
"containing an :keyword:`async for` clause were illegal in the expressions in "
"formatted string literals due to a problem with the implementation."
msgstr ""

#: ../../reference/lexical_analysis.rst:770
msgid ""
"Prior to Python 3.12, comments were not allowed inside f-string replacement "
"fields."
msgstr ""

#: ../../reference/lexical_analysis.rst:774
msgid ""
"When the equal sign ``'='`` is provided, the output will have the expression "
"text, the ``'='`` and the evaluated value. Spaces after the opening brace "
"``'{'``, within the expression and after the ``'='`` are all retained in the "
"output. By default, the ``'='`` causes the :func:`repr` of the expression to "
"be provided, unless there is a format specified. When a format is specified "
"it defaults to the :func:`str` of the expression unless a conversion ``'!"
"r'`` is declared."
msgstr ""

#: ../../reference/lexical_analysis.rst:782
msgid "The equal sign ``'='``."
msgstr "等號 ``'='``。"

#: ../../reference/lexical_analysis.rst:785
msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""

#: ../../reference/lexical_analysis.rst:789
msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`~object.__format__` method of the "
"expression or conversion result.  An empty string is passed when the format "
"specifier is omitted.  The formatted result is then included in the final "
"value of the whole string."
msgstr ""

#: ../../reference/lexical_analysis.rst:795
msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply nested replacement "
"fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the :meth:`str.format` method."
msgstr ""

#: ../../reference/lexical_analysis.rst:801
msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot "
"be split across literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:804
msgid "Some examples of formatted string literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:836
msgid ""
"Reusing the outer f-string quoting type inside a replacement field is "
"permitted::"
msgstr ""

#: ../../reference/lexical_analysis.rst:843
msgid ""
"Prior to Python 3.12, reuse of the same quoting type of the outer f-string "
"inside a replacement field was not possible."
msgstr ""

#: ../../reference/lexical_analysis.rst:847
msgid ""
"Backslashes are also allowed in replacement fields and are evaluated the "
"same way as in any other context::"
msgstr ""

#: ../../reference/lexical_analysis.rst:857
msgid ""
"Prior to Python 3.12, backslashes were not permitted inside an f-string "
"replacement field."
msgstr ""

#: ../../reference/lexical_analysis.rst:861
msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr ""

#: ../../reference/lexical_analysis.rst:872
msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr ""

#: ../../reference/lexical_analysis.rst:879
msgid "Numeric literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:885
msgid ""
"There are three types of numeric literals: integers, floating point numbers, "
"and imaginary numbers.  There are no complex literals (complex numbers can "
"be formed by adding a real number and an imaginary number)."
msgstr ""

#: ../../reference/lexical_analysis.rst:889
msgid ""
"Note that numeric literals do not include a sign; a phrase like ``-1`` is "
"actually an expression composed of the unary operator '``-``' and the "
"literal ``1``."
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "Integer literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:905
msgid "Integer literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:919
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory."
msgstr ""

#: ../../reference/lexical_analysis.rst:922
msgid ""
"Underscores are ignored for determining the numeric value of the literal.  "
"They can be used to group digits for enhanced readability.  One underscore "
"can occur between digits, and after base specifiers like ``0x``."
msgstr ""

#: ../../reference/lexical_analysis.rst:926
msgid ""
"Note that leading zeros in a non-zero decimal number are not allowed. This "
"is for disambiguation with C-style octal literals, which Python used before "
"version 3.0."
msgstr ""

#: ../../reference/lexical_analysis.rst:930
msgid "Some examples of integer literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:936
#: ../../reference/lexical_analysis.rst:968
msgid "Underscores are now allowed for grouping purposes in literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:947
msgid "Floating point literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:949
msgid ""
"Floating point literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:959
msgid ""
"Note that the integer and exponent parts are always interpreted using radix "
"10. For example, ``077e010`` is legal, and denotes the same number as "
"``77e10``. The allowed range of floating point literals is implementation-"
"dependent.  As in integer literals, underscores are supported for digit "
"grouping."
msgstr ""

#: ../../reference/lexical_analysis.rst:964
msgid "Some examples of floating point literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:977
msgid "Imaginary literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:979
msgid "Imaginary literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:984
msgid ""
"An imaginary literal yields a complex number with a real part of 0.0.  "
"Complex numbers are represented as a pair of floating point numbers and have "
"the same restrictions on their range.  To create a complex number with a "
"nonzero real part, add a floating point number to it, e.g., ``(3+4j)``.  "
"Some examples of imaginary literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:996
msgid "Operators"
msgstr ""

#: ../../reference/lexical_analysis.rst:1000
msgid "The following tokens are operators:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1013
msgid "Delimiters"
msgstr ""

#: ../../reference/lexical_analysis.rst:1017
msgid "The following tokens serve as delimiters in the grammar:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1026
msgid ""
"The period can also occur in floating-point and imaginary literals.  A "
"sequence of three periods has a special meaning as an ellipsis literal. The "
"second half of the list, the augmented assignment operators, serve lexically "
"as delimiters, but also perform an operation."
msgstr ""

#: ../../reference/lexical_analysis.rst:1031
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1038
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1047
msgid "Footnotes"
msgstr "註解"

#: ../../reference/lexical_analysis.rst:1048
msgid "https://www.unicode.org/Public/15.0.0/ucd/NameAliases.txt"
msgstr "https://www.unicode.org/Public/15.0.0/ucd/NameAliases.txt"

#: ../../reference/lexical_analysis.rst:8
msgid "lexical analysis"
msgstr "lexical analysis（詞法分析）"

#: ../../reference/lexical_analysis.rst:8
msgid "parser"
msgstr "parser（剖析器）"

#: ../../reference/lexical_analysis.rst:8
msgid "token"
msgstr "token"

#: ../../reference/lexical_analysis.rst:25
msgid "line structure"
msgstr "line structure（列結構）"

#: ../../reference/lexical_analysis.rst:35
msgid "logical line"
msgstr "logical line（邏輯列）"

#: ../../reference/lexical_analysis.rst:35
#: ../../reference/lexical_analysis.rst:114
#: ../../reference/lexical_analysis.rst:533
msgid "physical line"
msgstr "physical line（物理列）"

#: ../../reference/lexical_analysis.rst:35
#: ../../reference/lexical_analysis.rst:114
msgid "line joining"
msgstr "line joining（列連接）"

#: ../../reference/lexical_analysis.rst:35
msgid "NEWLINE token"
msgstr "NEWLINE token（換行標誌）"

#: ../../reference/lexical_analysis.rst:67
msgid "comment"
msgstr "comment（註解）"

#: ../../reference/lexical_analysis.rst:67
msgid "hash character"
msgstr "hash character（井字號）"

#: ../../reference/lexical_analysis.rst:67
#: ../../reference/lexical_analysis.rst:81
msgid "# (hash)"
msgstr "# （井字號）"

#: ../../reference/lexical_analysis.rst:81
msgid "source character set"
msgstr "source character set（原始字元集合）"

#: ../../reference/lexical_analysis.rst:81
msgid "encoding declarations (source file)"
msgstr "encoding declarations (source file)（編碼宣告（原始檔案））"

#: ../../reference/lexical_analysis.rst:81
msgid "source encoding declaration"
msgstr "source encoding declaration（原始編碼宣告）"

#: ../../reference/lexical_analysis.rst:114
msgid "line continuation"
msgstr "line continuation（列延續）"

#: ../../reference/lexical_analysis.rst:114
msgid "backslash character"
msgstr "backslash character（反斜線字元）"

#: ../../reference/lexical_analysis.rst:159
msgid "blank line"
msgstr "blank line（空白列）"

#: ../../reference/lexical_analysis.rst:174
msgid "indentation"
msgstr "indentation（縮排）"

#: ../../reference/lexical_analysis.rst:174
msgid "leading whitespace"
msgstr "leading whitespace（前置空白）"

#: ../../reference/lexical_analysis.rst:174
msgid "space"
msgstr "space（空白）"

#: ../../reference/lexical_analysis.rst:174
msgid "tab"
msgstr "tab（定位字元）"

#: ../../reference/lexical_analysis.rst:174
msgid "grouping"
msgstr "grouping（群組）"

#: ../../reference/lexical_analysis.rst:174
msgid "statement grouping"
msgstr "statement grouping（陳述式群組）"

#: ../../reference/lexical_analysis.rst:202
msgid "INDENT token"
msgstr "INDENT token（縮排標誌）"

#: ../../reference/lexical_analysis.rst:202
msgid "DEDENT token"
msgstr "DEDENT token（縮排標誌）"

#: ../../reference/lexical_analysis.rst:277
msgid "identifier"
msgstr "identifier（識別器）"

#: ../../reference/lexical_analysis.rst:277
msgid "name"
msgstr "name（名稱）"

#: ../../reference/lexical_analysis.rst:334
#: ../../reference/lexical_analysis.rst:358
msgid "keyword"
msgstr "keyword（關鍵字）"

#: ../../reference/lexical_analysis.rst:334
msgid "reserved word"
msgstr "reserved word（保留字）"

#: ../../reference/lexical_analysis.rst:358
msgid "soft keyword"
msgstr "soft keyword（軟關鍵字）"

#: ../../reference/lexical_analysis.rst:377
msgid "_, identifiers"
msgstr "_, identifiers（識別器）"

#: ../../reference/lexical_analysis.rst:377
msgid "__, identifiers"
msgstr "__, identifiers（識別器）"

#: ../../reference/lexical_analysis.rst:433
msgid "literal"
msgstr "literal（常數）"

#: ../../reference/lexical_analysis.rst:433
msgid "constant"
msgstr "constant（常數）"

#: ../../reference/lexical_analysis.rst:438
#: ../../reference/lexical_analysis.rst:479
msgid "string literal"
msgstr "string literal（字串常數）"

#: ../../reference/lexical_analysis.rst:438
#: ../../reference/lexical_analysis.rst:492
msgid "bytes literal"
msgstr "bytes literal（位元組常數）"

#: ../../reference/lexical_analysis.rst:438
msgid "ASCII"
msgstr "ASCII"

#: ../../reference/lexical_analysis.rst:438
msgid "' (single quote)"
msgstr "' （單引號）"

#: ../../reference/lexical_analysis.rst:438
msgid "\" (double quote)"
msgstr "\" （雙引號）"

#: ../../reference/lexical_analysis.rst:438
msgid "u'"
msgstr "u'"

#: ../../reference/lexical_analysis.rst:438
msgid "u\""
msgstr "u\""

#: ../../reference/lexical_analysis.rst:479
msgid "triple-quoted string"
msgstr "triple-quoted string（三引號字串）"

#: ../../reference/lexical_analysis.rst:479
msgid "Unicode Consortium"
msgstr "Unicode Consortium"

#: ../../reference/lexical_analysis.rst:479
msgid "raw string"
msgstr "raw string（原始字串）"

#: ../../reference/lexical_analysis.rst:479
msgid "\"\"\""
msgstr "\"\"\""

#: ../../reference/lexical_analysis.rst:479
msgid "'''"
msgstr "'''"

#: ../../reference/lexical_analysis.rst:492
msgid "b'"
msgstr "b'"

#: ../../reference/lexical_analysis.rst:492
msgid "b\""
msgstr "b\""

#: ../../reference/lexical_analysis.rst:501
msgid "r'"
msgstr "r'"

#: ../../reference/lexical_analysis.rst:501
msgid "raw string literal"
msgstr "raw string literal（原始字串常數）"

#: ../../reference/lexical_analysis.rst:501
msgid "r\""
msgstr "r\""

#: ../../reference/lexical_analysis.rst:520
msgid "f'"
msgstr "f'"

#: ../../reference/lexical_analysis.rst:520
#: ../../reference/lexical_analysis.rst:698
msgid "formatted string literal"
msgstr "formatted string literal（格式化字串常數）"

#: ../../reference/lexical_analysis.rst:520
msgid "f\""
msgstr "f\""

#: ../../reference/lexical_analysis.rst:533
msgid "escape sequence"
msgstr "escape sequence（跳脫序列）"

#: ../../reference/lexical_analysis.rst:533
msgid "Standard C"
msgstr "Standard C（標準 C）"

#: ../../reference/lexical_analysis.rst:533
msgid "C"
msgstr "C"

#: ../../reference/lexical_analysis.rst:533
msgid "\\ (backslash)"
msgstr "\\ （反斜線）"

#: ../../reference/lexical_analysis.rst:533
msgid "\\\\"
msgstr "\\\\"

#: ../../reference/lexical_analysis.rst:533
msgid "\\a"
msgstr "\\a"

#: ../../reference/lexical_analysis.rst:533
msgid "\\b"
msgstr "\\b"

#: ../../reference/lexical_analysis.rst:533
msgid "\\f"
msgstr "\\f"

#: ../../reference/lexical_analysis.rst:533
msgid "\\n"
msgstr "\\n"

#: ../../reference/lexical_analysis.rst:533
msgid "\\r"
msgstr "\\r"

#: ../../reference/lexical_analysis.rst:533
msgid "\\t"
msgstr "\\t"

#: ../../reference/lexical_analysis.rst:533
msgid "\\v"
msgstr "\\v"

#: ../../reference/lexical_analysis.rst:533
msgid "\\x"
msgstr "\\x"

#: ../../reference/lexical_analysis.rst:533
msgid "\\N"
msgstr "\\N"

#: ../../reference/lexical_analysis.rst:533
msgid "\\u"
msgstr "\\u"

#: ../../reference/lexical_analysis.rst:533
msgid "\\U"
msgstr "\\U"

#: ../../reference/lexical_analysis.rst:649
msgid "unrecognized escape sequence"
msgstr "unrecognized escape sequence（無法辨識的跳脫序列）"

#: ../../reference/lexical_analysis.rst:698
msgid "interpolated string literal"
msgstr "interpolated string literal（插值字串常數）"

#: ../../reference/lexical_analysis.rst:698
msgid "string"
msgstr "string（字串）"

#: ../../reference/lexical_analysis.rst:698
msgid "formatted literal"
msgstr "formatted literal（格式化常數）"

#: ../../reference/lexical_analysis.rst:698
msgid "interpolated literal"
msgstr "interpolated literal（插值常數）"

#: ../../reference/lexical_analysis.rst:698
msgid "f-string"
msgstr "f-string（f 字串）"

#: ../../reference/lexical_analysis.rst:698
msgid "fstring"
msgstr "fstring（f 字串）"

#: ../../reference/lexical_analysis.rst:698
msgid "{} (curly brackets)"
msgstr "{} （花括號）"

#: ../../reference/lexical_analysis.rst:698
msgid "in formatted string literal"
msgstr "於格式化字串常數中"

#: ../../reference/lexical_analysis.rst:698
msgid "! (exclamation)"
msgstr "! （驚嘆號）"

#: ../../reference/lexical_analysis.rst:698
msgid ": (colon)"
msgstr ": （冒號）"

#: ../../reference/lexical_analysis.rst:698
msgid "= (equals)"
msgstr "= （等於）"

#: ../../reference/lexical_analysis.rst:698
msgid "for help in debugging using string literals"
msgstr "for help in debugging using string literals（使用字串常數進行除錯）"

#: ../../reference/lexical_analysis.rst:881
msgid "number"
msgstr "number（數字）"

#: ../../reference/lexical_analysis.rst:881
msgid "numeric literal"
msgstr "numeric literal（數值常數）"

#: ../../reference/lexical_analysis.rst:881
#: ../../reference/lexical_analysis.rst:894
msgid "integer literal"
msgstr "integer literal（整數常數）"

#: ../../reference/lexical_analysis.rst:881
msgid "floating point literal"
msgstr "floating point literal（浮點數常數）"

#: ../../reference/lexical_analysis.rst:881
msgid "hexadecimal literal"
msgstr "hexadecimal literal（十六進位常數）"

#: ../../reference/lexical_analysis.rst:881
msgid "octal literal"
msgstr "octal literal（八進位常數）"

#: ../../reference/lexical_analysis.rst:881
msgid "binary literal"
msgstr "binary literal（二進位常數）"

#: ../../reference/lexical_analysis.rst:881
msgid "decimal literal"
msgstr "decimal literal（十進位常數）"

#: ../../reference/lexical_analysis.rst:881
msgid "imaginary literal"
msgstr "imaginary literal（虛數常數）"

#: ../../reference/lexical_analysis.rst:881
msgid "complex literal"
msgstr "complex literal（複數常數）"

#: ../../reference/lexical_analysis.rst:894
msgid "0b"
msgstr "0b"

#: ../../reference/lexical_analysis.rst:894
msgid "0o"
msgstr "0o"

#: ../../reference/lexical_analysis.rst:894
msgid "0x"
msgstr "0x"

#: ../../reference/lexical_analysis.rst:894
#: ../../reference/lexical_analysis.rst:940
msgid "_ (underscore)"
msgstr "_ （底線）"

#: ../../reference/lexical_analysis.rst:894
#: ../../reference/lexical_analysis.rst:940
#: ../../reference/lexical_analysis.rst:972
msgid "in numeric literal"
msgstr "於數值常數中"

#: ../../reference/lexical_analysis.rst:940
msgid ". (dot)"
msgstr ". （點）"

#: ../../reference/lexical_analysis.rst:940
msgid "e"
msgstr "e"

#: ../../reference/lexical_analysis.rst:972
msgid "j"
msgstr "j"

#: ../../reference/lexical_analysis.rst:998
msgid "operators"
msgstr "operators（運算子）"

#: ../../reference/lexical_analysis.rst:1015
msgid "delimiters"
msgstr "delimiters（分隔符號）"

#~ msgid "``\\ooo``"
#~ msgstr "``\\ooo``"

#~ msgid "``\\xhh``"
#~ msgstr "``\\xhh``"

#~ msgid "``\\N{name}``"
#~ msgstr "``\\N{name}``"

#~ msgid "``\\uxxxx``"
#~ msgstr "``\\uxxxx``"
