# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 00:03+0000\n"
"PO-Revision-Date: 2018-05-23 16:19+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr "命令列與環境"

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See :ref:"
"`implementations` for further resources."
msgstr ""

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr "命令列"

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""

#: ../../using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr "介面選項"

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read."
msgstr ""

#: ../../using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""

#: ../../using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""

#: ../../using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""

#: ../../using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""

#: ../../using/cmdline.rst:55
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""

#: ../../using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""

#: ../../using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""

#: ../../using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"c\"`` and the current directory will be added to the start of :data:`sys."
"path` (allowing modules in that directory to be imported as top level "
"modules)."
msgstr ""

#: ../../using/cmdline.rst:73
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_command`` with "
"argument ``command``."
msgstr ""
"引發一個附帶引數 ``command`` 的\\ :ref:`稽核事件 <auditing>` ``cpython."
"run_command``。"

#: ../../using/cmdline.rst:77
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:80
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The module name should be a valid absolute Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you to "
"use a name that includes a hyphen)."
msgstr ""

#: ../../using/cmdline.rst:85
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will "
"execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are "
"passed to the interpreter as the script argument."
msgstr ""

#: ../../using/cmdline.rst:94
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""

#: ../../using/cmdline.rst:99
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file (while the module file is being located, the "
"first element will be set to ``\"-m\"``). As with the :option:`-c` option, "
"the current directory will be added to the start of :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:104
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where :"
"data:`sys.path` contains neither the current directory nor the user's site-"
"packages directory. All ``PYTHON*`` environment variables are ignored, too."
msgstr ""

#: ../../using/cmdline.rst:109
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""

#: ../../using/cmdline.rst:115
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_module`` with "
"argument ``module-name``."
msgstr ""
"引發一個附帶引數 ``module-name`` 的\\ :ref:`稽核事件 <auditing>` ``cpython."
"run_module``。"

#: ../../using/cmdline.rst:118
msgid ":func:`runpy.run_module`"
msgstr ":func:`runpy.run_module`"

#: ../../using/cmdline.rst:119 ../../using/cmdline.rst:171
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../../using/cmdline.rst:121
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../../using/cmdline.rst:123
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr ""

#: ../../using/cmdline.rst:126
msgid "namespace packages are also supported"
msgstr ""

#: ../../using/cmdline.rst:133
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is "
"a terminal, :option:`-i` is implied."
msgstr ""

#: ../../using/cmdline.rst:136
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"\"`` and the current directory will be added to the start of :data:`sys."
"path`."
msgstr ""

#: ../../using/cmdline.rst:140 ../../using/cmdline.rst:723
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr ""
"引發一個不附帶引數的\\ :ref:`稽核事件 <auditing>` ``cpython.run_stdin``。"

#: ../../using/cmdline.rst:146
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` "
"file."
msgstr ""

#: ../../using/cmdline.rst:151
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""

#: ../../using/cmdline.rst:154
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file "
"is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:158
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:162
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where :"
"data:`sys.path` contains neither the script's directory nor the user's site-"
"packages directory. All ``PYTHON*`` environment variables are ignored, too."
msgstr ""

#: ../../using/cmdline.rst:167
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_file`` with "
"argument ``filename``."
msgstr ""
"引發一個附帶引數 ``filename`` 的\\ :ref:`稽核事件 <auditing>` ``cpython."
"run_file``。"

#: ../../using/cmdline.rst:170
msgid ":func:`runpy.run_path`"
msgstr ":func:`runpy.run_path`"

#: ../../using/cmdline.rst:174
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is "
"an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`.  Also, tab-completion and history editing is "
"automatically enabled, if available on your platform (see :ref:`rlcompleter-"
"config`)."
msgstr ""

#: ../../using/cmdline.rst:180
msgid ":ref:`tut-invoking`"
msgstr ":ref:`tut-invoking`"

#: ../../using/cmdline.rst:182
msgid "Automatic enabling of tab-completion and history editing."
msgstr ""

#: ../../using/cmdline.rst:189
msgid "Generic options"
msgstr ""

#: ../../using/cmdline.rst:195
msgid ""
"Print a short description of all command line options and corresponding "
"environment variables and exit."
msgstr ""

#: ../../using/cmdline.rst:200
msgid ""
"Print a short description of Python-specific environment variables and exit."
msgstr ""

#: ../../using/cmdline.rst:207
msgid ""
"Print a description of implementation-specific :option:`-X` options and exit."
msgstr ""

#: ../../using/cmdline.rst:214
msgid "Print complete usage information and exit."
msgstr "印出完整使用資訊並離開。"

#: ../../using/cmdline.rst:221
msgid "Print the Python version number and exit.  Example output could be:"
msgstr ""

#: ../../using/cmdline.rst:227
msgid "When given twice, print more information about the build, like:"
msgstr ""

#: ../../using/cmdline.rst:234
msgid "The ``-VV`` option."
msgstr "``-VV`` 選項"

#: ../../using/cmdline.rst:241
msgid "Miscellaneous options"
msgstr ""

#: ../../using/cmdline.rst:245
msgid ""
"Issue a warning when converting :class:`bytes` or :class:`bytearray` to :"
"class:`str` without specifying encoding or comparing :class:`!bytes` or :"
"class:`!bytearray` with :class:`!str` or :class:`!bytes` with :class:`int`. "
"Issue an error when the option is given twice (:option:`!-bb`)."
msgstr ""

#: ../../using/cmdline.rst:250
msgid "Affects also comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../../using/cmdline.rst:255
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of source "
"modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""

#: ../../using/cmdline.rst:261
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files. See :ref:`pyc-"
"invalidation`. When set to ``default``, checked and unchecked hash-based "
"bytecode cache files are validated according to their default semantics. "
"When set to ``always``, all hash-based ``.pyc`` files, whether checked or "
"unchecked, are validated against their corresponding source file. When set "
"to ``never``, hash-based ``.pyc`` files are not validated against their "
"corresponding source files."
msgstr ""

#: ../../using/cmdline.rst:269
msgid ""
"The semantics of timestamp-based ``.pyc`` files are unaffected by this "
"option."
msgstr ""

#: ../../using/cmdline.rst:275
msgid ""
"Turn on parser debugging output (for expert only). See also the :envvar:"
"`PYTHONDEBUG` environment variable."
msgstr ""

#: ../../using/cmdline.rst:278
msgid ""
"This option requires a :ref:`debug build of Python <debug-build>`, otherwise "
"it's ignored."
msgstr ""

#: ../../using/cmdline.rst:284
msgid ""
"Ignore all ``PYTHON*`` environment variables, e.g. :envvar:`PYTHONPATH` and :"
"envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:287
msgid "See also the :option:`-P` and :option:`-I` (isolated) options."
msgstr "另請參閱 :option:`-P` 和 :option:`-I` (isolated) 選項。"

#: ../../using/cmdline.rst:292
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:"
"`PYTHONSTARTUP` file is not read."
msgstr ""

#: ../../using/cmdline.rst:297
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""

#: ../../using/cmdline.rst:303
msgid ""
"Run Python in isolated mode. This also implies :option:`-E`, :option:`-P` "
"and :option:`-s` options."
msgstr ""

#: ../../using/cmdline.rst:306
msgid ""
"In isolated mode :data:`sys.path` contains neither the script's directory "
"nor the user's site-packages directory. All ``PYTHON*`` environment "
"variables are ignored, too. Further restrictions may be imposed to prevent "
"the user from injecting malicious code."
msgstr ""

#: ../../using/cmdline.rst:316
msgid ""
"Remove assert statements and any code conditional on the value of :const:"
"`__debug__`.  Augment the filename for compiled (:term:`bytecode`) files by "
"adding ``.opt-1`` before the ``.pyc`` extension (see :pep:`488`).  See also :"
"envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../../using/cmdline.rst:321 ../../using/cmdline.rst:331
msgid "Modify ``.pyc`` filenames according to :pep:`488`."
msgstr "根據 :pep:`488` 修改 ``.pyc`` 檔案名稱。"

#: ../../using/cmdline.rst:327
msgid ""
"Do :option:`-O` and also discard docstrings.  Augment the filename for "
"compiled (:term:`bytecode`) files by adding ``.opt-2`` before the ``.pyc`` "
"extension (see :pep:`488`)."
msgstr ""

#: ../../using/cmdline.rst:337
msgid "Don't prepend a potentially unsafe path to :data:`sys.path`:"
msgstr ""

#: ../../using/cmdline.rst:339
msgid ""
"``python -m module`` command line: Don't prepend the current working "
"directory."
msgstr ""

#: ../../using/cmdline.rst:341
msgid ""
"``python script.py`` command line: Don't prepend the script's directory. If "
"it's a symbolic link, resolve symbolic links."
msgstr ""

#: ../../using/cmdline.rst:343
msgid ""
"``python -c code`` and ``python`` (REPL) command lines: Don't prepend an "
"empty string, which means the current working directory."
msgstr ""

#: ../../using/cmdline.rst:346
msgid ""
"See also the :envvar:`PYTHONSAFEPATH` environment variable, and :option:`-E` "
"and :option:`-I` (isolated) options."
msgstr ""

#: ../../using/cmdline.rst:354
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""

#: ../../using/cmdline.rst:361
msgid ""
"Turn on hash randomization. This option only has an effect if the :envvar:"
"`PYTHONHASHSEED` environment variable is set to ``0``, since hash "
"randomization is enabled by default."
msgstr ""

#: ../../using/cmdline.rst:365
msgid ""
"On previous versions of Python, this option turns on hash randomization, so "
"that the :meth:`~object.__hash__` values of str and bytes objects are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:371
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully chosen inputs that exploit the worst case "
"performance of a dict construction, *O*\\ (*n*\\ :sup:`2`) complexity.  See "
"http://ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:376
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed "
"secret."
msgstr ""

#: ../../using/cmdline.rst:381
msgid "The option is no longer ignored."
msgstr ""

#: ../../using/cmdline.rst:387
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:390
msgid "See also :envvar:`PYTHONNOUSERSITE`."
msgstr "另請參閱 :envvar:`PYTHONNOUSERSITE`。"

#: ../../using/cmdline.rst:394 ../../using/cmdline.rst:816
#: ../../using/cmdline.rst:828
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ""

#: ../../using/cmdline.rst:399
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""

#: ../../using/cmdline.rst:407
msgid ""
"Force the stdout and stderr streams to be unbuffered.  This option has no "
"effect on the stdin stream."
msgstr ""

#: ../../using/cmdline.rst:410
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr "另請參閱 :envvar:`PYTHONUNBUFFERED`。"

#: ../../using/cmdline.rst:412
msgid "The text layer of the stdout and stderr streams now is unbuffered."
msgstr ""

#: ../../using/cmdline.rst:418
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice (:"
"option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at exit."
msgstr ""

#: ../../using/cmdline.rst:423
msgid ""
"The :mod:`site` module reports the site-specific paths and :file:`.pth` "
"files being processed."
msgstr ""

#: ../../using/cmdline.rst:427
msgid "See also :envvar:`PYTHONVERBOSE`."
msgstr "另請參閱 :envvar:`PYTHONVERBOSE`。"

#: ../../using/cmdline.rst:433
msgid ""
"Warning control. Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`."
msgstr ""

#: ../../using/cmdline.rst:436 ../../using/cmdline.rst:844
msgid ""
"The simplest settings apply a particular action unconditionally to all "
"warnings emitted by a process (even those that are otherwise ignored by "
"default)::"
msgstr ""

#: ../../using/cmdline.rst:448
msgid ""
"The action names can be abbreviated as desired and the interpreter will "
"resolve them to the appropriate action name. For example, ``-Wi`` is the "
"same as ``-Wignore``."
msgstr ""

#: ../../using/cmdline.rst:452
msgid "The full form of argument is::"
msgstr ""

#: ../../using/cmdline.rst:456
msgid ""
"Empty fields match all values; trailing empty fields may be omitted. For "
"example ``-W ignore::DeprecationWarning`` ignores all DeprecationWarning "
"warnings."
msgstr ""

#: ../../using/cmdline.rst:460
msgid ""
"The *action* field is as explained above but only applies to warnings that "
"match the remaining fields."
msgstr ""

#: ../../using/cmdline.rst:463
msgid ""
"The *message* field must match the whole warning message; this match is case-"
"insensitive."
msgstr ""

#: ../../using/cmdline.rst:466
msgid ""
"The *category* field matches the warning category (ex: "
"``DeprecationWarning``). This must be a class name; the match test whether "
"the actual warning category of the message is a subclass of the specified "
"warning category."
msgstr ""

#: ../../using/cmdline.rst:471
msgid ""
"The *module* field matches the (fully qualified) module name; this match is "
"case-sensitive."
msgstr ""

#: ../../using/cmdline.rst:474
msgid ""
"The *lineno* field matches the line number, where zero matches all line "
"numbers and is thus equivalent to an omitted line number."
msgstr ""

#: ../../using/cmdline.rst:477
msgid ""
"Multiple :option:`-W` options can be given; when a warning matches more than "
"one option, the action for the last matching option is performed. Invalid :"
"option:`-W` options are ignored (though, a warning message is printed about "
"invalid options when the first warning is issued)."
msgstr ""

#: ../../using/cmdline.rst:482
msgid ""
"Warnings can also be controlled using the :envvar:`PYTHONWARNINGS` "
"environment variable and from within a Python program using the :mod:"
"`warnings` module. For example, the :func:`warnings.filterwarnings` function "
"can be used to use a regular expression on the warning message."
msgstr ""

#: ../../using/cmdline.rst:487 ../../using/cmdline.rst:856
msgid ""
"See :ref:`warning-filter` and :ref:`describing-warning-filters` for more "
"details."
msgstr ""

#: ../../using/cmdline.rst:493
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of ``#!"
"cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../../using/cmdline.rst:499
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""

#: ../../using/cmdline.rst:502
msgid ""
"``-X faulthandler`` to enable :mod:`faulthandler`. See also :envvar:"
"`PYTHONFAULTHANDLER`."
msgstr ""

#: ../../using/cmdline.rst:507
msgid ""
"``-X showrefcount`` to output the total reference count and number of used "
"memory blocks when the program finishes or after each statement in the "
"interactive interpreter. This only works on :ref:`debug builds <debug-"
"build>`."
msgstr ""

#: ../../using/cmdline.rst:514
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the :mod:"
"`tracemalloc` module. By default, only the most recent frame is stored in a "
"traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing with a "
"traceback limit of *NFRAME* frames. See :func:`tracemalloc.start` and :"
"envvar:`PYTHONTRACEMALLOC` for more information."
msgstr ""

#: ../../using/cmdline.rst:523
msgid ""
"``-X int_max_str_digits`` configures the :ref:`integer string conversion "
"length limitation <int_max_str_digits>`.  See also :envvar:"
"`PYTHONINTMAXSTRDIGITS`."
msgstr ""

#: ../../using/cmdline.rst:529
msgid ""
"``-X importtime`` to show how long each import takes. It shows module name, "
"cumulative time (including nested imports) and self time (excluding nested "
"imports).  Note that its output may be broken in multi-threaded "
"application.  Typical usage is ``python3 -X importtime -c 'import "
"asyncio'``.  See also :envvar:`PYTHONPROFILEIMPORTTIME`."
msgstr ""

#: ../../using/cmdline.rst:537
msgid ""
"``-X dev``: enable :ref:`Python Development Mode <devmode>`, introducing "
"additional runtime checks that are too expensive to be enabled by default.  "
"See also :envvar:`PYTHONDEVMODE`."
msgstr ""

#: ../../using/cmdline.rst:543
msgid ""
"``-X utf8`` enables the :ref:`Python UTF-8 Mode <utf8-mode>`. ``-X utf8=0`` "
"explicitly disables :ref:`Python UTF-8 Mode <utf8-mode>` (even when it would "
"otherwise activate automatically). See also :envvar:`PYTHONUTF8`."
msgstr ""

#: ../../using/cmdline.rst:550
msgid ""
"``-X pycache_prefix=PATH`` enables writing ``.pyc`` files to a parallel tree "
"rooted at the given directory instead of to the code tree. See also :envvar:"
"`PYTHONPYCACHEPREFIX`."
msgstr ""

#: ../../using/cmdline.rst:556
msgid ""
"``-X warn_default_encoding`` issues a :class:`EncodingWarning` when the "
"locale-specific default encoding is used for opening files. See also :envvar:"
"`PYTHONWARNDEFAULTENCODING`."
msgstr ""

#: ../../using/cmdline.rst:562
msgid ""
"``-X no_debug_ranges`` disables the inclusion of the tables mapping extra "
"location information (end line, start column offset and end column offset) "
"to every instruction in code objects. This is useful when smaller code "
"objects and pyc files are desired as well as suppressing the extra visual "
"location indicators when the interpreter displays tracebacks. See also :"
"envvar:`PYTHONNODEBUGRANGES`."
msgstr ""

#: ../../using/cmdline.rst:571
msgid ""
"``-X frozen_modules`` determines whether or not frozen modules are ignored "
"by the import machinery.  A value of \"on\" means they get imported and "
"\"off\" means they are ignored.  The default is \"on\" if this is an "
"installed Python (the normal case).  If it's under development (running from "
"the source tree) then the default is \"off\". Note that the "
"\"importlib_bootstrap\" and \"importlib_bootstrap_external\" frozen modules "
"are always used, even if this flag is set to \"off\"."
msgstr ""

#: ../../using/cmdline.rst:581
msgid ""
"``-X perf`` enables support for the Linux ``perf`` profiler. When this "
"option is provided, the ``perf`` profiler will be able to report Python "
"calls. This option is only available on some platforms and will do nothing "
"if is not supported on the current system. The default value is \"off\". See "
"also :envvar:`PYTHONPERFSUPPORT` and :ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:589
msgid ""
"It also allows passing arbitrary values and retrieving them through the :"
"data:`sys._xoptions` dictionary."
msgstr ""

#: ../../using/cmdline.rst:594
msgid "Removed the ``-X showalloccount`` option."
msgstr "移除 ``-X showalloccount`` 選項。"

#: ../../using/cmdline.rst:597
msgid "Removed the ``-X oldparser`` option."
msgstr "移除 ``-X oldparser`` 選項。"

#: ../../using/cmdline.rst:602
msgid "Options you shouldn't use"
msgstr "你不該使用的選項"

#: ../../using/cmdline.rst:606
msgid "Reserved for use by Jython_."
msgstr ""

#: ../../using/cmdline.rst:614
msgid "Environment variables"
msgstr "環境變數"

#: ../../using/cmdline.rst:616
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E or -I.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""

#: ../../using/cmdline.rst:623
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and :file:"
"`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:"
"`{exec_prefix}` are installation-dependent directories, both defaulting to :"
"file:`/usr/local`."
msgstr ""

#: ../../using/cmdline.rst:629
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../../using/cmdline.rst:636
msgid ""
"Augment the default search path for module files.  The format is the same as "
"the shell's :envvar:`PATH`: one or more directory pathnames separated by :"
"data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""

#: ../../using/cmdline.rst:641
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""

#: ../../using/cmdline.rst:645
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  "
"It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../../using/cmdline.rst:649
msgid ""
"An additional directory will be inserted in the search path in front of :"
"envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as "
"the variable :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:657
msgid ""
"If this is set to a non-empty string, don't prepend a potentially unsafe "
"path to :data:`sys.path`: see the :option:`-P` option for details."
msgstr ""

#: ../../using/cmdline.rst:665
msgid ""
"If this is set to a non-empty string, it overrides the :data:`sys."
"platlibdir` value."
msgstr ""

#: ../../using/cmdline.rst:673
msgid ""
"If this is the name of a readable file, the Python commands in that file are "
"executed before the first prompt is displayed in interactive mode.  The file "
"is executed in the same namespace where interactive commands are executed so "
"that objects defined or imported in it can be used without qualification in "
"the interactive session.  You can also change the prompts :data:`sys.ps1` "
"and :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this "
"file."
msgstr ""

#: ../../using/cmdline.rst:680 ../../using/cmdline.rst:682
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_startup`` with the "
"filename as the argument when called on startup."
msgstr ""
"引發一個附帶呼叫啟動時的檔案名稱為引數的\\ :ref:`稽核事件 <auditing>` "
"``cpython.run_startup``。"

#: ../../using/cmdline.rst:688
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-O` option.  If set to an integer, it is equivalent to specifying :"
"option:`-O` multiple times."
msgstr ""

#: ../../using/cmdline.rst:695
msgid ""
"If this is set, it names a callable using dotted-path notation.  The module "
"containing the callable will be imported and then the callable will be run "
"by the default implementation of :func:`sys.breakpointhook` which itself is "
"called by built-in :func:`breakpoint`.  If not set, or set to the empty "
"string, it is equivalent to the value \"pdb.set_trace\".  Setting this to "
"the string \"0\" causes the default implementation of :func:`sys."
"breakpointhook` to do nothing but return immediately."
msgstr ""

#: ../../using/cmdline.rst:707
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-d` option.  If set to an integer, it is equivalent to specifying :"
"option:`-d` multiple times."
msgstr ""

#: ../../using/cmdline.rst:711
msgid ""
"This environment variable requires a :ref:`debug build of Python <debug-"
"build>`, otherwise it's ignored."
msgstr ""

#: ../../using/cmdline.rst:717
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-i` option."
msgstr ""

#: ../../using/cmdline.rst:720
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""

#: ../../using/cmdline.rst:725
msgid "(also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events."
msgstr ""

#: ../../using/cmdline.rst:731
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-u` option."
msgstr ""

#: ../../using/cmdline.rst:737
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-v` option.  If set to an integer, it is equivalent to specifying :"
"option:`-v` multiple times."
msgstr ""

#: ../../using/cmdline.rst:744
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows and macOS."
msgstr ""

#: ../../using/cmdline.rst:750
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying "
"the :option:`-B` option."
msgstr ""

#: ../../using/cmdline.rst:757
msgid ""
"If this is set, Python will write ``.pyc`` files in a mirror directory tree "
"at this path, instead of in ``__pycache__`` directories within the source "
"tree. This is equivalent to specifying the :option:`-X` "
"``pycache_prefix=PATH`` option."
msgstr ""

#: ../../using/cmdline.rst:767
msgid ""
"If this variable is not set or set to ``random``, a random value is used to "
"seed the hashes of str and bytes objects."
msgstr ""

#: ../../using/cmdline.rst:770
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""

#: ../../using/cmdline.rst:774
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""

#: ../../using/cmdline.rst:778
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""

#: ../../using/cmdline.rst:785
msgid ""
"If this variable is set to an integer, it is used to configure the "
"interpreter's global :ref:`integer string conversion length limitation "
"<int_max_str_digits>`."
msgstr ""

#: ../../using/cmdline.rst:793
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  "
"Both the ``encodingname`` and the ``:errorhandler`` parts are optional and "
"have the same meaning as in :func:`str.encode`."
msgstr ""

#: ../../using/cmdline.rst:798
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will always "
"be ``'backslashreplace'``."
msgstr ""

#: ../../using/cmdline.rst:801
msgid "The ``encodingname`` part is now optional."
msgstr ""

#: ../../using/cmdline.rst:804
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams are "
"not affected."
msgstr ""

#: ../../using/cmdline.rst:811
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:821
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory <site."
"USER_SITE>` and :ref:`installation paths <sysconfig-user-scheme>` for "
"``python -m pip install --user``."
msgstr ""

#: ../../using/cmdline.rst:833
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on macOS."
msgstr ""

#: ../../using/cmdline.rst:839
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times, with "
"filters later in the list taking precedence over those earlier in the list."
msgstr ""

#: ../../using/cmdline.rst:862
msgid ""
"If this environment variable is set to a non-empty string, :func:"
"`faulthandler.enable` is called at startup: install a handler for :const:"
"`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:"
"`~signal.SIGBUS` and :const:`~signal.SIGILL` signals to dump the Python "
"traceback. This is equivalent to :option:`-X` ``faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:874
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value of "
"the variable is the maximum number of frames stored in a traceback of a "
"trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent "
"frame. See the :func:`tracemalloc.start` function for more information. This "
"is equivalent to setting the :option:`-X` ``tracemalloc`` option."
msgstr ""

#: ../../using/cmdline.rst:887
msgid ""
"If this environment variable is set to a non-empty string, Python will show "
"how long each import takes. This is equivalent to setting the :option:`-X` "
"``importtime`` option."
msgstr ""

#: ../../using/cmdline.rst:896
msgid ""
"If this environment variable is set to a non-empty string, enable the :ref:"
"`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""

#: ../../using/cmdline.rst:904
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:906
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../../using/cmdline.rst:908
msgid ""
"``default``: use the :ref:`default memory allocators <default-memory-"
"allocators>`."
msgstr ""

#: ../../using/cmdline.rst:910
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:macro:`PYMEM_DOMAIN_RAW`, :c:macro:`PYMEM_DOMAIN_MEM`, :c:macro:"
"`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../../using/cmdline.rst:913
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for :c:macro:"
"`PYMEM_DOMAIN_MEM` and :c:macro:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:macro:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:917
msgid "Install :ref:`debug hooks <pymem-debug-hooks>`:"
msgstr ""

#: ../../using/cmdline.rst:919
msgid ""
"``debug``: install debug hooks on top of the :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""

#: ../../using/cmdline.rst:921
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:922
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:926
msgid "Added the ``\"default\"`` allocator."
msgstr ""

#: ../../using/cmdline.rst:932
msgid ""
"If set to a non-empty string, Python will print statistics of the :ref:"
"`pymalloc memory allocator <pymalloc>` every time a new pymalloc object "
"arena is created, and on shutdown."
msgstr ""

#: ../../using/cmdline.rst:936
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable "
"is used to force the :c:func:`malloc` allocator of the C library, or if "
"Python is configured without ``pymalloc`` support."
msgstr ""

#: ../../using/cmdline.rst:940
msgid ""
"This variable can now also be used on Python compiled in release mode. It "
"now has no effect if set to an empty string."
msgstr ""

#: ../../using/cmdline.rst:947
msgid ""
"If set to a non-empty string, the default :term:`filesystem encoding and "
"error handler` mode will revert to their pre-3.6 values of 'mbcs' and "
"'replace', respectively.  Otherwise, the new defaults 'utf-8' and "
"'surrogatepass' are used."
msgstr ""

#: ../../using/cmdline.rst:952
msgid ""
"This may also be enabled at runtime with :func:`sys."
"_enablelegacywindowsfsencoding()`."
msgstr ""

#: ../../using/cmdline.rst:955 ../../using/cmdline.rst:969
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`適用 <availability>`：Windows。"

#: ../../using/cmdline.rst:957
msgid "See :pep:`529` for more details."
msgstr "更多細節請見 :pep:`529`。"

#: ../../using/cmdline.rst:962
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to the "
"active console code page, rather than using utf-8."
msgstr ""

#: ../../using/cmdline.rst:966
msgid ""
"This variable is ignored if the standard streams are redirected (to files or "
"pipes) rather than referring to console buffers."
msgstr ""

#: ../../using/cmdline.rst:976
msgid ""
"If set to the value ``0``, causes the main Python command line application "
"to skip coercing the legacy ASCII-based C and POSIX locales to a more "
"capable UTF-8 based alternative."
msgstr ""

#: ../../using/cmdline.rst:980
msgid ""
"If this variable is *not* set (or is set to a value other than ``0``), the "
"``LC_ALL`` locale override environment variable is also not set, and the "
"current locale reported for the ``LC_CTYPE`` category is either the default "
"``C`` locale, or else the explicitly ASCII-based ``POSIX`` locale, then the "
"Python CLI will attempt to configure the following locales for the "
"``LC_CTYPE`` category in the order listed before loading the interpreter "
"runtime:"
msgstr ""

#: ../../using/cmdline.rst:988
msgid "``C.UTF-8``"
msgstr "``C.UTF-8``"

#: ../../using/cmdline.rst:989
msgid "``C.utf8``"
msgstr "``C.utf8``"

#: ../../using/cmdline.rst:990
msgid "``UTF-8``"
msgstr "``UTF-8``"

#: ../../using/cmdline.rst:992
msgid ""
"If setting one of these locale categories succeeds, then the ``LC_CTYPE`` "
"environment variable will also be set accordingly in the current process "
"environment before the Python runtime is initialized. This ensures that in "
"addition to being seen by both the interpreter itself and other locale-aware "
"components running in the same process (such as the GNU ``readline`` "
"library), the updated setting is also seen in subprocesses (regardless of "
"whether or not those processes are running a Python interpreter), as well as "
"in operations that query the environment rather than the current C locale "
"(such as Python's own :func:`locale.getdefaultlocale`)."
msgstr ""

#: ../../using/cmdline.rst:1002
msgid ""
"Configuring one of these locales (either explicitly or via the above "
"implicit locale coercion) automatically enables the ``surrogateescape`` :ref:"
"`error handler <error-handlers>` for :data:`sys.stdin` and :data:`sys."
"stdout` (:data:`sys.stderr` continues to use ``backslashreplace`` as it does "
"in any other locale). This stream handling behavior can be overridden using :"
"envvar:`PYTHONIOENCODING` as usual."
msgstr ""

#: ../../using/cmdline.rst:1009
msgid ""
"For debugging purposes, setting ``PYTHONCOERCECLOCALE=warn`` will cause "
"Python to emit warning messages on ``stderr`` if either the locale coercion "
"activates, or else if a locale that *would* have triggered coercion is still "
"active when the Python runtime is initialized."
msgstr ""

#: ../../using/cmdline.rst:1014
msgid ""
"Also note that even when locale coercion is disabled, or when it fails to "
"find a suitable target locale, :envvar:`PYTHONUTF8` will still activate by "
"default in legacy ASCII-based locales. Both features must be disabled in "
"order to force the interpreter to use ``ASCII`` instead of ``UTF-8`` for "
"system interfaces."
msgstr ""

#: ../../using/cmdline.rst:1020
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`適用 <availability>`：Unix。"

#: ../../using/cmdline.rst:1022
msgid "See :pep:`538` for more details."
msgstr "更多細節請見 :pep:`538`。"

#: ../../using/cmdline.rst:1028
msgid ""
"If this environment variable is set to a non-empty string, enable :ref:"
"`Python Development Mode <devmode>`, introducing additional runtime checks "
"that are too expensive to be enabled by default. This is equivalent to "
"setting the :option:`-X` ``dev`` option."
msgstr ""

#: ../../using/cmdline.rst:1037
msgid "If set to ``1``, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "如果設為 ``1``，則啟用 :ref:`Python UTF-8 Mode <utf8-mode>`。"

#: ../../using/cmdline.rst:1039
msgid "If set to ``0``, disable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "如果設為 ``0``，則停用 :ref:`Python UTF-8 Mode <utf8-mode>`。"

#: ../../using/cmdline.rst:1041
msgid ""
"Setting any other non-empty string causes an error during interpreter "
"initialisation."
msgstr ""

#: ../../using/cmdline.rst:1048
msgid ""
"If this environment variable is set to a non-empty string, issue a :class:"
"`EncodingWarning` when the locale-specific default encoding is used."
msgstr ""

#: ../../using/cmdline.rst:1051
msgid "See :ref:`io-encoding-warning` for details."
msgstr "細節請見 :ref:`io-encoding-warning`。"

#: ../../using/cmdline.rst:1057
msgid ""
"If this variable is set, it disables the inclusion of the tables mapping "
"extra location information (end line, start column offset and end column "
"offset) to every instruction in code objects. This is useful when smaller "
"code objects and pyc files are desired as well as suppressing the extra "
"visual location indicators when the interpreter displays tracebacks."
msgstr ""

#: ../../using/cmdline.rst:1067
msgid ""
"If this variable is set to a nonzero value, it enables support for the Linux "
"``perf`` profiler so Python calls can be detected by it."
msgstr ""

#: ../../using/cmdline.rst:1070
msgid "If set to ``0``, disable Linux ``perf`` profiler support."
msgstr ""

#: ../../using/cmdline.rst:1072
msgid ""
"See also the :option:`-X perf <-X>` command-line option and :ref:"
"`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:1079
msgid "Debug-mode variables"
msgstr "除錯模式變數"

#: ../../using/cmdline.rst:1083
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""

#: ../../using/cmdline.rst:1086 ../../using/cmdline.rst:1093
msgid ""
"Need Python configured with the :option:`--with-trace-refs` build option."
msgstr ""

#: ../../using/cmdline.rst:1090
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter into a file called *FILENAME*."
msgstr ""
