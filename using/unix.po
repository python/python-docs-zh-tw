# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Matt Wang <mattwang44@gmail.com>, 2022
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-31 08:13+0000\n"
"PO-Revision-Date: 2022-10-31 16:31+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.1.1\n"

#: ../../using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr "在 Unix 平臺上使用 Python"

#: ../../using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr "獲得並安裝 Python 的最新版本"

#: ../../using/unix.rst:16
msgid "On Linux"
msgstr "在 Linux 上"

#: ../../using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a "
"package on all others.  However there are certain features you might want to "
"use that are not available on your distro's package.  You can easily compile "
"the latest version of Python from source."
msgstr ""
"在大多數 Linux 發行版上會預先安裝 Python，並作為一個套件提供給所有其他使用"
"者。但是發行版提供的套件可能沒有你想要使用的某些功能，這時你可以選擇從原始碼"
"編譯最新版本的 Python，做法相當容易。"

#: ../../using/unix.rst:23
msgid ""
"In the event that Python doesn't come preinstalled and isn't in the "
"repositories as well, you can easily make packages for your own distro.  "
"Have a look at the following links:"
msgstr ""
"如果 Python 沒有預先安裝，並且不在發行版提供的儲存庫 (repository) 中，你可以"
"輕鬆地為自己使用的發行版建立套件。參閱以下連結："

#: ../../using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr "https://www.debian.org/doc/manuals/maint-guide/first.en.html"

#: ../../using/unix.rst:30
msgid "for Debian users"
msgstr "對於 Debian 用戶"

#: ../../using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr "https://en.opensuse.org/Portal:Packaging"

#: ../../using/unix.rst:32
msgid "for OpenSuse users"
msgstr "對於 OpenSuse 用戶"

#: ../../using/unix.rst:33
msgid ""
"https://docs-old.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/"
"RPM_Guide/ch-creating-rpms.html"
msgstr ""
"https://docs-old.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/"
"RPM_Guide/ch-creating-rpms.html"

#: ../../using/unix.rst:34
msgid "for Fedora users"
msgstr "對於 Fedora 用戶"

#: ../../using/unix.rst:35
msgid "http://www.slackbook.org/html/package-management-making-packages.html"
msgstr "http://www.slackbook.org/html/package-management-making-packages.html"

#: ../../using/unix.rst:36
msgid "for Slackware users"
msgstr "對於 Slackware 用戶"

#: ../../using/unix.rst:40
msgid "On FreeBSD and OpenBSD"
msgstr "在 FreeBSD 和 OpenBSD 上"

#: ../../using/unix.rst:42
msgid "FreeBSD users, to add the package use::"
msgstr ""
"FreeBSD 用戶應使用以下命令增加套件：\n"
"\n"
"::"

#: ../../using/unix.rst:46
msgid "OpenBSD users, to add the package use::"
msgstr ""
"OpenBSD 用戶應使用以下命令增加套件：\n"
"\n"
"::"

#: ../../using/unix.rst:52
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr ""
"例如 i386 使用者要獲取 Python 2.5.1 的可用版本：\n"
"\n"
"::"

#: ../../using/unix.rst:58
msgid "On OpenSolaris"
msgstr "在 OpenSolaris 系統上"

#: ../../using/unix.rst:60
msgid ""
"You can get Python from `OpenCSW <https://www.opencsw.org/>`_.  Various "
"versions of Python are available and can be installed with e.g. ``pkgutil -i "
"python27``."
msgstr ""
"你可以從 `OpenCSW <https://www.opencsw.org/>`_ 獲取、安裝及使用各種版本的 "
"Python。比如 ``pkgutil -i python27``。"

#: ../../using/unix.rst:67
msgid "Building Python"
msgstr "建置 Python"

#: ../../using/unix.rst:69
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone <https://"
"devguide.python.org/setup/#get-the-source-code>`_.  (If you want to "
"contribute patches, you will need a clone.)"
msgstr ""
"如果你想自己編譯 CPython，首先要做的是獲取\\ `原始碼 <https://www.python.org/"
"downloads/source/>`_。你可以下載最新版本的原始碼，也可以直接提取最新的 "
"`clone（克隆） <https://devguide.python.org/setup/#getting-the-source-"
"code>`_。（如果你想要貢獻修補程式碼，也會需要一份 clone。）"

#: ../../using/unix.rst:75
msgid "The build process consists of the usual commands::"
msgstr ""
"建置過程由幾個常用命令組成：\n"
"\n"
"::"

#: ../../using/unix.rst:81
msgid ""
":ref:`Configuration options <configure-options>` and caveats for specific "
"Unix platforms are extensively documented in the :source:`README.rst` file "
"in the root of the Python source tree."
msgstr ""
"特定 Unix 平臺的\\ :ref:`配置選項 <configure-options>`\\ 和注意事項通常會詳細"
"地記錄在 Python 原始碼樹 (source tree) 根目錄下的 :source:`README.rst` 檔案"
"中。"

#: ../../using/unix.rst:87
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""
"``make install`` 可以覆蓋或偽裝 :file:`python3` 二進位制檔案。因此，建議使用 "
"``make altinstall`` 而不是 ``make install``，因為它只安裝 :file:"
"`{exec_prefix}/bin/python{version}`。"

#: ../../using/unix.rst:93
msgid "Python-related paths and files"
msgstr "與 Python 相關的路徑和檔案"

#: ../../using/unix.rst:95
msgid ""
"These are subject to difference depending on local installation "
"conventions; :envvar:`prefix` (``${prefix}``) and :envvar:`exec_prefix` (``"
"${exec_prefix}``) are installation-dependent and should be interpreted as "
"for GNU software; they may be the same."
msgstr ""
"這取決於本地安裝慣例；:envvar:`prefix` (``${prefix}``) 和 :envvar:"
"`exec_prefix` (``${exec_prefix}``) 相依於安裝方式，應被直譯來讓 GNU 軟體使"
"用；它們也可能相同。"

#: ../../using/unix.rst:100
msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr "例如，在大多數 Linux 系統上，兩者的預設值皆是 :file:`/usr`。"

#: ../../using/unix.rst:103
msgid "File/directory"
msgstr "檔案/目錄"

#: ../../using/unix.rst:103
msgid "Meaning"
msgstr "含意"

#: ../../using/unix.rst:105
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ":file:`{exec_prefix}/bin/python3`"

#: ../../using/unix.rst:105
msgid "Recommended location of the interpreter."
msgstr "直譯器的推薦位置。"

#: ../../using/unix.rst:107
msgid ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"
msgstr ""
":file:`{prefix}/lib/python{version}`、:file:`{exec_prefix}/lib/"
"python{version}`"

#: ../../using/unix.rst:107
msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr "包含標準模組目錄的推薦位置。"

#: ../../using/unix.rst:110
msgid ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"
msgstr ""
":file:`{prefix}/include/python{version}`、:file:`{exec_prefix}/include/"
"python{version}`"

#: ../../using/unix.rst:110
msgid ""
"Recommended locations of the directories containing the include files needed "
"for developing Python extensions and embedding the interpreter."
msgstr ""
"包含開發 Python 擴充套件和嵌入直譯器所需 include 檔案之目錄的推薦位置。"

#: ../../using/unix.rst:118
msgid "Miscellaneous"
msgstr "雜項"

#: ../../using/unix.rst:120
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g. "
"with"
msgstr ""
"要在 Unix 上使用 Python 腳本，你需要讓他們是可執行的 (executable)，例如用"

#: ../../using/unix.rst:127
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice "
"is usually ::"
msgstr ""
"並在腳本的頂部放一個合適的 Shebang。以下通常是個好選擇：\n"
"\n"
"::"

#: ../../using/unix.rst:132
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""
"將在整個 :envvar:`PATH` 中搜索 Python 直譯器。然而某些 Unix 系統可能沒有 :"
"program:`env` 命令，因此你可能需要將 ``/usr/bin/python3`` 寫死 (hardcode) 成"
"直譯器路徑。"

#: ../../using/unix.rst:136
msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr "要在 Python 腳本中使用 shell 命令，請見 :mod:`subprocess` 模組。"

#: ../../using/unix.rst:141
msgid "Custom OpenSSL"
msgstr "客製化 OpenSSL"

#: ../../using/unix.rst:143
msgid ""
"To use your vendor's OpenSSL configuration and system trust store, locate "
"the directory with ``openssl.cnf`` file or symlink in ``/etc``. On most "
"distribution the file is either in ``/etc/ssl`` or ``/etc/pki/tls``. The "
"directory should also contain a ``cert.pem`` file and/or a ``certs`` "
"directory."
msgstr ""
"要使用你所選擇發行商 (vendor) 的 OpenSSL 配置和系統信任儲存區 (system trust "
"store)，請找到包含 ``openssl.cnf`` 檔案的目錄或位於 ``/etc`` 的符號連結 "
"(symlink)。在大多數發行版上，該檔案會是在 ``/etc/ssl`` 或者 ``/etc/pki/tls`` "
"中。該目錄亦應包含一個 ``cert.pem`` 檔案和/或一個 ``certs`` 目錄。"

#: ../../using/unix.rst:154
msgid ""
"Download, build, and install OpenSSL. Make sure you use ``install_sw`` and "
"not ``install``. The ``install_sw`` target does not override ``openssl.cnf``."
msgstr ""
"下載、建置並安裝 OpenSSL。請確保你使用 ``install_sw`` 而不是 ``install``。"
"``install_sw`` 的目標不會覆蓋 ``openssl.cnf``。"

#: ../../using/unix.rst:172
msgid ""
"Build Python with custom OpenSSL (see the configure ``--with-openssl`` and "
"``--with-openssl-rpath`` options)"
msgstr ""
"使用客製化 OpenSSL 建置 Python（參見配置 ``--with-openssl`` 和 ``--with-"
"openssl-rpath`` 選項）"

#: ../../using/unix.rst:187
msgid ""
"Patch releases of OpenSSL have a backwards compatible ABI. You don't need to "
"recompile Python to update OpenSSL. It's sufficient to replace the custom "
"OpenSSL installation with a newer version."
msgstr ""
"OpenSSL 的修補釋出版 (patch releases) 具有向後相容的 ABI。你不需要重新編譯 "
"Python 來更新 OpenSSL。使用一個新的版本來替代客製化 OpenSSL 安裝版就可以了。"
