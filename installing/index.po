# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
# 豆豆 (Tommy Lin) <gnat_lin@hotmail.com>, 2017
# Steven Hsu <hsuhaochun@gmail.com>, 2021
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-22 00:18+0000\n"
"PO-Revision-Date: 2022-06-27 09:37+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.1\n"

#: ../../installing/index.rst:7
msgid "Installing Python Modules"
msgstr "安裝 Python 模組"

#: ../../installing/index.rst:0
msgid "Email"
msgstr "電子郵件"

#: ../../installing/index.rst:9
msgid "distutils-sig@python.org"
msgstr "distutils-sig@python.org"

#: ../../installing/index.rst:11
msgid ""
"As a popular open source development project, Python has an active "
"supporting community of contributors and users that also make their software "
"available for other Python developers to use under open source license terms."
msgstr ""
"作為一個普及的開源開發專案，Python 有一個活躍的支持社群，由其貢獻者及使用者組"
"成，而他們也讓他們的軟體可被其他 Python 開發者在開源授權條款下使用。"

#: ../../installing/index.rst:15
msgid ""
"This allows Python users to share and collaborate effectively, benefiting "
"from the solutions others have already created to common (and sometimes even "
"rare!) problems, as well as potentially contributing their own solutions to "
"the common pool."
msgstr ""
"這樣可以讓 Python 使用者們有效地共享和合作，並受益於其他人對常見（有時甚至是"
"罕見）的問題已經建立的解決方案，更可以在公用社群中潛在地貢獻他們自己的解決方"
"案。"

#: ../../installing/index.rst:20
msgid ""
"This guide covers the installation part of the process. For a guide to "
"creating and sharing your own Python projects, refer to the :ref:"
"`distribution guide <distributing-index>`."
msgstr ""
"這份指南涵蓋了上述過程中的安裝部分。如果是要建立及分享您自己的 Python 專案，"
"請參考\\ :ref:`發布 Python 模組 <distributing-index>`\\ 指南。"

#: ../../installing/index.rst:26
msgid ""
"For corporate and other institutional users, be aware that many "
"organisations have their own policies around using and contributing to open "
"source software. Please take such policies into account when making use of "
"the distribution and installation tools provided with Python."
msgstr ""
"對於企業和其他機構的使用者，要注意到，許多組織對於使用和貢獻開源軟體都有自己"
"的政策。在開始使用配備 Python 的發布及安裝工具時，請將那些政策納入考量。"

#: ../../installing/index.rst:33
msgid "Key terms"
msgstr "關鍵術語"

#: ../../installing/index.rst:35
msgid ""
"``pip`` is the preferred installer program. Starting with Python 3.4, it is "
"included by default with the Python binary installers."
msgstr ""
"``pip`` 是首選的安裝程式。從 Python 3.4 開始，它被預設包含在 Python 二進制安"
"裝程式中。"

#: ../../installing/index.rst:37
msgid ""
"A *virtual environment* is a semi-isolated Python environment that allows "
"packages to be installed for use by a particular application, rather than "
"being installed system wide."
msgstr ""
"*virtual environment（虛擬環境）*\\ 是一種半隔離的 Python 環境，可以為某個特"
"定應用程式安裝其所需的套件，而不用在整個系統上安裝它們。"

#: ../../installing/index.rst:40
msgid ""
"``venv`` is the standard tool for creating virtual environments, and has "
"been part of Python since Python 3.3. Starting with Python 3.4, it defaults "
"to installing ``pip`` into all created virtual environments."
msgstr ""
"``venv`` 是建立虛擬環境的標準工具，它從 Python 3.3 開始成為 Python 的一部分。"
"從 Python 3.4 開始，它會預設地安裝 ``pip`` 到所有被建立的虛擬環境。"

#: ../../installing/index.rst:43
msgid ""
"``virtualenv`` is a third party alternative (and predecessor) to ``venv``. "
"It allows virtual environments to be used on versions of Python prior to "
"3.4, which either don't provide ``venv`` at all, or aren't able to "
"automatically install ``pip`` into created environments."
msgstr ""
"``virtualenv`` 是 ``venv`` 的一個第三方替代方案（及其前身）。它使虛擬環境可以"
"在 Python 3.4 之前的版本被使用，那些版本要不是根本沒提供 ``venv``，就是無法自"
"動安裝 ``pip`` 到所建立的環境中。"

#: ../../installing/index.rst:47
msgid ""
"The `Python Package Index <https://pypi.org>`__ is a public repository of "
"open source licensed packages made available for use by other Python users."
msgstr ""
"`Python 套件索引 (Python Package Index) <https://pypi.org>`__ 是開源授權套件"
"的一個公共儲存庫，其中的套件皆可被其他 Python 使用者所使用。"

#: ../../installing/index.rst:50
msgid ""
"the `Python Packaging Authority <https://www.pypa.io/>`__ is the group of "
"developers and documentation authors responsible for the maintenance and "
"evolution of the standard packaging tools and the associated metadata and "
"file format standards. They maintain a variety of tools, documentation, and "
"issue trackers on both `GitHub <https://github.com/pypa>`__ and `Bitbucket "
"<https://bitbucket.org/pypa/>`__."
msgstr ""
"`Python 封裝管理站 (Python Packaging Authority) <https://www.pypa.io/>`__ 是"
"一個由開發者和說明文件作者組成的團隊，負責維護及改進標準封裝工具，以及相關的"
"元資料 (metadata) 和檔案格式標準。他們在 `GitHub <https://github.com/"
"pypa>`__ 和 `Bitbucket <https://bitbucket.org/pypa/>`__ 這兩個平台上維護各種"
"工具、說明文件及問題追蹤系統。"

#: ../../installing/index.rst:57
msgid ""
"``distutils`` is the original build and distribution system first added to "
"the Python standard library in 1998. While direct use of ``distutils`` is "
"being phased out, it still laid the foundation for the current packaging and "
"distribution infrastructure, and it not only remains part of the standard "
"library, but its name lives on in other ways (such as the name of the "
"mailing list used to coordinate Python packaging standards development)."
msgstr ""
"``distutils`` 是最早的建置和發布系統，於 1998 年首次被加入 Python 標準函式"
"庫。雖然直接使用 ``distutils`` 的方式已經被逐步淘汰，它仍然是現今封裝和發布的"
"基礎結構根基，而且它不僅仍然是標準函式庫的一部分，它的名稱也以其他的方式存活"
"著（例如：用於協調 Python 封裝標準開發的郵寄清單就是以它命名）。"

#: ../../installing/index.rst:65
msgid ""
"The use of ``venv`` is now recommended for creating virtual environments."
msgstr "對於建立虛擬環境，現在推薦使用 ``venv``。"

#: ../../installing/index.rst:70
msgid ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/installing/#creating-virtual-environments>`__"
msgstr ""
"`Python 封裝使用者指南：建立和使用虛擬環境 <https://packaging.python.org/"
"installing/#creating-virtual-environments>`__"

#: ../../installing/index.rst:75
msgid "Basic usage"
msgstr "基本用法"

#: ../../installing/index.rst:77
msgid ""
"The standard packaging tools are all designed to be used from the command "
"line."
msgstr "標準封裝工具皆是以能從命令列使用的方式被設計的。"

#: ../../installing/index.rst:80
msgid ""
"The following command will install the latest version of a module and its "
"dependencies from the Python Package Index::"
msgstr ""
"以下指令將從 Python 套件索引安裝一個模組的最新版本及其依賴套件 "
"(dependencies)：\n"
"\n"
"::"

#: ../../installing/index.rst:87
msgid ""
"For POSIX users (including macOS and Linux users), the examples in this "
"guide assume the use of a :term:`virtual environment`."
msgstr ""
"對於 POSIX 使用者（包括 macOS 和 Linux 使用者），本指南中的範例皆假設有使用 :"
"term:`virtual environment`\\ 。"

#: ../../installing/index.rst:90
msgid ""
"For Windows users, the examples in this guide assume that the option to "
"adjust the system PATH environment variable was selected when installing "
"Python."
msgstr ""
"對於 Windows 使用者，本指南中的範例皆假設在安裝 Python 時，「可調整系統 PATH "
"環境變數」的選項已被選取。"

#: ../../installing/index.rst:94
msgid ""
"It's also possible to specify an exact or minimum version directly on the "
"command line. When using comparator operators such as ``>``, ``<`` or some "
"other special character which get interpreted by shell, the package name and "
"the version should be enclosed within double quotes::"
msgstr ""
"在命令列中直接指定一個明確的或最小的版本也是可行的。當使用像是 ``>``、``<`` "
"的比較運算子，或某些可被 shell 所解釋的其他特殊字元時，套件名稱與版本編號應該"
"要放在雙引號內：\n"
"\n"
"::"

#: ../../installing/index.rst:102
msgid ""
"Normally, if a suitable module is already installed, attempting to install "
"it again will have no effect. Upgrading existing modules must be requested "
"explicitly::"
msgstr ""
"通常，如果一個合適的模組已被安裝，嘗試再次安裝它將不會有任何效果。要升級現有"
"的模組就必須明確地請求：\n"
"\n"
"::"

#: ../../installing/index.rst:108
msgid ""
"More information and resources regarding ``pip`` and its capabilities can be "
"found in the `Python Packaging User Guide <https://packaging.python.org>`__."
msgstr ""
"關於 ``pip`` 及其能力的更多資訊和資源，可以在 `Python 封裝使用者指南 "
"<https://packaging.python.org>`__\\ 中找到。"

#: ../../installing/index.rst:111
msgid ""
"Creation of virtual environments is done through the :mod:`venv` module. "
"Installing packages into an active virtual environment uses the commands "
"shown above."
msgstr ""
"虛擬環境的建立是使用 :mod:`venv` 模組來完成。要在一個已啟用的虛擬環境中安裝套"
"件，可使用前面展示的指令。"

#: ../../installing/index.rst:117
msgid ""
"`Python Packaging User Guide: Installing Python Distribution Packages "
"<https://packaging.python.org/installing/>`__"
msgstr ""
"`Python 封裝使用者指南：安裝 Python 發布套件 <https://packaging.python.org/"
"installing/>`__"

#: ../../installing/index.rst:122
msgid "How do I ...?"
msgstr "我該如何...？"

#: ../../installing/index.rst:124
msgid "These are quick answers or links for some common tasks."
msgstr "接下來是關於一些常見任務的快速解答或連結。"

#: ../../installing/index.rst:127
msgid "... install ``pip`` in versions of Python prior to Python 3.4?"
msgstr "...在 Python 3.4 之前的 Python 版本中安裝 ``pip``？"

#: ../../installing/index.rst:129
msgid ""
"Python only started bundling ``pip`` with Python 3.4. For earlier versions, "
"``pip`` needs to be \"bootstrapped\" as described in the Python Packaging "
"User Guide."
msgstr ""
"Python 是從 Python 3.4 才開始綁定 ``pip`` 的。對於更早的版本，\\ ``pip`` 需要"
"被「自助安裝 (bootstrapped)」，請參考 Python 封裝使用者指南中的說明。"

#: ../../installing/index.rst:135
msgid ""
"`Python Packaging User Guide: Requirements for Installing Packages <https://"
"packaging.python.org/installing/#requirements-for-installing-packages>`__"
msgstr ""
"`Python 封裝使用者指南：安裝套件的需求 <https://packaging.python.org/"
"installing/#requirements-for-installing-packages>`__"

#: ../../installing/index.rst:142
msgid "... install packages just for the current user?"
msgstr "...只為目前的使用者安裝套件？"

#: ../../installing/index.rst:144
msgid ""
"Passing the ``--user`` option to ``python -m pip install`` will install a "
"package just for the current user, rather than for all users of the system."
msgstr ""
"把 ``--user`` 選項傳給 ``python -m pip install``，這樣將會只為目前使用者而非"
"系統的所有使用者安裝套件。"

#: ../../installing/index.rst:149
msgid "... install scientific Python packages?"
msgstr "...安裝科學的 Python 套件？"

#: ../../installing/index.rst:151
msgid ""
"A number of scientific Python packages have complex binary dependencies, and "
"aren't currently easy to install using ``pip`` directly. At this point in "
"time, it will often be easier for users to install these packages by `other "
"means <https://packaging.python.org/science/>`__ rather than attempting to "
"install them with ``pip``."
msgstr ""
"許多科學類 Python 套件都有複雜的二進制依賴套件，且目前不太容易直接使用 "
"``pip`` 安裝。目前為止，使用\\ `其他方法 <https://packaging.python.org/"
"science/>`__\\ 而非嘗試用 ``pip`` 來安裝它們，對使用者來說通常會更簡單。"

#: ../../installing/index.rst:159
msgid ""
"`Python Packaging User Guide: Installing Scientific Packages <https://"
"packaging.python.org/science/>`__"
msgstr ""
"`Python 封裝使用者指南：安裝科學套件 <https://packaging.python.org/science/"
">`__"

#: ../../installing/index.rst:164
msgid "... work with multiple versions of Python installed in parallel?"
msgstr "...平行安裝多個 Python 版本並使用它們？"

#: ../../installing/index.rst:166
msgid ""
"On Linux, macOS, and other POSIX systems, use the versioned Python commands "
"in combination with the ``-m`` switch to run the appropriate copy of "
"``pip``::"
msgstr ""
"在 Linux、macOS 以及其他 POSIX 系統中，使用帶有版本編號的 Python 指令並結合 "
"``-m`` 開關參數 (switch)，來運行 ``pip`` 的適當副本：\n"
"\n"
"::"

#: ../../installing/index.rst:175
msgid "Appropriately versioned ``pip`` commands may also be available."
msgstr "使用帶有合適版本編號的 ``pip`` 指令，也是可行的。"

#: ../../installing/index.rst:177
msgid ""
"On Windows, use the ``py`` Python launcher in combination with the ``-m`` "
"switch::"
msgstr ""
"在 Windows 中，使用 Python 啟動指令 ``py`` 並結合 ``-m`` 開關參數 "
"(switch)：\n"
"\n"
"::"

#: ../../installing/index.rst:194
msgid "Common installation issues"
msgstr "常見的安裝問題"

#: ../../installing/index.rst:197
msgid "Installing into the system Python on Linux"
msgstr "在 Linux 上安裝套件至系統 Python"

#: ../../installing/index.rst:199
msgid ""
"On Linux systems, a Python installation will typically be included as part "
"of the distribution. Installing into this Python installation requires root "
"access to the system, and may interfere with the operation of the system "
"package manager and other components of the system if a component is "
"unexpectedly upgraded using ``pip``."
msgstr ""
"在 Linux 系統，Python 的某個安裝版本通常會被內含在 Linux 的發行版中。要安裝套"
"件到這個 Python 版本上需要系統的 root 權限，並且可能會干擾到系統套件管理器的"
"運作。如果其他系統組件非預期地以 ``pip`` 被升級，也會干擾這些組件的運作。"

#: ../../installing/index.rst:205
msgid ""
"On such systems, it is often better to use a virtual environment or a per-"
"user installation when installing packages with ``pip``."
msgstr ""
"在這樣的系統上，以 ``pip`` 安裝套件時，通常較好的方式是使用虛擬環境，或以個別"
"使用者安裝。"

#: ../../installing/index.rst:210
msgid "Pip not installed"
msgstr "未安裝 pip"

#: ../../installing/index.rst:212
msgid ""
"It is possible that ``pip`` does not get installed by default. One potential "
"fix is::"
msgstr ""
"``pip`` 沒有預設被安裝也是有可能的。一個潛在的解法是：\n"
"\n"
"::"

#: ../../installing/index.rst:216
msgid ""
"There are also additional resources for `installing pip. <https://packaging."
"python.org/en/latest/tutorials/installing-packages/#ensure-pip-setuptools-"
"and-wheel-are-up-to-date>`__"
msgstr ""
"這裡還有其他關於\\ `安裝 pip <https://packaging.python.org/en/latest/"
"tutorials/installing-packages/#ensure-pip-setuptools-and-wheel-are-up-to-"
"date>`__\\ 的資源。"

#: ../../installing/index.rst:221
msgid "Installing binary extensions"
msgstr "安裝二進制擴充 (binary extension)"

#: ../../installing/index.rst:223
msgid ""
"Python has typically relied heavily on source based distribution, with end "
"users being expected to compile extension modules from source as part of the "
"installation process."
msgstr ""
"Python 基本上相當倚賴以原始碼為基礎的發布方式，也會期望使用者在安裝過程的某個"
"階段，從原始碼來編譯擴充模組。"

#: ../../installing/index.rst:227
msgid ""
"With the introduction of support for the binary ``wheel`` format, and the "
"ability to publish wheels for at least Windows and macOS through the Python "
"Package Index, this problem is expected to diminish over time, as users are "
"more regularly able to install pre-built extensions rather than needing to "
"build them themselves."
msgstr ""
"隨著引入對二進制 ``wheel`` 格式的支援，以及透過 Python 套件索引能夠至少在 "
"Windows 和 macOS 發布 wheel 檔案，這個問題預期將會逐漸消失，因為使用者將能夠"
"更頻繁地安裝預建置 (pre-built) 的擴充，而不再需要自己建置它們。"

#: ../../installing/index.rst:233
msgid ""
"Some of the solutions for installing `scientific software <https://packaging."
"python.org/science/>`__ that are not yet available as pre-built ``wheel`` "
"files may also help with obtaining other binary extensions without needing "
"to build them locally."
msgstr ""
"有一些解決方案，可用來安裝那些還無法以預建置的 ``wheel`` 檔案被使用的\\ `科學"
"軟體 <https://packaging.python.org/science/>`__\\ ，這些方案也有助於取得其他"
"的二進制擴充，且無需在本機對它們進行建置。"

#: ../../installing/index.rst:240
msgid ""
"`Python Packaging User Guide: Binary Extensions <https://packaging.python."
"org/extensions/>`__"
msgstr ""
"`Python 封裝使用者指南：二進制擴充 <https://packaging.python.org/extensions/"
">`__"
