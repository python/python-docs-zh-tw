# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Steven Hsu <hsuhaochun@gmail.com>, 2021
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-26 18:54+0800\n"
"PO-Revision-Date: 2021-06-28 20:45+0800\n"
"Last-Translator: Steven Hsu <hsuhaochun@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 2.4.3\n"

#: ../../tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr "互動式輸入編輯和歷史記錄替換"

#: ../../tutorial/interactive.rst:7
msgid ""
"Some versions of the Python interpreter support editing of the current input "
"line and history substitution, similar to facilities found in the Korn shell "
"and the GNU Bash shell.  This is implemented using the `GNU Readline`_ "
"library, which supports various styles of editing.  This library has its own "
"documentation which we won't duplicate here."
msgstr ""
"有些版本的 Python 直譯器支援當前輸入內容的編輯和歷史記錄的替換 (history "
"substitution)，類似在 Korn shell 和 GNU Bash shell 中的功能。這個功能是用 "
"`GNU Readline`_ 函式庫來實作，它支援多種編輯的風格。這個函式庫有它自己的說明"
"文件，在這裡我們就不重複了。"

#: ../../tutorial/interactive.rst:17
msgid "Tab Completion and History Editing"
msgstr "Tab 鍵自動完成 (Tab Completion) 和歷史記錄編輯 (History Editing)"

#: ../../tutorial/interactive.rst:19
msgid ""
"Completion of variable and module names is :ref:`automatically enabled "
"<rlcompleter-config>` at interpreter startup so that the :kbd:`Tab` key "
"invokes the completion function; it looks at Python statement names, the "
"current local variables, and the available module names.  For dotted "
"expressions such as ``string.a``, it will evaluate the expression up to the "
"final ``'.'`` and then suggest completions from the attributes of the "
"resulting object.  Note that this may execute application-defined code if an "
"object with a :meth:`__getattr__` method is part of the expression.  The "
"default configuration also saves your history into a file named :file:`."
"python_history` in your user directory. The history will be available again "
"during the next interactive interpreter session."
msgstr ""
"在直譯器啟動的時候，變數和模組名稱的自動完成功能會被\\ :ref:`自動啟用 "
"<rlcompleter-config>`\\ ，所以可以用 :kbd:`Tab` 鍵來呼叫自動完成函式；它會查"
"看 Python 的陳述式名稱、當前區域變數名稱和可用模組名稱。對於像是 ``string."
"a`` 的點分隔運算式 (dotted expression)，它會對最後一個 ``'.'`` 之前的運算式求"
"值，然後根據求值結果物件的屬性，給予自動完成的建議。請注意，如果一個物件有 :"
"meth:`__getattr__` method（方法），同時又是該運算式的一部份，這樣可能會執行應"
"用程式自定義的程式碼。預設設定也會把你的指令歷史記錄儲存在你的使用者資料夾"
"內，一個名為 :file:`.python_history` 的檔案中。在下一次啟動互動式直譯器時，這"
"些歷史記錄依然可以被使用。"

#: ../../tutorial/interactive.rst:36
msgid "Alternatives to the Interactive Interpreter"
msgstr "互動式直譯器的替代方案"

#: ../../tutorial/interactive.rst:38
msgid ""
"This facility is an enormous step forward compared to earlier versions of "
"the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows if "
"an indent token is required next).  The completion mechanism might use the "
"interpreter's symbol table.  A command to check (or even suggest) matching "
"parentheses, quotes, etc., would also be useful."
msgstr ""
"與早期版本的直譯器相比，上述功能的出現的確是一個巨大的進步；但還是有一些願望"
"沒有被實現：如果能在每次換行時給予適當的縮排建議（剖析器 (parser) 知道下一行"
"是否需要縮排標記 (indent token)），那就更棒了。自動完成機制可能會使用直譯器的"
"符號表。若有一個命令能夠檢查（或甚至建議）括號、引號和其他符號的匹配，那也會"
"很有用。"

#: ../../tutorial/interactive.rst:45
msgid ""
"One alternative enhanced interactive interpreter that has been around for "
"quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar enhanced "
"interactive environment is bpython_."
msgstr ""
"有一個功能增強的互動式直譯器替代方案，已經存在一段時間，稱為 IPython_\\ ，它"
"具有 Tab 鍵自動完成、物件探索和進階歷史記錄管理等特色。它也可以完全客製化並被"
"嵌入到其他應用程式中。另一個類似的增強型互動式環境，稱為 bpython_\\ 。"
