# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-29 10:36+0000\n"
"PO-Revision-Date: 2023-02-18 13:08+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../faq/extending.rst:3
msgid "Extending/Embedding FAQ"
msgstr "擴充/嵌入常見問題集"

#: ../../faq/extending.rst:6
msgid "Contents"
msgstr "目錄"

#: ../../faq/extending.rst:16
msgid "Can I create my own functions in C?"
msgstr "我可以在 C 中建立自己的函式嗎？"

#: ../../faq/extending.rst:18
msgid ""
"Yes, you can create built-in modules containing functions, variables, "
"exceptions and even new types in C.  This is explained in the document :ref:"
"`extending-index`."
msgstr ""
"是的，你可以在 C 中建立包含函式、變數、例外甚至新型別的內建模組，:ref:"
"`extending-index` 文件中有相關說明。"

#: ../../faq/extending.rst:22
msgid "Most intermediate or advanced Python books will also cover this topic."
msgstr "大多數中級或進階 Python 書籍也會涵蓋這個主題。"

#: ../../faq/extending.rst:26
msgid "Can I create my own functions in C++?"
msgstr "我可以在 C++ 中建立自己的函式嗎？"

#: ../../faq/extending.rst:28
#, fuzzy
msgid ""
"Yes, using the C compatibility features found in C++.  Place ``extern \"C\" "
"{ ... }`` around the Python include files and put ``extern \"C\"`` before "
"each function that is going to be called by the Python interpreter.  Global "
"or static C++ objects with constructors are probably not a good idea."
msgstr ""
"是的，使用 C++ 中的 C 相容性功能。將 ``extern \"C\" { ... }`` 放在 Python 包"
"含檔案周圍，並將 ``extern \"C\"`` 放在每個將由 Python 直譯器呼叫的函式之前。"
"具有構造函式的全局或靜態 C++ 物件可能不是一個好主意。"

#: ../../faq/extending.rst:37
msgid "Writing C is hard; are there any alternatives?"
msgstr "寫 C 很難；還有其他選擇嗎？"

#: ../../faq/extending.rst:39
msgid ""
"There are a number of alternatives to writing your own C extensions, "
"depending on what you're trying to do."
msgstr "要編寫你自己的 C 擴充有許多替代方法，取決於你要執行的具體操作為何。"

#: ../../faq/extending.rst:44
#, fuzzy
msgid ""
"`Cython <https://cython.org>`_ and its relative `Pyrex <https://www.csse."
"canterbury.ac.nz/greg.ewing/python/Pyrex/>`_ are compilers that accept a "
"slightly modified form of Python and generate the corresponding C code.  "
"Cython and Pyrex make it possible to write an extension without having to "
"learn Python's C API."
msgstr ""
"`Cython <https://cython.org>`_ 及其相關的 `Pyrex <https://www.csse."
"canterbury.ac.nz/greg.ewing/python/Pyrex/>`_ 是接受稍微修改Python形式並生成相"
"應的C程式碼。 Cython 和 Pyrex 使編寫擴充程式成為可能，而無需學習 Python 的 C "
"API。"

#: ../../faq/extending.rst:50
#, fuzzy
msgid ""
"If you need to interface to some C or C++ library for which no Python "
"extension currently exists, you can try wrapping the library's data types "
"and functions with a tool such as `SWIG <https://www.swig.org>`_.  `SIP "
"<https://riverbankcomputing.com/software/sip/intro>`__, `CXX <https://cxx."
"sourceforge.net/>`_ `Boost <https://www.boost.org/libs/python/doc/index."
"html>`_, or `Weave <https://github.com/scipy/weave>`_ are also alternatives "
"for wrapping C++ libraries."
msgstr ""
"如果你需要連接到當前不存在 Python 擴充的某些 C 或 C++ 函式庫，你可以嘗試使用 "
"`SWIG <https://www.swig.org>`_ 等工具包裝函式庫的資料型別和函式。 `SIP "
"<https://riverbankcomputing.com/software/sip/intro>`__, `CXX <https://cxx."
"sourceforge.net/>`_ `Boost <https://www.boost.org/libs /python/doc/index."
"html>`_ 或 `Weave <https://github.com/scipy/weave>`_ 也是包裝 C++ 函式庫的替"
"代方法。"

#: ../../faq/extending.rst:61
msgid "How can I execute arbitrary Python statements from C?"
msgstr "如何從 C 執行任意 Python 陳述式？"

#: ../../faq/extending.rst:63
#, fuzzy
msgid ""
"The highest-level function to do this is :c:func:`PyRun_SimpleString` which "
"takes a single string argument to be executed in the context of the module "
"``__main__`` and returns ``0`` for success and ``-1`` when an exception "
"occurred (including :exc:`SyntaxError`).  If you want more control, use :c:"
"func:`PyRun_String`; see the source for :c:func:`PyRun_SimpleString` in "
"``Python/pythonrun.c``."
msgstr ""
"執行此操作的最高級別函式是：c:func:`PyRun_SimpleString`，它採用單個字串引數在"
"模組 ``__main__`` 的上下文中執行，並回傳 ``0`` 表示成功，``- 1`` 發生例外時"
"（包括：exc:`SyntaxError`）。如果你想要更多的控制，使用:c:func:"
"`PyRun_String`;在 ``Python/pythonrun.c`` 中查看 :c:func:`PyRun_SimpleString` "
"的源程式碼。"

#: ../../faq/extending.rst:72
#, fuzzy
msgid "How can I evaluate an arbitrary Python expression from C?"
msgstr "如何計算來自 C 的任意 Python 運算式？"

#: ../../faq/extending.rst:74
#, fuzzy
msgid ""
"Call the function :c:func:`PyRun_String` from the previous question with the "
"start symbol :c:data:`Py_eval_input`; it parses an expression, evaluates it "
"and returns its value."
msgstr ""
"呼叫上一個問題中的函式 :c:func:`PyRun_String` 開始符號 :c:data:"
"`Py_eval_input`;它解析一個運算式，對其求值並回傳它的值。"

#: ../../faq/extending.rst:80
msgid "How do I extract C values from a Python object?"
msgstr "如何從 Python 物件中提取 C 值？"

#: ../../faq/extending.rst:82
#, fuzzy
msgid ""
"That depends on the object's type.  If it's a tuple, :c:func:`PyTuple_Size` "
"returns its length and :c:func:`PyTuple_GetItem` returns the item at a "
"specified index.  Lists have similar functions, :c:func:`PyList_Size` and :c:"
"func:`PyList_GetItem`."
msgstr ""
"這取決於物件的型別。如果它是一個元組，:c:func:`PyTuple_Size` 回傳它的長度，:"
"c:func:`PyTuple_GetItem` 回傳指定索引的項目。列表具有類似的函式：c:func:"
"`PyList_Size` 和 :c:func:`PyList_GetItem`。"

#: ../../faq/extending.rst:87
#, fuzzy
msgid ""
"For bytes, :c:func:`PyBytes_Size` returns its length and :c:func:"
"`PyBytes_AsStringAndSize` provides a pointer to its value and its length.  "
"Note that Python bytes objects may contain null bytes so C's :c:func:`!"
"strlen` should not be used."
msgstr ""
"對於位元組，:c:func:`PyBytes_Size` 回傳它的長度，:c:func:"
"`PyBytes_AsStringAndSize` 提供指向它的值和長度的指標。請注意，Python 位元組物"
"件可能包含空位元組，因此不應使用 C 的 :c:func:`!strlen`。"

#: ../../faq/extending.rst:92
msgid ""
"To test the type of an object, first make sure it isn't ``NULL``, and then "
"use :c:func:`PyBytes_Check`, :c:func:`PyTuple_Check`, :c:func:"
"`PyList_Check`, etc."
msgstr ""
"要測試物件的型別，首先確保它不是 ``NULL``，然後再使用 :c:func:"
"`PyBytes_Check`、:c:func:`PyTuple_Check`、:c:func:`PyList_Check` 等函式。"

#: ../../faq/extending.rst:95
#, fuzzy
msgid ""
"There is also a high-level API to Python objects which is provided by the so-"
"called 'abstract' interface -- read ``Include/abstract.h`` for further "
"details.  It allows interfacing with any kind of Python sequence using calls "
"like :c:func:`PySequence_Length`, :c:func:`PySequence_GetItem`, etc. as well "
"as many other useful protocols such as numbers (:c:func:`PyNumber_Index` et "
"al.) and mappings in the PyMapping APIs."
msgstr ""
"還有一個針對 Python 物件的高級 API，它由所謂的「抽象」介面提供——閱讀 "
"``Include/abstract.h`` 了解更多詳細資訊。它允許使用 :c:func:"
"`PySequence_Length`、:c:func:`PySequence_GetItem` 等呼叫以及許多其他有用的協"
"議（例如數字 (:c:func:`PyNumber_Index) ` 等）和 PyMapping API 中的映射。"

#: ../../faq/extending.rst:104
msgid "How do I use Py_BuildValue() to create a tuple of arbitrary length?"
msgstr "如何使用 Py_BuildValue() 建立任意長度的元組？"

#: ../../faq/extending.rst:106
msgid "You can't.  Use :c:func:`PyTuple_Pack` instead."
msgstr "這無法做到。請改用 :c:func:`PyTuple_Pack`。"

#: ../../faq/extending.rst:110
msgid "How do I call an object's method from C?"
msgstr "如何從 C 呼叫物件的方法？"

#: ../../faq/extending.rst:112
#, fuzzy
msgid ""
"The :c:func:`PyObject_CallMethod` function can be used to call an arbitrary "
"method of an object.  The parameters are the object, the name of the method "
"to call, a format string like that used with :c:func:`Py_BuildValue`, and "
"the argument values::"
msgstr ""
":c:func:`PyObject_CallMethod` 函式可用於呼叫物件的任意方法。參數是物件、要呼"
"叫的方法的名稱、與 :c:func:`Py_BuildValue` 一起使用的格式字串，以及引數值：\n"
"\n"
"::"

#: ../../faq/extending.rst:121
#, fuzzy
msgid ""
"This works for any object that has methods -- whether built-in or user-"
"defined. You are responsible for eventually :c:func:`Py_DECREF`\\ 'ing the "
"return value."
msgstr ""
"這適用於任何具有方法的物件——無論是內建的還是使用者定義的。你負責最終 :c:func:"
"`Py_DECREF`\\ 'ing 回傳值。"

#: ../../faq/extending.rst:124
msgid ""
"To call, e.g., a file object's \"seek\" method with arguments 10, 0 "
"(assuming the file object pointer is \"f\")::"
msgstr ""
"例如，使用引數 10、0 呼叫檔案物件的 \"seek\" 方法（假設檔案物件指標為 "
"\"f\"）：\n"
"\n"
"::"

#: ../../faq/extending.rst:135
#, fuzzy
msgid ""
"Note that since :c:func:`PyObject_CallObject` *always* wants a tuple for the "
"argument list, to call a function without arguments, pass \"()\" for the "
"format, and to call a function with one argument, surround the argument in "
"parentheses, e.g. \"(i)\"."
msgstr ""
"請注意，由於 :c:func:`PyObject_CallObject` *總是* 需要一個元組作為引數列表，"
"呼叫一個不帶引數的函式，傳遞 \"()\" 作為格式，並呼叫一個帶有一個引數的函式，"
"將參數括起來在括號中，例如 \"(i)\"。"

#: ../../faq/extending.rst:142
msgid ""
"How do I catch the output from PyErr_Print() (or anything that prints to "
"stdout/stderr)?"
msgstr "我如何捕捉 PyErr_Print() 的輸出（或任何印出到 stdout/stderr 的東西）？"

#: ../../faq/extending.rst:144
#, fuzzy
msgid ""
"In Python code, define an object that supports the ``write()`` method.  "
"Assign this object to :data:`sys.stdout` and :data:`sys.stderr`.  Call "
"print_error, or just allow the standard traceback mechanism to work. Then, "
"the output will go wherever your ``write()`` method sends it."
msgstr ""
"在 Python 程式碼中，定義一個支援 ``write()`` 方法的物件。將此物件分配給 :"
"data:`sys.stdout` 和 :data:`sys.stderr`。呼叫 print_error，或者只允許標準的回"
"溯機制起作用。然後，輸出將到達你的 ``write()`` 方法發送它的任何地方。"

#: ../../faq/extending.rst:149
msgid "The easiest way to do this is to use the :class:`io.StringIO` class:"
msgstr "最簡單的方法是使用 :class:`io.StringIO` 類別："

#: ../../faq/extending.rst:161
#, fuzzy
msgid "A custom object to do the same would look like this:"
msgstr "執行相同操作的自定義物件如下所示："

#: ../../faq/extending.rst:182
msgid "How do I access a module written in Python from C?"
msgstr "如何從 C 存取用 Python 編寫的模組？"

#: ../../faq/extending.rst:184
#, fuzzy
msgid "You can get a pointer to the module object as follows::"
msgstr ""
"你可以獲得指向模組物件的指標，如下所示：\n"
"\n"
"::"

#: ../../faq/extending.rst:188
#, fuzzy
msgid ""
"If the module hasn't been imported yet (i.e. it is not yet present in :data:"
"`sys.modules`), this initializes the module; otherwise it simply returns the "
"value of ``sys.modules[\"<modulename>\"]``.  Note that it doesn't enter the "
"module into any namespace -- it only ensures it has been initialized and is "
"stored in :data:`sys.modules`."
msgstr ""
"如果模組還沒有被引入（即它還沒有出現在 :data:`sys.modules` 中），這會初始化模"
"組；否則它只回傳 ``sys.modules[\"<modulename>\"]`` 的值。請注意，它不會將模組"
"輸入任何命名空間——它只會確保它已被初始化並存儲在 :data:`sys.modules` 中。"

#: ../../faq/extending.rst:194
#, fuzzy
msgid ""
"You can then access the module's attributes (i.e. any name defined in the "
"module) as follows::"
msgstr ""
"然後，你可以存取模組的屬性（即模組中定義的任何名稱），如下所示：\n"
"\n"
"::"

#: ../../faq/extending.rst:199
#, fuzzy
msgid ""
"Calling :c:func:`PyObject_SetAttrString` to assign to variables in the "
"module also works."
msgstr "呼叫 :c:func:`PyObject_SetAttrString` 以分配給模組中的變數也可以。"

#: ../../faq/extending.rst:204
#, fuzzy
msgid "How do I interface to C++ objects from Python?"
msgstr "我如何從 Python 連接到 C++ 物件？"

#: ../../faq/extending.rst:206
#, fuzzy
msgid ""
"Depending on your requirements, there are many approaches.  To do this "
"manually, begin by reading :ref:`the \"Extending and Embedding\" document "
"<extending-index>`.  Realize that for the Python run-time system, there "
"isn't a whole lot of difference between C and C++ -- so the strategy of "
"building a new Python type around a C structure (pointer) type will also "
"work for C++ objects."
msgstr ""
"根據你的要求，有多種方法。要手動執行此操作，請先閱讀 :ref:`「擴充和嵌入」說明"
"檔案 <extending-index>`。意識到對於 Python 執行環境 (run-time) 系統，C 和 C+"
"+ 之間並沒有太多區別——因此圍繞 C 結構（指標）型別構建新 Python 型別的策略也適"
"用於 C++ 物件。"

#: ../../faq/extending.rst:212
msgid "For C++ libraries, see :ref:`c-wrapper-software`."
msgstr "對於 C++ 函式庫，請參閱 :ref:`c-wrapper-software`。"

#: ../../faq/extending.rst:216
msgid "I added a module using the Setup file and the make fails; why?"
msgstr "我使用安裝檔案新增了一個模組，但 make 失敗了；為什麼？"

#: ../../faq/extending.rst:218
#, fuzzy
msgid ""
"Setup must end in a newline, if there is no newline there, the build process "
"fails.  (Fixing this requires some ugly shell script hackery, and this bug "
"is so minor that it doesn't seem worth the effort.)"
msgstr ""
"安裝程式必須以換行符結尾，如果那裡沒有換行符，構建過程將失敗。 （解決這個問題"
"需要一些醜陋的 shell 腳本 hackery，而且這個錯誤很小，似乎不值得付出努力。）"

#: ../../faq/extending.rst:224
msgid "How do I debug an extension?"
msgstr "如何為擴充套件除錯？"

#: ../../faq/extending.rst:226
#, fuzzy
msgid ""
"When using GDB with dynamically loaded extensions, you can't set a "
"breakpoint in your extension until your extension is loaded."
msgstr ""
"將 GDB 與動態載入的擴充一起使用時，在載入擴充之前不能在擴充中設定斷點。"

#: ../../faq/extending.rst:229
#, fuzzy
msgid "In your ``.gdbinit`` file (or interactively), add the command:"
msgstr "在你的 ``.gdbinit`` 檔案中（或交互地），新增命令："

#: ../../faq/extending.rst:235
msgid "Then, when you run GDB:"
msgstr "然後，當你運行 GDB 時："

#: ../../faq/extending.rst:247
msgid ""
"I want to compile a Python module on my Linux system, but some files are "
"missing. Why?"
msgstr ""
"我想在我的 Linux 系統上編譯一個 Python 模組，但是缺少一些檔案。為什麼？"

#: ../../faq/extending.rst:249
#, fuzzy
msgid ""
"Most packaged versions of Python don't include the :file:`/usr/lib/python2."
"{x}/config/` directory, which contains various files required for compiling "
"Python extensions."
msgstr ""
"大多數打包版本的 Python 不包含 :file:`/usr/lib/python2.{x}/config/` 目錄，該"
"目錄包含編譯 Python 擴充所需的各種檔案。"

#: ../../faq/extending.rst:253
msgid "For Red Hat, install the python-devel RPM to get the necessary files."
msgstr "在 Red Hat 上，請安裝 python-devel RPM 來取得必要的檔案。"

#: ../../faq/extending.rst:255
msgid "For Debian, run ``apt-get install python-dev``."
msgstr "對於 Debian，運行 ``apt-get install python-dev``。"

#: ../../faq/extending.rst:258
msgid "How do I tell \"incomplete input\" from \"invalid input\"?"
msgstr "如何從「無效輸入」區分出「不完整輸入」？"

#: ../../faq/extending.rst:260
#, fuzzy
msgid ""
"Sometimes you want to emulate the Python interactive interpreter's behavior, "
"where it gives you a continuation prompt when the input is incomplete (e.g. "
"you typed the start of an \"if\" statement or you didn't close your "
"parentheses or triple string quotes), but it gives you a syntax error "
"message immediately when the input is invalid."
msgstr ""
"有時你想模擬 Python 交互式直譯器的行為，當輸入不完整時它會給你一個繼續提示"
"（例如，你鍵入了 \"if\" 陳述句的開頭或者你沒有關閉你的括號或三重字串引號），"
"但是當輸入無效時，它會立即為你提供語法錯誤消息。"

#: ../../faq/extending.rst:266
msgid ""
"In Python you can use the :mod:`codeop` module, which approximates the "
"parser's behavior sufficiently.  IDLE uses this, for example."
msgstr ""
"在 Python 中，你可以使用 :mod:`codeop` 模組，它充分模擬了剖析器 (parser) 的行"
"為。像是 IDLE 就有使用它。"

#: ../../faq/extending.rst:269
#, fuzzy
msgid ""
"The easiest way to do it in C is to call :c:func:`PyRun_InteractiveLoop` "
"(perhaps in a separate thread) and let the Python interpreter handle the "
"input for you. You can also set the :c:func:`PyOS_ReadlineFunctionPointer` "
"to point at your custom input function. See ``Modules/readline.c`` and "
"``Parser/myreadline.c`` for more hints."
msgstr ""
"在 C 中執行此操作的最簡單方法是呼叫：c:func:`PyRun_InteractiveLoop`（可能在單"
"獨的執行緒中）並讓 Python 直譯器為你處理輸入。你還可以將 :c:func:"
"`PyOS_ReadlineFunctionPointer` 設定為指向你的自定義輸入函式。有關更多提示，請"
"參閱``Modules/readline.c`` 和``Parser/myreadline.c``。"

#: ../../faq/extending.rst:276
msgid "How do I find undefined g++ symbols __builtin_new or __pure_virtual?"
msgstr "如何找到未定義的 g++ 符號 __builtin_new 或 __pure_virtual？"

#: ../../faq/extending.rst:278
#, fuzzy
msgid ""
"To dynamically load g++ extension modules, you must recompile Python, relink "
"it using g++ (change LINKCC in the Python Modules Makefile), and link your "
"extension module using g++ (e.g., ``g++ -shared -o mymodule.so mymodule.o``)."
msgstr ""
"要動態載入 g++ 擴充模組，你必須重新編譯 Python，使用 g++ 重新鏈接它（更改 "
"Python 模組 Makefile 中的 LINKCC），並使用 g++ 鏈接你的擴充模組（例如，``g++ "
"-shared -o mymodule.so mymodule.o` `）。"

#: ../../faq/extending.rst:284
#, fuzzy
msgid ""
"Can I create an object class with some methods implemented in C and others "
"in Python (e.g. through inheritance)?"
msgstr ""
"我可以用一些用 C 實作的方法和用 Python 實作的其他方法（例如通過繼承）建立一個"
"物件類別嗎？"

#: ../../faq/extending.rst:286
msgid ""
"Yes, you can inherit from built-in classes such as :class:`int`, :class:"
"`list`, :class:`dict`, etc."
msgstr ""
"是的，你可以繼承內建類別，例如 :class:`int`、:class:`list`、:class:`dict` "
"等。"

#: ../../faq/extending.rst:289
msgid ""
"The Boost Python Library (BPL, https://www.boost.org/libs/python/doc/index."
"html) provides a way of doing this from C++ (i.e. you can inherit from an "
"extension class written in C++ using the BPL)."
msgstr ""
"Boost Python 函式庫（BPL，https://www.boost.org/libs/python/doc/index.html）"
"提供了一種從 C++ 執行此操作的方法（即你可以使用 BPL 來繼承用 C++ 編寫的擴充類"
"別）。"
