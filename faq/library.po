# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# jerrychen <jerrychen.ee@gmail.com>, 2016
# Ching-Lung Chuang, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-20 00:03+0000\n"
"PO-Revision-Date: 2023-02-18 13:22+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../faq/library.rst:5
msgid "Library and Extension FAQ"
msgstr "函式庫和擴充功能的常見問題"

#: ../../faq/library.rst:8
msgid "Contents"
msgstr "目錄"

#: ../../faq/library.rst:12
msgid "General Library Questions"
msgstr "常見函式問題"

#: ../../faq/library.rst:15
msgid "How do I find a module or application to perform task X?"
msgstr "我如何找到執行任務 X 的模組或應用程式？"

#: ../../faq/library.rst:17
#, fuzzy
msgid ""
"Check :ref:`the Library Reference <library-index>` to see if there's a "
"relevant standard library module.  (Eventually you'll learn what's in the "
"standard library and will be able to skip this step.)"
msgstr ""
"檢查 :ref:`函式庫參考 <library-index>` 以查看是否有相關的標準函式庫模組。 "
"（最終你將了解標準函式庫中的內容，並且能夠跳過這一步。）"

#: ../../faq/library.rst:21
#, fuzzy
msgid ""
"For third-party packages, search the `Python Package Index <https://pypi."
"org>`_ or try `Google <https://www.google.com>`_ or another web search "
"engine.  Searching for \"Python\" plus a keyword or two for your topic of "
"interest will usually find something helpful."
msgstr ""
"對於第三方包，搜索`Python 包索引<https://pypi.org>`_ 或嘗試`Google <https://"
"www.google.com>`_ 或其他網路搜索引擎。搜索 \"Python\" 加上你感興趣的主題的一"
"兩個關鍵字通常會找到有用的東西。"

#: ../../faq/library.rst:28
msgid "Where is the math.py (socket.py, regex.py, etc.) source file?"
msgstr "哪裡可以找到 math.py (socket.py, regex.py, 等...) 來源檔案？"

#: ../../faq/library.rst:30
#, fuzzy
msgid ""
"If you can't find a source file for a module it may be a built-in or "
"dynamically loaded module implemented in C, C++ or other compiled language. "
"In this case you may not have the source file or it may be something like :"
"file:`mathmodule.c`, somewhere in a C source directory (not on the Python "
"Path)."
msgstr ""
"如果找不到模組的源檔案，它可能是用 C、C++ 或其他編譯語言實作的內置或動態載入"
"的模組。在這種情況下，你可能沒有源檔案，或者它可能類似於 :file:`mathmodule."
"c`，位於 C 源目錄中（不在 Python 路徑中）。"

#: ../../faq/library.rst:35
msgid "There are (at least) three kinds of modules in Python:"
msgstr "有（至少）三種 Python 模組："

#: ../../faq/library.rst:37
msgid "modules written in Python (.py);"
msgstr "以 Python 編寫的模組 (.py)；"

#: ../../faq/library.rst:38
msgid ""
"modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);"
msgstr "用 C 編寫並動態載入的模組（.dll、.pyd、.so、.sl 等）；"

#: ../../faq/library.rst:39
msgid ""
"modules written in C and linked with the interpreter; to get a list of "
"these, type::"
msgstr "用 C 編寫並與直譯器鏈接的模組；要獲得這些 list，請輸入： ::"

#: ../../faq/library.rst:47
msgid "How do I make a Python script executable on Unix?"
msgstr "我如何使 Python script 執行在 Unix？"

#: ../../faq/library.rst:49
#, fuzzy
msgid ""
"You need to do two things: the script file's mode must be executable and the "
"first line must begin with ``#!`` followed by the path of the Python "
"interpreter."
msgstr ""
"你需要作兩件事：腳本程式必須可以被執行而且第一行必須 ``#!`` 開頭後面接上 "
"Python 直譯器的路徑。"

#: ../../faq/library.rst:53
#, fuzzy
msgid ""
"The first is done by executing ``chmod +x scriptfile`` or perhaps ``chmod "
"755 scriptfile``."
msgstr ""
"第一個是通過執行 ``chmod +x scriptfile`` 或者 ``chmod 755 scriptfile`` 來完成"
"的。"

#: ../../faq/library.rst:56
#, fuzzy
msgid ""
"The second can be done in a number of ways.  The most straightforward way is "
"to write ::"
msgstr "第二個可以通過多種方式完成。最直接的方法是寫： ::"

#: ../../faq/library.rst:61
#, fuzzy
msgid ""
"as the very first line of your file, using the pathname for where the Python "
"interpreter is installed on your platform."
msgstr "作為檔案的第一行，使用 Python 直譯器在你的平台上的安裝位置的路徑名。"

#: ../../faq/library.rst:64
#, fuzzy
msgid ""
"If you would like the script to be independent of where the Python "
"interpreter lives, you can use the :program:`env` program.  Almost all Unix "
"variants support the following, assuming the Python interpreter is in a "
"directory on the user's :envvar:`PATH`::"
msgstr ""
"如果你希望腳本獨立於 Python 直譯器所在的位置，你可以使用 :program:`env` 程"
"式。幾乎所有 Unix 變體都支援以下內容，假設 Python 直譯器位於使用者的 :envvar:"
"`PATH` 上的目錄中： ::"

#: ../../faq/library.rst:71
#, fuzzy
msgid ""
"*Don't* do this for CGI scripts.  The :envvar:`PATH` variable for CGI "
"scripts is often very minimal, so you need to use the actual absolute "
"pathname of the interpreter."
msgstr ""
"*不要*對 CGI 腳本執行此操作。 CGI 腳本的 :envvar:`PATH` 變數通常非常小，因此"
"你需要使用直譯器的實際絕對路徑名。"

#: ../../faq/library.rst:75
#, fuzzy
msgid ""
"Occasionally, a user's environment is so full that the :program:`/usr/bin/"
"env` program fails; or there's no env program at all.  In that case, you can "
"try the following hack (due to Alex Rezinsky):"
msgstr ""
"有時，使用者的環境太滿以至於:program:`/usr/bin/env` 程式失敗；或者根本就沒有 "
"env 程式。在這種情況下，你可以嘗試以下 hack（由於 Alex Rezinsky）："

#: ../../faq/library.rst:86
#, fuzzy
msgid ""
"The minor disadvantage is that this defines the script's __doc__ string. "
"However, you can fix that by adding ::"
msgstr ""
"次要缺點是這定義了腳本的 __doc__ 字串。但是，你可以通過新增來解決這個問"
"題： ::"

#: ../../faq/library.rst:94
msgid "Is there a curses/termcap package for Python?"
msgstr "是否有適用於 Python 的 curses/termcap 套件？"

#: ../../faq/library.rst:98
#, fuzzy
msgid ""
"For Unix variants: The standard Python source distribution comes with a "
"curses module in the :source:`Modules` subdirectory, though it's not "
"compiled by default. (Note that this is not available in the Windows "
"distribution -- there is no curses module for Windows.)"
msgstr ""
"對於 Unix 變體：標準 Python 源程式碼分發版在 :source:`Modules` 子目錄中附帶一"
"個 curses 模組，但預設情況下未編譯它。（請注意，這在 Windows 發行版中不可用——"
"沒有適用於 Windows 的 curses 模組。）"

#: ../../faq/library.rst:103
#, fuzzy
msgid ""
"The :mod:`curses` module supports basic curses features as well as many "
"additional functions from ncurses and SYSV curses such as colour, "
"alternative character set support, pads, and mouse support. This means the "
"module isn't compatible with operating systems that only have BSD curses, "
"but there don't seem to be any currently maintained OSes that fall into this "
"category."
msgstr ""
":mod:`curses` 模組支援基本的 curses 功能以及 ncurses 和 SYSV curses 的許多附"
"加功能，例如顏色、替代字元集支援、鍵盤和鼠標支援。這意味著該模組與僅具有 BSD "
"curses 的作業系統不相容，但似乎沒有任何當前維護的作業系統屬於此類型。"

#: ../../faq/library.rst:111
#, fuzzy
msgid "Is there an equivalent to C's onexit() in Python?"
msgstr "Python 中是否有等同於 C 的 onexit() 的函式？"

#: ../../faq/library.rst:113
#, fuzzy
msgid ""
"The :mod:`atexit` module provides a register function that is similar to "
"C's :c:func:`!onexit`."
msgstr ""
":mod:`atexit` 模組提供了一個類似於 C 的 :c:func:`onexit` 的寄存器函式。"

#: ../../faq/library.rst:118
#, fuzzy
msgid "Why don't my signal handlers work?"
msgstr "為什麼我的信號處理程式不起作用？"

#: ../../faq/library.rst:120
#, fuzzy
msgid ""
"The most common problem is that the signal handler is declared with the "
"wrong argument list.  It is called as ::"
msgstr "最常見的問題是信號處理程式是用錯誤的引數列表聲明的。它被稱為： ::"

#: ../../faq/library.rst:125
#, fuzzy
msgid "so it should be declared with two parameters::"
msgstr "所以它應該用兩個參數聲明： ::"

#: ../../faq/library.rst:132
msgid "Common tasks"
msgstr "常見課題"

#: ../../faq/library.rst:135
msgid "How do I test a Python program or component?"
msgstr "如何測試 Python 程式或元件？"

#: ../../faq/library.rst:137
#, fuzzy
msgid ""
"Python comes with two testing frameworks.  The :mod:`doctest` module finds "
"examples in the docstrings for a module and runs them, comparing the output "
"with the expected output given in the docstring."
msgstr ""
"Python 帶有兩個測試框架。 :mod:`doctest` 模組在模組的文檔字串中查詢示例並運行"
"它們，將輸出與文檔字串中給出的預期輸出進行比較。"

#: ../../faq/library.rst:141
#, fuzzy
msgid ""
"The :mod:`unittest` module is a fancier testing framework modelled on Java "
"and Smalltalk testing frameworks."
msgstr ""
":mod:`unittest` 模組是一個更高階的測試框架，它以 Java 和 Smalltalk 測試框架為"
"模型。"

#: ../../faq/library.rst:144
#, fuzzy
msgid ""
"To make testing easier, you should use good modular design in your program. "
"Your program should have almost all functionality encapsulated in either "
"functions or class methods -- and this sometimes has the surprising and "
"delightful effect of making the program run faster (because local variable "
"accesses are faster than global accesses).  Furthermore the program should "
"avoid depending on mutating global variables, since this makes testing much "
"more difficult to do."
msgstr ""
"為了使測試更容易，你應該在程式中使用良好的模組化設計。你的程式應該將幾乎所有"
"功能都封裝在函式或類別方法中——這有時會產生使程式運行得更快的令人驚訝和令人愉"
"快的效果（因為局部變數存取比全局存取更快）。此外，該程式應避免依賴於可變的全"
"局變數，因為這會使測試變得更加困難。"

#: ../../faq/library.rst:152
#, fuzzy
msgid "The \"global main logic\" of your program may be as simple as ::"
msgstr "你程式的「全局主邏輯」可能像一樣簡單： ::"

#: ../../faq/library.rst:157
#, fuzzy
msgid "at the bottom of the main module of your program."
msgstr "在你的程式主模組的底端。"

#: ../../faq/library.rst:159
#, fuzzy
msgid ""
"Once your program is organized as a tractable collection of function and "
"class behaviours, you should write test functions that exercise the "
"behaviours.  A test suite that automates a sequence of tests can be "
"associated with each module. This sounds like a lot of work, but since "
"Python is so terse and flexible it's surprisingly easy.  You can make coding "
"much more pleasant and fun by writing your test functions in parallel with "
"the \"production code\", since this makes it easy to find bugs and even "
"design flaws earlier."
msgstr ""
"一旦你的程式被組織為函式和類別行為的易於處理的集合，你就應該編寫測試函式來執"
"行這些行為。可將一系列測試自動化的測試套件與每個模組相關聯。這聽起來像是很多"
"工作，但由於 Python 如此簡潔和靈活，所以它非常容易。通過與 \"生產程式碼\" 並"
"行編寫測試函式，你可以使編碼變得更加愉快和有趣，因為這使得更早地發現錯誤甚至"
"設計缺陷變得容易。"

#: ../../faq/library.rst:167
#, fuzzy
msgid ""
"\"Support modules\" that are not intended to be the main module of a program "
"may include a self-test of the module. ::"
msgstr "不打算成為程式主要模組的 \"支援模組\" 可能包括模組的自檢： ::"

#: ../../faq/library.rst:173
#, fuzzy
msgid ""
"Even programs that interact with complex external interfaces may be tested "
"when the external interfaces are unavailable by using \"fake\" interfaces "
"implemented in Python."
msgstr ""
"即使是與復雜外部介面交互的程式也可以在外部介面不可用時通過使用 Python 中實作"
"的 \"假\" 介面進行測試。"

#: ../../faq/library.rst:179
#, fuzzy
msgid "How do I create documentation from doc strings?"
msgstr "如何從文檔字串建立文檔？"

#: ../../faq/library.rst:181
#, fuzzy
msgid ""
"The :mod:`pydoc` module can create HTML from the doc strings in your Python "
"source code.  An alternative for creating API documentation purely from "
"docstrings is `epydoc <https://epydoc.sourceforge.net/>`_.  `Sphinx <https://"
"www.sphinx-doc.org>`_ can also include docstring content."
msgstr ""
":mod:`pydoc` 模組可以從 Python 源程式碼中的文檔字串建立 HTML。純粹從文檔字串"
"建立 API 文檔的另一種方法是 `epydoc <https://epydoc.sourceforge.net/>`_。 "
"`Sphinx <https://www.sphinx-doc.org>`_ 也可以包含文檔字串內容。"

#: ../../faq/library.rst:188
#, fuzzy
msgid "How do I get a single keypress at a time?"
msgstr "我如何一次獲得一個按鍵？"

#: ../../faq/library.rst:190
#, fuzzy
msgid ""
"For Unix variants there are several solutions.  It's straightforward to do "
"this using curses, but curses is a fairly large module to learn."
msgstr ""
"對於 Unix 變體，有幾種解決方案。使用 curses 執行此操作很簡單，但 curses 是一"
"個需要學習的相當大的模組。"

#: ../../faq/library.rst:234
msgid "Threads"
msgstr "執行緒"

#: ../../faq/library.rst:237
msgid "How do I program using threads?"
msgstr "如何使用執行緒編寫程式？"

#: ../../faq/library.rst:239
#, fuzzy
msgid ""
"Be sure to use the :mod:`threading` module and not the :mod:`_thread` "
"module. The :mod:`threading` module builds convenient abstractions on top of "
"the low-level primitives provided by the :mod:`_thread` module."
msgstr ""
"請務必使用 :mod:`threading` 模組而不是 :mod:`_thread` 模組。 :mod:"
"`threading` 模組在 :mod:`_thread` 模組提供的低階原語之上構建方便的抽象。"

#: ../../faq/library.rst:245
msgid "None of my threads seem to run: why?"
msgstr "我的執行緒似乎都沒有運行：為什麼？"

#: ../../faq/library.rst:247
#, fuzzy
msgid ""
"As soon as the main thread exits, all threads are killed.  Your main thread "
"is running too quickly, giving the threads no time to do any work."
msgstr ""
"一旦主執行緒退出，所有執行緒都會被殺死。你的主執行緒運行得太快，執行緒沒有時"
"間做任何工作。"

#: ../../faq/library.rst:250
#, fuzzy
msgid ""
"A simple fix is to add a sleep to the end of the program that's long enough "
"for all the threads to finish::"
msgstr ""
"一個簡單的修復方法是在程式末尾新增一個足夠長的睡眠，讓所有執行緒都完成： ::"

#: ../../faq/library.rst:265
#, fuzzy
msgid ""
"But now (on many platforms) the threads don't run in parallel, but appear to "
"run sequentially, one at a time!  The reason is that the OS thread scheduler "
"doesn't start a new thread until the previous thread is blocked."
msgstr ""
"但是現在（在許多平台上）執行緒不是並行運行的，而是看起來是順序運行的，一次一"
"個！原因是作業系統執行緒調度程式在前一個執行緒被阻塞之前不會啟動一個新執行"
"緒。"

#: ../../faq/library.rst:269
#, fuzzy
msgid "A simple fix is to add a tiny sleep to the start of the run function::"
msgstr "一個簡單的修復方法是在運行函式的開頭新增一個小睡眠： ::"

#: ../../faq/library.rst:282
#, fuzzy
msgid ""
"Instead of trying to guess a good delay value for :func:`time.sleep`, it's "
"better to use some kind of semaphore mechanism.  One idea is to use the :mod:"
"`queue` module to create a queue object, let each thread append a token to "
"the queue when it finishes, and let the main thread read as many tokens from "
"the queue as there are threads."
msgstr ""
"與其嘗試為 :func:`time.sleep` 猜測一個好的延遲值，不如使用某種信號量機制。一"
"種想法是使用 :mod:`queue` 模組建立一個隊列物件，讓每個執行緒在完成時向隊列新"
"增一個權杖，並讓主執行緒從隊列中讀取與執行緒數一樣多的權杖。"

#: ../../faq/library.rst:290
#, fuzzy
msgid "How do I parcel out work among a bunch of worker threads?"
msgstr "我如何在一堆工作執行緒中分配工作？"

#: ../../faq/library.rst:292
#, fuzzy
msgid ""
"The easiest way is to use the :mod:`concurrent.futures` module, especially "
"the :mod:`~concurrent.futures.ThreadPoolExecutor` class."
msgstr ""
"最簡單的方法是使用 :mod:`concurrent.futures` 模組，尤其是 :mod:`~concurrent."
"futures.ThreadPoolExecutor` 類別。"

#: ../../faq/library.rst:295
#, fuzzy
msgid ""
"Or, if you want fine control over the dispatching algorithm, you can write "
"your own logic manually.  Use the :mod:`queue` module to create a queue "
"containing a list of jobs.  The :class:`~queue.Queue` class maintains a list "
"of objects and has a ``.put(obj)`` method that adds items to the queue and a "
"``.get()`` method to return them.  The class will take care of the locking "
"necessary to ensure that each job is handed out exactly once."
msgstr ""
"或者，如果你想對調度演算法進行精細控制，你可以手動編寫自己的邏輯。使用 :mod:"
"`queue` 模組建立一個包含作業列表的隊列。 :class:`~queue.Queue` 類別維護一個物"
"件列表，並有一個 `.put(obj)`` 方法將項目新增到隊列和一個 ``.get()`` 方法回傳"
"它們。該類別將負責必要的鎖定，以確保每個作業都恰好分發一次。"

#: ../../faq/library.rst:302
#, fuzzy
msgid "Here's a trivial example::"
msgstr "這是一個簡單的例子： ::"

#: ../../faq/library.rst:340
#, fuzzy
msgid "When run, this will produce the following output:"
msgstr "運行時，這將產生以下輸出："

#: ../../faq/library.rst:358
#, fuzzy
msgid ""
"Consult the module's documentation for more details; the :class:`~queue."
"Queue` class provides a featureful interface."
msgstr ""
"有關更多詳細資訊，請參閱模組的文檔； :class:`~queue.Queue` 類別提供了一個功能"
"強大的介面。"

#: ../../faq/library.rst:363
#, fuzzy
msgid "What kinds of global value mutation are thread-safe?"
msgstr "什麼樣的全局值突變是執行緒安全的？"

#: ../../faq/library.rst:365
#, fuzzy
msgid ""
"A :term:`global interpreter lock` (GIL) is used internally to ensure that "
"only one thread runs in the Python VM at a time.  In general, Python offers "
"to switch among threads only between bytecode instructions; how frequently "
"it switches can be set via :func:`sys.setswitchinterval`.  Each bytecode "
"instruction and therefore all the C implementation code reached from each "
"instruction is therefore atomic from the point of view of a Python program."
msgstr ""
"內部使用 :term:`全局直譯器鎖 (GIL, global interpreter lock)`\\ 來確保一次只有"
"一個執行緒在 Python VM 中運行。通常，Python 僅提供位元組碼指令之間的執行緒切"
"換；可以通過 :func:`sys.setswitchinterval` 設定它切換的頻率。因此，從 Python "
"程式的角度來看，每條位元組碼指令以及從每條指令到達的所有 C 實作程式碼都是原子"
"的。"

#: ../../faq/library.rst:372
#, fuzzy
msgid ""
"In theory, this means an exact accounting requires an exact understanding of "
"the PVM bytecode implementation.  In practice, it means that operations on "
"shared variables of built-in data types (ints, lists, dicts, etc) that "
"\"look atomic\" really are."
msgstr ""
"從理論上講，這意味著準確的記賬需要對 PVM 位元組碼實作有準確的理解。實際上，這"
"意味著對 \"看起來原子\" 的內置資料型別（整數、列表、字典等）的共享變數的操作"
"確實是原子的。"

#: ../../faq/library.rst:377
#, fuzzy
msgid ""
"For example, the following operations are all atomic (L, L1, L2 are lists, "
"D, D1, D2 are dicts, x, y are objects, i, j are ints)::"
msgstr ""
"例如，以下操作都是原子的（L、L1、L2 是列表，D、D1、D2 是字典，x、y 是物件，"
"i、j 是整數）： ::"

#: ../../faq/library.rst:392
#, fuzzy
msgid "These aren't::"
msgstr "這些不是： ::"

#: ../../faq/library.rst:399
#, fuzzy
msgid ""
"Operations that replace other objects may invoke those other objects' :meth:"
"`~object.__del__` method when their reference count reaches zero, and that "
"can affect things.  This is especially true for the mass updates to "
"dictionaries and lists.  When in doubt, use a mutex!"
msgstr ""
"替換其他物件的操作可能會在引用計數達到零時呼叫其他物件的 :meth:`__del__` 方"
"法，這可能會影響事情。對於字典和列表的大量更新尤其如此。如有疑問，請使用互斥"
"體！"

#: ../../faq/library.rst:406
msgid "Can't we get rid of the Global Interpreter Lock?"
msgstr "不能擺脫全局直譯器鎖嗎？"

#: ../../faq/library.rst:410
#, fuzzy
msgid ""
"The :term:`global interpreter lock` (GIL) is often seen as a hindrance to "
"Python's deployment on high-end multiprocessor server machines, because a "
"multi-threaded Python program effectively only uses one CPU, due to the "
"insistence that (almost) all Python code can only run while the GIL is held."
msgstr ""
":term:`global interpreter lock` (GIL) 通常被視為 Python 在高端多處理器服務器"
"機器上部署的障礙，因為多執行緒 Python 程式實際上只使用一個 CPU，因為堅持（幾"
"乎）所有 Python 程式碼只能在持有 GIL 的情況下運行。"

#: ../../faq/library.rst:415
#, fuzzy
msgid ""
"Back in the days of Python 1.5, Greg Stein actually implemented a "
"comprehensive patch set (the \"free threading\" patches) that removed the "
"GIL and replaced it with fine-grained locking.  Adam Olsen recently did a "
"similar experiment in his `python-safethread <https://code.google.com/"
"archive/p/python-safethread>`_ project.  Unfortunately, both experiments "
"exhibited a sharp drop in single-thread performance (at least 30% slower), "
"due to the amount of fine-grained locking necessary to compensate for the "
"removal of the GIL."
msgstr ""
"回到 Python 1.5 時代，Greg Stein 實際上實作了一個全面的補丁集（ \"自由執行緒"
"\" 補丁），刪除了 GIL 並用細粒度鎖定取而代之。 Adam Olsen 最近在他的 `python-"
"safethread <https://code.google.com/archive/p/python-safethread>`_ 項目中做了"
"一個類似的實驗。不幸的是，這兩個實驗都表現出單執行緒性能的急劇下降（至少慢了 "
"30%），這是由於需要大量的細粒度鎖定來補償 GIL 的移除。"

#: ../../faq/library.rst:423
#, fuzzy
msgid ""
"This doesn't mean that you can't make good use of Python on multi-CPU "
"machines! You just have to be creative with dividing the work up between "
"multiple *processes* rather than multiple *threads*.  The :class:"
"`~concurrent.futures.ProcessPoolExecutor` class in the new :mod:`concurrent."
"futures` module provides an easy way of doing so; the :mod:`multiprocessing` "
"module provides a lower-level API in case you want more control over "
"dispatching of tasks."
msgstr ""
"這並不意味著你不能在多 CPU 機器上用好 Python！你只需要創造性地將工作分配給多"
"個*行程*而​​不是多個*執行緒*。新的 :mod:`concurrent.futures` 模組中的 :class:"
"`~concurrent.futures.ProcessPoolExecutor` 類別提供了一種簡單的方法； :mod:"
"`multiprocessing` 模組提供了一個較低階別的 API，以防你希望更好地控制任務的調"
"度。"

#: ../../faq/library.rst:431
#, fuzzy
msgid ""
"Judicious use of C extensions will also help; if you use a C extension to "
"perform a time-consuming task, the extension can release the GIL while the "
"thread of execution is in the C code and allow other threads to get some "
"work done.  Some standard library modules such as :mod:`zlib` and :mod:"
"`hashlib` already do this."
msgstr ""
"明智地使用 C 擴充也會有所幫助；如果你使用 C 擴充來執行耗時任務，則該擴充可以"
"在執行執行緒在 C 程式碼中時釋放 GIL，並允許其他執行緒完成一些工作。一些標準函"
"式庫模組，例如 :mod:`zlib` 和 :mod:`hashlib` 已經這樣做了。"

#: ../../faq/library.rst:437
#, fuzzy
msgid ""
"It has been suggested that the GIL should be a per-interpreter-state lock "
"rather than truly global; interpreters then wouldn't be able to share "
"objects. Unfortunately, this isn't likely to happen either.  It would be a "
"tremendous amount of work, because many object implementations currently "
"have global state. For example, small integers and short strings are cached; "
"these caches would have to be moved to the interpreter state.  Other object "
"types have their own free list; these free lists would have to be moved to "
"the interpreter state. And so on."
msgstr ""
"有人建議 GIL 應該是每個直譯器狀態鎖，而不是真正的全局鎖；口譯員將無法共享物"
"件。不幸的是，這也不太可能發生。這將是一項巨大的工作量，因為目前許多物件實作"
"都具有全局狀態。例如，快取小整數和短字串；這些快取必須移至直譯器狀態。其他物"
"件型別有自己的空閒列表；這些空閒列表必須移至直譯器狀態。等等。"

#: ../../faq/library.rst:446
#, fuzzy
msgid ""
"And I doubt that it can even be done in finite time, because the same "
"problem exists for 3rd party extensions.  It is likely that 3rd party "
"extensions are being written at a faster rate than you can convert them to "
"store all their global state in the interpreter state."
msgstr ""
"而且我懷疑它甚至可以在有限的時間內完成，因為第 3 方擴充存在同樣的問題。 3rd "
"方擴充的編寫速度可能比你轉換它們以將其所有全局狀態存儲在直譯器狀態中的速度更"
"快。"

#: ../../faq/library.rst:451
#, fuzzy
msgid ""
"And finally, once you have multiple interpreters not sharing any state, what "
"have you gained over running each interpreter in a separate process?"
msgstr ""
"最後，如果你有多個不共享任何狀態的直譯器，那麼在單獨的行程中運行每個直譯器有"
"什麼好處呢？"

#: ../../faq/library.rst:456
msgid "Input and Output"
msgstr "輸入與輸出"

#: ../../faq/library.rst:459
msgid "How do I delete a file? (And other file questions...)"
msgstr "如何刪除檔案？（以及其他檔案問題...）"

#: ../../faq/library.rst:461
#, fuzzy
msgid ""
"Use ``os.remove(filename)`` or ``os.unlink(filename)``; for documentation, "
"see the :mod:`os` module.  The two functions are identical; :func:`~os."
"unlink` is simply the name of the Unix system call for this function."
msgstr ""
"使用 ``os.remove(filename)`` 或 ``os.unlink(filename)``；有關文檔，請參閱 :"
"mod:`os` 模組。這兩個功能是相同的； :func:`~os.unlink` 只是這個函式的 Unix 系"
"統呼叫的名稱。"

#: ../../faq/library.rst:465
#, fuzzy
msgid ""
"To remove a directory, use :func:`os.rmdir`; use :func:`os.mkdir` to create "
"one. ``os.makedirs(path)`` will create any intermediate directories in "
"``path`` that don't exist. ``os.removedirs(path)`` will remove intermediate "
"directories as long as they're empty; if you want to delete an entire "
"directory tree and its contents, use :func:`shutil.rmtree`."
msgstr ""
"要刪除目錄，請使用 :func:`os.rmdir`;使用 :func:`os.mkdir` 建立一個。 ``os."
"makedirs(path)`` 將在 ``path`` 中建立任何不存在的中間目錄。 ``os."
"removedirs(path)`` 將刪除中間目錄，只要它們是空的；如果要刪除整個目錄樹及其內"
"容，請使用 :func:`shutil.rmtree`。"

#: ../../faq/library.rst:471
msgid "To rename a file, use ``os.rename(old_path, new_path)``."
msgstr "要重新命名檔案，請使用 ``os.rename(old_path, new_path)``。"

#: ../../faq/library.rst:473
#, fuzzy
msgid ""
"To truncate a file, open it using ``f = open(filename, \"rb+\")``, and use "
"``f.truncate(offset)``; offset defaults to the current seek position.  "
"There's also ``os.ftruncate(fd, offset)`` for files opened with :func:`os."
"open`, where *fd* is the file descriptor (a small integer)."
msgstr ""
"要截斷一個檔案，使用``f = open(filename, \"rb+\")``打開它，然後使用``f."
"truncate(offset)``;偏移量預設為當前搜索位置。對於使用 :func:`os.open` 打開的"
"檔案，還有 ``os.ftruncate(fd, offset)``，其中 *fd* 是檔案描述器（一個小整"
"數）。"

#: ../../faq/library.rst:478
#, fuzzy
msgid ""
"The :mod:`shutil` module also contains a number of functions to work on "
"files including :func:`~shutil.copyfile`, :func:`~shutil.copytree`, and :"
"func:`~shutil.rmtree`."
msgstr ""
":mod:`shutil` 模組還包含許多用於處理檔案的函式，包括:func:`~shutil."
"copyfile`、:func:`~shutil.copytree` 和:func:`~shutil.rmtree`。"

#: ../../faq/library.rst:484
msgid "How do I copy a file?"
msgstr "如何複製檔案？"

#: ../../faq/library.rst:486
#, fuzzy
msgid ""
"The :mod:`shutil` module contains a :func:`~shutil.copyfile` function. Note "
"that on Windows NTFS volumes, it does not copy `alternate data streams "
"<https://en.wikipedia.org/wiki/NTFS#Alternate_data_stream_(ADS)>`_ nor "
"`resource forks <https://en.wikipedia.org/wiki/Resource_fork>`__ on macOS "
"HFS+ volumes, though both are now rarely used. It also doesn't copy file "
"permissions and metadata, though using :func:`shutil.copy2` instead will "
"preserve most (though not all) of it."
msgstr ""
":mod:`shutil` 模組包含一個 :func:`~shutil.copyfile` 函式。請注意，在 Windows "
"NTFS 卷上，它不會複製 `alternate data streams <https://en.wikipedia.org/wiki/"
"NTFS#Alternate_data_stream_(ADS)>`_ 也不會複製 `resource forks <https://en."
"wikipedia. org/wiki/Resource_fork>`__ 在 macOS HFS+ 卷上，儘管現在兩者都很少"
"使用。它也不會複製檔案權限和元資料，儘管使用 :func:`shutil.copy2` 會保留其中"
"的大部分（儘管不是全部）。"

#: ../../faq/library.rst:497
msgid "How do I read (or write) binary data?"
msgstr "如何讀取（或寫入）二進位制資料？"

#: ../../faq/library.rst:499
#, fuzzy
msgid ""
"To read or write complex binary data formats, it's best to use the :mod:"
"`struct` module.  It allows you to take a string containing binary data "
"(usually numbers) and convert it to Python objects; and vice versa."
msgstr ""
"要讀取或寫入複雜的二進制資料格式，最好使用 :mod:`struct` 模組。它允許你獲取包"
"含二進制資料（通常是數字）的字串並將其轉換為 Python 物件；反之亦然。"

#: ../../faq/library.rst:503
#, fuzzy
msgid ""
"For example, the following code reads two 2-byte integers and one 4-byte "
"integer in big-endian format from a file::"
msgstr ""
"例如，以下程式碼從一個檔案中以大端格式讀取兩個 2 位元組整數和一個 4 位元組整"
"數： ::"

#: ../../faq/library.rst:512
#, fuzzy
msgid ""
"The '>' in the format string forces big-endian data; the letter 'h' reads "
"one \"short integer\" (2 bytes), and 'l' reads one \"long integer\" (4 "
"bytes) from the string."
msgstr ""
"格式字串中的 \">\" 強制使用大端資料；字母 'h' 讀取一個 \"短整數\" （2 位元"
"組）， 'l' 從字串中讀取一個 \"長整數\" （4 位元組）。"

#: ../../faq/library.rst:516
#, fuzzy
msgid ""
"For data that is more regular (e.g. a homogeneous list of ints or floats), "
"you can also use the :mod:`array` module."
msgstr ""
"對於更規則的資料（例如，整數或浮點數的同類列表），你還可以使用 :mod:`array` "
"模組。"

#: ../../faq/library.rst:521
#, fuzzy
msgid ""
"To read and write binary data, it is mandatory to open the file in binary "
"mode (here, passing ``\"rb\"`` to :func:`open`).  If you use ``\"r\"`` "
"instead (the default), the file will be open in text mode and ``f.read()`` "
"will return :class:`str` objects rather than :class:`bytes` objects."
msgstr ""
"要讀取和寫入二進制資料，必須以二進制模式打開檔案（這裡，將 ``\"rb\"`` 傳遞"
"給 :func:`open`）。如果你改用 ``\"r\"``（預設設定），檔案將以文本模式打開，並"
"且 ``f.read()`` 將回傳 str 物件而不是 bytes ` 物件。"

#: ../../faq/library.rst:529
#, fuzzy
msgid "I can't seem to use os.read() on a pipe created with os.popen(); why?"
msgstr "我似乎無法在用 os.popen() 建立的管道上使用 os.read()；為什麼？"

#: ../../faq/library.rst:531
#, fuzzy
msgid ""
":func:`os.read` is a low-level function which takes a file descriptor, a "
"small integer representing the opened file.  :func:`os.popen` creates a high-"
"level file object, the same type returned by the built-in :func:`open` "
"function. Thus, to read *n* bytes from a pipe *p* created with :func:`os."
"popen`, you need to use ``p.read(n)``."
msgstr ""
":func:`os.read` 是一個低階函式，它接受一個檔案描述器，一個代表打開檔案的小整"
"數。 :func:`os.popen` 建立一個高階檔案物件，與內置的 :func:`open` 函式回傳的"
"型別相同。因此，要從使用 :func:`os.popen` 建立的管道 *p* 中讀取 *n* 個位元"
"組，你需要使用 ``p.read(n)``。"

#: ../../faq/library.rst:617
msgid "How do I access the serial (RS232) port?"
msgstr "如何存取序列 (RS232) 連接埠？"

#: ../../faq/library.rst:619
msgid "For Win32, OSX, Linux, BSD, Jython, IronPython:"
msgstr "對於 Win32、OSX、Linux、BSD、Jython、IronPython："

#: ../../faq/library.rst:621
msgid ":pypi:`pyserial`"
msgstr ":pypi:`pyserial`"

#: ../../faq/library.rst:623
msgid "For Unix, see a Usenet post by Mitch Chapman:"
msgstr "對於 Unix，請參閱 Mitch Chapman 的 Usenet 貼文："

#: ../../faq/library.rst:625
msgid "https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com"
msgstr "https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com"

#: ../../faq/library.rst:629
#, fuzzy
msgid "Why doesn't closing sys.stdout (stdin, stderr) really close it?"
msgstr "為什麼關閉 sys.stdout (stdin, stderr) 並沒有真正關閉它？"

#: ../../faq/library.rst:631
msgid ""
"Python :term:`file objects <file object>` are a high-level layer of "
"abstraction on low-level C file descriptors."
msgstr ""
"Python :term:`檔案物件 <file object>`\\ 是低階 C 檔案描述器的高階抽象層。"

#: ../../faq/library.rst:634
#, fuzzy
msgid ""
"For most file objects you create in Python via the built-in :func:`open` "
"function, ``f.close()`` marks the Python file object as being closed from "
"Python's point of view, and also arranges to close the underlying C file "
"descriptor.  This also happens automatically in ``f``'s destructor, when "
"``f`` becomes garbage."
msgstr ""
"對於你通過內置的 :func:`open` 函式在 Python 中建立的大多數檔案物件，``f."
"close()`` 從 Python 的角度將 Python 檔案物件標記為已關閉，並安排關閉底層 C 檔"
"案描述器。當 ``f`` 變成垃圾時，這也會自動發生在 ``f`` 的析構函式中。"

#: ../../faq/library.rst:640
#, fuzzy
msgid ""
"But stdin, stdout and stderr are treated specially by Python, because of the "
"special status also given to them by C.  Running ``sys.stdout.close()`` "
"marks the Python-level file object as being closed, but does *not* close the "
"associated C file descriptor."
msgstr ""
"但是 stdin、stdout 和 stderr 被 Python 特殊對待，因為 C 也賦予它們特殊的狀"
"態。運行 ``sys.stdout.close()`` 將 Python 級檔案物件標記為已關閉，但是 * "
"not* 關閉關聯的 C 檔案描述器。"

#: ../../faq/library.rst:645
#, fuzzy
msgid ""
"To close the underlying C file descriptor for one of these three, you should "
"first be sure that's what you really want to do (e.g., you may confuse "
"extension modules trying to do I/O).  If it is, use :func:`os.close`::"
msgstr ""
"要關閉這三個之一的底層 C 檔案描述器，你應該首先確定這是你真正想要做的（例如，"
"你可能會混淆試圖執行 I/O 的擴充模組）。如果是，使用 :func:`os.close`： ::"

#: ../../faq/library.rst:653
msgid "Or you can use the numeric constants 0, 1 and 2, respectively."
msgstr "或者你可以分別使用數字常數 0、1 和 2。"

#: ../../faq/library.rst:657
msgid "Network/Internet Programming"
msgstr "網路 (Network)/網際網路 (Internet) 程式"

#: ../../faq/library.rst:660
msgid "What WWW tools are there for Python?"
msgstr "Python 有哪些 WWW 工具？"

#: ../../faq/library.rst:662
#, fuzzy
msgid ""
"See the chapters titled :ref:`internet` and :ref:`netdata` in the Library "
"Reference Manual.  Python has many modules that will help you build server-"
"side and client-side web systems."
msgstr ""
"請參閱函式庫參考手冊中標題為 :ref:`internet` 和 :ref:`netdata` 的章節。 "
"Python 有許多模組可以幫助你構建伺服器端和用戶端 Web 系統。"

#: ../../faq/library.rst:668
#, fuzzy
msgid ""
"A summary of available frameworks is maintained by Paul Boddie at https://"
"wiki.python.org/moin/WebProgramming\\ ."
msgstr ""
"可用框架的摘要由 Paul Boddie 在 https://wiki.python.org/moin/"
"WebProgramming\\ 維護。"

#: ../../faq/library.rst:671
#, fuzzy
msgid ""
"Cameron Laird maintains a useful set of pages about Python web technologies "
"at https://web.archive.org/web/20210224183619/http://phaseit.net/claird/comp."
"lang.python/web_python."
msgstr ""
"Cameron Laird 在 https://web.archive.org/web/20210224183619/http://phaseit."
"net/claird/comp.lang.python/web_python 維護著一組有用的關於 Python 網路技術的"
"頁面。"

#: ../../faq/library.rst:676
msgid "How can I mimic CGI form submission (METHOD=POST)?"
msgstr "如何模擬 CGI 表單送出 (submission) (METHOD=POST)？"

#: ../../faq/library.rst:678
#, fuzzy
msgid ""
"I would like to retrieve web pages that are the result of POSTing a form. Is "
"there existing code that would let me do this easily?"
msgstr ""
"我想檢索作為發布表單結果的網頁。是否有現成的程式碼可以讓我輕鬆地做到這一點？"

#: ../../faq/library.rst:681
msgid "Yes. Here's a simple example that uses :mod:`urllib.request`::"
msgstr "是的，這是一個 :mod:`urllib.request` 的簡單範例： ::"

#: ../../faq/library.rst:696
#, fuzzy
msgid ""
"Note that in general for percent-encoded POST operations, query strings must "
"be quoted using :func:`urllib.parse.urlencode`.  For example, to send "
"``name=Guy Steele, Jr.``::"
msgstr ""
"請注意，通常對於百分比編碼的 POST 操作，查詢字串必須使用 :func:`urllib.parse."
"urlencode` 引用。例如，發送 ``name=Guy Steele, Jr.``： ::"

#: ../../faq/library.rst:704
msgid ":ref:`urllib-howto` for extensive examples."
msgstr ":ref:`urllib-howto` 內有大量範例。"

#: ../../faq/library.rst:708
msgid "What module should I use to help with generating HTML?"
msgstr "我應該使用什麼模組來輔助產生 HTML？"

#: ../../faq/library.rst:712
#, fuzzy
msgid ""
"You can find a collection of useful links on the `Web Programming wiki page "
"<https://wiki.python.org/moin/WebProgramming>`_."
msgstr ""
"你可以在 \"Web 編寫程式維基頁面 <https://wiki.python.org/moin/"
"WebProgramming>\" 上找到一組有用的鏈接。"

#: ../../faq/library.rst:717
msgid "How do I send mail from a Python script?"
msgstr "如何從 Python 腳本發送郵件？"

#: ../../faq/library.rst:719
msgid "Use the standard library module :mod:`smtplib`."
msgstr "使用標準函式庫模組 :mod:`smtplib`。"

#: ../../faq/library.rst:721
#, fuzzy
msgid ""
"Here's a very simple interactive mail sender that uses it.  This method will "
"work on any host that supports an SMTP listener. ::"
msgstr ""
"這是一個使用它的非常簡單的交互式郵件發件人。此方法適用於任何支援 SMTP 偵聽器"
"的主機。： ::"

#: ../../faq/library.rst:741
#, fuzzy
msgid ""
"A Unix-only alternative uses sendmail.  The location of the sendmail program "
"varies between systems; sometimes it is ``/usr/lib/sendmail``, sometimes ``/"
"usr/sbin/sendmail``.  The sendmail manual page will help you out.  Here's "
"some sample code::"
msgstr ""
"一個僅適用於 Unix 的替代方案使用 sendmail。 sendmail 程式的位置因係統而異；有"
"時是 \"/usr/lib/sendmail\" ，有時是 \"/usr/sbin/sendmail\" 。 sendmail 手冊頁"
"將幫助你。這是一些示例程式碼： ::"

#: ../../faq/library.rst:761
#, fuzzy
msgid "How do I avoid blocking in the connect() method of a socket?"
msgstr "如何避免阻塞 socket 的 connect() 方法？"

#: ../../faq/library.rst:763
msgid ""
"The :mod:`select` module is commonly used to help with asynchronous I/O on "
"sockets."
msgstr ":mod:`select` 模組通常用於幫助處理 socket 上的非同步 I/O。"

#: ../../faq/library.rst:766
#, fuzzy
msgid ""
"To prevent the TCP connect from blocking, you can set the socket to non-"
"blocking mode.  Then when you do the :meth:`~socket.socket.connect`, you "
"will either connect immediately (unlikely) or get an exception that contains "
"the error number as ``.errno``. ``errno.EINPROGRESS`` indicates that the "
"connection is in progress, but hasn't finished yet.  Different OSes will "
"return different values, so you're going to have to check what's returned on "
"your system."
msgstr ""
"為防止 TCP 連接阻塞，可以將 socket 設定為非阻塞模式。然後當你執行 :meth:"
"`socket.connect` 時，你要麼立即連接（不太可能），要麼得到一個例外，其中包含錯"
"誤號 ``.errno``。 ``errno.EINPROGRESS`` 表示連接正在進行中，但尚未完成。不同"
"的作業系統將回傳不同的值，因此你將不得不檢查系統回傳的內容。"

#: ../../faq/library.rst:774
#, fuzzy
msgid ""
"You can use the :meth:`~socket.socket.connect_ex` method to avoid creating "
"an exception. It will just return the errno value. To poll, you can call :"
"meth:`~socket.socket.connect_ex` again later -- ``0`` or ``errno.EISCONN`` "
"indicate that you're connected -- or you can pass this socket to :meth:"
"`select.select` to check if it's writable."
msgstr ""
"你可以使用 :meth:`socket.connect_ex` 方法來避免建立例外。它只會回傳 errno "
"值。要輪詢，你可以稍後再次呼叫 :meth:`socket.connect_ex` - ``0`` 或 ``errno."
"EISCONN`` 表示你已連接 - 或者你可以將此 socket 傳遞給 :meth:`select.select` "
"檢查它是否可寫。"

#: ../../faq/library.rst:782
msgid ""
"The :mod:`asyncio` module provides a general purpose single-threaded and "
"concurrent asynchronous library, which can be used for writing non-blocking "
"network code. The third-party `Twisted <https://twisted.org/>`_ library is a "
"popular and feature-rich alternative."
msgstr ""
":mod:`asyncio` 模組提供了一個通用的單執行緒並發非同步函式庫，可用於編寫非阻塞"
"網路程式碼。第三方 `Twisted <https://twisted.org/>`_ 函式庫是一種流行且功能豐"
"富的替代方案。"

#: ../../faq/library.rst:790
msgid "Databases"
msgstr "資料庫"

#: ../../faq/library.rst:793
msgid "Are there any interfaces to database packages in Python?"
msgstr "Python 中是否有任何資料庫套件的介面？"

#: ../../faq/library.rst:795
msgid "Yes."
msgstr "有的。"

#: ../../faq/library.rst:797
#, fuzzy
msgid ""
"Interfaces to disk-based hashes such as :mod:`DBM <dbm.ndbm>` and :mod:`GDBM "
"<dbm.gnu>` are also included with standard Python.  There is also the :mod:"
"`sqlite3` module, which provides a lightweight disk-based relational "
"database."
msgstr ""
"基於磁盤的雜湊介面，例如 :mod:`DBM <dbm.ndbm>` 和 :mod:`GDBM <dbm.gnu>` 也包"
"含在標準 Python 中。還有 :mod:`sqlite3` 模組，它提供了一個輕量級的基於磁盤的"
"關係資料庫。"

#: ../../faq/library.rst:802
#, fuzzy
msgid ""
"Support for most relational databases is available.  See the "
"`DatabaseProgramming wiki page <https://wiki.python.org/moin/"
"DatabaseProgramming>`_ for details."
msgstr ""
"支援大多數關係資料庫。有關詳細資訊，請參閱`DatabaseProgramming 維基頁面 "
"<https://wiki.python.org/moin/DatabaseProgramming>`_。"

#: ../../faq/library.rst:808
#, fuzzy
msgid "How do you implement persistent objects in Python?"
msgstr "你如何在 Python 中實作持久物件？"

#: ../../faq/library.rst:810
#, fuzzy
msgid ""
"The :mod:`pickle` library module solves this in a very general way (though "
"you still can't store things like open files, sockets or windows), and the :"
"mod:`shelve` library module uses pickle and (g)dbm to create persistent "
"mappings containing arbitrary Python objects."
msgstr ""
":mod:`pickle` 庫模組以一種非常通用的方式解決了這個問題（儘管你仍然不能存儲諸"
"如打開的檔案、socket 或窗口之類的東西），而 :mod:`shelve` 庫模組使用 pickle "
"和 (g) dbm 建立包含任意 Python 物件的持久映射。"

#: ../../faq/library.rst:817
msgid "Mathematics and Numerics"
msgstr "數學和數值"

#: ../../faq/library.rst:820
msgid "How do I generate random numbers in Python?"
msgstr "如何在 Python 中生成隨機數？"

#: ../../faq/library.rst:822
msgid ""
"The standard module :mod:`random` implements a random number generator.  "
"Usage is simple::"
msgstr "標準模組 :mod:`random` 實作了一個隨機數生成器。用法很簡單： ::"

#: ../../faq/library.rst:828
msgid "This returns a random floating-point number in the range [0, 1)."
msgstr "這將回傳 [0, 1) 範圍內的隨機浮點數。"

#: ../../faq/library.rst:830
msgid ""
"There are also many other specialized generators in this module, such as:"
msgstr "該模組中還有許多其他專用生成器，例如："

#: ../../faq/library.rst:832
msgid "``randrange(a, b)`` chooses an integer in the range [a, b)."
msgstr "``randrange(a, b)`` 會選擇 [a, b) 範圍內的一個整數。"

#: ../../faq/library.rst:833
msgid "``uniform(a, b)`` chooses a floating-point number in the range [a, b)."
msgstr "``uniform(a, b)`` 會選擇 [a, b) 範圍內的浮點數。"

#: ../../faq/library.rst:834
msgid ""
"``normalvariate(mean, sdev)`` samples the normal (Gaussian) distribution."
msgstr "``normalvariate(mean, sdev)`` 對常態（高斯）分佈進行採樣 (sample)。"

#: ../../faq/library.rst:836
msgid "Some higher-level functions operate on sequences directly, such as:"
msgstr "一些更高階的函式會直接對序列進行操作，例如："

#: ../../faq/library.rst:838
msgid "``choice(S)`` chooses a random element from a given sequence."
msgstr "``choice(S)`` 會從給定序列中選擇一個隨機元素。"

#: ../../faq/library.rst:839
msgid "``shuffle(L)`` shuffles a list in-place, i.e. permutes it randomly."
msgstr "``shuffle(L)`` 會原地 (in-place) 打亂 list，即隨機排列它。"

#: ../../faq/library.rst:841
msgid ""
"There's also a ``Random`` class you can instantiate to create independent "
"multiple random number generators."
msgstr ""
"還有一個 ``Random`` 類別，你可以將它實例化以建立多個獨立的隨機數生成器。"
