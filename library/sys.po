# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 10:05+0000\n"
"PO-Revision-Date: 2018-05-23 16:12+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sys.rst:2
msgid ":mod:`sys` --- System-specific parameters and functions"
msgstr ""

#: ../../library/sys.rst:9
msgid ""
"This module provides access to some variables used or maintained by the "
"interpreter and to functions that interact strongly with the interpreter. It "
"is always available."
msgstr ""

#: ../../library/sys.rst:16
msgid ""
"On POSIX systems where Python was built with the standard ``configure`` "
"script, this contains the ABI flags as specified by :pep:`3149`."
msgstr ""

#: ../../library/sys.rst:19
msgid ""
"Default flags became an empty string (``m`` flag for pymalloc has been "
"removed)."
msgstr ""

#: ../../library/sys.rst:28
msgid ""
"Append the callable *hook* to the list of active auditing hooks for the "
"current (sub)interpreter."
msgstr ""

#: ../../library/sys.rst:31
msgid ""
"When an auditing event is raised through the :func:`sys.audit` function, "
"each hook will be called in the order it was added with the event name and "
"the tuple of arguments. Native hooks added by :c:func:`PySys_AddAuditHook` "
"are called first, followed by hooks added in the current (sub)interpreter.  "
"Hooks can then log the event, raise an exception to abort the operation, or "
"terminate the process entirely."
msgstr ""

#: ../../library/sys.rst:38
msgid ""
"Note that audit hooks are primarily for collecting information about "
"internal or otherwise unobservable actions, whether by Python or libraries "
"written in Python. They are not suitable for implementing a \"sandbox\". In "
"particular, malicious code can trivially disable or bypass hooks added using "
"this function. At a minimum, any security-sensitive hooks must be added "
"using the C API :c:func:`PySys_AddAuditHook` before initialising the "
"runtime, and any modules allowing arbitrary memory modification (such as :"
"mod:`ctypes`) should be completely removed or closely monitored."
msgstr ""

#: ../../library/sys.rst:20
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.addaudithook`` with no "
"arguments."
msgstr ""

#: ../../library/sys.rst:49
msgid ""
"Calling :func:`sys.addaudithook` will itself raise an auditing event named "
"``sys.addaudithook`` with no arguments. If any existing hooks raise an "
"exception derived from :class:`RuntimeError`, the new hook will not be added "
"and the exception suppressed. As a result, callers cannot assume that their "
"hook has been added unless they control all existing hooks."
msgstr ""

#: ../../library/sys.rst:56
msgid ""
"See the :ref:`audit events table <audit-events>` for all events raised by "
"CPython, and :pep:`578` for the original design discussion."
msgstr ""

#: ../../library/sys.rst:63
msgid ""
"Exceptions derived from :class:`Exception` but not :class:`RuntimeError` are "
"no longer suppressed."
msgstr ""

#: ../../library/sys.rst:68
msgid ""
"When tracing is enabled (see :func:`settrace`), Python hooks are only traced "
"if the callable has a ``__cantrace__`` member that is set to a true value. "
"Otherwise, trace functions will skip the hook."
msgstr ""

#: ../../library/sys.rst:75
msgid ""
"The list of command line arguments passed to a Python script. ``argv[0]`` is "
"the script name (it is operating system dependent whether this is a full "
"pathname or not).  If the command was executed using the :option:`-c` "
"command line option to the interpreter, ``argv[0]`` is set to the string ``'-"
"c'``.  If no script name was passed to the Python interpreter, ``argv[0]`` "
"is the empty string."
msgstr ""

#: ../../library/sys.rst:81
msgid ""
"To loop over the standard input, or the list of files given on the command "
"line, see the :mod:`fileinput` module."
msgstr ""

#: ../../library/sys.rst:84
msgid "See also :data:`sys.orig_argv`."
msgstr "另請參閱 :data:`sys.orig_argv`\\ 。"

#: ../../library/sys.rst:87
msgid ""
"On Unix, command line arguments are passed by bytes from OS.  Python decodes "
"them with filesystem encoding and \"surrogateescape\" error handler. When "
"you need original bytes, you can get it by ``[os.fsencode(arg) for arg in "
"sys.argv]``."
msgstr ""

#: ../../library/sys.rst:99
msgid ""
"Raise an auditing event and trigger any active auditing hooks. *event* is a "
"string identifying the event, and *args* may contain optional arguments with "
"more information about the event.  The number and types of arguments for a "
"given event are considered a public and stable API and should not be "
"modified between releases."
msgstr ""

#: ../../library/sys.rst:105
msgid ""
"For example, one auditing event is named ``os.chdir``. This event has one "
"argument called *path* that will contain the requested new working directory."
msgstr ""

#: ../../library/sys.rst:109
msgid ""
":func:`sys.audit` will call the existing auditing hooks, passing the event "
"name and arguments, and will re-raise the first exception from any hook. In "
"general, if an exception is raised, it should not be handled and the process "
"should be terminated as quickly as possible. This allows hook "
"implementations to decide how to respond to particular events: they can "
"merely log the event or abort the operation by raising an exception."
msgstr ""

#: ../../library/sys.rst:117
msgid ""
"Hooks are added using the :func:`sys.addaudithook` or :c:func:"
"`PySys_AddAuditHook` functions."
msgstr ""

#: ../../library/sys.rst:120
msgid ""
"The native equivalent of this function is :c:func:`PySys_Audit`. Using the "
"native function is preferred when possible."
msgstr ""

#: ../../library/sys.rst:123
msgid ""
"See the :ref:`audit events table <audit-events>` for all events raised by "
"CPython."
msgstr ""

#: ../../library/sys.rst:131
msgid ""
"Set during Python startup, before ``site.py`` is run, to the same value as :"
"data:`exec_prefix`. If not running in a :ref:`virtual environment <venv-"
"def>`, the values will stay the same; if ``site.py`` finds that a virtual "
"environment is in use, the values of :data:`prefix` and :data:`exec_prefix` "
"will be changed to point to the virtual environment, whereas :data:"
"`base_prefix` and :data:`base_exec_prefix` will remain pointing to the base "
"Python installation (the one which the virtual environment was created from)."
msgstr ""

#: ../../library/sys.rst:145
msgid ""
"Set during Python startup, before ``site.py`` is run, to the same value as :"
"data:`prefix`. If not running in a :ref:`virtual environment <venv-def>`, "
"the values will stay the same; if ``site.py`` finds that a virtual "
"environment is in use, the values of :data:`prefix` and :data:`exec_prefix` "
"will be changed to point to the virtual environment, whereas :data:"
"`base_prefix` and :data:`base_exec_prefix` will remain pointing to the base "
"Python installation (the one which the virtual environment was created from)."
msgstr ""

#: ../../library/sys.rst:158
msgid ""
"An indicator of the native byte order.  This will have the value ``'big'`` "
"on big-endian (most-significant byte first) platforms, and ``'little'`` on "
"little-endian (least-significant byte first) platforms."
msgstr ""

#: ../../library/sys.rst:165
msgid ""
"A tuple of strings containing the names of all modules that are compiled "
"into this Python interpreter.  (This information is not available in any "
"other way --- ``modules.keys()`` only lists the imported modules.)"
msgstr ""

#: ../../library/sys.rst:169
msgid "See also the :attr:`sys.stdlib_module_names` list."
msgstr "另請參閱 :attr:`sys.stdlib_module_names` 清單。"

#: ../../library/sys.rst:174
msgid ""
"Call ``func(*args)``, while tracing is enabled.  The tracing state is saved, "
"and restored afterwards.  This is intended to be called from a debugger from "
"a checkpoint, to recursively debug some other code."
msgstr ""

#: ../../library/sys.rst:181
msgid "A string containing the copyright pertaining to the Python interpreter."
msgstr ""

#: ../../library/sys.rst:186
msgid ""
"Clear the internal type cache. The type cache is used to speed up attribute "
"and method lookups. Use the function *only* to drop unnecessary references "
"during reference leak debugging."
msgstr ""

#: ../../library/sys.rst:190 ../../library/sys.rst:206
#: ../../library/sys.rst:219
msgid ""
"This function should be used for internal and specialized purposes only."
msgstr ""

#: ../../library/sys.rst:195
msgid ""
"Return a dictionary mapping each thread's identifier to the topmost stack "
"frame currently active in that thread at the time the function is called. "
"Note that functions in the :mod:`traceback` module can build the call stack "
"given such a frame."
msgstr ""

#: ../../library/sys.rst:200
msgid ""
"This is most useful for debugging deadlock:  this function does not require "
"the deadlocked threads' cooperation, and such threads' call stacks are "
"frozen for as long as they remain deadlocked.  The frame returned for a non-"
"deadlocked thread may bear no relationship to that thread's current activity "
"by the time calling code examines the frame."
msgstr ""

#: ../../library/sys.rst:14
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys._current_frames`` with no "
"arguments."
msgstr ""

#: ../../library/sys.rst:212
msgid ""
"Return a dictionary mapping each thread's identifier to the topmost "
"exception currently active in that thread at the time the function is "
"called. If a thread is not currently handling an exception, it is not "
"included in the result dictionary."
msgstr ""

#: ../../library/sys.rst:217
msgid "This is most useful for statistical profiling."
msgstr ""

#: ../../library/sys.rst:10
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys._current_exceptions`` with "
"no arguments."
msgstr ""

#: ../../library/sys.rst:225
msgid ""
"This hook function is called by built-in :func:`breakpoint`.  By default, it "
"drops you into the :mod:`pdb` debugger, but it can be set to any other "
"function so that you can choose which debugger gets used."
msgstr ""

#: ../../library/sys.rst:229
msgid ""
"The signature of this function is dependent on what it calls.  For example, "
"the default binding (e.g. ``pdb.set_trace()``) expects no arguments, but you "
"might bind it to a function that expects additional arguments (positional "
"and/or keyword).  The built-in ``breakpoint()`` function passes its "
"``*args`` and ``**kws`` straight through.  Whatever ``breakpointhooks()`` "
"returns is returned from ``breakpoint()``."
msgstr ""

#: ../../library/sys.rst:236
msgid ""
"The default implementation first consults the environment variable :envvar:"
"`PYTHONBREAKPOINT`.  If that is set to ``\"0\"`` then this function returns "
"immediately; i.e. it is a no-op.  If the environment variable is not set, or "
"is set to the empty string, ``pdb.set_trace()`` is called. Otherwise this "
"variable should name a function to run, using Python's dotted-import "
"nomenclature, e.g. ``package.subpackage.module.function``. In this case, "
"``package.subpackage.module`` would be imported and the resulting module "
"must have a callable named ``function()``.  This is run, passing in "
"``*args`` and ``**kws``, and whatever ``function()`` returns, ``sys."
"breakpointhook()`` returns to the built-in :func:`breakpoint` function."
msgstr ""

#: ../../library/sys.rst:248
msgid ""
"Note that if anything goes wrong while importing the callable named by :"
"envvar:`PYTHONBREAKPOINT`, a :exc:`RuntimeWarning` is reported and the "
"breakpoint is ignored."
msgstr ""

#: ../../library/sys.rst:252
msgid ""
"Also note that if ``sys.breakpointhook()`` is overridden programmatically, :"
"envvar:`PYTHONBREAKPOINT` is *not* consulted."
msgstr ""

#: ../../library/sys.rst:259
msgid ""
"Print low-level information to stderr about the state of CPython's memory "
"allocator."
msgstr ""

#: ../../library/sys.rst:262
msgid ""
"If Python is :ref:`built in debug mode <debug-build>` (:option:`configure --"
"with-pydebug option <--with-pydebug>`), it also performs some expensive "
"internal consistency checks."
msgstr ""

#: ../../library/sys.rst:270
msgid ""
"This function is specific to CPython.  The exact output format is not "
"defined here, and may change."
msgstr ""

#: ../../library/sys.rst:276
msgid "Integer specifying the handle of the Python DLL."
msgstr ""

#: ../../library/sys.rst:278 ../../library/sys.rst:879
#: ../../library/sys.rst:1585 ../../library/sys.rst:1818
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`適用 <availability>`：Windows。"

#: ../../library/sys.rst:283
msgid ""
"If *value* is not ``None``, this function prints ``repr(value)`` to ``sys."
"stdout``, and saves *value* in ``builtins._``. If ``repr(value)`` is not "
"encodable to ``sys.stdout.encoding`` with ``sys.stdout.errors`` error "
"handler (which is probably ``'strict'``), encode it to ``sys.stdout."
"encoding`` with ``'backslashreplace'`` error handler."
msgstr ""

#: ../../library/sys.rst:289
msgid ""
"``sys.displayhook`` is called on the result of evaluating an :term:"
"`expression` entered in an interactive Python session.  The display of these "
"values can be customized by assigning another one-argument function to ``sys."
"displayhook``."
msgstr ""

#: ../../library/sys.rst:293
msgid "Pseudo-code::"
msgstr ""

#: ../../library/sys.rst:313
msgid "Use ``'backslashreplace'`` error handler on :exc:`UnicodeEncodeError`."
msgstr ""

#: ../../library/sys.rst:319
msgid ""
"If this is true, Python won't try to write ``.pyc`` files on the import of "
"source modules.  This value is initially set to ``True`` or ``False`` "
"depending on the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable, but you can set it yourself "
"to control bytecode file generation."
msgstr ""

#: ../../library/sys.rst:328
msgid ""
"A :term:`named tuple` holding information about the environment on the "
"*wasm32-emscripten* platform. The named tuple is provisional and may change "
"in the future."
msgstr ""

#: ../../library/sys.rst:335 ../../library/sys.rst:1026
#: ../../library/sys.rst:1701
msgid "Attribute"
msgstr "屬性"

#: ../../library/sys.rst:335 ../../library/sys.rst:1026
#: ../../library/sys.rst:1701
msgid "Explanation"
msgstr "解釋"

#: ../../library/sys.rst:337
msgid ":const:`emscripten_version`"
msgstr ":const:`emscripten_version`"

#: ../../library/sys.rst:337
msgid ""
"Emscripten version as tuple of ints (major, minor, micro), e.g. ``(3, 1, "
"8)``."
msgstr ""

#: ../../library/sys.rst:340
msgid ":const:`runtime`"
msgstr ":const:`runtime`"

#: ../../library/sys.rst:340
msgid ""
"Runtime string, e.g. browser user agent, ``'Node.js v14.18.2'``, or "
"``'UNKNOWN'``."
msgstr ""

#: ../../library/sys.rst:343
msgid ":const:`pthreads`"
msgstr ":const:`pthreads`"

#: ../../library/sys.rst:343
msgid "``True`` if Python is compiled with Emscripten pthreads support."
msgstr ""

#: ../../library/sys.rst:346
msgid ":const:`shared_memory`"
msgstr ":const:`shared_memory`"

#: ../../library/sys.rst:346
msgid "``True`` if Python is compiled with shared memory support."
msgstr ""

#: ../../library/sys.rst:350
msgid ":ref:`Availability <availability>`: Emscripten."
msgstr ":ref:`適用 <availability>`：Emscripten。"

#: ../../library/sys.rst:357
msgid ""
"If this is set (not ``None``), Python will write bytecode-cache ``.pyc`` "
"files to (and read them from) a parallel directory tree rooted at this "
"directory, rather than from ``__pycache__`` directories in the source code "
"tree. Any ``__pycache__`` directories in the source code tree will be "
"ignored and new ``.pyc`` files written within the pycache prefix. Thus if "
"you use :mod:`compileall` as a pre-build step, you must ensure you run it "
"with the same pycache prefix (if any) that you will use at runtime."
msgstr ""

#: ../../library/sys.rst:365
msgid ""
"A relative path is interpreted relative to the current working directory."
msgstr ""

#: ../../library/sys.rst:367
msgid ""
"This value is initially set based on the value of the :option:`-X` "
"``pycache_prefix=PATH`` command-line option or the :envvar:"
"`PYTHONPYCACHEPREFIX` environment variable (command-line takes precedence). "
"If neither are set, it is ``None``."
msgstr ""

#: ../../library/sys.rst:377
msgid ""
"This function prints out a given traceback and exception to ``sys.stderr``."
msgstr ""

#: ../../library/sys.rst:379
msgid ""
"When an exception is raised and uncaught, the interpreter calls ``sys."
"excepthook`` with three arguments, the exception class, exception instance, "
"and a traceback object.  In an interactive session this happens just before "
"control is returned to the prompt; in a Python program this happens just "
"before the program exits.  The handling of such top-level exceptions can be "
"customized by assigning another three-argument function to ``sys."
"excepthook``."
msgstr ""

#: ../../library/sys.rst:10
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.excepthook`` with arguments "
"``hook``, ``type``, ``value``, ``traceback``."
msgstr ""

#: ../../library/sys.rst:388
msgid ""
"Raise an auditing event ``sys.excepthook`` with arguments ``hook``, "
"``type``, ``value``, ``traceback`` when an uncaught exception occurs. If no "
"hook has been set, ``hook`` may be ``None``. If any hook raises an exception "
"derived from :class:`RuntimeError` the call to the hook will be suppressed. "
"Otherwise, the audit hook exception will be reported as unraisable and ``sys."
"excepthook`` will be called."
msgstr ""

#: ../../library/sys.rst:397
msgid ""
"The :func:`sys.unraisablehook` function handles unraisable exceptions and "
"the :func:`threading.excepthook` function handles exception raised by :func:"
"`threading.Thread.run`."
msgstr ""

#: ../../library/sys.rst:407
msgid ""
"These objects contain the original values of ``breakpointhook``, "
"``displayhook``, ``excepthook``, and ``unraisablehook`` at the start of the "
"program.  They are saved so that ``breakpointhook``, ``displayhook`` and "
"``excepthook``, ``unraisablehook`` can be restored in case they happen to "
"get replaced with broken or alternative objects."
msgstr ""

#: ../../library/sys.rst:413
msgid "__breakpointhook__"
msgstr "__breakpointhook__"

#: ../../library/sys.rst:416
msgid "__unraisablehook__"
msgstr "__unraisablehook__"

#: ../../library/sys.rst:422
msgid ""
"This function, when called while an exception handler is executing (such as "
"an ``except`` or ``except*`` clause), returns the exception instance that "
"was caught by this handler. When exception handlers are nested within one "
"another, only the exception handled by the innermost handler is accessible."
msgstr ""

#: ../../library/sys.rst:427
msgid "If no exception handler is executing, this function returns ``None``."
msgstr ""

#: ../../library/sys.rst:434
msgid ""
"This function returns the old-style representation of the handled exception. "
"If an exception ``e`` is currently handled (so :func:`exception` would "
"return ``e``), :func:`exc_info` returns the tuple ``(type(e), e, e."
"__traceback__)``. That is, a tuple containing the type of the exception (a "
"subclass of :exc:`BaseException`), the exception itself, and a :ref:"
"`traceback object <traceback-objects>` which typically encapsulates the call "
"stack at the point where the exception last occurred."
msgstr ""

#: ../../library/sys.rst:445
msgid ""
"If no exception is being handled anywhere on the stack, this function return "
"a tuple containing three ``None`` values."
msgstr ""

#: ../../library/sys.rst:448
msgid ""
"The ``type`` and ``traceback`` fields are now derived from the ``value`` "
"(the exception instance), so when an exception is modified while it is being "
"handled, the changes are reflected in the results of subsequent calls to :"
"func:`exc_info`."
msgstr ""

#: ../../library/sys.rst:456
msgid ""
"A string giving the site-specific directory prefix where the platform-"
"dependent Python files are installed; by default, this is also ``'/usr/"
"local'``.  This can be set at build time with the ``--exec-prefix`` argument "
"to the :program:`configure` script.  Specifically, all configuration files "
"(e.g. the :file:`pyconfig.h` header file) are installed in the directory :"
"file:`{exec_prefix}/lib/python{X.Y}/config`, and shared library modules are "
"installed in :file:`{exec_prefix}/lib/python{X.Y}/lib-dynload`, where *X.Y* "
"is the version number of Python, for example ``3.2``."
msgstr ""

#: ../../library/sys.rst:467
msgid ""
"If a :ref:`virtual environment <venv-def>` is in effect, this value will be "
"changed in ``site.py`` to point to the virtual environment. The value for "
"the Python installation will still be available, via :data:"
"`base_exec_prefix`."
msgstr ""

#: ../../library/sys.rst:475
msgid ""
"A string giving the absolute path of the executable binary for the Python "
"interpreter, on systems where this makes sense. If Python is unable to "
"retrieve the real path to its executable, :data:`sys.executable` will be an "
"empty string or ``None``."
msgstr ""

#: ../../library/sys.rst:483
msgid ""
"Raise a :exc:`SystemExit` exception, signaling an intention to exit the "
"interpreter."
msgstr ""

#: ../../library/sys.rst:485
msgid ""
"The optional argument *arg* can be an integer giving the exit status "
"(defaulting to zero), or another type of object.  If it is an integer, zero "
"is considered \"successful termination\" and any nonzero value is considered "
"\"abnormal termination\" by shells and the like.  Most systems require it to "
"be in the range 0--127, and produce undefined results otherwise.  Some "
"systems have a convention for assigning specific meanings to specific exit "
"codes, but these are generally underdeveloped; Unix programs generally use 2 "
"for command line syntax errors and 1 for all other kind of errors.  If "
"another type of object is passed, ``None`` is equivalent to passing zero, "
"and any other object is printed to :data:`stderr` and results in an exit "
"code of 1.  In particular, ``sys.exit(\"some error message\")`` is a quick "
"way to exit a program when an error occurs."
msgstr ""

#: ../../library/sys.rst:498
msgid ""
"Since :func:`exit` ultimately \"only\" raises an exception, it will only "
"exit the process when called from the main thread, and the exception is not "
"intercepted. Cleanup actions specified by finally clauses of :keyword:`try` "
"statements are honored, and it is possible to intercept the exit attempt at "
"an outer level."
msgstr ""

#: ../../library/sys.rst:503
msgid ""
"If an error occurs in the cleanup after the Python interpreter has caught :"
"exc:`SystemExit` (such as an error flushing buffered data in the standard "
"streams), the exit status is changed to 120."
msgstr ""

#: ../../library/sys.rst:511
msgid ""
"The :term:`named tuple` *flags* exposes the status of command line flags. "
"The attributes are read only."
msgstr ""

#: ../../library/sys.rst:515 ../../library/sys.rst:572
#: ../../library/sys.rst:925
msgid "attribute"
msgstr ""

#: ../../library/sys.rst:515
msgid "flag"
msgstr ""

#: ../../library/sys.rst:517
msgid ":const:`debug`"
msgstr ":const:`debug`"

#: ../../library/sys.rst:517
msgid ":option:`-d`"
msgstr ":option:`-d`"

#: ../../library/sys.rst:518
msgid ":const:`inspect`"
msgstr ":const:`inspect`"

#: ../../library/sys.rst:518 ../../library/sys.rst:519
msgid ":option:`-i`"
msgstr ":option:`-i`"

#: ../../library/sys.rst:519
msgid ":const:`interactive`"
msgstr ":const:`interactive`"

#: ../../library/sys.rst:520
msgid ":const:`isolated`"
msgstr ":const:`isolated`"

#: ../../library/sys.rst:520
msgid ":option:`-I`"
msgstr ":option:`-I`"

#: ../../library/sys.rst:521
msgid ":const:`optimize`"
msgstr ":const:`optimize`"

#: ../../library/sys.rst:521
msgid ":option:`-O` or :option:`-OO`"
msgstr ":option:`-O` 或 :option:`-OO`"

#: ../../library/sys.rst:522
msgid ":const:`dont_write_bytecode`"
msgstr ":const:`dont_write_bytecode`"

#: ../../library/sys.rst:522
msgid ":option:`-B`"
msgstr ":option:`-B`"

#: ../../library/sys.rst:523
msgid ":const:`no_user_site`"
msgstr ":const:`no_user_site`"

#: ../../library/sys.rst:523
msgid ":option:`-s`"
msgstr ":option:`-s`"

#: ../../library/sys.rst:524
msgid ":const:`no_site`"
msgstr ":const:`no_site`"

#: ../../library/sys.rst:524
msgid ":option:`-S`"
msgstr ":option:`-S`"

#: ../../library/sys.rst:525
msgid ":const:`ignore_environment`"
msgstr ":const:`ignore_environment`"

#: ../../library/sys.rst:525
msgid ":option:`-E`"
msgstr ":option:`-E`"

#: ../../library/sys.rst:526
msgid ":const:`verbose`"
msgstr ":const:`verbose`"

#: ../../library/sys.rst:526
msgid ":option:`-v`"
msgstr ":option:`-v`"

#: ../../library/sys.rst:527
msgid ":const:`bytes_warning`"
msgstr ":const:`bytes_warning`"

#: ../../library/sys.rst:527
msgid ":option:`-b`"
msgstr ":option:`-b`"

#: ../../library/sys.rst:528
msgid ":const:`quiet`"
msgstr ":const:`quiet`"

#: ../../library/sys.rst:528
msgid ":option:`-q`"
msgstr ":option:`-q`"

#: ../../library/sys.rst:529
msgid ":const:`hash_randomization`"
msgstr ":const:`hash_randomization`"

#: ../../library/sys.rst:529
msgid ":option:`-R`"
msgstr ":option:`-R`"

#: ../../library/sys.rst:530
msgid ":const:`dev_mode`"
msgstr ":const:`dev_mode`"

#: ../../library/sys.rst:530
msgid ":option:`-X dev <-X>` (:ref:`Python Development Mode <devmode>`)"
msgstr ""

#: ../../library/sys.rst:531
msgid ":const:`utf8_mode`"
msgstr ":const:`utf8_mode`"

#: ../../library/sys.rst:531
msgid ":option:`-X utf8 <-X>`"
msgstr ":option:`-X utf8 <-X>`"

#: ../../library/sys.rst:532
msgid ":const:`safe_path`"
msgstr ":const:`safe_path`"

#: ../../library/sys.rst:532
msgid ":option:`-P`"
msgstr ":option:`-P`"

#: ../../library/sys.rst:533
msgid ":const:`int_max_str_digits`"
msgstr ":const:`int_max_str_digits`"

#: ../../library/sys.rst:533
msgid ""
":option:`-X int_max_str_digits <-X>` (:ref:`integer string conversion length "
"limitation <int_max_str_digits>`)"
msgstr ""

#: ../../library/sys.rst:536
msgid "Added ``quiet`` attribute for the new :option:`-q` flag."
msgstr ""

#: ../../library/sys.rst:539
msgid "The ``hash_randomization`` attribute."
msgstr ""

#: ../../library/sys.rst:542
msgid "Removed obsolete ``division_warning`` attribute."
msgstr ""

#: ../../library/sys.rst:545
msgid "Added ``isolated`` attribute for :option:`-I` ``isolated`` flag."
msgstr ""

#: ../../library/sys.rst:548
msgid ""
"Added the ``dev_mode`` attribute for the new :ref:`Python Development Mode "
"<devmode>` and the ``utf8_mode`` attribute for the new  :option:`-X` "
"``utf8`` flag."
msgstr ""

#: ../../library/sys.rst:553
msgid "Added the ``safe_path`` attribute for :option:`-P` option."
msgstr ""

#: ../../library/sys.rst:556
msgid "Added the ``int_max_str_digits`` attribute."
msgstr ""

#: ../../library/sys.rst:562
msgid ""
"A :term:`named tuple` holding information about the float type. It contains "
"low level information about the precision and internal representation.  The "
"values correspond to the various floating-point constants defined in the "
"standard header file :file:`float.h` for the 'C' programming language; see "
"section 5.2.4.2.2 of the 1999 ISO/IEC C standard [C99]_, 'Characteristics of "
"floating types', for details."
msgstr ""

#: ../../library/sys.rst:572
msgid "float.h macro"
msgstr ""

#: ../../library/sys.rst:572 ../../library/sys.rst:925
msgid "explanation"
msgstr ""

#: ../../library/sys.rst:574
msgid "``epsilon``"
msgstr "``epsilon``"

#: ../../library/sys.rst:574
msgid "``DBL_EPSILON``"
msgstr "``DBL_EPSILON``"

#: ../../library/sys.rst:574
msgid ""
"difference between 1.0 and the least value greater than 1.0 that is "
"representable as a float"
msgstr ""

#: ../../library/sys.rst:577
msgid "See also :func:`math.ulp`."
msgstr "另請參閱 :func:`math.ulp`\\ 。"

#: ../../library/sys.rst:579
msgid "``dig``"
msgstr "``dig``"

#: ../../library/sys.rst:579
msgid "``DBL_DIG``"
msgstr "``DBL_DIG``"

#: ../../library/sys.rst:579
msgid ""
"maximum number of decimal digits that can be faithfully represented in a "
"float;  see below"
msgstr ""

#: ../../library/sys.rst:582
msgid "``mant_dig``"
msgstr "``mant_dig``"

#: ../../library/sys.rst:582
msgid "``DBL_MANT_DIG``"
msgstr "``DBL_MANT_DIG``"

#: ../../library/sys.rst:582
msgid ""
"float precision: the number of base-``radix`` digits in the significand of a "
"float"
msgstr ""

#: ../../library/sys.rst:585
msgid "``max``"
msgstr "``max``"

#: ../../library/sys.rst:585
msgid "``DBL_MAX``"
msgstr "``DBL_MAX``"

#: ../../library/sys.rst:585
msgid "maximum representable positive finite float"
msgstr ""

#: ../../library/sys.rst:587
msgid "``max_exp``"
msgstr "``max_exp``"

#: ../../library/sys.rst:587
msgid "``DBL_MAX_EXP``"
msgstr "``DBL_MAX_EXP``"

#: ../../library/sys.rst:587
msgid ""
"maximum integer *e* such that ``radix**(e-1)`` is a representable finite "
"float"
msgstr ""

#: ../../library/sys.rst:590
msgid "``max_10_exp``"
msgstr "``max_10_exp``"

#: ../../library/sys.rst:590
msgid "``DBL_MAX_10_EXP``"
msgstr "``DBL_MAX_10_EXP``"

#: ../../library/sys.rst:590
msgid ""
"maximum integer *e* such that ``10**e`` is in the range of representable "
"finite floats"
msgstr ""

#: ../../library/sys.rst:593
msgid "``min``"
msgstr "``min``"

#: ../../library/sys.rst:593
msgid "``DBL_MIN``"
msgstr "``DBL_MIN``"

#: ../../library/sys.rst:593
msgid "minimum representable positive *normalized* float"
msgstr ""

#: ../../library/sys.rst:595
msgid ""
"Use :func:`math.ulp(0.0) <math.ulp>` to get the smallest positive "
"*denormalized* representable float."
msgstr ""

#: ../../library/sys.rst:599
msgid "``min_exp``"
msgstr "``min_exp``"

#: ../../library/sys.rst:599
msgid "``DBL_MIN_EXP``"
msgstr "``DBL_MIN_EXP``"

#: ../../library/sys.rst:599
msgid "minimum integer *e* such that ``radix**(e-1)`` is a normalized float"
msgstr ""

#: ../../library/sys.rst:602
msgid "``min_10_exp``"
msgstr "``min_10_exp``"

#: ../../library/sys.rst:602
msgid "``DBL_MIN_10_EXP``"
msgstr "``DBL_MIN_10_EXP``"

#: ../../library/sys.rst:602
msgid "minimum integer *e* such that ``10**e`` is a normalized float"
msgstr ""

#: ../../library/sys.rst:605
msgid "``radix``"
msgstr "``radix``"

#: ../../library/sys.rst:605
msgid "``FLT_RADIX``"
msgstr "``FLT_RADIX``"

#: ../../library/sys.rst:605
msgid "radix of exponent representation"
msgstr ""

#: ../../library/sys.rst:607
msgid "``rounds``"
msgstr "``rounds``"

#: ../../library/sys.rst:607
msgid "``FLT_ROUNDS``"
msgstr "``FLT_ROUNDS``"

#: ../../library/sys.rst:607
msgid ""
"integer representing the rounding mode for floating-point arithmetic. This "
"reflects the value of the system ``FLT_ROUNDS`` macro at interpreter startup "
"time: ``-1`` indeterminable, ``0`` toward zero, ``1`` to nearest, ``2`` "
"toward positive infinity, ``3`` toward negative infinity"
msgstr ""

#: ../../library/sys.rst:617
msgid ""
"All other values for ``FLT_ROUNDS`` characterize implementation-defined "
"rounding behavior."
msgstr ""

#: ../../library/sys.rst:621
msgid ""
"The attribute :attr:`sys.float_info.dig` needs further explanation.  If "
"``s`` is any string representing a decimal number with at most :attr:`sys."
"float_info.dig` significant digits, then converting ``s`` to a float and "
"back again will recover a string representing the same decimal value::"
msgstr ""

#: ../../library/sys.rst:634
msgid ""
"But for strings with more than :attr:`sys.float_info.dig` significant "
"digits, this isn't always true::"
msgstr ""

#: ../../library/sys.rst:643
msgid ""
"A string indicating how the :func:`repr` function behaves for floats.  If "
"the string has value ``'short'`` then for a finite float ``x``, ``repr(x)`` "
"aims to produce a short string with the property that ``float(repr(x)) == "
"x``.  This is the usual behaviour in Python 3.1 and later.  Otherwise, "
"``float_repr_style`` has value ``'legacy'`` and ``repr(x)`` behaves in the "
"same way as it did in versions of Python prior to 3.1."
msgstr ""

#: ../../library/sys.rst:656
msgid ""
"Return the number of memory blocks currently allocated by the interpreter, "
"regardless of their size.  This function is mainly useful for tracking and "
"debugging memory leaks.  Because of the interpreter's internal caches, the "
"result can vary from call to call; you may have to call :func:"
"`_clear_type_cache()` and :func:`gc.collect()` to get more predictable "
"results."
msgstr ""

#: ../../library/sys.rst:663
msgid ""
"If a Python build or implementation cannot reasonably compute this "
"information, :func:`getallocatedblocks()` is allowed to return 0 instead."
msgstr ""

#: ../../library/sys.rst:671
msgid "Return the build time API version of Android as an integer."
msgstr ""

#: ../../library/sys.rst:673
msgid ":ref:`Availability <availability>`: Android."
msgstr ":ref:`適用 <availability>`：Android。"

#: ../../library/sys.rst:680
msgid ""
"Return the name of the current default string encoding used by the Unicode "
"implementation."
msgstr ""

#: ../../library/sys.rst:686
msgid ""
"Return the current value of the flags that are used for :c:func:`dlopen` "
"calls.  Symbolic names for the flag values can be found in the :mod:`os` "
"module (``RTLD_xxx`` constants, e.g. :data:`os.RTLD_LAZY`)."
msgstr ""

#: ../../library/sys.rst:691 ../../library/sys.rst:1347
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`適用 <availability>`：Unix。"

#: ../../library/sys.rst:696
msgid ""
"Get the :term:`filesystem encoding <filesystem encoding and error handler>`: "
"the encoding used with the :term:`filesystem error handler <filesystem "
"encoding and error handler>` to convert between Unicode filenames and bytes "
"filenames. The filesystem error handler is returned from :func:"
"`getfilesystemencoding`."
msgstr ""

#: ../../library/sys.rst:702
msgid ""
"For best compatibility, str should be used for filenames in all cases, "
"although representing filenames as bytes is also supported. Functions "
"accepting or returning filenames should support either str or bytes and "
"internally convert to the system's preferred representation."
msgstr ""

#: ../../library/sys.rst:707 ../../library/sys.rst:735
msgid ""
":func:`os.fsencode` and :func:`os.fsdecode` should be used to ensure that "
"the correct encoding and errors mode are used."
msgstr ""

#: ../../library/sys.rst:710 ../../library/sys.rst:738
msgid ""
"The :term:`filesystem encoding and error handler` are configured at Python "
"startup by the :c:func:`PyConfig_Read` function: see :c:member:`~PyConfig."
"filesystem_encoding` and :c:member:`~PyConfig.filesystem_errors` members of :"
"c:type:`PyConfig`."
msgstr ""

#: ../../library/sys.rst:715
msgid ":func:`getfilesystemencoding` result cannot be ``None`` anymore."
msgstr ":func:`getfilesystemencoding` 的結果不再為 ``None``。"

#: ../../library/sys.rst:718
msgid ""
"Windows is no longer guaranteed to return ``'mbcs'``. See :pep:`529` and :"
"func:`_enablelegacywindowsfsencoding` for more information."
msgstr ""

#: ../../library/sys.rst:722
msgid ""
"Return ``'utf-8'`` if the :ref:`Python UTF-8 Mode <utf8-mode>` is enabled."
msgstr ""

#: ../../library/sys.rst:729
msgid ""
"Get the :term:`filesystem error handler <filesystem encoding and error "
"handler>`: the error handler used with the :term:`filesystem encoding "
"<filesystem encoding and error handler>` to convert between Unicode "
"filenames and bytes filenames. The filesystem encoding is returned from :"
"func:`getfilesystemencoding`."
msgstr ""

#: ../../library/sys.rst:747
msgid ""
"Returns the current value for the :ref:`integer string conversion length "
"limitation <int_max_str_digits>`. See also :func:`set_int_max_str_digits`."
msgstr ""

#: ../../library/sys.rst:754
msgid ""
"Return the reference count of the *object*.  The count returned is generally "
"one higher than you might expect, because it includes the (temporary) "
"reference as an argument to :func:`getrefcount`."
msgstr ""

#: ../../library/sys.rst:761
msgid ""
"Return the current value of the recursion limit, the maximum depth of the "
"Python interpreter stack.  This limit prevents infinite recursion from "
"causing an overflow of the C stack and crashing Python.  It can be set by :"
"func:`setrecursionlimit`."
msgstr ""

#: ../../library/sys.rst:769
msgid ""
"Return the size of an object in bytes. The object can be any type of object. "
"All built-in objects will return correct results, but this does not have to "
"hold true for third-party extensions as it is implementation specific."
msgstr ""

#: ../../library/sys.rst:774
msgid ""
"Only the memory consumption directly attributed to the object is accounted "
"for, not the memory consumption of objects it refers to."
msgstr ""

#: ../../library/sys.rst:777
msgid ""
"If given, *default* will be returned if the object does not provide means to "
"retrieve the size.  Otherwise a :exc:`TypeError` will be raised."
msgstr ""

#: ../../library/sys.rst:780
msgid ""
":func:`getsizeof` calls the object's ``__sizeof__`` method and adds an "
"additional garbage collector overhead if the object is managed by the "
"garbage collector."
msgstr ""

#: ../../library/sys.rst:784
msgid ""
"See `recursive sizeof recipe <https://code.activestate.com/recipes/577504>`_ "
"for an example of using :func:`getsizeof` recursively to find the size of "
"containers and all their contents."
msgstr ""

#: ../../library/sys.rst:790
msgid ""
"Return the interpreter's \"thread switch interval\"; see :func:"
"`setswitchinterval`."
msgstr ""

#: ../../library/sys.rst:798
msgid ""
"Return a frame object from the call stack.  If optional integer *depth* is "
"given, return the frame object that many calls below the top of the stack.  "
"If that is deeper than the call stack, :exc:`ValueError` is raised.  The "
"default for *depth* is zero, returning the frame at the top of the call "
"stack."
msgstr ""

#: ../../library/sys.rst:6
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys._getframe`` with argument "
"``frame``."
msgstr ""

#: ../../library/sys.rst:807
msgid ""
"This function should be used for internal and specialized purposes only. It "
"is not guaranteed to exist in all implementations of Python."
msgstr ""

#: ../../library/sys.rst:817
msgid "Get the profiler function as set by :func:`setprofile`."
msgstr ""

#: ../../library/sys.rst:826
msgid "Get the trace function as set by :func:`settrace`."
msgstr ""

#: ../../library/sys.rst:830
msgid ""
"The :func:`gettrace` function is intended only for implementing debuggers, "
"profilers, coverage tools and the like.  Its behavior is part of the "
"implementation platform, rather than part of the language definition, and "
"thus may not be available in all Python implementations."
msgstr ""

#: ../../library/sys.rst:838
msgid ""
"Return a named tuple describing the Windows version currently running.  The "
"named elements are *major*, *minor*, *build*, *platform*, *service_pack*, "
"*service_pack_minor*, *service_pack_major*, *suite_mask*, *product_type* and "
"*platform_version*. *service_pack* contains a string, *platform_version* a 3-"
"tuple and all other values are integers. The components can also be accessed "
"by name, so ``sys.getwindowsversion()[0]`` is equivalent to ``sys."
"getwindowsversion().major``. For compatibility with prior versions, only the "
"first 5 elements are retrievable by indexing."
msgstr ""

#: ../../library/sys.rst:849
msgid "*platform* will be :const:`2 (VER_PLATFORM_WIN32_NT)`."
msgstr ""

#: ../../library/sys.rst:851
msgid "*product_type* may be one of the following values:"
msgstr ""

#: ../../library/sys.rst:854
msgid "Constant"
msgstr ""

#: ../../library/sys.rst:854
msgid "Meaning"
msgstr ""

#: ../../library/sys.rst:856
msgid ":const:`1 (VER_NT_WORKSTATION)`"
msgstr ":const:`1 (VER_NT_WORKSTATION)`"

#: ../../library/sys.rst:856
msgid "The system is a workstation."
msgstr ""

#: ../../library/sys.rst:858
msgid ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"
msgstr ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"

#: ../../library/sys.rst:858
msgid "The system is a domain controller."
msgstr ""

#: ../../library/sys.rst:861
msgid ":const:`3 (VER_NT_SERVER)`"
msgstr ":const:`3 (VER_NT_SERVER)`"

#: ../../library/sys.rst:861
msgid "The system is a server, but not a domain controller."
msgstr ""

#: ../../library/sys.rst:865
msgid ""
"This function wraps the Win32 :c:func:`GetVersionEx` function; see the "
"Microsoft documentation on :c:func:`OSVERSIONINFOEX` for more information "
"about these fields."
msgstr ""

#: ../../library/sys.rst:869
msgid ""
"*platform_version* returns the major version, minor version and build number "
"of the current operating system, rather than the version that is being "
"emulated for the process. It is intended for use in logging rather than for "
"feature detection."
msgstr ""

#: ../../library/sys.rst:875
msgid ""
"*platform_version* derives the version from kernel32.dll which can be of a "
"different version than the OS version. Please use :mod:`platform` module for "
"achieving accurate OS version."
msgstr ""

#: ../../library/sys.rst:881
msgid ""
"Changed to a named tuple and added *service_pack_minor*, "
"*service_pack_major*, *suite_mask*, and *product_type*."
msgstr ""

#: ../../library/sys.rst:885
msgid "Added *platform_version*"
msgstr "新增 *platform_version*"

#: ../../library/sys.rst:891
msgid ""
"Returns an *asyncgen_hooks* object, which is similar to a :class:"
"`~collections.namedtuple` of the form ``(firstiter, finalizer)``, where "
"*firstiter* and *finalizer* are expected to be either ``None`` or functions "
"which take an :term:`asynchronous generator iterator` as an argument, and "
"are used to schedule finalization of an asynchronous generator by an event "
"loop."
msgstr ""

#: ../../library/sys.rst:898
msgid "See :pep:`525` for more details."
msgstr "更多細節請見 :pep:`525`\\ 。"

#: ../../library/sys.rst:902 ../../library/sys.rst:1549
msgid ""
"This function has been added on a provisional basis (see :pep:`411` for "
"details.)"
msgstr ""

#: ../../library/sys.rst:908
msgid ""
"Get the current coroutine origin tracking depth, as set by :func:"
"`set_coroutine_origin_tracking_depth`."
msgstr ""

#: ../../library/sys.rst:914 ../../library/sys.rst:1570
msgid ""
"This function has been added on a provisional basis (see :pep:`411` for "
"details.)  Use it only for debugging purposes."
msgstr ""

#: ../../library/sys.rst:920
msgid ""
"A :term:`named tuple` giving parameters of the numeric hash implementation.  "
"For more details about hashing of numeric types, see :ref:`numeric-hash`."
msgstr ""

#: ../../library/sys.rst:927
msgid ":const:`width`"
msgstr ":const:`width`"

#: ../../library/sys.rst:927
msgid "width in bits used for hash values"
msgstr ""

#: ../../library/sys.rst:929
msgid ":const:`modulus`"
msgstr ":const:`modulus`"

#: ../../library/sys.rst:929
msgid "prime modulus P used for numeric hash scheme"
msgstr ""

#: ../../library/sys.rst:931
msgid ":const:`inf`"
msgstr ":const:`inf`"

#: ../../library/sys.rst:931
msgid "hash value returned for a positive infinity"
msgstr ""

#: ../../library/sys.rst:933
msgid ":const:`nan`"
msgstr ":const:`nan`"

#: ../../library/sys.rst:933
msgid "(this attribute is no longer used)"
msgstr ""

#: ../../library/sys.rst:935
msgid ":const:`imag`"
msgstr ":const:`imag`"

#: ../../library/sys.rst:935
msgid "multiplier used for the imaginary part of a complex number"
msgstr ""

#: ../../library/sys.rst:938
msgid ":const:`algorithm`"
msgstr ":const:`algorithm`"

#: ../../library/sys.rst:938
msgid "name of the algorithm for hashing of str, bytes, and memoryview"
msgstr ""

#: ../../library/sys.rst:941
msgid ":const:`hash_bits`"
msgstr ":const:`hash_bits`"

#: ../../library/sys.rst:941
msgid "internal output size of the hash algorithm"
msgstr ""

#: ../../library/sys.rst:943
msgid ":const:`seed_bits`"
msgstr ":const:`seed_bits`"

#: ../../library/sys.rst:943
msgid "size of the seed key of the hash algorithm"
msgstr ""

#: ../../library/sys.rst:949
msgid "Added *algorithm*, *hash_bits* and *seed_bits*"
msgstr "新增 *algorithm*\\ 、\\ *hash_bits* 與 *seed_bits*"

#: ../../library/sys.rst:955
msgid ""
"The version number encoded as a single integer.  This is guaranteed to "
"increase with each version, including proper support for non-production "
"releases.  For example, to test that the Python interpreter is at least "
"version 1.5.2, use::"
msgstr ""

#: ../../library/sys.rst:966
msgid ""
"This is called ``hexversion`` since it only really looks meaningful when "
"viewed as the result of passing it to the built-in :func:`hex` function.  "
"The :term:`named tuple`  :data:`sys.version_info` may be used for a more "
"human-friendly encoding of the same information."
msgstr ""

#: ../../library/sys.rst:971
msgid "More details of ``hexversion`` can be found at :ref:`apiabiversion`."
msgstr ""

#: ../../library/sys.rst:976
msgid ""
"An object containing information about the implementation of the currently "
"running Python interpreter.  The following attributes are required to exist "
"in all Python implementations."
msgstr ""

#: ../../library/sys.rst:980
msgid ""
"*name* is the implementation's identifier, e.g. ``'cpython'``.  The actual "
"string is defined by the Python implementation, but it is guaranteed to be "
"lower case."
msgstr ""

#: ../../library/sys.rst:984
msgid ""
"*version* is a named tuple, in the same format as :data:`sys.version_info`.  "
"It represents the version of the Python *implementation*.  This has a "
"distinct meaning from the specific version of the Python *language* to which "
"the currently running interpreter conforms, which ``sys.version_info`` "
"represents.  For example, for PyPy 1.8 ``sys.implementation.version`` might "
"be ``sys.version_info(1, 8, 0, 'final', 0)``, whereas ``sys.version_info`` "
"would be ``sys.version_info(2, 7, 2, 'final', 0)``.  For CPython they are "
"the same value, since it is the reference implementation."
msgstr ""

#: ../../library/sys.rst:994
msgid ""
"*hexversion* is the implementation version in hexadecimal format, like :data:"
"`sys.hexversion`."
msgstr ""

#: ../../library/sys.rst:997
msgid ""
"*cache_tag* is the tag used by the import machinery in the filenames of "
"cached modules.  By convention, it would be a composite of the "
"implementation's name and version, like ``'cpython-33'``.  However, a Python "
"implementation may use some other value if appropriate.  If ``cache_tag`` is "
"set to ``None``, it indicates that module caching should be disabled."
msgstr ""

#: ../../library/sys.rst:1004
msgid ""
":data:`sys.implementation` may contain additional attributes specific to the "
"Python implementation.  These non-standard attributes must start with an "
"underscore, and are not described here.  Regardless of its contents, :data:"
"`sys.implementation` will not change during a run of the interpreter, nor "
"between implementation versions.  (It may change between Python language "
"versions, however.)  See :pep:`421` for more information."
msgstr ""

#: ../../library/sys.rst:1015
msgid ""
"The addition of new required attributes must go through the normal PEP "
"process. See :pep:`421` for more information."
msgstr ""

#: ../../library/sys.rst:1020
msgid ""
"A :term:`named tuple` that holds information about Python's internal "
"representation of integers.  The attributes are read only."
msgstr ""

#: ../../library/sys.rst:1028
msgid ":const:`bits_per_digit`"
msgstr ":const:`bits_per_digit`"

#: ../../library/sys.rst:1028
msgid ""
"number of bits held in each digit.  Python integers are stored internally in "
"base ``2**int_info.bits_per_digit``"
msgstr ""

#: ../../library/sys.rst:1032
msgid ":const:`sizeof_digit`"
msgstr ":const:`sizeof_digit`"

#: ../../library/sys.rst:1032
msgid "size in bytes of the C type used to represent a digit"
msgstr ""

#: ../../library/sys.rst:1035
msgid ":const:`default_max_str_digits`"
msgstr ":const:`default_max_str_digits`"

#: ../../library/sys.rst:1035
msgid ""
"default value for :func:`sys.get_int_max_str_digits` when it is not "
"otherwise explicitly configured."
msgstr ""

#: ../../library/sys.rst:1039
msgid ":const:`str_digits_check_threshold`"
msgstr ":const:`str_digits_check_threshold`"

#: ../../library/sys.rst:1039
msgid ""
"minimum non-zero value for :func:`sys.set_int_max_str_digits`, :envvar:"
"`PYTHONINTMAXSTRDIGITS`, or :option:`-X int_max_str_digits <-X>`."
msgstr ""

#: ../../library/sys.rst:1047
msgid "Added ``default_max_str_digits`` and ``str_digits_check_threshold``."
msgstr "新增 ``default_max_str_digits`` 和 ``str_digits_check_threshold``。"

#: ../../library/sys.rst:1053
msgid ""
"When this attribute exists, its value is automatically called (with no "
"arguments) when the interpreter is launched in :ref:`interactive mode <tut-"
"interactive>`.  This is done after the :envvar:`PYTHONSTARTUP` file is read, "
"so that you can set this hook there.  The :mod:`site` module :ref:`sets this "
"<rlcompleter-config>`."
msgstr ""

#: ../../library/sys.rst:7
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_interactivehook`` "
"with argument ``hook``."
msgstr ""

#: ../../library/sys.rst:1061
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_interactivehook`` "
"with the hook object as the argument when the hook is called on startup."
msgstr ""

#: ../../library/sys.rst:1070
msgid ""
"Enter *string* in the table of \"interned\" strings and return the interned "
"string -- which is *string* itself or a copy. Interning strings is useful to "
"gain a little performance on dictionary lookup -- if the keys in a "
"dictionary are interned, and the lookup key is interned, the key comparisons "
"(after hashing) can be done by a pointer compare instead of a string "
"compare.  Normally, the names used in Python programs are automatically "
"interned, and the dictionaries used to hold module, class or instance "
"attributes have interned keys."
msgstr ""

#: ../../library/sys.rst:1078
msgid ""
"Interned strings are not immortal; you must keep a reference to the return "
"value of :func:`intern` around to benefit from it."
msgstr ""

#: ../../library/sys.rst:1084
msgid ""
"Return :const:`True` if the Python interpreter is :term:`shutting down "
"<interpreter shutdown>`, :const:`False` otherwise."
msgstr ""

#: ../../library/sys.rst:1094
msgid ""
"These three variables are not always defined; they are set when an exception "
"is not handled and the interpreter prints an error message and a stack "
"traceback. Their intended use is to allow an interactive user to import a "
"debugger module and engage in post-mortem debugging without having to re-"
"execute the command that caused the error.  (Typical use is ``import pdb; "
"pdb.pm()`` to enter the post-mortem debugger; see :mod:`pdb` module for more "
"information.)"
msgstr ""

#: ../../library/sys.rst:1102
msgid ""
"The meaning of the variables is the same as that of the return values from :"
"func:`exc_info` above."
msgstr ""

#: ../../library/sys.rst:1108
msgid ""
"An integer giving the maximum value a variable of type :c:type:`Py_ssize_t` "
"can take.  It's usually ``2**31 - 1`` on a 32-bit platform and ``2**63 - 1`` "
"on a 64-bit platform."
msgstr ""

#: ../../library/sys.rst:1115
msgid ""
"An integer giving the value of the largest Unicode code point, i.e. "
"``1114111`` (``0x10FFFF`` in hexadecimal)."
msgstr ""

#: ../../library/sys.rst:1118
msgid ""
"Before :pep:`393`, ``sys.maxunicode`` used to be either ``0xFFFF`` or "
"``0x10FFFF``, depending on the configuration option that specified whether "
"Unicode characters were stored as UCS-2 or UCS-4."
msgstr ""

#: ../../library/sys.rst:1126
msgid ""
"A list of :term:`meta path finder` objects that have their :meth:`~importlib."
"abc.MetaPathFinder.find_spec` methods called to see if one of the objects "
"can find the module to be imported. By default, it holds entries that "
"implement Python's default import semantics. The :meth:`~importlib.abc."
"MetaPathFinder.find_spec` method is called with at least the absolute name "
"of the module being imported. If the module to be imported is contained in a "
"package, then the parent package's :attr:`__path__` attribute is passed in "
"as a second argument. The method returns a :term:`module spec`, or ``None`` "
"if the module cannot be found."
msgstr ""

#: ../../library/sys.rst:1139
msgid ":class:`importlib.abc.MetaPathFinder`"
msgstr ":class:`importlib.abc.MetaPathFinder`"

#: ../../library/sys.rst:1139
msgid ""
"The abstract base class defining the interface of finder objects on :data:"
"`meta_path`."
msgstr ""

#: ../../library/sys.rst:1143
msgid ":class:`importlib.machinery.ModuleSpec`"
msgstr ":class:`importlib.machinery.ModuleSpec`"

#: ../../library/sys.rst:1142
msgid ""
"The concrete class which :meth:`~importlib.abc.MetaPathFinder.find_spec` "
"should return instances of."
msgstr ""

#: ../../library/sys.rst:1148
msgid ""
":term:`Module specs <module spec>` were introduced in Python 3.4, by :pep:"
"`451`. Earlier versions of Python looked for a method called :meth:"
"`~importlib.abc.MetaPathFinder.find_module`. This is still called as a "
"fallback if a :data:`meta_path` entry doesn't have a :meth:`~importlib.abc."
"MetaPathFinder.find_spec` method."
msgstr ""

#: ../../library/sys.rst:1156
msgid ""
"This is a dictionary that maps module names to modules which have already "
"been loaded.  This can be manipulated to force reloading of modules and "
"other tricks. However, replacing the dictionary will not necessarily work as "
"expected and deleting essential items from the dictionary may cause Python "
"to fail.  If you want to iterate over this global dictionary always use "
"``sys.modules.copy()`` or ``tuple(sys.modules)`` to avoid exceptions as its "
"size may change during iteration as a side effect of code or activity in "
"other threads."
msgstr ""

#: ../../library/sys.rst:1168
msgid ""
"The list of the original command line arguments passed to the Python "
"executable."
msgstr ""

#: ../../library/sys.rst:1171
msgid "See also :data:`sys.argv`."
msgstr "另請參閱 :data:`sys.argv`\\ 。"

#: ../../library/sys.rst:1180
msgid ""
"A list of strings that specifies the search path for modules. Initialized "
"from the environment variable :envvar:`PYTHONPATH`, plus an installation-"
"dependent default."
msgstr ""

#: ../../library/sys.rst:1184
msgid ""
"By default, as initialized upon program startup, a potentially unsafe path "
"is prepended to :data:`sys.path` (*before* the entries inserted as a result "
"of :envvar:`PYTHONPATH`):"
msgstr ""

#: ../../library/sys.rst:1188
msgid ""
"``python -m module`` command line: prepend the current working directory."
msgstr ""

#: ../../library/sys.rst:1190
msgid ""
"``python script.py`` command line: prepend the script's directory. If it's a "
"symbolic link, resolve symbolic links."
msgstr ""

#: ../../library/sys.rst:1192
msgid ""
"``python -c code`` and ``python`` (REPL) command lines: prepend an empty "
"string, which means the current working directory."
msgstr ""

#: ../../library/sys.rst:1195
msgid ""
"To not prepend this potentially unsafe path, use the :option:`-P` command "
"line option or the :envvar:`PYTHONSAFEPATH` environment variable."
msgstr ""

#: ../../library/sys.rst:1198
msgid ""
"A program is free to modify this list for its own purposes.  Only strings "
"should be added to :data:`sys.path`; all other data types are ignored during "
"import."
msgstr ""

#: ../../library/sys.rst:1204
msgid ""
"Module :mod:`site` This describes how to use .pth files to extend :data:`sys."
"path`."
msgstr ""

#: ../../library/sys.rst:1209
msgid ""
"A list of callables that take a path argument to try to create a :term:"
"`finder` for the path. If a finder can be created, it is to be returned by "
"the callable, else raise :exc:`ImportError`."
msgstr ""

#: ../../library/sys.rst:1213 ../../library/sys.rst:1224
msgid "Originally specified in :pep:`302`."
msgstr ""

#: ../../library/sys.rst:1218
msgid ""
"A dictionary acting as a cache for :term:`finder` objects. The keys are "
"paths that have been passed to :data:`sys.path_hooks` and the values are the "
"finders that are found. If a path is a valid file system path but no finder "
"is found on :data:`sys.path_hooks` then ``None`` is stored."
msgstr ""

#: ../../library/sys.rst:1226
msgid ""
"``None`` is stored instead of :class:`imp.NullImporter` when no finder is "
"found."
msgstr ""

#: ../../library/sys.rst:1233
msgid ""
"This string contains a platform identifier that can be used to append "
"platform-specific components to :data:`sys.path`, for instance."
msgstr ""

#: ../../library/sys.rst:1236
msgid ""
"For Unix systems, except on Linux and AIX, this is the lowercased OS name as "
"returned by ``uname -s`` with the first part of the version as returned by "
"``uname -r`` appended, e.g. ``'sunos5'`` or ``'freebsd8'``, *at the time "
"when Python was built*.  Unless you want to test for a specific system "
"version, it is therefore recommended to use the following idiom::"
msgstr ""

#: ../../library/sys.rst:1249
msgid "For other systems, the values are:"
msgstr ""

#: ../../library/sys.rst:1252
msgid "System"
msgstr ""

#: ../../library/sys.rst:1252
msgid "``platform`` value"
msgstr ""

#: ../../library/sys.rst:1254
msgid "AIX"
msgstr "AIX"

#: ../../library/sys.rst:1254
msgid "``'aix'``"
msgstr "``'aix'``"

#: ../../library/sys.rst:1255
msgid "Emscripten"
msgstr "Emscripten"

#: ../../library/sys.rst:1255
msgid "``'emscripten'``"
msgstr "``'emscripten'``"

#: ../../library/sys.rst:1256
msgid "Linux"
msgstr "Linux"

#: ../../library/sys.rst:1256
msgid "``'linux'``"
msgstr "``'linux'``"

#: ../../library/sys.rst:1257
msgid "WASI"
msgstr "WASI"

#: ../../library/sys.rst:1257
msgid "``'wasi'``"
msgstr "``'wasi'``"

#: ../../library/sys.rst:1258
msgid "Windows"
msgstr "Windows"

#: ../../library/sys.rst:1258
msgid "``'win32'``"
msgstr "``'win32'``"

#: ../../library/sys.rst:1259
msgid "Windows/Cygwin"
msgstr "Windows/Cygwin"

#: ../../library/sys.rst:1259
msgid "``'cygwin'``"
msgstr "``'cygwin'``"

#: ../../library/sys.rst:1260
msgid "macOS"
msgstr "macOS"

#: ../../library/sys.rst:1260
msgid "``'darwin'``"
msgstr "``'darwin'``"

#: ../../library/sys.rst:1263
msgid ""
"On Linux, :attr:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'linux'``, instead of ``'linux2'`` or ``'linux3'``.  Since older "
"Python versions include the version number, it is recommended to always use "
"the ``startswith`` idiom presented above."
msgstr ""

#: ../../library/sys.rst:1269
msgid ""
"On AIX, :attr:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'aix'``, instead of ``'aix5'`` or ``'aix7'``.  Since older "
"Python versions include the version number, it is recommended to always use "
"the ``startswith`` idiom presented above."
msgstr ""

#: ../../library/sys.rst:1277
msgid ""
":attr:`os.name` has a coarser granularity.  :func:`os.uname` gives system-"
"dependent version information."
msgstr ""

#: ../../library/sys.rst:1280
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ""

#: ../../library/sys.rst:1286
msgid ""
"Name of the platform-specific library directory. It is used to build the "
"path of standard library and the paths of installed extension modules."
msgstr ""

#: ../../library/sys.rst:1289
msgid ""
"It is equal to ``\"lib\"`` on most platforms. On Fedora and SuSE, it is "
"equal to ``\"lib64\"`` on 64-bit platforms which gives the following ``sys."
"path`` paths (where ``X.Y`` is the Python ``major.minor`` version):"
msgstr ""

#: ../../library/sys.rst:1293
msgid ""
"``/usr/lib64/pythonX.Y/``: Standard library (like ``os.py`` of the :mod:`os` "
"module)"
msgstr ""

#: ../../library/sys.rst:1295
msgid ""
"``/usr/lib64/pythonX.Y/lib-dynload/``: C extension modules of the standard "
"library (like the :mod:`errno` module, the exact filename is platform "
"specific)"
msgstr ""

#: ../../library/sys.rst:1298
msgid ""
"``/usr/lib/pythonX.Y/site-packages/`` (always use ``lib``, not :data:`sys."
"platlibdir`): Third-party modules"
msgstr ""

#: ../../library/sys.rst:1300
msgid ""
"``/usr/lib64/pythonX.Y/site-packages/``: C extension modules of third-party "
"packages"
msgstr ""

#: ../../library/sys.rst:1308
msgid ""
"A string giving the site-specific directory prefix where the platform "
"independent Python files are installed; on Unix, the default is ``'/usr/"
"local'``.  This can be set at build time with the ``--prefix`` argument to "
"the :program:`configure` script.  See :ref:`installation_paths` for derived "
"paths."
msgstr ""

#: ../../library/sys.rst:1314
msgid ""
"If a :ref:`virtual environment <venv-def>` is in effect, this value will be "
"changed in ``site.py`` to point to the virtual environment. The value for "
"the Python installation will still be available, via :data:`base_prefix`."
msgstr ""

#: ../../library/sys.rst:1329
msgid ""
"Strings specifying the primary and secondary prompt of the interpreter.  "
"These are only defined if the interpreter is in interactive mode.  Their "
"initial values in this case are ``'>>> '`` and ``'... '``.  If a non-string "
"object is assigned to either variable, its :func:`str` is re-evaluated each "
"time the interpreter prepares to read a new interactive command; this can be "
"used to implement a dynamic prompt."
msgstr ""

#: ../../library/sys.rst:1339
msgid ""
"Set the flags used by the interpreter for :c:func:`dlopen` calls, such as "
"when the interpreter loads extension modules.  Among other things, this will "
"enable a lazy resolving of symbols when importing a module, if called as "
"``sys.setdlopenflags(0)``.  To share symbols across extension modules, call "
"as ``sys.setdlopenflags(os.RTLD_GLOBAL)``.  Symbolic names for the flag "
"values can be found in the :mod:`os` module (``RTLD_xxx`` constants, e.g. :"
"data:`os.RTLD_LAZY`)."
msgstr ""

#: ../../library/sys.rst:1351
msgid ""
"Set the :ref:`integer string conversion length limitation "
"<int_max_str_digits>` used by this interpreter. See also :func:"
"`get_int_max_str_digits`."
msgstr ""

#: ../../library/sys.rst:1363
msgid ""
"Set the system's profile function, which allows you to implement a Python "
"source code profiler in Python.  See chapter :ref:`profile` for more "
"information on the Python profiler.  The system's profile function is called "
"similarly to the system's trace function (see :func:`settrace`), but it is "
"called with different events, for example it isn't called for each executed "
"line of code (only on call and return, but the return event is reported even "
"when an exception has been set). The function is thread-specific, but there "
"is no way for the profiler to know about context switches between threads, "
"so it does not make sense to use this in the presence of multiple threads. "
"Also, its return value is not used, so it can simply return ``None``.  Error "
"in the profile function will cause itself unset."
msgstr ""

#: ../../library/sys.rst:1374
msgid ""
"Profile functions should have three arguments: *frame*, *event*, and *arg*. "
"*frame* is the current stack frame.  *event* is a string: ``'call'``, "
"``'return'``, ``'c_call'``, ``'c_return'``, or ``'c_exception'``. *arg* "
"depends on the event type."
msgstr ""

#: ../../library/sys.rst:21
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.setprofile`` with no "
"arguments."
msgstr ""

#: ../../library/sys.rst:1381 ../../library/sys.rst:1462
msgid "The events have the following meaning:"
msgstr ""

#: ../../library/sys.rst:1385 ../../library/sys.rst:1467
msgid "``'call'``"
msgstr "``'call'``"

#: ../../library/sys.rst:1384
msgid ""
"A function is called (or some other code block entered).  The profile "
"function is called; *arg* is ``None``."
msgstr ""

#: ../../library/sys.rst:1390 ../../library/sys.rst:1482
msgid "``'return'``"
msgstr "``'return'``"

#: ../../library/sys.rst:1388
msgid ""
"A function (or other code block) is about to return.  The profile function "
"is called; *arg* is the value that will be returned, or ``None`` if the "
"event is caused by an exception being raised."
msgstr ""

#: ../../library/sys.rst:1394
msgid "``'c_call'``"
msgstr "``'c_call'``"

#: ../../library/sys.rst:1393
msgid ""
"A C function is about to be called.  This may be an extension function or a "
"built-in.  *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1397
msgid "``'c_return'``"
msgstr "``'c_return'``"

#: ../../library/sys.rst:1397
msgid "A C function has returned. *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1399
msgid "``'c_exception'``"
msgstr "``'c_exception'``"

#: ../../library/sys.rst:1400
msgid "A C function has raised an exception.  *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1404
msgid ""
"Set the maximum depth of the Python interpreter stack to *limit*.  This "
"limit prevents infinite recursion from causing an overflow of the C stack "
"and crashing Python."
msgstr ""

#: ../../library/sys.rst:1408
msgid ""
"The highest possible limit is platform-dependent.  A user may need to set "
"the limit higher when they have a program that requires deep recursion and a "
"platform that supports a higher limit.  This should be done with care, "
"because a too-high limit can lead to a crash."
msgstr ""

#: ../../library/sys.rst:1413
msgid ""
"If the new limit is too low at the current recursion depth, a :exc:"
"`RecursionError` exception is raised."
msgstr ""

#: ../../library/sys.rst:1416
msgid ""
"A :exc:`RecursionError` exception is now raised if the new limit is too low "
"at the current recursion depth."
msgstr ""

#: ../../library/sys.rst:1423
msgid ""
"Set the interpreter's thread switch interval (in seconds).  This floating-"
"point value determines the ideal duration of the \"timeslices\" allocated to "
"concurrently running Python threads.  Please note that the actual value can "
"be higher, especially if long-running internal functions or methods are "
"used.  Also, which thread becomes scheduled at the end of the interval is "
"the operating system's decision.  The interpreter doesn't have its own "
"scheduler."
msgstr ""

#: ../../library/sys.rst:1440
msgid ""
"Set the system's trace function, which allows you to implement a Python "
"source code debugger in Python.  The function is thread-specific; for a "
"debugger to support multiple threads, it must register a trace function "
"using :func:`settrace` for each thread being debugged or use :func:"
"`threading.settrace`."
msgstr ""

#: ../../library/sys.rst:1445
msgid ""
"Trace functions should have three arguments: *frame*, *event*, and *arg*. "
"*frame* is the current stack frame.  *event* is a string: ``'call'``, "
"``'line'``, ``'return'``, ``'exception'`` or ``'opcode'``.  *arg* depends on "
"the event type."
msgstr ""

#: ../../library/sys.rst:1450
msgid ""
"The trace function is invoked (with *event* set to ``'call'``) whenever a "
"new local scope is entered; it should return a reference to a local trace "
"function to be used for the new scope, or ``None`` if the scope shouldn't be "
"traced."
msgstr ""

#: ../../library/sys.rst:1455
msgid ""
"The local trace function should return a reference to itself (or to another "
"function for further tracing in that scope), or ``None`` to turn off tracing "
"in that scope."
msgstr ""

#: ../../library/sys.rst:1459
msgid ""
"If there is any error occurred in the trace function, it will be unset, just "
"like ``settrace(None)`` is called."
msgstr ""

#: ../../library/sys.rst:1465
msgid ""
"A function is called (or some other code block entered).  The global trace "
"function is called; *arg* is ``None``; the return value specifies the local "
"trace function."
msgstr ""

#: ../../library/sys.rst:1476
msgid "``'line'``"
msgstr "``'line'``"

#: ../../library/sys.rst:1470
msgid ""
"The interpreter is about to execute a new line of code or re-execute the "
"condition of a loop.  The local trace function is called; *arg* is ``None``; "
"the return value specifies the new local trace function.  See :file:`Objects/"
"lnotab_notes.txt` for a detailed explanation of how this works. Per-line "
"events may be disabled for a frame by setting :attr:`f_trace_lines` to :"
"const:`False` on that frame."
msgstr ""

#: ../../library/sys.rst:1479
msgid ""
"A function (or other code block) is about to return.  The local trace "
"function is called; *arg* is the value that will be returned, or ``None`` if "
"the event is caused by an exception being raised.  The trace function's "
"return value is ignored."
msgstr ""

#: ../../library/sys.rst:1487
msgid "``'exception'``"
msgstr "``'exception'``"

#: ../../library/sys.rst:1485
msgid ""
"An exception has occurred.  The local trace function is called; *arg* is a "
"tuple ``(exception, value, traceback)``; the return value specifies the new "
"local trace function."
msgstr ""

#: ../../library/sys.rst:1495
msgid "``'opcode'``"
msgstr "``'opcode'``"

#: ../../library/sys.rst:1490
msgid ""
"The interpreter is about to execute a new opcode (see :mod:`dis` for opcode "
"details).  The local trace function is called; *arg* is ``None``; the return "
"value specifies the new local trace function. Per-opcode events are not "
"emitted by default: they must be explicitly requested by setting :attr:"
"`f_trace_opcodes` to :const:`True` on the frame."
msgstr ""

#: ../../library/sys.rst:1497
msgid ""
"Note that as an exception is propagated down the chain of callers, an "
"``'exception'`` event is generated at each level."
msgstr ""

#: ../../library/sys.rst:1500
msgid ""
"For more fine-grained usage, it's possible to set a trace function by "
"assigning ``frame.f_trace = tracefunc`` explicitly, rather than relying on "
"it being set indirectly via the return value from an already installed trace "
"function. This is also required for activating the trace function on the "
"current frame, which :func:`settrace` doesn't do. Note that in order for "
"this to work, a global tracing function must have been installed with :func:"
"`settrace` in order to enable the runtime tracing machinery, but it doesn't "
"need to be the same tracing function (e.g. it could be a low overhead "
"tracing function that simply returns ``None`` to disable itself immediately "
"on each frame)."
msgstr ""

#: ../../library/sys.rst:1511
msgid "For more information on code and frame objects, refer to :ref:`types`."
msgstr ""

#: ../../library/sys.rst:78
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.settrace`` with no "
"arguments."
msgstr ""

#: ../../library/sys.rst:1517
msgid ""
"The :func:`settrace` function is intended only for implementing debuggers, "
"profilers, coverage tools and the like.  Its behavior is part of the "
"implementation platform, rather than part of the language definition, and "
"thus may not be available in all Python implementations."
msgstr ""

#: ../../library/sys.rst:1524
msgid ""
"``'opcode'`` event type added; :attr:`f_trace_lines` and :attr:"
"`f_trace_opcodes` attributes added to frames"
msgstr ""

#: ../../library/sys.rst:1529
msgid ""
"Accepts two optional keyword arguments which are callables that accept an :"
"term:`asynchronous generator iterator` as an argument. The *firstiter* "
"callable will be called when an asynchronous generator is iterated for the "
"first time. The *finalizer* will be called when an asynchronous generator is "
"about to be garbage collected."
msgstr ""

#: ../../library/sys.rst:7
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys."
"set_asyncgen_hooks_firstiter`` with no arguments."
msgstr ""

#: ../../library/sys.rst:9
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys."
"set_asyncgen_hooks_finalizer`` with no arguments."
msgstr ""

#: ../../library/sys.rst:1539
msgid ""
"Two auditing events are raised because the underlying API consists of two "
"calls, each of which must raise its own event."
msgstr ""

#: ../../library/sys.rst:1542
msgid ""
"See :pep:`525` for more details, and for a reference example of a "
"*finalizer* method see the implementation of ``asyncio.Loop."
"shutdown_asyncgens`` in :source:`Lib/asyncio/base_events.py`"
msgstr ""

#: ../../library/sys.rst:1554
msgid ""
"Allows enabling or disabling coroutine origin tracking. When enabled, the "
"``cr_origin`` attribute on coroutine objects will contain a tuple of "
"(filename, line number, function name) tuples describing the traceback where "
"the coroutine object was created, with the most recent call first. When "
"disabled, ``cr_origin`` will be None."
msgstr ""

#: ../../library/sys.rst:1561
msgid ""
"To enable, pass a *depth* value greater than zero; this sets the number of "
"frames whose information will be captured. To disable, pass set *depth* to "
"zero."
msgstr ""

#: ../../library/sys.rst:1565
msgid "This setting is thread-specific."
msgstr ""

#: ../../library/sys.rst:1575
msgid ""
"Changes the :term:`filesystem encoding and error handler` to 'mbcs' and "
"'replace' respectively, for consistency with versions of Python prior to 3.6."
msgstr ""

#: ../../library/sys.rst:1579
msgid ""
"This is equivalent to defining the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable before launching Python."
msgstr ""

#: ../../library/sys.rst:1582
msgid ""
"See also :func:`sys.getfilesystemencoding` and :func:`sys."
"getfilesystemencodeerrors`."
msgstr ""

#: ../../library/sys.rst:1587
msgid "See :pep:`529` for more details."
msgstr "更多細節請見 :pep:`529`\\ 。"

#: ../../library/sys.rst:1594
msgid ""
":term:`File objects <file object>` used by the interpreter for standard "
"input, output and errors:"
msgstr ""

#: ../../library/sys.rst:1597
msgid ""
"``stdin`` is used for all interactive input (including calls to :func:"
"`input`);"
msgstr ""

#: ../../library/sys.rst:1599
msgid ""
"``stdout`` is used for the output of :func:`print` and :term:`expression` "
"statements and for the prompts of :func:`input`;"
msgstr ""

#: ../../library/sys.rst:1601
msgid "The interpreter's own prompts and its error messages go to ``stderr``."
msgstr ""

#: ../../library/sys.rst:1603
msgid ""
"These streams are regular :term:`text files <text file>` like those returned "
"by the :func:`open` function.  Their parameters are chosen as follows:"
msgstr ""

#: ../../library/sys.rst:1607
msgid ""
"The encoding and error handling are is initialized from :c:member:`PyConfig."
"stdio_encoding` and :c:member:`PyConfig.stdio_errors`."
msgstr ""

#: ../../library/sys.rst:1610
msgid ""
"On Windows, UTF-8 is used for the console device.  Non-character devices "
"such as disk files and pipes use the system locale encoding (i.e. the ANSI "
"codepage).  Non-console character devices such as NUL (i.e. where "
"``isatty()`` returns ``True``) use the value of the console input and output "
"codepages at startup, respectively for stdin and stdout/stderr. This "
"defaults to the system :term:`locale encoding` if the process is not "
"initially attached to a console."
msgstr ""

#: ../../library/sys.rst:1619
msgid ""
"The special behaviour of the console can be overridden by setting the "
"environment variable PYTHONLEGACYWINDOWSSTDIO before starting Python. In "
"that case, the console codepages are used as for any other character device."
msgstr ""

#: ../../library/sys.rst:1624
msgid ""
"Under all platforms, you can override the character encoding by setting the :"
"envvar:`PYTHONIOENCODING` environment variable before starting Python or by "
"using the new :option:`-X` ``utf8`` command line option and :envvar:"
"`PYTHONUTF8` environment variable.  However, for the Windows console, this "
"only applies when :envvar:`PYTHONLEGACYWINDOWSSTDIO` is also set."
msgstr ""

#: ../../library/sys.rst:1631
msgid ""
"When interactive, the ``stdout`` stream is line-buffered. Otherwise, it is "
"block-buffered like regular text files.  The ``stderr`` stream is line-"
"buffered in both cases.  You can make both streams unbuffered by passing "
"the :option:`-u` command-line option or setting the :envvar:"
"`PYTHONUNBUFFERED` environment variable."
msgstr ""

#: ../../library/sys.rst:1637
msgid ""
"Non-interactive ``stderr`` is now line-buffered instead of fully buffered."
msgstr ""

#: ../../library/sys.rst:1643
msgid ""
"To write or read binary data from/to the standard streams, use the "
"underlying binary :data:`~io.TextIOBase.buffer` object.  For example, to "
"write bytes to :data:`stdout`, use ``sys.stdout.buffer.write(b'abc')``."
msgstr ""

#: ../../library/sys.rst:1647
msgid ""
"However, if you are writing a library (and do not control in which context "
"its code will be executed), be aware that the standard streams may be "
"replaced with file-like objects like :class:`io.StringIO` which do not "
"support the :attr:`~io.BufferedIOBase.buffer` attribute."
msgstr ""

#: ../../library/sys.rst:1657
msgid ""
"These objects contain the original values of ``stdin``, ``stderr`` and "
"``stdout`` at the start of the program.  They are used during finalization, "
"and could be useful to print to the actual standard stream no matter if the "
"``sys.std*`` object has been redirected."
msgstr ""

#: ../../library/sys.rst:1662
msgid ""
"It can also be used to restore the actual files to known working file "
"objects in case they have been overwritten with a broken object.  However, "
"the preferred way to do this is to explicitly save the previous stream "
"before replacing it, and restore the saved object."
msgstr ""

#: ../../library/sys.rst:1668
msgid ""
"Under some conditions ``stdin``, ``stdout`` and ``stderr`` as well as the "
"original values ``__stdin__``, ``__stdout__`` and ``__stderr__`` can be "
"``None``. It is usually the case for Windows GUI apps that aren't connected "
"to a console and Python apps started with :program:`pythonw`."
msgstr ""

#: ../../library/sys.rst:1676
msgid ""
"A frozenset of strings containing the names of standard library modules."
msgstr ""

#: ../../library/sys.rst:1678
msgid ""
"It is the same on all platforms. Modules which are not available on some "
"platforms and modules disabled at Python build are also listed. All module "
"kinds are listed: pure Python, built-in, frozen and extension modules. Test "
"modules are excluded."
msgstr ""

#: ../../library/sys.rst:1683
msgid ""
"For packages, only the main package is listed: sub-packages and sub-modules "
"are not listed. For example, the ``email`` package is listed, but the "
"``email.mime`` sub-package and the ``email.message`` sub-module are not "
"listed."
msgstr ""

#: ../../library/sys.rst:1688
msgid "See also the :attr:`sys.builtin_module_names` list."
msgstr "另請參閱 :attr:`sys.builtin_module_names` 清單。"

#: ../../library/sys.rst:1695
msgid ""
"A :term:`named tuple` holding information about the thread implementation."
msgstr ""

#: ../../library/sys.rst:1703
msgid ":const:`name`"
msgstr ":const:`name`"

#: ../../library/sys.rst:1703
msgid "Name of the thread implementation:"
msgstr ""

#: ../../library/sys.rst:1705
msgid "``'nt'``: Windows threads"
msgstr ""

#: ../../library/sys.rst:1706
msgid "``'pthread'``: POSIX threads"
msgstr ""

#: ../../library/sys.rst:1707
msgid ""
"``'pthread-stubs'``: stub POSIX threads (on WebAssembly platforms without "
"threading support)"
msgstr ""

#: ../../library/sys.rst:1709
msgid "``'solaris'``: Solaris threads"
msgstr ""

#: ../../library/sys.rst:1711
msgid ":const:`lock`"
msgstr ":const:`lock`"

#: ../../library/sys.rst:1711
msgid "Name of the lock implementation:"
msgstr ""

#: ../../library/sys.rst:1713
msgid "``'semaphore'``: a lock uses a semaphore"
msgstr ""

#: ../../library/sys.rst:1714
msgid "``'mutex+cond'``: a lock uses a mutex and a condition variable"
msgstr ""

#: ../../library/sys.rst:1716
msgid "``None`` if this information is unknown"
msgstr ""

#: ../../library/sys.rst:1718
msgid ":const:`version`"
msgstr ":const:`version`"

#: ../../library/sys.rst:1718
msgid ""
"Name and version of the thread library. It is a string, or ``None`` if this "
"information is unknown."
msgstr ""

#: ../../library/sys.rst:1727
msgid ""
"When this variable is set to an integer value, it determines the maximum "
"number of levels of traceback information printed when an unhandled "
"exception occurs. The default is ``1000``.  When set to ``0`` or less, all "
"traceback information is suppressed and only the exception type and value "
"are printed."
msgstr ""

#: ../../library/sys.rst:1735
msgid "Handle an unraisable exception."
msgstr ""

#: ../../library/sys.rst:1737
msgid ""
"Called when an exception has occurred but there is no way for Python to "
"handle it. For example, when a destructor raises an exception or during "
"garbage collection (:func:`gc.collect`)."
msgstr ""

#: ../../library/sys.rst:1741
msgid "The *unraisable* argument has the following attributes:"
msgstr ""

#: ../../library/sys.rst:1743
msgid "*exc_type*: Exception type."
msgstr ""

#: ../../library/sys.rst:1744
msgid "*exc_value*: Exception value, can be ``None``."
msgstr ""

#: ../../library/sys.rst:1745
msgid "*exc_traceback*: Exception traceback, can be ``None``."
msgstr ""

#: ../../library/sys.rst:1746
msgid "*err_msg*: Error message, can be ``None``."
msgstr ""

#: ../../library/sys.rst:1747
msgid "*object*: Object causing the exception, can be ``None``."
msgstr ""

#: ../../library/sys.rst:1749
msgid ""
"The default hook formats *err_msg* and *object* as: ``f'{err_msg}: {object!"
"r}'``; use \"Exception ignored in\" error message if *err_msg* is ``None``."
msgstr ""

#: ../../library/sys.rst:1753
msgid ""
":func:`sys.unraisablehook` can be overridden to control how unraisable "
"exceptions are handled."
msgstr ""

#: ../../library/sys.rst:1756
msgid ""
"Storing *exc_value* using a custom hook can create a reference cycle. It "
"should be cleared explicitly to break the reference cycle when the exception "
"is no longer needed."
msgstr ""

#: ../../library/sys.rst:1760
msgid ""
"Storing *object* using a custom hook can resurrect it if it is set to an "
"object which is being finalized. Avoid storing *object* after the custom "
"hook completes to avoid resurrecting objects."
msgstr ""

#: ../../library/sys.rst:1764
msgid "See also :func:`excepthook` which handles uncaught exceptions."
msgstr ""

#: ../../library/sys.rst:32
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.unraisablehook`` with "
"arguments ``hook``, ``unraisable``."
msgstr ""

#: ../../library/sys.rst:1768
msgid ""
"Raise an auditing event ``sys.unraisablehook`` with arguments ``hook``, "
"``unraisable`` when an exception that cannot be handled occurs. The "
"``unraisable`` object is the same as what will be passed to the hook. If no "
"hook has been set, ``hook`` may be ``None``."
msgstr ""

#: ../../library/sys.rst:1777
msgid ""
"A string containing the version number of the Python interpreter plus "
"additional information on the build number and compiler used.  This string "
"is displayed when the interactive interpreter is started.  Do not extract "
"version information out of it, rather, use :data:`version_info` and the "
"functions provided by the :mod:`platform` module."
msgstr ""

#: ../../library/sys.rst:1786
msgid ""
"The C API version for this interpreter.  Programmers may find this useful "
"when debugging version conflicts between Python and extension modules."
msgstr ""

#: ../../library/sys.rst:1792
msgid ""
"A tuple containing the five components of the version number: *major*, "
"*minor*, *micro*, *releaselevel*, and *serial*.  All values except "
"*releaselevel* are integers; the release level is ``'alpha'``, ``'beta'``, "
"``'candidate'``, or ``'final'``.  The ``version_info`` value corresponding "
"to the Python version 2.0 is ``(2, 0, 0, 'final', 0)``.  The components can "
"also be accessed by name, so ``sys.version_info[0]`` is equivalent to ``sys."
"version_info.major`` and so on."
msgstr ""

#: ../../library/sys.rst:1800
msgid "Added named component attributes."
msgstr ""

#: ../../library/sys.rst:1805
msgid ""
"This is an implementation detail of the warnings framework; do not modify "
"this value.  Refer to the :mod:`warnings` module for more information on the "
"warnings framework."
msgstr ""

#: ../../library/sys.rst:1812
msgid ""
"The version number used to form registry keys on Windows platforms. This is "
"stored as string resource 1000 in the Python DLL.  The value is normally the "
"major and minor versions of the running Python interpreter.  It is provided "
"in the :mod:`sys` module for informational purposes; modifying this value "
"has no effect on the registry keys used by Python."
msgstr ""

#: ../../library/sys.rst:1823
msgid ""
"A dictionary of the various implementation-specific flags passed through "
"the :option:`-X` command-line option.  Option names are either mapped to "
"their values, if given explicitly, or to :const:`True`.  Example:"
msgstr ""

#: ../../library/sys.rst:1839
msgid ""
"This is a CPython-specific way of accessing options passed through :option:`-"
"X`.  Other implementations may export them through other means, or not at "
"all."
msgstr ""

#: ../../library/sys.rst:1847
msgid "Citations"
msgstr ""

#: ../../library/sys.rst:1848
msgid ""
"ISO/IEC 9899:1999.  \"Programming languages -- C.\"  A public draft of this "
"standard is available at https://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n1256.pdf\\ ."
msgstr ""
