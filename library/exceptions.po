# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-01 00:03+0000\n"
"PO-Revision-Date: 2024-03-12 20:57+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.4.2\n"

#: ../../library/exceptions.rst:4
msgid "Built-in Exceptions"
msgstr "內建的例外"

#: ../../library/exceptions.rst:10
msgid ""
"In Python, all exceptions must be instances of a class that derives from :"
"class:`BaseException`.  In a :keyword:`try` statement with an :keyword:"
"`except` clause that mentions a particular class, that clause also handles "
"any exception classes derived from that class (but not exception classes "
"from which *it* is derived).  Two exception classes that are not related via "
"subclassing are never equivalent, even if they have the same name."
msgstr ""
"在 Python 中，所有例外必須是從 :class:`BaseException` 衍生的類別的實例。在陳"
"述式 :keyword:`try` 搭配 :keyword:`except` 子句裡提到一個特定的類別時，那個子"
"句也會處理任何從該類別衍生的例外類別（但不會處理該類別\\ *衍生自*\\ 的例外類"
"別）。兩個不是由子類別關係關聯起來的例外類別永遠不相等，就算它們有相同的名稱"
"也是如此。"

#: ../../library/exceptions.rst:19
msgid ""
"The built-in exceptions listed in this chapter can be generated by the "
"interpreter or built-in functions.  Except where mentioned, they have an "
"\"associated value\" indicating the detailed cause of the error.  This may "
"be a string or a tuple of several items of information (e.g., an error code "
"and a string explaining the code).  The associated value is usually passed "
"as arguments to the exception class's constructor."
msgstr ""
"此章節裡列出的內建例外可以從直譯器或內建函式產生。除了特別提到的地方之外，它"
"們會有一個\\ *關聯值*\\ 表示錯誤發生的詳細原因。這可能是一個字串，或者是一些"
"資訊項目組成的元組（例如一個錯誤代碼及一個解釋該代碼的字串）。這個關聯值通常"
"當作引數傳遞給例外類別的建構函式。"

#: ../../library/exceptions.rst:26
msgid ""
"User code can raise built-in exceptions.  This can be used to test an "
"exception handler or to report an error condition \"just like\" the "
"situation in which the interpreter raises the same exception; but beware "
"that there is nothing to prevent user code from raising an inappropriate "
"error."
msgstr ""
"使用者的程式碼可以引發內建例外。這可以用來測試例外處理器或者用來回報一個錯誤"
"條件，*就像*\\ 直譯器會引發相同例外的情況；但需要注意的是沒有任何方式可以避免"
"使用者的程式碼引發不適當的錯誤。"

#: ../../library/exceptions.rst:31
msgid ""
"The built-in exception classes can be subclassed to define new exceptions; "
"programmers are encouraged to derive new exceptions from the :exc:"
"`Exception` class or one of its subclasses, and not from :exc:"
"`BaseException`.  More information on defining exceptions is available in "
"the Python Tutorial under :ref:`tut-userexceptions`."
msgstr ""
"可以從內建的例外類別定義新的例外子類別；程式設計師被鼓勵從 :exc:`Exception` "
"類別或其子類別衍生新的例外，而不是從 :exc:`BaseException` 來衍生。更多關於定"
"義例外的資訊可以在 Python 教學中的\\ :ref:`tut-userexceptions`\\ 裡取得。"

#: ../../library/exceptions.rst:39
msgid "Exception context"
msgstr "例外的情境"

#: ../../library/exceptions.rst:46
msgid ""
"Three attributes on exception objects provide information about the context "
"in which the exception was raised:"
msgstr "三個例外物件上的屬性提供關於引發此例外的情境的資訊："

#: ../../library/exceptions.rst:53
msgid ""
"When raising a new exception while another exception is already being "
"handled, the new exception's :attr:`!__context__` attribute is automatically "
"set to the handled exception.  An exception may be handled when an :keyword:"
"`except` or :keyword:`finally` clause, or a :keyword:`with` statement, is "
"used."
msgstr ""
"當引發一個新的例外而同時有另一個例外已經正在被處理時，這個新例外的 :attr:`!"
"__context__` 屬性會自動被設成那個已處理的例外。當使用 :keyword:`except` 或 :"
"keyword:`finally` 子句或 :keyword:`with` 陳述式的時候例外會被處理。"

#: ../../library/exceptions.rst:59
msgid ""
"This implicit exception context can be supplemented with an explicit cause "
"by using :keyword:`!from` with :keyword:`raise`::"
msgstr ""
"這個隱含的例外情境可以透過使用 :keyword:`!from` 搭配 :keyword:`raise` 來補充"
"明確的原因： ::"

#: ../../library/exceptions.rst:65
msgid ""
"The expression following :keyword:`from<raise>` must be an exception or "
"``None``. It will be set as :attr:`!__cause__` on the raised exception. "
"Setting :attr:`!__cause__` also implicitly sets the :attr:`!"
"__suppress_context__` attribute to ``True``, so that using ``raise new_exc "
"from None`` effectively replaces the old exception with the new one for "
"display purposes (e.g. converting :exc:`KeyError` to :exc:`AttributeError`), "
"while leaving the old exception available in :attr:`!__context__` for "
"introspection when debugging."
msgstr ""
"在 :keyword:`from<raise>` 後面的運算式必須是一個例外或 ``None``。它將會被設定"
"成所引發例外的 :attr:`!__cause__`。設定 :attr:`!__cause__` 也隱含地設定 :"
"attr:`!__suppress_context__` 屬性為 ``True``，因此使用 ``raise new_exc from "
"None`` 實際上會以新的例外取代舊的例外以利於顯示（例如轉換 :exc:`KeyError` "
"為 :exc:`AttributeError`），同時保持舊的例外可以透過 :attr:`!__context__` 取"
"得以方便 debug 的時候檢查。"

#: ../../library/exceptions.rst:74
msgid ""
"The default traceback display code shows these chained exceptions in "
"addition to the traceback for the exception itself. An explicitly chained "
"exception in :attr:`!__cause__` is always shown when present. An implicitly "
"chained exception in :attr:`!__context__` is shown only if :attr:`!"
"__cause__` is :const:`None` and :attr:`!__suppress_context__` is false."
msgstr ""
"預設的回溯 (traceback) 顯示程式碼會顯示這些連鎖的例外 (chained exception) 加"
"上例外本身的回溯。當存在的時候，在 :attr:`!__cause__` 中明確地連鎖的例外總是"
"會被顯示。而在 :attr:`!__context__` 中隱含地連鎖的例外只有當 :attr:`!"
"__cause__` 是 :const:`None` 且 :attr:`!__suppress_context__` 是 false 時才會"
"顯示。"

#: ../../library/exceptions.rst:80
msgid ""
"In either case, the exception itself is always shown after any chained "
"exceptions so that the final line of the traceback always shows the last "
"exception that was raised."
msgstr ""
"在任一種情況下，例外本身總是會顯示在任何連鎖例外的後面，因此回溯的最後一行總"
"是顯示最後一個被引發的例外。"

#: ../../library/exceptions.rst:86
msgid "Inheriting from built-in exceptions"
msgstr "繼承自內建的例外"

#: ../../library/exceptions.rst:88
msgid ""
"User code can create subclasses that inherit from an exception type. It's "
"recommended to only subclass one exception type at a time to avoid any "
"possible conflicts between how the bases handle the ``args`` attribute, as "
"well as due to possible memory layout incompatibilities."
msgstr ""
"使用者的程式碼可以建立繼承自例外類型的子類別。建議一次只繼承一種例外類型以避"
"免在基底類別之間如何處理 ``args`` 屬性的任何可能衝突，以及可能的記憶體佈局 "
"(memory layout) 不相容。"

#: ../../library/exceptions.rst:95
msgid ""
"Most built-in exceptions are implemented in C for efficiency, see: :source:"
"`Objects/exceptions.c`.  Some have custom memory layouts which makes it "
"impossible to create a subclass that inherits from multiple exception types. "
"The memory layout of a type is an implementation detail and might change "
"between Python versions, leading to new conflicts in the future.  Therefore, "
"it's recommended to avoid subclassing multiple exception types altogether."
msgstr ""
"為了效率，大部分的內建例外使用 C 來實作，參考 :source:`Objects/exceptions."
"c`。一些例外有客製化的記憶體佈局，使其不可能建立一個繼承多種例外類型的子類"
"別。類型的記憶體佈局是實作細節且可能會在不同 Python 版本間改變，造成未來新的"
"衝突。因此，總之建議避免繼承多種例外類型。"

#: ../../library/exceptions.rst:105
msgid "Base classes"
msgstr "基底類別 (base classes)"

#: ../../library/exceptions.rst:107
msgid ""
"The following exceptions are used mostly as base classes for other "
"exceptions."
msgstr "以下的例外大部分被用在當作其他例外的基底類別。"

#: ../../library/exceptions.rst:111
msgid ""
"The base class for all built-in exceptions.  It is not meant to be directly "
"inherited by user-defined classes (for that, use :exc:`Exception`).  If :"
"func:`str` is called on an instance of this class, the representation of the "
"argument(s) to the instance are returned, or the empty string when there "
"were no arguments."
msgstr ""
"所有內建例外的基底類別。這不是為了讓使用者定義的類別直接繼承（可以使用 :exc:"
"`Exception`）。如果在這個類別的實例上呼叫 :func:`str`，會回傳實例的引數的表"
"示，或者沒有引數的時候會回傳空字串。"

#: ../../library/exceptions.rst:119
msgid ""
"The tuple of arguments given to the exception constructor.  Some built-in "
"exceptions (like :exc:`OSError`) expect a certain number of arguments and "
"assign a special meaning to the elements of this tuple, while others are "
"usually called only with a single string giving an error message."
msgstr ""
"提供給該例外建構函式的引數元組。一些內建的例外（像是 :exc:`OSError`）預期接受"
"特定數量的引數並賦予該元組的每一個元素一個特別的意義，其他例外則通常用一個提"
"供錯誤訊息的單一字串來呼叫。"

#: ../../library/exceptions.rst:126
msgid ""
"This method sets *tb* as the new traceback for the exception and returns the "
"exception object.  It was more commonly used before the exception chaining "
"features of :pep:`3134` became available.  The following example shows how "
"we can convert an instance of ``SomeException`` into an instance of "
"``OtherException`` while preserving the traceback.  Once raised, the current "
"frame is pushed onto the traceback of the ``OtherException``, as would have "
"happened to the traceback of the original ``SomeException`` had we allowed "
"it to propagate to the caller. ::"
msgstr ""
"此方法設定 *tb* 為該例外的新的回溯並回傳該例外物件。在 :pep:`3134` 的例外連鎖"
"功能變得可用之前，此方法曾被更普遍使用。下面的範例顯示我們如何將 "
"``SomeException`` 的實例轉換為 ``OtherException`` 的實例同時保留回溯。一旦被"
"引發，目前的 frame 會被加進 ``OtherException`` 的回溯，就像原來 "
"``SomeException`` 的回溯會發生的一樣，我們允許它被傳遞給呼叫者： ::"

#: ../../library/exceptions.rst:143
msgid ""
"A writable field that holds the :ref:`traceback object <traceback-objects>` "
"associated with this exception. See also: :ref:`raise`."
msgstr ""
"可寫入的欄位，儲存關聯到該例外的\\ :ref:`回溯物件 <traceback-objects>`。也可"
"以參考 :ref:`raise`。"

#: ../../library/exceptions.rst:149
msgid ""
"Add the string ``note`` to the exception's notes which appear in the "
"standard traceback after the exception string. A :exc:`TypeError` is raised "
"if ``note`` is not a string."
msgstr ""
"新增字串 ``note`` 到例外的備註，在標準的回溯裡，備註出現在例外字串的後面。如"
"果 ``note`` 不是字串則引發 :exc:`TypeError`。"

#: ../../library/exceptions.rst:157
msgid ""
"A list of the notes of this exception, which were added with :meth:"
"`add_note`. This attribute is created when :meth:`add_note` is called."
msgstr ""
"該例外的備註串列，使用 :meth:`add_note` 來新增。此屬性在 :meth:`add_note` 被"
"呼叫的時候建立。"

#: ../../library/exceptions.rst:165
msgid ""
"All built-in, non-system-exiting exceptions are derived from this class.  "
"All user-defined exceptions should also be derived from this class."
msgstr ""
"所有內建、非系統退出 (non-system-exiting) 的例外都衍生自此類別。所有使用者定"
"義的例外應該也要衍生自此類別。"

#: ../../library/exceptions.rst:171
msgid ""
"The base class for those built-in exceptions that are raised for various "
"arithmetic errors: :exc:`OverflowError`, :exc:`ZeroDivisionError`, :exc:"
"`FloatingPointError`."
msgstr ""
"各種運算錯誤所引發的那些內建例外：:exc:`OverflowError`、:exc:"
"`ZeroDivisionError`、:exc:`FloatingPointError` 的基底類別。"

#: ../../library/exceptions.rst:178
msgid ""
"Raised when a :ref:`buffer <bufferobjects>` related operation cannot be "
"performed."
msgstr ""
"當\\ :ref:`緩衝 (buffer) <bufferobjects>` 相關的操作無法被執行時會引發此例"
"外。"

#: ../../library/exceptions.rst:184
msgid ""
"The base class for the exceptions that are raised when a key or index used "
"on a mapping or sequence is invalid: :exc:`IndexError`, :exc:`KeyError`.  "
"This can be raised directly by :func:`codecs.lookup`."
msgstr ""
"當使用在對映或序列上的鍵或索引是無效的時候所引發的例外：:exc:`IndexError`、:"
"exc:`KeyError` 的基底類別。這可以被 :func:`codecs.lookup` 直接引發。"

#: ../../library/exceptions.rst:190
msgid "Concrete exceptions"
msgstr "實體例外"

#: ../../library/exceptions.rst:192
msgid "The following exceptions are the exceptions that are usually raised."
msgstr "以下的例外是通常會被引發的例外。"

#: ../../library/exceptions.rst:198
msgid "Raised when an :keyword:`assert` statement fails."
msgstr "當 :keyword:`assert` 陳述式失敗的時候被引發。"

#: ../../library/exceptions.rst:203
msgid ""
"Raised when an attribute reference (see :ref:`attribute-references`) or "
"assignment fails.  (When an object does not support attribute references or "
"attribute assignments at all, :exc:`TypeError` is raised.)"
msgstr ""
"當屬性參照（參考 :ref:`attribute-references`）或賦值失敗的時候被引發。（當物"
"件根本不支援屬性參照或屬性賦值的時候，:exc:`TypeError` 會被引發。）"

#: ../../library/exceptions.rst:207
msgid ""
"The :attr:`name` and :attr:`obj` attributes can be set using keyword-only "
"arguments to the constructor. When set they represent the name of the "
"attribute that was attempted to be accessed and the object that was accessed "
"for said attribute, respectively."
msgstr ""
":attr:`name` 和 :attr:`obj` 屬性可以使用建構函式的僅限關鍵字 (keyword-only) "
"引數來設定。當被設定的時候，它們分別代表被嘗試存取的屬性名稱以及被以該屬性存"
"取的物件。"

#: ../../library/exceptions.rst:212
msgid "Added the :attr:`name` and :attr:`obj` attributes."
msgstr "新增 :attr:`name` 與 :attr:`obj` 屬性。"

#: ../../library/exceptions.rst:217
msgid ""
"Raised when the :func:`input` function hits an end-of-file condition (EOF) "
"without reading any data. (N.B.: the :meth:`io.IOBase.read` and :meth:`io."
"IOBase.readline` methods return an empty string when they hit EOF.)"
msgstr ""
"當 :func:`input` 函式在沒有讀到任何資料而到達檔案結尾 (end-of-file, EOF) 條件"
"的時候被引發。（注意：:meth:`io.IOBase.read` 和 :meth:`io.IOBase.readline` 方"
"法當達到 EOF 時會回傳空字串。）"

#: ../../library/exceptions.rst:224
msgid "Not currently used."
msgstr "目前沒有被使用。"

#: ../../library/exceptions.rst:229
msgid ""
"Raised when a :term:`generator` or :term:`coroutine` is closed; see :meth:"
"`generator.close` and :meth:`coroutine.close`.  It directly inherits from :"
"exc:`BaseException` instead of :exc:`Exception` since it is technically not "
"an error."
msgstr ""
"當 :term:`generator` 或 :term:`coroutine` 被關閉的時候被引發；參考 :meth:"
"`generator.close` 和 :meth:`coroutine.close`。此例外直接繼承自 :exc:"
"`BaseException` 而不是 :exc:`Exception`，因為技術上來說這不是一個錯誤。"

#: ../../library/exceptions.rst:237
msgid ""
"Raised when the :keyword:`import` statement has troubles trying to load a "
"module.  Also raised when the \"from list\" in ``from ... import`` has a "
"name that cannot be found."
msgstr ""
"當 :keyword:`import` 陳述式嘗試載入模組遇到問題的時候會被引發。當 ``from … "
"import`` 裡的 “from list” 包含找不到的名稱時也會被引發。"

#: ../../library/exceptions.rst:241
msgid ""
"The optional *name* and *path* keyword-only arguments set the corresponding "
"attributes:"
msgstr "可選的僅限關鍵字引數 *name* 和 *path* 設定對應的屬性："

#: ../../library/exceptions.rst:246
msgid "The name of the module that was attempted to be imported."
msgstr "嘗試引入 (import) 的模組名稱。"

#: ../../library/exceptions.rst:250
msgid "The path to any file which triggered the exception."
msgstr "觸發此例外的任何檔案的路徑。"

#: ../../library/exceptions.rst:252
msgid "Added the :attr:`name` and :attr:`path` attributes."
msgstr "新增 :attr:`name` 與 :attr:`path` 屬性。"

#: ../../library/exceptions.rst:257
msgid ""
"A subclass of :exc:`ImportError` which is raised by :keyword:`import` when a "
"module could not be located.  It is also raised when ``None`` is found in :"
"data:`sys.modules`."
msgstr ""
":exc:`ImportError` 的子類別，當模組不能被定位的時候會被 :keyword:`import` 所"
"引發。當在 :data:`sys.modules` 裡找到 ``None`` 時也會被引發。"

#: ../../library/exceptions.rst:266
msgid ""
"Raised when a sequence subscript is out of range.  (Slice indices are "
"silently truncated to fall in the allowed range; if an index is not an "
"integer, :exc:`TypeError` is raised.)"
msgstr ""
"當序列的索引超出範圍的時候會被引發。（切片索引 (slice indices) 會默默地被截短"
"使其能落在允許的範圍內；如果索引不是整數，:exc:`TypeError` 會被引發。）"

#: ../../library/exceptions.rst:275
msgid ""
"Raised when a mapping (dictionary) key is not found in the set of existing "
"keys."
msgstr "當對映（字典）的鍵無法在已存在的鍵的集合中被找到時會被引發。"

#: ../../library/exceptions.rst:282
msgid ""
"Raised when the user hits the interrupt key (normally :kbd:`Control-C` or :"
"kbd:`Delete`).  During execution, a check for interrupts is made regularly. "
"The exception inherits from :exc:`BaseException` so as to not be "
"accidentally caught by code that catches :exc:`Exception` and thus prevent "
"the interpreter from exiting."
msgstr ""
"當使用者輸入中斷鍵 (interrupt key)（一般來說是 :kbd:`Control-C` 或 :kbd:"
"`Delete`）時會被引發。在執行過程中，會定期檢查是否產生中斷。此例外繼承自 :"
"exc:`BaseException` 以防止意外地被捕捉 :exc:`Exception` 的程式碼所捕捉，而因"
"此讓直譯器無法結束。"

#: ../../library/exceptions.rst:290
msgid ""
"Catching a :exc:`KeyboardInterrupt` requires special consideration. Because "
"it can be raised at unpredictable points, it may, in some circumstances, "
"leave the running program in an inconsistent state. It is generally best to "
"allow :exc:`KeyboardInterrupt` to end the program as quickly as possible or "
"avoid raising it entirely. (See :ref:`handlers-and-exceptions`.)"
msgstr ""
"捕捉 :exc:`KeyboardInterrupt` 需要特殊的考量。因為它可以在無法預期的時間點被"
"引發，可能在某些情況下讓正在跑的程式處在一個不一致的狀態。一般來說最好讓 :"
"exc:`KeyboardInterrupt` 越快結束程式越好，或者完全避免引發它。（參考 :ref:"
"`handlers-and-exceptions`。）"

#: ../../library/exceptions.rst:300
msgid ""
"Raised when an operation runs out of memory but the situation may still be "
"rescued (by deleting some objects).  The associated value is a string "
"indicating what kind of (internal) operation ran out of memory. Note that "
"because of the underlying memory management architecture (C's :c:func:"
"`malloc` function), the interpreter may not always be able to completely "
"recover from this situation; it nevertheless raises an exception so that a "
"stack traceback can be printed, in case a run-away program was the cause."
msgstr ""
"當一個操作用光了記憶體但情況還可能被修復 (rescued)（透過刪除一些物件）的時候"
"被引發。關聯的值是一個字串，表示什麼類型的（內部）操作用光了記憶體。需注意的"
"是因為底層的記憶體管理架構（C 的 :c:func:`malloc` 函式），直譯器可能無法總是"
"完整地從該情況中修復；僅管如此，它還是引發例外以讓堆疊回溯可以被印出，以防原"
"因出在失控的程式。"

#: ../../library/exceptions.rst:311
msgid ""
"Raised when a local or global name is not found.  This applies only to "
"unqualified names.  The associated value is an error message that includes "
"the name that could not be found."
msgstr ""
"當找不到本地或全域的名稱時會被引發。這只應用在不合格的名稱 (unqualified "
"name) 上。關聯的值是一個錯誤訊息，包含那個無法被找到的名稱。"

#: ../../library/exceptions.rst:315
msgid ""
"The :attr:`name` attribute can be set using a keyword-only argument to the "
"constructor. When set it represent the name of the variable that was "
"attempted to be accessed."
msgstr ""
":attr:`name` 屬性可以使用僅限關鍵字引數來設定到建構函式。當被設定的時候它代表"
"被嘗試存取的變數名稱。"

#: ../../library/exceptions.rst:319
msgid "Added the :attr:`name` attribute."
msgstr "新增 :attr:`name` 屬性。"

#: ../../library/exceptions.rst:325
msgid ""
"This exception is derived from :exc:`RuntimeError`.  In user defined base "
"classes, abstract methods should raise this exception when they require "
"derived classes to override the method, or while the class is being "
"developed to indicate that the real implementation still needs to be added."
msgstr ""

#: ../../library/exceptions.rst:332
msgid ""
"It should not be used to indicate that an operator or method is not meant to "
"be supported at all -- in that case either leave the operator / method "
"undefined or, if a subclass, set it to :data:`None`."
msgstr ""

#: ../../library/exceptions.rst:338
msgid ""
"``NotImplementedError`` and :data:`NotImplemented` are not interchangeable, "
"even though they have similar names and purposes.  See :data:`!"
"NotImplemented` for details on when to use it."
msgstr ""

#: ../../library/exceptions.rst:347
msgid ""
"This exception is raised when a system function returns a system-related "
"error, including I/O failures such as \"file not found\" or \"disk full\" "
"(not for illegal argument types or other incidental errors)."
msgstr ""

#: ../../library/exceptions.rst:351
msgid ""
"The second form of the constructor sets the corresponding attributes, "
"described below.  The attributes default to :const:`None` if not specified.  "
"For backwards compatibility, if three arguments are passed, the :attr:"
"`~BaseException.args` attribute contains only a 2-tuple of the first two "
"constructor arguments."
msgstr ""

#: ../../library/exceptions.rst:357
msgid ""
"The constructor often actually returns a subclass of :exc:`OSError`, as "
"described in `OS exceptions`_ below.  The particular subclass depends on the "
"final :attr:`.errno` value.  This behaviour only occurs when constructing :"
"exc:`OSError` directly or via an alias, and is not inherited when "
"subclassing."
msgstr ""

#: ../../library/exceptions.rst:365
msgid "A numeric error code from the C variable :c:data:`errno`."
msgstr ""

#: ../../library/exceptions.rst:369
msgid ""
"Under Windows, this gives you the native Windows error code.  The :attr:`."
"errno` attribute is then an approximate translation, in POSIX terms, of that "
"native error code."
msgstr ""

#: ../../library/exceptions.rst:373
msgid ""
"Under Windows, if the *winerror* constructor argument is an integer, the :"
"attr:`.errno` attribute is determined from the Windows error code, and the "
"*errno* argument is ignored.  On other platforms, the *winerror* argument is "
"ignored, and the :attr:`winerror` attribute does not exist."
msgstr ""

#: ../../library/exceptions.rst:381
msgid ""
"The corresponding error message, as provided by the operating system.  It is "
"formatted by the C functions :c:func:`perror` under POSIX, and :c:func:"
"`FormatMessage` under Windows."
msgstr ""

#: ../../library/exceptions.rst:389
msgid ""
"For exceptions that involve a file system path (such as :func:`open` or :"
"func:`os.unlink`), :attr:`filename` is the file name passed to the function. "
"For functions that involve two file system paths (such as :func:`os."
"rename`), :attr:`filename2` corresponds to the second file name passed to "
"the function."
msgstr ""

#: ../../library/exceptions.rst:396
msgid ""
":exc:`EnvironmentError`, :exc:`IOError`, :exc:`WindowsError`, :exc:`socket."
"error`, :exc:`select.error` and :exc:`mmap.error` have been merged into :exc:"
"`OSError`, and the constructor may return a subclass."
msgstr ""

#: ../../library/exceptions.rst:402
msgid ""
"The :attr:`filename` attribute is now the original file name passed to the "
"function, instead of the name encoded to or decoded from the :term:"
"`filesystem encoding and error handler`. Also, the *filename2* constructor "
"argument and attribute was added."
msgstr ""

#: ../../library/exceptions.rst:411
msgid ""
"Raised when the result of an arithmetic operation is too large to be "
"represented.  This cannot occur for integers (which would rather raise :exc:"
"`MemoryError` than give up).  However, for historical reasons, OverflowError "
"is sometimes raised for integers that are outside a required range.   "
"Because of the lack of standardization of floating point exception handling "
"in C, most floating point operations are not checked."
msgstr ""

#: ../../library/exceptions.rst:421
msgid ""
"This exception is derived from :exc:`RuntimeError`.  It is raised when the "
"interpreter detects that the maximum recursion depth (see :func:`sys."
"getrecursionlimit`) is exceeded."
msgstr ""

#: ../../library/exceptions.rst:425
msgid "Previously, a plain :exc:`RuntimeError` was raised."
msgstr ""

#: ../../library/exceptions.rst:431
msgid ""
"This exception is raised when a weak reference proxy, created by the :func:"
"`weakref.proxy` function, is used to access an attribute of the referent "
"after it has been garbage collected. For more information on weak "
"references, see the :mod:`weakref` module."
msgstr ""

#: ../../library/exceptions.rst:439
msgid ""
"Raised when an error is detected that doesn't fall in any of the other "
"categories.  The associated value is a string indicating what precisely went "
"wrong."
msgstr ""

#: ../../library/exceptions.rst:446
msgid ""
"Raised by built-in function :func:`next` and an :term:`iterator`\\'s :meth:"
"`~iterator.__next__` method to signal that there are no further items "
"produced by the iterator."
msgstr ""

#: ../../library/exceptions.rst:452
msgid ""
"The exception object has a single attribute :attr:`!value`, which is given "
"as an argument when constructing the exception, and defaults to :const:"
"`None`."
msgstr ""

#: ../../library/exceptions.rst:456
msgid ""
"When a :term:`generator` or :term:`coroutine` function returns, a new :exc:"
"`StopIteration` instance is raised, and the value returned by the function "
"is used as the :attr:`value` parameter to the constructor of the exception."
msgstr ""

#: ../../library/exceptions.rst:461
msgid ""
"If a generator code directly or indirectly raises :exc:`StopIteration`, it "
"is converted into a :exc:`RuntimeError` (retaining the :exc:`StopIteration` "
"as the new exception's cause)."
msgstr ""

#: ../../library/exceptions.rst:465
msgid ""
"Added ``value`` attribute and the ability for generator functions to use it "
"to return a value."
msgstr ""

#: ../../library/exceptions.rst:469
msgid ""
"Introduced the RuntimeError transformation via ``from __future__ import "
"generator_stop``, see :pep:`479`."
msgstr ""

#: ../../library/exceptions.rst:473
msgid ""
"Enable :pep:`479` for all code by default: a :exc:`StopIteration` error "
"raised in a generator is transformed into a :exc:`RuntimeError`."
msgstr ""

#: ../../library/exceptions.rst:479
msgid ""
"Must be raised by :meth:`~object.__anext__` method of an :term:`asynchronous "
"iterator` object to stop the iteration."
msgstr ""

#: ../../library/exceptions.rst:486
msgid ""
"Raised when the parser encounters a syntax error.  This may occur in an :"
"keyword:`import` statement, in a call to the built-in functions :func:"
"`compile`, :func:`exec`, or :func:`eval`, or when reading the initial script "
"or standard input (also interactively)."
msgstr ""

#: ../../library/exceptions.rst:492
msgid ""
"The :func:`str` of the exception instance returns only the error message. "
"Details is a tuple whose members are also available as separate attributes."
msgstr ""

#: ../../library/exceptions.rst:497
msgid "The name of the file the syntax error occurred in."
msgstr ""

#: ../../library/exceptions.rst:501
msgid ""
"Which line number in the file the error occurred in. This is 1-indexed: the "
"first line in the file has a ``lineno`` of 1."
msgstr ""

#: ../../library/exceptions.rst:506
msgid ""
"The column in the line where the error occurred. This is 1-indexed: the "
"first character in the line has an ``offset`` of 1."
msgstr ""

#: ../../library/exceptions.rst:511
msgid "The source code text involved in the error."
msgstr ""

#: ../../library/exceptions.rst:515
msgid ""
"Which line number in the file the error occurred ends in. This is 1-indexed: "
"the first line in the file has a ``lineno`` of 1."
msgstr ""

#: ../../library/exceptions.rst:520
msgid ""
"The column in the end line where the error occurred finishes. This is 1-"
"indexed: the first character in the line has an ``offset`` of 1."
msgstr ""

#: ../../library/exceptions.rst:523
msgid ""
"For errors in f-string fields, the message is prefixed by \"f-string: \" and "
"the offsets are offsets in a text constructed from the replacement "
"expression.  For example, compiling f'Bad {a b} field' results in this args "
"attribute: ('f-string: ...', ('', 1, 2, '(a b)\\n', 1, 5))."
msgstr ""

#: ../../library/exceptions.rst:528
msgid "Added the :attr:`end_lineno` and :attr:`end_offset` attributes."
msgstr "新增 :attr:`end_lineno` 與 :attr:`end_offset` 屬性。"

#: ../../library/exceptions.rst:533
msgid ""
"Base class for syntax errors related to incorrect indentation.  This is a "
"subclass of :exc:`SyntaxError`."
msgstr ""

#: ../../library/exceptions.rst:539
msgid ""
"Raised when indentation contains an inconsistent use of tabs and spaces. "
"This is a subclass of :exc:`IndentationError`."
msgstr ""

#: ../../library/exceptions.rst:545
msgid ""
"Raised when the interpreter finds an internal error, but the situation does "
"not look so serious to cause it to abandon all hope. The associated value is "
"a string indicating what went wrong (in low-level terms)."
msgstr ""

#: ../../library/exceptions.rst:549
msgid ""
"You should report this to the author or maintainer of your Python "
"interpreter. Be sure to report the version of the Python interpreter (``sys."
"version``; it is also printed at the start of an interactive Python "
"session), the exact error message (the exception's associated value) and if "
"possible the source of the program that triggered the error."
msgstr ""

#: ../../library/exceptions.rst:558
msgid ""
"This exception is raised by the :func:`sys.exit` function.  It inherits "
"from :exc:`BaseException` instead of :exc:`Exception` so that it is not "
"accidentally caught by code that catches :exc:`Exception`.  This allows the "
"exception to properly propagate up and cause the interpreter to exit.  When "
"it is not handled, the Python interpreter exits; no stack traceback is "
"printed.  The constructor accepts the same optional argument passed to :func:"
"`sys.exit`. If the value is an integer, it specifies the system exit status "
"(passed to C's :c:func:`exit` function); if it is ``None``, the exit status "
"is zero; if it has another type (such as a string), the object's value is "
"printed and the exit status is one."
msgstr ""

#: ../../library/exceptions.rst:569
msgid ""
"A call to :func:`sys.exit` is translated into an exception so that clean-up "
"handlers (:keyword:`finally` clauses of :keyword:`try` statements) can be "
"executed, and so that a debugger can execute a script without running the "
"risk of losing control.  The :func:`os._exit` function can be used if it is "
"absolutely positively necessary to exit immediately (for example, in the "
"child process after a call to :func:`os.fork`)."
msgstr ""

#: ../../library/exceptions.rst:578
msgid ""
"The exit status or error message that is passed to the constructor. "
"(Defaults to ``None``.)"
msgstr ""

#: ../../library/exceptions.rst:584
msgid ""
"Raised when an operation or function is applied to an object of "
"inappropriate type.  The associated value is a string giving details about "
"the type mismatch."
msgstr ""

#: ../../library/exceptions.rst:587
msgid ""
"This exception may be raised by user code to indicate that an attempted "
"operation on an object is not supported, and is not meant to be. If an "
"object is meant to support a given operation but has not yet provided an "
"implementation, :exc:`NotImplementedError` is the proper exception to raise."
msgstr ""

#: ../../library/exceptions.rst:592
msgid ""
"Passing arguments of the wrong type (e.g. passing a :class:`list` when an :"
"class:`int` is expected) should result in a :exc:`TypeError`, but passing "
"arguments with the wrong value (e.g. a number outside expected boundaries) "
"should result in a :exc:`ValueError`."
msgstr ""

#: ../../library/exceptions.rst:599
msgid ""
"Raised when a reference is made to a local variable in a function or method, "
"but no value has been bound to that variable.  This is a subclass of :exc:"
"`NameError`."
msgstr ""

#: ../../library/exceptions.rst:606
msgid ""
"Raised when a Unicode-related encoding or decoding error occurs.  It is a "
"subclass of :exc:`ValueError`."
msgstr ""

#: ../../library/exceptions.rst:609
msgid ""
":exc:`UnicodeError` has attributes that describe the encoding or decoding "
"error.  For example, ``err.object[err.start:err.end]`` gives the particular "
"invalid input that the codec failed on."
msgstr ""

#: ../../library/exceptions.rst:615
msgid "The name of the encoding that raised the error."
msgstr ""

#: ../../library/exceptions.rst:619
msgid "A string describing the specific codec error."
msgstr ""

#: ../../library/exceptions.rst:623
msgid "The object the codec was attempting to encode or decode."
msgstr ""

#: ../../library/exceptions.rst:627
msgid "The first index of invalid data in :attr:`object`."
msgstr ""

#: ../../library/exceptions.rst:631
msgid "The index after the last invalid data in :attr:`object`."
msgstr ""

#: ../../library/exceptions.rst:636
msgid ""
"Raised when a Unicode-related error occurs during encoding.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../../library/exceptions.rst:642
msgid ""
"Raised when a Unicode-related error occurs during decoding.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../../library/exceptions.rst:648
msgid ""
"Raised when a Unicode-related error occurs during translating.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../../library/exceptions.rst:654
msgid ""
"Raised when an operation or function receives an argument that has the right "
"type but an inappropriate value, and the situation is not described by a "
"more precise exception such as :exc:`IndexError`."
msgstr ""

#: ../../library/exceptions.rst:661
msgid ""
"Raised when the second argument of a division or modulo operation is zero.  "
"The associated value is a string indicating the type of the operands and the "
"operation."
msgstr ""

#: ../../library/exceptions.rst:666
msgid ""
"The following exceptions are kept for compatibility with previous versions; "
"starting from Python 3.3, they are aliases of :exc:`OSError`."
msgstr ""

#: ../../library/exceptions.rst:675
msgid "Only available on Windows."
msgstr "僅限於在 Windows 中使用。"

#: ../../library/exceptions.rst:679
msgid "OS exceptions"
msgstr ""

#: ../../library/exceptions.rst:681
msgid ""
"The following exceptions are subclasses of :exc:`OSError`, they get raised "
"depending on the system error code."
msgstr ""

#: ../../library/exceptions.rst:686
msgid ""
"Raised when an operation would block on an object (e.g. socket) set for non-"
"blocking operation. Corresponds to :c:data:`errno` :py:const:`~errno."
"EAGAIN`, :py:const:`~errno.EALREADY`, :py:const:`~errno.EWOULDBLOCK` and :py:"
"const:`~errno.EINPROGRESS`."
msgstr ""

#: ../../library/exceptions.rst:691
msgid ""
"In addition to those of :exc:`OSError`, :exc:`BlockingIOError` can have one "
"more attribute:"
msgstr ""

#: ../../library/exceptions.rst:696
msgid ""
"An integer containing the number of characters written to the stream before "
"it blocked.  This attribute is available when using the buffered I/O classes "
"from the :mod:`io` module."
msgstr ""

#: ../../library/exceptions.rst:702
msgid ""
"Raised when an operation on a child process failed. Corresponds to :c:data:"
"`errno` :py:const:`~errno.ECHILD`."
msgstr ""

#: ../../library/exceptions.rst:707
msgid "A base class for connection-related issues."
msgstr ""

#: ../../library/exceptions.rst:709
msgid ""
"Subclasses are :exc:`BrokenPipeError`, :exc:`ConnectionAbortedError`, :exc:"
"`ConnectionRefusedError` and :exc:`ConnectionResetError`."
msgstr ""

#: ../../library/exceptions.rst:714
msgid ""
"A subclass of :exc:`ConnectionError`, raised when trying to write on a pipe "
"while the other end has been closed, or trying to write on a socket which "
"has been shutdown for writing. Corresponds to :c:data:`errno` :py:const:"
"`~errno.EPIPE` and :py:const:`~errno.ESHUTDOWN`."
msgstr ""

#: ../../library/exceptions.rst:721
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection attempt is "
"aborted by the peer. Corresponds to :c:data:`errno` :py:const:`~errno."
"ECONNABORTED`."
msgstr ""

#: ../../library/exceptions.rst:727
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection attempt is "
"refused by the peer. Corresponds to :c:data:`errno` :py:const:`~errno."
"ECONNREFUSED`."
msgstr ""

#: ../../library/exceptions.rst:733
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection is reset by "
"the peer. Corresponds to :c:data:`errno` :py:const:`~errno.ECONNRESET`."
msgstr ""

#: ../../library/exceptions.rst:739
msgid ""
"Raised when trying to create a file or directory which already exists. "
"Corresponds to :c:data:`errno` :py:const:`~errno.EEXIST`."
msgstr ""

#: ../../library/exceptions.rst:744
msgid ""
"Raised when a file or directory is requested but doesn't exist. Corresponds "
"to :c:data:`errno` :py:const:`~errno.ENOENT`."
msgstr ""

#: ../../library/exceptions.rst:749
msgid ""
"Raised when a system call is interrupted by an incoming signal. Corresponds "
"to :c:data:`errno` :py:const:`~errno.EINTR`."
msgstr ""

#: ../../library/exceptions.rst:752
msgid ""
"Python now retries system calls when a syscall is interrupted by a signal, "
"except if the signal handler raises an exception (see :pep:`475` for the "
"rationale), instead of raising :exc:`InterruptedError`."
msgstr ""

#: ../../library/exceptions.rst:759
msgid ""
"Raised when a file operation (such as :func:`os.remove`) is requested on a "
"directory. Corresponds to :c:data:`errno` :py:const:`~errno.EISDIR`."
msgstr ""

#: ../../library/exceptions.rst:765
msgid ""
"Raised when a directory operation (such as :func:`os.listdir`) is requested "
"on something which is not a directory.  On most POSIX platforms, it may also "
"be raised if an operation attempts to open or traverse a non-directory file "
"as if it were a directory. Corresponds to :c:data:`errno` :py:const:`~errno."
"ENOTDIR`."
msgstr ""

#: ../../library/exceptions.rst:773
msgid ""
"Raised when trying to run an operation without the adequate access rights - "
"for example filesystem permissions. Corresponds to :c:data:`errno` :py:const:"
"`~errno.EACCES`, :py:const:`~errno.EPERM`, and :py:const:`~errno."
"ENOTCAPABLE`."
msgstr ""

#: ../../library/exceptions.rst:778
msgid ""
"WASI's :py:const:`~errno.ENOTCAPABLE` is now mapped to :exc:"
"`PermissionError`."
msgstr ""

#: ../../library/exceptions.rst:784
msgid ""
"Raised when a given process doesn't exist. Corresponds to :c:data:`errno` :"
"py:const:`~errno.ESRCH`."
msgstr ""

#: ../../library/exceptions.rst:789
msgid ""
"Raised when a system function timed out at the system level. Corresponds to :"
"c:data:`errno` :py:const:`~errno.ETIMEDOUT`."
msgstr ""

#: ../../library/exceptions.rst:792
msgid "All the above :exc:`OSError` subclasses were added."
msgstr ""

#: ../../library/exceptions.rst:798
msgid ":pep:`3151` - Reworking the OS and IO exception hierarchy"
msgstr ""

#: ../../library/exceptions.rst:804
msgid "Warnings"
msgstr "警告"

#: ../../library/exceptions.rst:806
msgid ""
"The following exceptions are used as warning categories; see the :ref:"
"`warning-categories` documentation for more details."
msgstr ""

#: ../../library/exceptions.rst:811
msgid "Base class for warning categories."
msgstr ""

#: ../../library/exceptions.rst:816
msgid "Base class for warnings generated by user code."
msgstr ""

#: ../../library/exceptions.rst:821
msgid ""
"Base class for warnings about deprecated features when those warnings are "
"intended for other Python developers."
msgstr ""

#: ../../library/exceptions.rst:824
msgid ""
"Ignored by the default warning filters, except in the ``__main__`` module (:"
"pep:`565`). Enabling the :ref:`Python Development Mode <devmode>` shows this "
"warning."
msgstr ""

#: ../../library/exceptions.rst:828 ../../library/exceptions.rst:844
msgid "The deprecation policy is described in :pep:`387`."
msgstr ""

#: ../../library/exceptions.rst:833
msgid ""
"Base class for warnings about features which are obsolete and expected to be "
"deprecated in the future, but are not deprecated at the moment."
msgstr ""

#: ../../library/exceptions.rst:837
msgid ""
"This class is rarely used as emitting a warning about a possible upcoming "
"deprecation is unusual, and :exc:`DeprecationWarning` is preferred for "
"already active deprecations."
msgstr ""

#: ../../library/exceptions.rst:841 ../../library/exceptions.rst:867
#: ../../library/exceptions.rst:894
msgid ""
"Ignored by the default warning filters. Enabling the :ref:`Python "
"Development Mode <devmode>` shows this warning."
msgstr ""

#: ../../library/exceptions.rst:849
msgid "Base class for warnings about dubious syntax."
msgstr ""

#: ../../library/exceptions.rst:854
msgid "Base class for warnings about dubious runtime behavior."
msgstr ""

#: ../../library/exceptions.rst:859
msgid ""
"Base class for warnings about deprecated features when those warnings are "
"intended for end users of applications that are written in Python."
msgstr ""

#: ../../library/exceptions.rst:865
msgid "Base class for warnings about probable mistakes in module imports."
msgstr ""

#: ../../library/exceptions.rst:873
msgid "Base class for warnings related to Unicode."
msgstr ""

#: ../../library/exceptions.rst:878
msgid "Base class for warnings related to encodings."
msgstr ""

#: ../../library/exceptions.rst:880
msgid "See :ref:`io-encoding-warning` for details."
msgstr "細節請見 :ref:`io-encoding-warning`。"

#: ../../library/exceptions.rst:887
msgid ""
"Base class for warnings related to :class:`bytes` and :class:`bytearray`."
msgstr ""

#: ../../library/exceptions.rst:892
msgid "Base class for warnings related to resource usage."
msgstr ""

#: ../../library/exceptions.rst:903
msgid "Exception groups"
msgstr ""

#: ../../library/exceptions.rst:905
msgid ""
"The following are used when it is necessary to raise multiple unrelated "
"exceptions. They are part of the exception hierarchy so they can be handled "
"with :keyword:`except` like all other exceptions. In addition, they are "
"recognised by :keyword:`except*<except_star>`, which matches their subgroups "
"based on the types of the contained exceptions."
msgstr ""

#: ../../library/exceptions.rst:914
msgid ""
"Both of these exception types wrap the exceptions in the sequence ``excs``. "
"The ``msg`` parameter must be a string. The difference between the two "
"classes is that :exc:`BaseExceptionGroup` extends :exc:`BaseException` and "
"it can wrap any exception, while :exc:`ExceptionGroup` extends :exc:"
"`Exception` and it can only wrap subclasses of :exc:`Exception`. This design "
"is so that ``except Exception`` catches an :exc:`ExceptionGroup` but not :"
"exc:`BaseExceptionGroup`."
msgstr ""

#: ../../library/exceptions.rst:922
msgid ""
"The :exc:`BaseExceptionGroup` constructor returns an :exc:`ExceptionGroup` "
"rather than a :exc:`BaseExceptionGroup` if all contained exceptions are :exc:"
"`Exception` instances, so it can be used to make the selection automatic. "
"The :exc:`ExceptionGroup` constructor, on the other hand, raises a :exc:"
"`TypeError` if any contained exception is not an :exc:`Exception` subclass."
msgstr ""

#: ../../library/exceptions.rst:931
msgid "The ``msg`` argument to the constructor. This is a read-only attribute."
msgstr ""

#: ../../library/exceptions.rst:935
msgid ""
"A tuple of the exceptions in the ``excs`` sequence given to the constructor. "
"This is a read-only attribute."
msgstr ""

#: ../../library/exceptions.rst:940
msgid ""
"Returns an exception group that contains only the exceptions from the "
"current group that match *condition*, or ``None`` if the result is empty."
msgstr ""

#: ../../library/exceptions.rst:943
msgid ""
"The condition can be either a function that accepts an exception and returns "
"true for those that should be in the subgroup, or it can be an exception "
"type or a tuple of exception types, which is used to check for a match using "
"the same check that is used in an ``except`` clause."
msgstr ""

#: ../../library/exceptions.rst:948
msgid ""
"The nesting structure of the current exception is preserved in the result, "
"as are the values of its :attr:`message`, :attr:`~BaseException."
"__traceback__`, :attr:`~BaseException.__cause__`, :attr:`~BaseException."
"__context__` and :attr:`~BaseException.__notes__` fields. Empty nested "
"groups are omitted from the result."
msgstr ""

#: ../../library/exceptions.rst:955
msgid ""
"The condition is checked for all exceptions in the nested exception group, "
"including the top-level and any nested exception groups. If the condition is "
"true for such an exception group, it is included in the result in full."
msgstr ""

#: ../../library/exceptions.rst:961
msgid ""
"Like :meth:`subgroup`, but returns the pair ``(match, rest)`` where "
"``match`` is ``subgroup(condition)`` and ``rest`` is the remaining non-"
"matching part."
msgstr ""

#: ../../library/exceptions.rst:967
msgid ""
"Returns an exception group with the same :attr:`message`, but which wraps "
"the exceptions in ``excs``."
msgstr ""

#: ../../library/exceptions.rst:970
msgid ""
"This method is used by :meth:`subgroup` and :meth:`split`. A subclass needs "
"to override it in order to make :meth:`subgroup` and :meth:`split` return "
"instances of the subclass rather than :exc:`ExceptionGroup`."
msgstr ""

#: ../../library/exceptions.rst:975
msgid ""
":meth:`subgroup` and :meth:`split` copy the :attr:`~BaseException."
"__traceback__`, :attr:`~BaseException.__cause__`, :attr:`~BaseException."
"__context__` and :attr:`~BaseException.__notes__` fields from the original "
"exception group to the one returned by :meth:`derive`, so these fields do "
"not need to be updated by :meth:`derive`."
msgstr ""

#: ../../library/exceptions.rst:1008
msgid ""
"Note that :exc:`BaseExceptionGroup` defines :meth:`~object.__new__`, so "
"subclasses that need a different constructor signature need to override that "
"rather than :meth:`~object.__init__`. For example, the following defines an "
"exception group subclass which accepts an exit_code and and constructs the "
"group's message from it. ::"
msgstr ""

#: ../../library/exceptions.rst:1023
msgid ""
"Like :exc:`ExceptionGroup`, any subclass of :exc:`BaseExceptionGroup` which "
"is also a subclass of :exc:`Exception` can only wrap instances of :exc:"
"`Exception`."
msgstr ""

#: ../../library/exceptions.rst:1031
msgid "Exception hierarchy"
msgstr "例外階層"

#: ../../library/exceptions.rst:1033
msgid "The class hierarchy for built-in exceptions is:"
msgstr "內建例外的類別階層如下："

#: ../../library/exceptions.rst:6 ../../library/exceptions.rst:17
#: ../../library/exceptions.rst:196
msgid "statement"
msgstr "statement（陳述式）"

#: ../../library/exceptions.rst:6
msgid "try"
msgstr "try"

#: ../../library/exceptions.rst:6
msgid "except"
msgstr "except"

#: ../../library/exceptions.rst:17
msgid "raise"
msgstr "raise"

#: ../../library/exceptions.rst:41
msgid "exception"
msgstr "exception（例外）"

#: ../../library/exceptions.rst:41
msgid "chaining"
msgstr "chaining"

#: ../../library/exceptions.rst:41
msgid "__cause__ (exception attribute)"
msgstr ""

#: ../../library/exceptions.rst:41
msgid "__context__ (exception attribute)"
msgstr ""

#: ../../library/exceptions.rst:41
msgid "__suppress_context__ (exception attribute)"
msgstr ""

#: ../../library/exceptions.rst:196
msgid "assert"
msgstr "assert"

#: ../../library/exceptions.rst:345
msgid "module"
msgstr "module（模組）"

#: ../../library/exceptions.rst:345
msgid "errno"
msgstr "errno"
