# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-25 11:03+0000\n"
"PO-Revision-Date: 2018-05-23 16:12+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/tarfile.rst:2
msgid ":mod:`tarfile` --- Read and write tar archive files"
msgstr ""

#: ../../library/tarfile.rst:10
msgid "**Source code:** :source:`Lib/tarfile.py`"
msgstr "**原始碼：**\\ :source:`Lib/tarfile.py`"

#: ../../library/tarfile.rst:14
msgid ""
"The :mod:`tarfile` module makes it possible to read and write tar archives, "
"including those using gzip, bz2 and lzma compression. Use the :mod:`zipfile` "
"module to read or write :file:`.zip` files, or the higher-level functions "
"in :ref:`shutil <archiving-operations>`."
msgstr ""

#: ../../library/tarfile.rst:19
msgid "Some facts and figures:"
msgstr ""

#: ../../library/tarfile.rst:21
msgid ""
"reads and writes :mod:`gzip`, :mod:`bz2` and :mod:`lzma` compressed archives "
"if the respective modules are available."
msgstr ""

#: ../../library/tarfile.rst:24
msgid "read/write support for the POSIX.1-1988 (ustar) format."
msgstr ""

#: ../../library/tarfile.rst:26
msgid ""
"read/write support for the GNU tar format including *longname* and "
"*longlink* extensions, read-only support for all variants of the *sparse* "
"extension including restoration of sparse files."
msgstr ""

#: ../../library/tarfile.rst:30
msgid "read/write support for the POSIX.1-2001 (pax) format."
msgstr ""

#: ../../library/tarfile.rst:32
msgid ""
"handles directories, regular files, hardlinks, symbolic links, fifos, "
"character devices and block devices and is able to acquire and restore file "
"information like timestamp, access permissions and owner."
msgstr ""

#: ../../library/tarfile.rst:36
msgid "Added support for :mod:`lzma` compression."
msgstr ""

#: ../../library/tarfile.rst:42
msgid ""
"Return a :class:`TarFile` object for the pathname *name*. For detailed "
"information on :class:`TarFile` objects and the keyword arguments that are "
"allowed, see :ref:`tarfile-objects`."
msgstr ""

#: ../../library/tarfile.rst:46
msgid ""
"*mode* has to be a string of the form ``'filemode[:compression]'``, it "
"defaults to ``'r'``. Here is a full list of mode combinations:"
msgstr ""

#: ../../library/tarfile.rst:50
msgid "mode"
msgstr ""

#: ../../library/tarfile.rst:50
msgid "action"
msgstr ""

#: ../../library/tarfile.rst:52
msgid "``'r' or 'r:*'``"
msgstr "``'r' 或 'r:*'``"

#: ../../library/tarfile.rst:52
msgid "Open for reading with transparent compression (recommended)."
msgstr ""

#: ../../library/tarfile.rst:55
msgid "``'r:'``"
msgstr "``'r:'``"

#: ../../library/tarfile.rst:55
msgid "Open for reading exclusively without compression."
msgstr ""

#: ../../library/tarfile.rst:58
msgid "``'r:gz'``"
msgstr "``'r:gz'``"

#: ../../library/tarfile.rst:58
msgid "Open for reading with gzip compression."
msgstr ""

#: ../../library/tarfile.rst:60
msgid "``'r:bz2'``"
msgstr "``'r:bz2'``"

#: ../../library/tarfile.rst:60
msgid "Open for reading with bzip2 compression."
msgstr ""

#: ../../library/tarfile.rst:62
msgid "``'r:xz'``"
msgstr "``'r:xz'``"

#: ../../library/tarfile.rst:62
msgid "Open for reading with lzma compression."
msgstr ""

#: ../../library/tarfile.rst:64
msgid "``'x'`` or ``'x:'``"
msgstr "``'x'`` 或 ``'x:'``"

#: ../../library/tarfile.rst:64
msgid ""
"Create a tarfile exclusively without compression. Raise a :exc:"
"`FileExistsError` exception if it already exists."
msgstr ""

#: ../../library/tarfile.rst:69
msgid "``'x:gz'``"
msgstr "``'x:gz'``"

#: ../../library/tarfile.rst:69
msgid ""
"Create a tarfile with gzip compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

#: ../../library/tarfile.rst:73
msgid "``'x:bz2'``"
msgstr "``'x:bz2'``"

#: ../../library/tarfile.rst:73
msgid ""
"Create a tarfile with bzip2 compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

#: ../../library/tarfile.rst:77
msgid "``'x:xz'``"
msgstr "``'x:xz'``"

#: ../../library/tarfile.rst:77
msgid ""
"Create a tarfile with lzma compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

#: ../../library/tarfile.rst:81
msgid "``'a' or 'a:'``"
msgstr "``'a' 或 'a:'``"

#: ../../library/tarfile.rst:81
msgid ""
"Open for appending with no compression. The file is created if it does not "
"exist."
msgstr ""

#: ../../library/tarfile.rst:84
msgid "``'w' or 'w:'``"
msgstr "``'w' 或 'w:'``"

#: ../../library/tarfile.rst:84
msgid "Open for uncompressed writing."
msgstr ""

#: ../../library/tarfile.rst:86
msgid "``'w:gz'``"
msgstr "``'w:gz'``"

#: ../../library/tarfile.rst:86
msgid "Open for gzip compressed writing."
msgstr ""

#: ../../library/tarfile.rst:88
msgid "``'w:bz2'``"
msgstr "``'w:bz2'``"

#: ../../library/tarfile.rst:88
msgid "Open for bzip2 compressed writing."
msgstr ""

#: ../../library/tarfile.rst:90
msgid "``'w:xz'``"
msgstr "``'w:xz'``"

#: ../../library/tarfile.rst:90
msgid "Open for lzma compressed writing."
msgstr ""

#: ../../library/tarfile.rst:93
msgid ""
"Note that ``'a:gz'``, ``'a:bz2'`` or ``'a:xz'`` is not possible. If *mode* "
"is not suitable to open a certain (compressed) file for reading, :exc:"
"`ReadError` is raised. Use *mode* ``'r'`` to avoid this.  If a compression "
"method is not supported, :exc:`CompressionError` is raised."
msgstr ""

#: ../../library/tarfile.rst:98
msgid ""
"If *fileobj* is specified, it is used as an alternative to a :term:`file "
"object` opened in binary mode for *name*. It is supposed to be at position 0."
msgstr ""

#: ../../library/tarfile.rst:101
msgid ""
"For modes ``'w:gz'``, ``'r:gz'``, ``'w:bz2'``, ``'r:bz2'``, ``'x:gz'``, ``'x:"
"bz2'``, :func:`tarfile.open` accepts the keyword argument *compresslevel* "
"(default ``9``) to specify the compression level of the file."
msgstr ""

#: ../../library/tarfile.rst:105
msgid ""
"For modes ``'w:xz'`` and ``'x:xz'``, :func:`tarfile.open` accepts the "
"keyword argument *preset* to specify the compression level of the file."
msgstr ""

#: ../../library/tarfile.rst:108
msgid ""
"For special purposes, there is a second format for *mode*: ``'filemode|"
"[compression]'``.  :func:`tarfile.open` will return a :class:`TarFile` "
"object that processes its data as a stream of blocks.  No random seeking "
"will be done on the file. If given, *fileobj* may be any object that has a :"
"meth:`read` or :meth:`write` method (depending on the *mode*). *bufsize* "
"specifies the blocksize and defaults to ``20 * 512`` bytes. Use this variant "
"in combination with e.g. ``sys.stdin``, a socket :term:`file object` or a "
"tape device. However, such a :class:`TarFile` object is limited in that it "
"does not allow random access, see :ref:`tar-examples`.  The currently "
"possible modes:"
msgstr ""

#: ../../library/tarfile.rst:120
msgid "Mode"
msgstr ""

#: ../../library/tarfile.rst:120
msgid "Action"
msgstr ""

#: ../../library/tarfile.rst:122
msgid "``'r|*'``"
msgstr "``'r|*'``"

#: ../../library/tarfile.rst:122
msgid "Open a *stream* of tar blocks for reading with transparent compression."
msgstr ""

#: ../../library/tarfile.rst:125
msgid "``'r|'``"
msgstr "``'r|'``"

#: ../../library/tarfile.rst:125
msgid "Open a *stream* of uncompressed tar blocks for reading."
msgstr ""

#: ../../library/tarfile.rst:128
msgid "``'r|gz'``"
msgstr "``'r|gz'``"

#: ../../library/tarfile.rst:128
msgid "Open a gzip compressed *stream* for reading."
msgstr ""

#: ../../library/tarfile.rst:131
msgid "``'r|bz2'``"
msgstr "``'r|bz2'``"

#: ../../library/tarfile.rst:131
msgid "Open a bzip2 compressed *stream* for reading."
msgstr ""

#: ../../library/tarfile.rst:134
msgid "``'r|xz'``"
msgstr "``'r|xz'``"

#: ../../library/tarfile.rst:134
msgid "Open an lzma compressed *stream* for reading."
msgstr ""

#: ../../library/tarfile.rst:137
msgid "``'w|'``"
msgstr "``'w|'``"

#: ../../library/tarfile.rst:137
msgid "Open an uncompressed *stream* for writing."
msgstr ""

#: ../../library/tarfile.rst:139
msgid "``'w|gz'``"
msgstr "``'w|gz'``"

#: ../../library/tarfile.rst:139
msgid "Open a gzip compressed *stream* for writing."
msgstr ""

#: ../../library/tarfile.rst:142
msgid "``'w|bz2'``"
msgstr "``'w|bz2'``"

#: ../../library/tarfile.rst:142
msgid "Open a bzip2 compressed *stream* for writing."
msgstr ""

#: ../../library/tarfile.rst:145
msgid "``'w|xz'``"
msgstr "``'w|xz'``"

#: ../../library/tarfile.rst:145
msgid "Open an lzma compressed *stream* for writing."
msgstr ""

#: ../../library/tarfile.rst:149 ../../library/tarfile.rst:365
msgid "The ``'x'`` (exclusive creation) mode was added."
msgstr ""

#: ../../library/tarfile.rst:152 ../../library/tarfile.rst:368
#: ../../library/tarfile.rst:605
msgid "The *name* parameter accepts a :term:`path-like object`."
msgstr ""

#: ../../library/tarfile.rst:159
msgid ""
"Class for reading and writing tar archives. Do not use this class directly: "
"use :func:`tarfile.open` instead. See :ref:`tarfile-objects`."
msgstr ""

#: ../../library/tarfile.rst:165
msgid ""
"Return :const:`True` if *name* is a tar archive file, that the :mod:"
"`tarfile` module can read. *name* may be a :class:`str`, file, or file-like "
"object."
msgstr ""

#: ../../library/tarfile.rst:168
msgid "Support for file and file-like objects."
msgstr ""

#: ../../library/tarfile.rst:172
msgid "The :mod:`tarfile` module defines the following exceptions:"
msgstr ""

#: ../../library/tarfile.rst:177
msgid "Base class for all :mod:`tarfile` exceptions."
msgstr ""

#: ../../library/tarfile.rst:182
msgid ""
"Is raised when a tar archive is opened, that either cannot be handled by "
"the :mod:`tarfile` module or is somehow invalid."
msgstr ""

#: ../../library/tarfile.rst:188
msgid ""
"Is raised when a compression method is not supported or when the data cannot "
"be decoded properly."
msgstr ""

#: ../../library/tarfile.rst:194
msgid ""
"Is raised for the limitations that are typical for stream-like :class:"
"`TarFile` objects."
msgstr ""

#: ../../library/tarfile.rst:200
msgid ""
"Is raised for *non-fatal* errors when using :meth:`TarFile.extract`, but "
"only if :attr:`TarFile.errorlevel`\\ ``== 2``."
msgstr ""

#: ../../library/tarfile.rst:206
msgid "Is raised by :meth:`TarInfo.frombuf` if the buffer it gets is invalid."
msgstr ""

#: ../../library/tarfile.rst:211
msgid ""
"Base class for members :ref:`refused <tarfile-extraction-refuse>` by filters."
msgstr ""

#: ../../library/tarfile.rst:216
msgid ""
"Information about the member that the filter refused to extract, as :ref:"
"`TarInfo <tarinfo-objects>`."
msgstr ""

#: ../../library/tarfile.rst:221
msgid "Raised to refuse extracting a member with an absolute path."
msgstr ""

#: ../../library/tarfile.rst:225
msgid "Raised to refuse extracting a member outside the destination directory."
msgstr ""

#: ../../library/tarfile.rst:229
msgid "Raised to refuse extracting a special file (e.g. a device or pipe)."
msgstr ""

#: ../../library/tarfile.rst:233
msgid "Raised to refuse extracting a symbolic link with an absolute path."
msgstr ""

#: ../../library/tarfile.rst:237
msgid ""
"Raised to refuse extracting a symbolic link pointing outside the destination "
"directory."
msgstr ""

#: ../../library/tarfile.rst:241
msgid "The following constants are available at the module level:"
msgstr ""

#: ../../library/tarfile.rst:245
msgid ""
"The default character encoding: ``'utf-8'`` on Windows, the value returned "
"by :func:`sys.getfilesystemencoding` otherwise."
msgstr ""

#: ../../library/tarfile.rst:249
msgid ""
"Each of the following constants defines a tar archive format that the :mod:"
"`tarfile` module is able to create. See section :ref:`tar-formats` for "
"details."
msgstr ""

#: ../../library/tarfile.rst:256
msgid "POSIX.1-1988 (ustar) format."
msgstr ""

#: ../../library/tarfile.rst:261
msgid "GNU tar format."
msgstr ""

#: ../../library/tarfile.rst:266
msgid "POSIX.1-2001 (pax) format."
msgstr ""

#: ../../library/tarfile.rst:271
msgid ""
"The default format for creating archives. This is currently :const:"
"`PAX_FORMAT`."
msgstr ""

#: ../../library/tarfile.rst:273
msgid ""
"The default format for new archives was changed to :const:`PAX_FORMAT` from :"
"const:`GNU_FORMAT`."
msgstr ""

#: ../../library/tarfile.rst:281
msgid "Module :mod:`zipfile`"
msgstr ":mod:`zipfile` 模組"

#: ../../library/tarfile.rst:281
msgid "Documentation of the :mod:`zipfile` standard module."
msgstr ""

#: ../../library/tarfile.rst:285
msgid ":ref:`archiving-operations`"
msgstr ":ref:`archiving-operations`"

#: ../../library/tarfile.rst:284
msgid ""
"Documentation of the higher-level archiving facilities provided by the "
"standard :mod:`shutil` module."
msgstr ""

#: ../../library/tarfile.rst:287
msgid ""
"`GNU tar manual, Basic Tar Format <https://www.gnu.org/software/tar/manual/"
"html_node/Standard.html>`_"
msgstr ""

#: ../../library/tarfile.rst:288
msgid "Documentation for tar archive files, including GNU tar extensions."
msgstr ""

#: ../../library/tarfile.rst:294
msgid "TarFile Objects"
msgstr "TarFile 物件"

#: ../../library/tarfile.rst:296
msgid ""
"The :class:`TarFile` object provides an interface to a tar archive. A tar "
"archive is a sequence of blocks. An archive member (a stored file) is made "
"up of a header block followed by data blocks. It is possible to store a file "
"in a tar archive several times. Each archive member is represented by a :"
"class:`TarInfo` object, see :ref:`tarinfo-objects` for details."
msgstr ""

#: ../../library/tarfile.rst:302
msgid ""
"A :class:`TarFile` object can be used as a context manager in a :keyword:"
"`with` statement. It will automatically be closed when the block is "
"completed. Please note that in the event of an exception an archive opened "
"for writing will not be finalized; only the internally used file object will "
"be closed. See the :ref:`tar-examples` section for a use case."
msgstr ""

#: ../../library/tarfile.rst:308
msgid "Added support for the context management protocol."
msgstr ""

#: ../../library/tarfile.rst:313
msgid ""
"All following arguments are optional and can be accessed as instance "
"attributes as well."
msgstr ""

#: ../../library/tarfile.rst:316
msgid ""
"*name* is the pathname of the archive. *name* may be a :term:`path-like "
"object`. It can be omitted if *fileobj* is given. In this case, the file "
"object's :attr:`name` attribute is used if it exists."
msgstr ""

#: ../../library/tarfile.rst:320
msgid ""
"*mode* is either ``'r'`` to read from an existing archive, ``'a'`` to append "
"data to an existing file, ``'w'`` to create a new file overwriting an "
"existing one, or ``'x'`` to create a new file only if it does not already "
"exist."
msgstr ""

#: ../../library/tarfile.rst:324
msgid ""
"If *fileobj* is given, it is used for reading or writing data. If it can be "
"determined, *mode* is overridden by *fileobj*'s mode. *fileobj* will be used "
"from position 0."
msgstr ""

#: ../../library/tarfile.rst:330
msgid "*fileobj* is not closed, when :class:`TarFile` is closed."
msgstr ""

#: ../../library/tarfile.rst:332
msgid ""
"*format* controls the archive format for writing. It must be one of the "
"constants :const:`USTAR_FORMAT`, :const:`GNU_FORMAT` or :const:`PAX_FORMAT` "
"that are defined at module level. When reading, format will be automatically "
"detected, even if different formats are present in a single archive."
msgstr ""

#: ../../library/tarfile.rst:337
msgid ""
"The *tarinfo* argument can be used to replace the default :class:`TarInfo` "
"class with a different one."
msgstr ""

#: ../../library/tarfile.rst:340
msgid ""
"If *dereference* is :const:`False`, add symbolic and hard links to the "
"archive. If it is :const:`True`, add the content of the target files to the "
"archive. This has no effect on systems that do not support symbolic links."
msgstr ""

#: ../../library/tarfile.rst:344
msgid ""
"If *ignore_zeros* is :const:`False`, treat an empty block as the end of the "
"archive. If it is :const:`True`, skip empty (and invalid) blocks and try to "
"get as many members as possible. This is only useful for reading "
"concatenated or damaged archives."
msgstr ""

#: ../../library/tarfile.rst:348
msgid ""
"*debug* can be set from ``0`` (no debug messages) up to ``3`` (all debug "
"messages). The messages are written to ``sys.stderr``."
msgstr ""

#: ../../library/tarfile.rst:351
msgid ""
"*errorlevel* controls how extraction errors are handled, see :attr:`the "
"corresponding attribute <~TarFile.errorlevel>`."
msgstr ""

#: ../../library/tarfile.rst:354
msgid ""
"The *encoding* and *errors* arguments define the character encoding to be "
"used for reading or writing the archive and how conversion errors are going "
"to be handled. The default settings will work for most users. See section :"
"ref:`tar-unicode` for in-depth information."
msgstr ""

#: ../../library/tarfile.rst:359
msgid ""
"The *pax_headers* argument is an optional dictionary of strings which will "
"be added as a pax global header if *format* is :const:`PAX_FORMAT`."
msgstr ""

#: ../../library/tarfile.rst:362 ../../library/tarfile.rst:678
msgid "Use ``'surrogateescape'`` as the default for the *errors* argument."
msgstr ""

#: ../../library/tarfile.rst:374
msgid ""
"Alternative constructor. The :func:`tarfile.open` function is actually a "
"shortcut to this classmethod."
msgstr ""

#: ../../library/tarfile.rst:380
msgid ""
"Return a :class:`TarInfo` object for member *name*. If *name* can not be "
"found in the archive, :exc:`KeyError` is raised."
msgstr ""

#: ../../library/tarfile.rst:385
msgid ""
"If a member occurs more than once in the archive, its last occurrence is "
"assumed to be the most up-to-date version."
msgstr ""

#: ../../library/tarfile.rst:391
msgid ""
"Return the members of the archive as a list of :class:`TarInfo` objects. The "
"list has the same order as the members in the archive."
msgstr ""

#: ../../library/tarfile.rst:397
msgid ""
"Return the members as a list of their names. It has the same order as the "
"list returned by :meth:`getmembers`."
msgstr ""

#: ../../library/tarfile.rst:403
msgid ""
"Print a table of contents to ``sys.stdout``. If *verbose* is :const:`False`, "
"only the names of the members are printed. If it is :const:`True`, output "
"similar to that of :program:`ls -l` is produced. If optional *members* is "
"given, it must be a subset of the list returned by :meth:`getmembers`."
msgstr ""

#: ../../library/tarfile.rst:408
msgid "Added the *members* parameter."
msgstr "新增 *members* 參數。"

#: ../../library/tarfile.rst:414
msgid ""
"Return the next member of the archive as a :class:`TarInfo` object, when :"
"class:`TarFile` is opened for reading. Return :const:`None` if there is no "
"more available."
msgstr ""

#: ../../library/tarfile.rst:421
msgid ""
"Extract all members from the archive to the current working directory or "
"directory *path*. If optional *members* is given, it must be a subset of the "
"list returned by :meth:`getmembers`. Directory information like owner, "
"modification time and permissions are set after all members have been "
"extracted. This is done to work around two problems: A directory's "
"modification time is reset each time a file is created in it. And, if a "
"directory's permissions do not allow writing, extracting files to it will "
"fail."
msgstr ""

#: ../../library/tarfile.rst:429
msgid ""
"If *numeric_owner* is :const:`True`, the uid and gid numbers from the "
"tarfile are used to set the owner/group for the extracted files. Otherwise, "
"the named values from the tarfile are used."
msgstr ""

#: ../../library/tarfile.rst:433
msgid ""
"The *filter* argument, which was added in Python 3.11.4, specifies how "
"``members`` are modified or rejected before extraction. See :ref:`tarfile-"
"extraction-filter` for details. It is recommended to set this explicitly "
"depending on which *tar* features you need to support."
msgstr ""

#: ../../library/tarfile.rst:441
msgid ""
"Never extract archives from untrusted sources without prior inspection. It "
"is possible that files are created outside of *path*, e.g. members that have "
"absolute filenames starting with ``\"/\"`` or filenames with two dots ``\".."
"\"``."
msgstr ""

#: ../../library/tarfile.rst:446 ../../library/tarfile.rst:479
msgid ""
"Set ``filter='data'`` to prevent the most dangerous security issues, and "
"read the :ref:`tarfile-extraction-filter` section for details."
msgstr ""

#: ../../library/tarfile.rst:449 ../../library/tarfile.rst:485
msgid "Added the *numeric_owner* parameter."
msgstr "新增 *numeric_owner* 參數。"

#: ../../library/tarfile.rst:452 ../../library/tarfile.rst:488
msgid "The *path* parameter accepts a :term:`path-like object`."
msgstr ""

#: ../../library/tarfile.rst:455 ../../library/tarfile.rst:491
#: ../../library/tarfile.rst:571
msgid "Added the *filter* parameter."
msgstr "新增 *filter* 參數。"

#: ../../library/tarfile.rst:461
msgid ""
"Extract a member from the archive to the current working directory, using "
"its full name. Its file information is extracted as accurately as possible. "
"*member* may be a filename or a :class:`TarInfo` object. You can specify a "
"different directory using *path*. *path* may be a :term:`path-like object`. "
"File attributes (owner, mtime, mode) are set unless *set_attrs* is false."
msgstr ""

#: ../../library/tarfile.rst:467
msgid ""
"The *numeric_owner* and *filter* arguments are the same as for :meth:"
"`extractall`."
msgstr ""

#: ../../library/tarfile.rst:472
msgid ""
"The :meth:`extract` method does not take care of several extraction issues. "
"In most cases you should consider using the :meth:`extractall` method."
msgstr ""

#: ../../library/tarfile.rst:477
msgid "See the warning for :meth:`extractall`."
msgstr "參閱 :meth:`extractall` 的警告。"

#: ../../library/tarfile.rst:482
msgid "Added the *set_attrs* parameter."
msgstr "增加 *set_attrs* 參數。"

#: ../../library/tarfile.rst:497
msgid ""
"Extract a member from the archive as a file object. *member* may be a "
"filename or a :class:`TarInfo` object. If *member* is a regular file or a "
"link, an :class:`io.BufferedReader` object is returned. For all other "
"existing members, :const:`None` is returned. If *member* does not appear in "
"the archive, :exc:`KeyError` is raised."
msgstr ""

#: ../../library/tarfile.rst:503
msgid "Return an :class:`io.BufferedReader` object."
msgstr ""

#: ../../library/tarfile.rst:509
msgid ""
"If *errorlevel* is ``0``, errors are ignored when using :meth:`TarFile."
"extract` and :meth:`TarFile.extractall`. Nevertheless, they appear as error "
"messages in the debug output when *debug* is greater than 0. If ``1`` (the "
"default), all *fatal* errors are raised as :exc:`OSError` or :exc:"
"`FilterError` exceptions. If ``2``, all *non-fatal* errors are raised as :"
"exc:`TarError` exceptions as well."
msgstr ""

#: ../../library/tarfile.rst:517
msgid ""
"Some exceptions, e.g. ones caused by wrong argument types or data "
"corruption, are always raised."
msgstr ""

#: ../../library/tarfile.rst:520
msgid ""
"Custom :ref:`extraction filters <tarfile-extraction-filter>` should raise :"
"exc:`FilterError` for *fatal* errors and :exc:`ExtractError` for *non-fatal* "
"ones."
msgstr ""

#: ../../library/tarfile.rst:524
msgid ""
"Note that when an exception is raised, the archive may be partially "
"extracted. It is the user’s responsibility to clean up."
msgstr ""

#: ../../library/tarfile.rst:531
msgid ""
"The :ref:`extraction filter <tarfile-extraction-filter>` used as a default "
"for the *filter* argument of :meth:`~TarFile.extract` and :meth:`~TarFile."
"extractall`."
msgstr ""

#: ../../library/tarfile.rst:535
msgid ""
"The attribute may be ``None`` or a callable. String names are not allowed "
"for this attribute, unlike the *filter* argument to :meth:`~TarFile.extract`."
msgstr ""

#: ../../library/tarfile.rst:539
msgid ""
"If ``extraction_filter`` is ``None`` (the default), calling an extraction "
"method without a *filter* argument will use the :func:`fully_trusted "
"<fully_trusted_filter>` filter for compatibility with previous Python "
"versions."
msgstr ""

#: ../../library/tarfile.rst:544
msgid ""
"In Python 3.12+, leaving ``extraction_filter=None`` will emit a "
"``DeprecationWarning``."
msgstr ""

#: ../../library/tarfile.rst:547
msgid ""
"In Python 3.14+, leaving ``extraction_filter=None`` will cause extraction "
"methods to use the :func:`data <data_filter>` filter by default."
msgstr ""

#: ../../library/tarfile.rst:550
msgid ""
"The attribute may be set on instances or overridden in subclasses. It also "
"is possible to set it on the ``TarFile`` class itself to set a global "
"default, although, since it affects all uses of *tarfile*, it is best "
"practice to only do so in top-level applications or :mod:`site configuration "
"<site>`. To set a global default this way, a filter function needs to be "
"wrapped in :func:`staticmethod()` to prevent injection of a ``self`` "
"argument."
msgstr ""

#: ../../library/tarfile.rst:560
msgid ""
"Add the file *name* to the archive. *name* may be any type of file "
"(directory, fifo, symbolic link, etc.). If given, *arcname* specifies an "
"alternative name for the file in the archive. Directories are added "
"recursively by default. This can be avoided by setting *recursive* to :const:"
"`False`. Recursion adds entries in sorted order. If *filter* is given, it "
"should be a function that takes a :class:`TarInfo` object argument and "
"returns the changed :class:`TarInfo` object. If it instead returns :const:"
"`None` the :class:`TarInfo` object will be excluded from the archive. See :"
"ref:`tar-examples` for an example."
msgstr ""

#: ../../library/tarfile.rst:574
msgid "Recursion adds entries in sorted order."
msgstr ""

#: ../../library/tarfile.rst:580
msgid ""
"Add the :class:`TarInfo` object *tarinfo* to the archive. If *fileobj* is "
"given, it should be a :term:`binary file`, and ``tarinfo.size`` bytes are "
"read from it and added to the archive.  You can create :class:`TarInfo` "
"objects directly, or by using :meth:`gettarinfo`."
msgstr ""

#: ../../library/tarfile.rst:588
msgid ""
"Create a :class:`TarInfo` object from the result of :func:`os.stat` or "
"equivalent on an existing file.  The file is either named by *name*, or "
"specified as a :term:`file object` *fileobj* with a file descriptor. *name* "
"may be a :term:`path-like object`.  If given, *arcname* specifies an "
"alternative name for the file in the archive, otherwise, the name is taken "
"from *fileobj*’s :attr:`~io.FileIO.name` attribute, or the *name* argument.  "
"The name should be a text string."
msgstr ""

#: ../../library/tarfile.rst:597
msgid ""
"You can modify some of the :class:`TarInfo`’s attributes before you add it "
"using :meth:`addfile`. If the file object is not an ordinary file object "
"positioned at the beginning of the file, attributes such as :attr:`~TarInfo."
"size` may need modifying.  This is the case for objects such as :class:"
"`~gzip.GzipFile`. The :attr:`~TarInfo.name` may also be modified, in which "
"case *arcname* could be a dummy string."
msgstr ""

#: ../../library/tarfile.rst:611
msgid ""
"Close the :class:`TarFile`. In write mode, two finishing zero blocks are "
"appended to the archive."
msgstr ""

#: ../../library/tarfile.rst:617
msgid "A dictionary containing key-value pairs of pax global headers."
msgstr ""

#: ../../library/tarfile.rst:624
msgid "TarInfo Objects"
msgstr "TarInfo 物件"

#: ../../library/tarfile.rst:626
msgid ""
"A :class:`TarInfo` object represents one member in a :class:`TarFile`. Aside "
"from storing all required attributes of a file (like file type, size, time, "
"permissions, owner etc.), it provides some useful methods to determine its "
"type. It does *not* contain the file's data itself."
msgstr ""

#: ../../library/tarfile.rst:631
msgid ""
":class:`TarInfo` objects are returned by :class:`TarFile`'s methods :meth:"
"`~TarFile.getmember`, :meth:`~TarFile.getmembers` and :meth:`~TarFile."
"gettarinfo`."
msgstr ""

#: ../../library/tarfile.rst:635
msgid ""
"Modifying the objects returned by :meth:`~!TarFile.getmember` or :meth:`~!"
"TarFile.getmembers` will affect all subsequent operations on the archive. "
"For cases where this is unwanted, you can use :mod:`copy.copy() <copy>` or "
"call the :meth:`~TarInfo.replace` method to create a modified copy in one "
"step."
msgstr ""

#: ../../library/tarfile.rst:641
msgid ""
"Several attributes can be set to ``None`` to indicate that a piece of "
"metadata is unused or unknown. Different :class:`TarInfo` methods handle "
"``None`` differently:"
msgstr ""

#: ../../library/tarfile.rst:645
msgid ""
"The :meth:`~TarFile.extract` or :meth:`~TarFile.extractall` methods will "
"ignore the corresponding metadata, leaving it set to a default."
msgstr ""

#: ../../library/tarfile.rst:647
msgid ":meth:`~TarFile.addfile` will fail."
msgstr ""

#: ../../library/tarfile.rst:648
msgid ":meth:`~TarFile.list` will print a placeholder string."
msgstr ""

#: ../../library/tarfile.rst:651
msgid "Added :meth:`~TarInfo.replace` and handling of ``None``."
msgstr ""

#: ../../library/tarfile.rst:657
msgid "Create a :class:`TarInfo` object."
msgstr ""

#: ../../library/tarfile.rst:662
msgid "Create and return a :class:`TarInfo` object from string buffer *buf*."
msgstr ""

#: ../../library/tarfile.rst:664
msgid "Raises :exc:`HeaderError` if the buffer is invalid."
msgstr ""

#: ../../library/tarfile.rst:669
msgid ""
"Read the next member from the :class:`TarFile` object *tarfile* and return "
"it as a :class:`TarInfo` object."
msgstr ""

#: ../../library/tarfile.rst:675
msgid ""
"Create a string buffer from a :class:`TarInfo` object. For information on "
"the arguments see the constructor of the :class:`TarFile` class."
msgstr ""

#: ../../library/tarfile.rst:682
msgid "A ``TarInfo`` object has the following public data attributes:"
msgstr ""

#: ../../library/tarfile.rst:688
msgid "Name of the archive member."
msgstr ""

#: ../../library/tarfile.rst:694
msgid "Size in bytes."
msgstr ""

#: ../../library/tarfile.rst:700
msgid ""
"Time of last modification in seconds since the :ref:`epoch <epoch>`, as in :"
"attr:`os.stat_result.st_mtime`."
msgstr ""

#: ../../library/tarfile.rst:705 ../../library/tarfile.rst:716
#: ../../library/tarfile.rst:743 ../../library/tarfile.rst:754
#: ../../library/tarfile.rst:765 ../../library/tarfile.rst:776
msgid ""
"Can be set to ``None`` for :meth:`~TarFile.extract` and :meth:`~TarFile."
"extractall`, causing extraction to skip applying this attribute."
msgstr ""

#: ../../library/tarfile.rst:712
msgid "Permission bits, as for :func:`os.chmod`."
msgstr ""

#: ../../library/tarfile.rst:722
msgid ""
"File type.  *type* is usually one of these constants: :const:`REGTYPE`, :"
"const:`AREGTYPE`, :const:`LNKTYPE`, :const:`SYMTYPE`, :const:`DIRTYPE`, :"
"const:`FIFOTYPE`, :const:`CONTTYPE`, :const:`CHRTYPE`, :const:`BLKTYPE`, :"
"const:`GNUTYPE_SPARSE`.  To determine the type of a :class:`TarInfo` object "
"more conveniently, use the ``is*()`` methods below."
msgstr ""

#: ../../library/tarfile.rst:732
msgid ""
"Name of the target file name, which is only present in :class:`TarInfo` "
"objects of type :const:`LNKTYPE` and :const:`SYMTYPE`."
msgstr ""

#: ../../library/tarfile.rst:739
msgid "User ID of the user who originally stored this member."
msgstr ""

#: ../../library/tarfile.rst:750
msgid "Group ID of the user who originally stored this member."
msgstr ""

#: ../../library/tarfile.rst:761
msgid "User name."
msgstr ""

#: ../../library/tarfile.rst:772
msgid "Group name."
msgstr ""

#: ../../library/tarfile.rst:783
msgid ""
"A dictionary containing key-value pairs of an associated pax extended header."
msgstr ""

#: ../../library/tarfile.rst:791
msgid ""
"Return a *new* copy of the :class:`!TarInfo` object with the given "
"attributes changed. For example, to return a ``TarInfo`` with the group name "
"set to ``'staff'``, use::"
msgstr ""

#: ../../library/tarfile.rst:797
msgid ""
"By default, a deep copy is made. If *deep* is false, the copy is shallow, i."
"e. ``pax_headers`` and any custom attributes are shared with the original "
"``TarInfo`` object."
msgstr ""

#: ../../library/tarfile.rst:801
msgid "A :class:`TarInfo` object also provides some convenient query methods:"
msgstr ""

#: ../../library/tarfile.rst:806
msgid "Return :const:`True` if the :class:`Tarinfo` object is a regular file."
msgstr ""

#: ../../library/tarfile.rst:811
msgid "Same as :meth:`isfile`."
msgstr ""

#: ../../library/tarfile.rst:816
msgid "Return :const:`True` if it is a directory."
msgstr ""

#: ../../library/tarfile.rst:821
msgid "Return :const:`True` if it is a symbolic link."
msgstr ""

#: ../../library/tarfile.rst:826
msgid "Return :const:`True` if it is a hard link."
msgstr ""

#: ../../library/tarfile.rst:831
msgid "Return :const:`True` if it is a character device."
msgstr ""

#: ../../library/tarfile.rst:836
msgid "Return :const:`True` if it is a block device."
msgstr ""

#: ../../library/tarfile.rst:841
msgid "Return :const:`True` if it is a FIFO."
msgstr ""

#: ../../library/tarfile.rst:846
msgid ""
"Return :const:`True` if it is one of character device, block device or FIFO."
msgstr ""

#: ../../library/tarfile.rst:852
msgid "Extraction filters"
msgstr ""

#: ../../library/tarfile.rst:856
msgid ""
"The *tar* format is designed to capture all details of a UNIX-like "
"filesystem, which makes it very powerful. Unfortunately, the features make "
"it easy to create tar files that have unintended -- and possibly malicious "
"-- effects when extracted. For example, extracting a tar file can overwrite "
"arbitrary files in various ways (e.g.  by using absolute paths, ``..`` path "
"components, or symlinks that affect later members)."
msgstr ""

#: ../../library/tarfile.rst:864
msgid ""
"In most cases, the full functionality is not needed. Therefore, *tarfile* "
"supports extraction filters: a mechanism to limit functionality, and thus "
"mitigate some of the security issues."
msgstr ""

#: ../../library/tarfile.rst:870
msgid ":pep:`706`"
msgstr ""

#: ../../library/tarfile.rst:871
msgid "Contains further motivation and rationale behind the design."
msgstr ""

#: ../../library/tarfile.rst:873
msgid ""
"The *filter* argument to :meth:`TarFile.extract` or :meth:`~TarFile."
"extractall` can be:"
msgstr ""

#: ../../library/tarfile.rst:876
msgid ""
"the string ``'fully_trusted'``: Honor all metadata as specified in the "
"archive. Should be used if the user trusts the archive completely, or "
"implements their own complex verification."
msgstr ""

#: ../../library/tarfile.rst:881
msgid ""
"the string ``'tar'``: Honor most *tar*-specific features (i.e. features of "
"UNIX-like filesystems), but block features that are very likely to be "
"surprising or malicious. See :func:`tar_filter` for details."
msgstr ""

#: ../../library/tarfile.rst:885
msgid ""
"the string ``'data'``: Ignore or block most features specific to UNIX-like "
"filesystems. Intended for extracting cross-platform data archives. See :func:"
"`data_filter` for details."
msgstr ""

#: ../../library/tarfile.rst:889
msgid "``None`` (default): Use :attr:`TarFile.extraction_filter`."
msgstr ""

#: ../../library/tarfile.rst:891
msgid ""
"If that is also ``None`` (the default), the ``'fully_trusted'`` filter will "
"be used (for compatibility with earlier versions of Python)."
msgstr ""

#: ../../library/tarfile.rst:894
msgid "In Python 3.12, the default will emit a ``DeprecationWarning``."
msgstr ""

#: ../../library/tarfile.rst:896
msgid ""
"In Python 3.14, the ``'data'`` filter will become the default instead. It's "
"possible to switch earlier; see :attr:`TarFile.extraction_filter`."
msgstr ""

#: ../../library/tarfile.rst:899
msgid ""
"A callable which will be called for each extracted member with a :ref:"
"`TarInfo <tarinfo-objects>` describing the member and the destination path "
"to where the archive is extracted (i.e. the same path is used for all "
"members)::"
msgstr ""

#: ../../library/tarfile.rst:906
msgid ""
"The callable is called just before each member is extracted, so it can take "
"the current state of the disk into account. It can:"
msgstr ""

#: ../../library/tarfile.rst:910
msgid ""
"return a :class:`TarInfo` object which will be used instead of the metadata "
"in the archive, or"
msgstr ""

#: ../../library/tarfile.rst:912
msgid "return ``None``, in which case the member will be skipped, or"
msgstr ""

#: ../../library/tarfile.rst:913
msgid ""
"raise an exception to abort the operation or skip the member, depending on :"
"attr:`~TarFile.errorlevel`. Note that when extraction is aborted, :meth:"
"`~TarFile.extractall` may leave the archive partially extracted. It does not "
"attempt to clean up."
msgstr ""

#: ../../library/tarfile.rst:919
msgid "Default named filters"
msgstr ""

#: ../../library/tarfile.rst:921
msgid ""
"The pre-defined, named filters are available as functions, so they can be "
"reused in custom filters:"
msgstr ""

#: ../../library/tarfile.rst:926
msgid "Return *member* unchanged."
msgstr ""

#: ../../library/tarfile.rst:928
msgid "This implements the ``'fully_trusted'`` filter."
msgstr ""

#: ../../library/tarfile.rst:932
msgid "Implements the ``'tar'`` filter."
msgstr ""

#: ../../library/tarfile.rst:934
msgid "Strip leading slashes (``/`` and :data:`os.sep`) from filenames."
msgstr ""

#: ../../library/tarfile.rst:935
msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract files with absolute "
"paths (in case the name is absolute even after stripping slashes, e.g. ``C:/"
"foo`` on Windows). This raises :class:`~tarfile.AbsolutePathError`."
msgstr ""

#: ../../library/tarfile.rst:939
msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract files whose absolute "
"path (after following symlinks) would end up outside the destination. This "
"raises :class:`~tarfile.OutsideDestinationError`."
msgstr ""

#: ../../library/tarfile.rst:942
msgid ""
"Clear high mode bits (setuid, setgid, sticky) and group/other write bits (:"
"const:`~stat.S_IWGRP`|:const:`~stat.S_IWOTH`)."
msgstr ""

#: ../../library/tarfile.rst:945 ../../library/tarfile.rst:978
msgid "Return the modified ``TarInfo`` member."
msgstr ""

#: ../../library/tarfile.rst:949
msgid ""
"Implements the ``'data'`` filter. In addition to what ``tar_filter`` does:"
msgstr ""

#: ../../library/tarfile.rst:952
msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract links (hard or soft) "
"that link to absolute paths, or ones that link outside the destination."
msgstr ""

#: ../../library/tarfile.rst:955
msgid ""
"This raises :class:`~tarfile.AbsoluteLinkError` or :class:`~tarfile."
"LinkOutsideDestinationError`."
msgstr ""

#: ../../library/tarfile.rst:958
msgid ""
"Note that such files are refused even on platforms that do not support "
"symbolic links."
msgstr ""

#: ../../library/tarfile.rst:961
msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract device files (including "
"pipes). This raises :class:`~tarfile.SpecialFileError`."
msgstr ""

#: ../../library/tarfile.rst:965
msgid "For regular files, including hard links:"
msgstr ""

#: ../../library/tarfile.rst:967
msgid ""
"Set the owner read and write permissions (:const:`~stat.S_IRUSR`|:const:"
"`~stat.S_IWUSR`)."
msgstr ""

#: ../../library/tarfile.rst:969
msgid ""
"Remove the group & other executable permission (:const:`~stat.S_IXGRP`|:"
"const:`~stat.S_IXOTH`) if the owner doesn’t have it (:const:`~stat.S_IXUSR`)."
msgstr ""

#: ../../library/tarfile.rst:973
msgid ""
"For other files (directories), set ``mode`` to ``None``, so that extraction "
"methods skip applying permission bits."
msgstr ""

#: ../../library/tarfile.rst:975
msgid ""
"Set user and group info (``uid``, ``gid``, ``uname``, ``gname``) to "
"``None``, so that extraction methods skip setting it."
msgstr ""

#: ../../library/tarfile.rst:984
msgid "Filter errors"
msgstr ""

#: ../../library/tarfile.rst:986
msgid ""
"When a filter refuses to extract a file, it will raise an appropriate "
"exception, a subclass of :class:`~tarfile.FilterError`. This will abort the "
"extraction if :attr:`TarFile.errorlevel` is 1 or more. With ``errorlevel=0`` "
"the error will be logged and the member will be skipped, but extraction will "
"continue."
msgstr ""

#: ../../library/tarfile.rst:994
msgid "Hints for further verification"
msgstr ""

#: ../../library/tarfile.rst:996
msgid ""
"Even with ``filter='data'``, *tarfile* is not suited for extracting "
"untrusted files without prior inspection. Among other issues, the pre-"
"defined filters do not prevent denial-of-service attacks. Users should do "
"additional checks."
msgstr ""

#: ../../library/tarfile.rst:1001
msgid "Here is an incomplete list of things to consider:"
msgstr ""

#: ../../library/tarfile.rst:1003
msgid ""
"Extract to a :func:`new temporary directory <tempfile.mkdtemp>` to prevent e."
"g. exploiting pre-existing links, and to make it easier to clean up after a "
"failed extraction."
msgstr ""

#: ../../library/tarfile.rst:1006
msgid ""
"When working with untrusted data, use external (e.g. OS-level) limits on "
"disk, memory and CPU usage."
msgstr ""

#: ../../library/tarfile.rst:1008
msgid ""
"Check filenames against an allow-list of characters (to filter out control "
"characters, confusables, foreign path separators, etc.)."
msgstr ""

#: ../../library/tarfile.rst:1011
msgid ""
"Check that filenames have expected extensions (discouraging files that "
"execute when you “click on them”, or extension-less files like Windows "
"special device names)."
msgstr ""

#: ../../library/tarfile.rst:1013
msgid ""
"Limit the number of extracted files, total size of extracted data, filename "
"length (including symlink length), and size of individual files."
msgstr ""

#: ../../library/tarfile.rst:1015
msgid "Check for files that would be shadowed on case-insensitive filesystems."
msgstr ""

#: ../../library/tarfile.rst:1017
msgid "Also note that:"
msgstr ""

#: ../../library/tarfile.rst:1019
msgid ""
"Tar files may contain multiple versions of the same file. Later ones are "
"expected to overwrite any earlier ones. This feature is crucial to allow "
"updating tape archives, but can be abused maliciously."
msgstr ""

#: ../../library/tarfile.rst:1023
msgid ""
"*tarfile* does not protect against issues with “live” data, e.g. an attacker "
"tinkering with the destination (or source) directory while extraction (or "
"archiving) is in progress."
msgstr ""

#: ../../library/tarfile.rst:1029
msgid "Supporting older Python versions"
msgstr ""

#: ../../library/tarfile.rst:1031
msgid ""
"Extraction filters were added to Python 3.12, and are backported to older "
"versions as security updates. To check whether the feature is available, use "
"e.g. ``hasattr(tarfile, 'data_filter')`` rather than checking the Python "
"version."
msgstr ""

#: ../../library/tarfile.rst:1036
msgid ""
"The following examples show how to support Python versions with and without "
"the feature. Note that setting ``extraction_filter`` will affect any "
"subsequent operations."
msgstr ""

#: ../../library/tarfile.rst:1040
msgid "Fully trusted archive::"
msgstr ""

#: ../../library/tarfile.rst:1045
msgid ""
"Use the ``'data'`` filter if available, but revert to Python 3.11 behavior "
"(``'fully_trusted'``) if this feature is not available::"
msgstr ""

#: ../../library/tarfile.rst:1052
msgid "Use the ``'data'`` filter; *fail* if it is not available::"
msgstr ""

#: ../../library/tarfile.rst:1056
msgid "or::"
msgstr ""

#: ../../library/tarfile.rst:1061
msgid "Use the ``'data'`` filter; *warn* if it is not available::"
msgstr ""

#: ../../library/tarfile.rst:1072
msgid "Stateful extraction filter example"
msgstr ""

#: ../../library/tarfile.rst:1074
msgid ""
"While *tarfile*'s extraction methods take a simple *filter* callable, custom "
"filters may be more complex objects with an internal state. It may be useful "
"to write these as context managers, to be used like this::"
msgstr ""

#: ../../library/tarfile.rst:1081
msgid "Such a filter can be written as, for example::"
msgstr ""

#: ../../library/tarfile.rst:1103
msgid "Command-Line Interface"
msgstr ""

#: ../../library/tarfile.rst:1107
msgid ""
"The :mod:`tarfile` module provides a simple command-line interface to "
"interact with tar archives."
msgstr ""

#: ../../library/tarfile.rst:1110
msgid ""
"If you want to create a new tar archive, specify its name after the :option:"
"`-c` option and then list the filename(s) that should be included:"
msgstr ""

#: ../../library/tarfile.rst:1117
msgid "Passing a directory is also acceptable:"
msgstr ""

#: ../../library/tarfile.rst:1123
msgid ""
"If you want to extract a tar archive into the current directory, use the :"
"option:`-e` option:"
msgstr ""

#: ../../library/tarfile.rst:1130
msgid ""
"You can also extract a tar archive into a different directory by passing the "
"directory's name:"
msgstr ""

#: ../../library/tarfile.rst:1137
msgid "For a list of the files in a tar archive, use the :option:`-l` option:"
msgstr ""

#: ../../library/tarfile.rst:1145
msgid "Command-line options"
msgstr ""

#: ../../library/tarfile.rst:1150
msgid "List files in a tarfile."
msgstr ""

#: ../../library/tarfile.rst:1155
msgid "Create tarfile from source files."
msgstr ""

#: ../../library/tarfile.rst:1160
msgid ""
"Extract tarfile into the current directory if *output_dir* is not specified."
msgstr ""

#: ../../library/tarfile.rst:1165
msgid "Test whether the tarfile is valid or not."
msgstr ""

#: ../../library/tarfile.rst:1169
msgid "Verbose output."
msgstr ""

#: ../../library/tarfile.rst:1173
msgid ""
"Specifies the *filter* for ``--extract``. See :ref:`tarfile-extraction-"
"filter` for details. Only string names are accepted (that is, "
"``fully_trusted``, ``tar``, and ``data``)."
msgstr ""

#: ../../library/tarfile.rst:1183
msgid "Examples"
msgstr "範例"

#: ../../library/tarfile.rst:1185
msgid "How to extract an entire tar archive to the current working directory::"
msgstr ""

#: ../../library/tarfile.rst:1192
msgid ""
"How to extract a subset of a tar archive with :meth:`TarFile.extractall` "
"using a generator function instead of a list::"
msgstr ""

#: ../../library/tarfile.rst:1207
msgid "How to create an uncompressed tar archive from a list of filenames::"
msgstr ""

#: ../../library/tarfile.rst:1215
msgid "The same example using the :keyword:`with` statement::"
msgstr ""

#: ../../library/tarfile.rst:1222
msgid ""
"How to read a gzip compressed tar archive and display some member "
"information::"
msgstr ""

#: ../../library/tarfile.rst:1236
msgid ""
"How to create an archive and reset the user information using the *filter* "
"parameter in :meth:`TarFile.add`::"
msgstr ""

#: ../../library/tarfile.rst:1252
msgid "Supported tar formats"
msgstr ""

#: ../../library/tarfile.rst:1254
msgid ""
"There are three tar formats that can be created with the :mod:`tarfile` "
"module:"
msgstr ""

#: ../../library/tarfile.rst:1256
msgid ""
"The POSIX.1-1988 ustar format (:const:`USTAR_FORMAT`). It supports filenames "
"up to a length of at best 256 characters and linknames up to 100 characters. "
"The maximum file size is 8 GiB. This is an old and limited but widely "
"supported format."
msgstr ""

#: ../../library/tarfile.rst:1261
msgid ""
"The GNU tar format (:const:`GNU_FORMAT`). It supports long filenames and "
"linknames, files bigger than 8 GiB and sparse files. It is the de facto "
"standard on GNU/Linux systems. :mod:`tarfile` fully supports the GNU tar "
"extensions for long names, sparse file support is read-only."
msgstr ""

#: ../../library/tarfile.rst:1266
msgid ""
"The POSIX.1-2001 pax format (:const:`PAX_FORMAT`). It is the most flexible "
"format with virtually no limits. It supports long filenames and linknames, "
"large files and stores pathnames in a portable way. Modern tar "
"implementations, including GNU tar, bsdtar/libarchive and star, fully "
"support extended *pax* features; some old or unmaintained libraries may not, "
"but should treat *pax* archives as if they were in the universally supported "
"*ustar* format. It is the current default format for new archives."
msgstr ""

#: ../../library/tarfile.rst:1274
msgid ""
"It extends the existing *ustar* format with extra headers for information "
"that cannot be stored otherwise. There are two flavours of pax headers: "
"Extended headers only affect the subsequent file header, global headers are "
"valid for the complete archive and affect all following files. All the data "
"in a pax header is encoded in *UTF-8* for portability reasons."
msgstr ""

#: ../../library/tarfile.rst:1280
msgid ""
"There are some more variants of the tar format which can be read, but not "
"created:"
msgstr ""

#: ../../library/tarfile.rst:1283
msgid ""
"The ancient V7 format. This is the first tar format from Unix Seventh "
"Edition, storing only regular files and directories. Names must not be "
"longer than 100 characters, there is no user/group name information. Some "
"archives have miscalculated header checksums in case of fields with non-"
"ASCII characters."
msgstr ""

#: ../../library/tarfile.rst:1288
msgid ""
"The SunOS tar extended format. This format is a variant of the POSIX.1-2001 "
"pax format, but is not compatible."
msgstr ""

#: ../../library/tarfile.rst:1294
msgid "Unicode issues"
msgstr ""

#: ../../library/tarfile.rst:1296
msgid ""
"The tar format was originally conceived to make backups on tape drives with "
"the main focus on preserving file system information. Nowadays tar archives "
"are commonly used for file distribution and exchanging archives over "
"networks. One problem of the original format (which is the basis of all "
"other formats) is that there is no concept of supporting different character "
"encodings. For example, an ordinary tar archive created on a *UTF-8* system "
"cannot be read correctly on a *Latin-1* system if it contains non-*ASCII* "
"characters. Textual metadata (like filenames, linknames, user/group names) "
"will appear damaged. Unfortunately, there is no way to autodetect the "
"encoding of an archive. The pax format was designed to solve this problem. "
"It stores non-ASCII metadata using the universal character encoding *UTF-8*."
msgstr ""

#: ../../library/tarfile.rst:1308
msgid ""
"The details of character conversion in :mod:`tarfile` are controlled by the "
"*encoding* and *errors* keyword arguments of the :class:`TarFile` class."
msgstr ""

#: ../../library/tarfile.rst:1311
msgid ""
"*encoding* defines the character encoding to use for the metadata in the "
"archive. The default value is :func:`sys.getfilesystemencoding` or "
"``'ascii'`` as a fallback. Depending on whether the archive is read or "
"written, the metadata must be either decoded or encoded. If *encoding* is "
"not set appropriately, this conversion may fail."
msgstr ""

#: ../../library/tarfile.rst:1317
msgid ""
"The *errors* argument defines how characters are treated that cannot be "
"converted. Possible values are listed in section :ref:`error-handlers`. The "
"default scheme is ``'surrogateescape'`` which Python also uses for its file "
"system calls, see :ref:`os-filenames`."
msgstr ""

#: ../../library/tarfile.rst:1322
msgid ""
"For :const:`PAX_FORMAT` archives (the default), *encoding* is generally not "
"needed because all the metadata is stored using *UTF-8*. *encoding* is only "
"used in the rare cases when binary pax headers are decoded or when strings "
"with surrogate characters are stored."
msgstr ""
