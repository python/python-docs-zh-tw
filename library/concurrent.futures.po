# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Matt Wang <mattwang44@gmail.com>, 2023-2024
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-23 07:52+0800\n"
"PO-Revision-Date: 2023-01-24 03:33+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../library/concurrent.futures.rst:2
msgid ":mod:`!concurrent.futures` --- Launching parallel tasks"
msgstr ":mod:`!concurrent.futures` --- 啟動平行任務"

#: ../../library/concurrent.futures.rst:9
msgid ""
"**Source code:** :source:`Lib/concurrent/futures/thread.py` and :source:`Lib/"
"concurrent/futures/process.py`"
msgstr ""
"**原始碼：**\\ :source:`Lib/concurrent/futures/thread.py` 與 :source:`Lib/"
"concurrent/futures/process.py`"

#: ../../library/concurrent.futures.rst:14
msgid ""
"The :mod:`concurrent.futures` module provides a high-level interface for "
"asynchronously executing callables."
msgstr ""
":mod:`concurrent.futures` 模組提供了一個高階介面來非同步地 (asynchronously) "
"執行可呼叫物件 (callable) 。"

#: ../../library/concurrent.futures.rst:17
msgid ""
"The asynchronous execution can be performed with threads, using :class:"
"`ThreadPoolExecutor`, or separate processes, using :class:"
"`ProcessPoolExecutor`.  Both implement the same interface, which is defined "
"by the abstract :class:`Executor` class."
msgstr ""
"非同步執行可以透過 :class:`ThreadPoolExecutor` 來使用執行緒 (thread) 執行，或"
"透過 :class:`ProcessPoolExecutor` 來使用單獨行程 (process) 執行。兩者都實作了"
"相同的介面，該介面由抽象的 :class:`Executor` 類別定義。"

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not WASI."
msgstr ":ref:`適用 <availability>`：非 WASI。"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"此模組在 WebAssembly 平台上不起作用或無法使用。更多資訊請參閱 :ref:`wasm-"
"availability`。"

#: ../../library/concurrent.futures.rst:25
msgid "Executor Objects"
msgstr "Executor 物件"

#: ../../library/concurrent.futures.rst:29
msgid ""
"An abstract class that provides methods to execute calls asynchronously.  It "
"should not be used directly, but through its concrete subclasses."
msgstr ""
"提供非同步執行呼叫方法的抽象類別。不應直接使用它，而應透過其具體子類別來使"
"用。"

#: ../../library/concurrent.futures.rst:34
msgid ""
"Schedules the callable, *fn*, to be executed as ``fn(*args, **kwargs)`` and "
"returns a :class:`Future` object representing the execution of the "
"callable. ::"
msgstr ""
"為可呼叫物件 *fn* 排程來以 ``fn(*args, **kwargs)`` 的形式執行並回傳一個表示可"
"呼叫的執行的 :class:`Future` 物件。\n"
"\n"
"::"

#: ../../library/concurrent.futures.rst:38
msgid ""
"with ThreadPoolExecutor(max_workers=1) as executor:\n"
"    future = executor.submit(pow, 323, 1235)\n"
"    print(future.result())"
msgstr ""
"with ThreadPoolExecutor(max_workers=1) as executor:\n"
"    future = executor.submit(pow, 323, 1235)\n"
"    print(future.result())"

#: ../../library/concurrent.futures.rst:44
msgid "Similar to :func:`map(fn, *iterables) <map>` except:"
msgstr "類似於 :func:`map(fn, *iterables) <map>`，除了："

#: ../../library/concurrent.futures.rst:46
msgid "the *iterables* are collected immediately rather than lazily;"
msgstr "*iterables* 立即被收集而不是延遲 (lazily) 收集；"

#: ../../library/concurrent.futures.rst:48
msgid ""
"*fn* is executed asynchronously and several calls to *fn* may be made "
"concurrently."
msgstr "*fn* 是非同步執行的，並且對 *fn* 的多次呼叫可以並行處理。"

#: ../../library/concurrent.futures.rst:51
msgid ""
"The returned iterator raises a :exc:`TimeoutError` if :meth:`~iterator."
"__next__` is called and the result isn't available after *timeout* seconds "
"from the original call to :meth:`Executor.map`. *timeout* can be an int or a "
"float.  If *timeout* is not specified or ``None``, there is no limit to the "
"wait time."
msgstr ""
"如果 :meth:`~iterator.__next__` 被呼叫，且在原先呼叫 :meth:`Executor.map` 的 "
"*timeout* 秒後結果仍不可用，回傳的疊代器就會引發 :exc:`TimeoutError`。"
"*timeout* 可以是整數或浮點數。如果未指定 *timeout* 或為 ``None``，則等待時間"
"就不會有限制。"

#: ../../library/concurrent.futures.rst:57
msgid ""
"If a *fn* call raises an exception, then that exception will be raised when "
"its value is retrieved from the iterator."
msgstr "如果 *fn* 呼叫引發例外，則當從疊代器中檢索到它的值時將引發該例外。"

#: ../../library/concurrent.futures.rst:60
msgid ""
"When using :class:`ProcessPoolExecutor`, this method chops *iterables* into "
"a number of chunks which it submits to the pool as separate tasks.  The "
"(approximate) size of these chunks can be specified by setting *chunksize* "
"to a positive integer.  For very long iterables, using a large value for "
"*chunksize* can significantly improve performance compared to the default "
"size of 1.  With :class:`ThreadPoolExecutor`, *chunksize* has no effect."
msgstr ""
"使用 :class:`ProcessPoolExecutor` 時，此方法將 *iterables* 分成許多分塊 "
"(chunks)，並將其作為獨立的任務來提交給池 (pool)。可以透過將 *chunksize* 設定"
"為正整數來指定這些分塊的（約略）大小。對於非常長的可疊代物件，*chunksize* 使"
"用較大的值（與預設大小 1 相比）可以顯著提高性能。對於 :class:"
"`ThreadPoolExecutor`，*chunksize* 無效。"

#: ../../library/concurrent.futures.rst:68
msgid "Added the *chunksize* argument."
msgstr "新增 *chunksize* 引數。"

#: ../../library/concurrent.futures.rst:73
msgid ""
"Signal the executor that it should free any resources that it is using when "
"the currently pending futures are done executing.  Calls to :meth:`Executor."
"submit` and :meth:`Executor.map` made after shutdown will raise :exc:"
"`RuntimeError`."
msgstr ""
"向 executor 發出訊號 (signal)，表明它應該在當前未定 (pending) 的 future 完成"
"執行時釋放它正在使用的任何資源。在關閉後呼叫 :meth:`Executor.submit` 和 :"
"meth:`Executor.map` 將引發 :exc:`RuntimeError`。"

#: ../../library/concurrent.futures.rst:78
msgid ""
"If *wait* is ``True`` then this method will not return until all the pending "
"futures are done executing and the resources associated with the executor "
"have been freed.  If *wait* is ``False`` then this method will return "
"immediately and the resources associated with the executor will be freed "
"when all pending futures are done executing.  Regardless of the value of "
"*wait*, the entire Python program will not exit until all pending futures "
"are done executing."
msgstr ""
"如果 *wait* 為 ``True`` 則此方法將不會回傳，直到所有未定的 futures 完成執行並"
"且與 executor 關聯的資源都被釋放。如果 *wait* 為 ``False`` 則此方法將立即回"
"傳，並且當所有未定的 future 執行完畢時，與 executor 關聯的資源將被釋放。不管 "
"*wait* 的值如何，整個 Python 程式都不會退出，直到所有未定的 futures 執行完"
"畢。"

#: ../../library/concurrent.futures.rst:86
msgid ""
"If *cancel_futures* is ``True``, this method will cancel all pending futures "
"that the executor has not started running. Any futures that are completed or "
"running won't be cancelled, regardless of the value of *cancel_futures*."
msgstr ""
"如果 *cancel_futures* 為 ``True``，此方法將取消 executor 尚未開始運行的所有未"
"定 future。無論 *cancel_futures* 的值如何，任何已完成或正在運行的 future 都不"
"會被取消。"

#: ../../library/concurrent.futures.rst:91
msgid ""
"If both *cancel_futures* and *wait* are ``True``, all futures that the "
"executor has started running will be completed prior to this method "
"returning. The remaining futures are cancelled."
msgstr ""
"如果 *cancel_futures* 和 *wait* 都為 ``True``，則 executor 已開始運行的所有 "
"future 將在此方法回傳之前完成。剩餘的 future 被取消。"

#: ../../library/concurrent.futures.rst:95
msgid ""
"You can avoid having to call this method explicitly if you use the :keyword:"
"`with` statement, which will shutdown the :class:`Executor` (waiting as if :"
"meth:`Executor.shutdown` were called with *wait* set to ``True``)::"
msgstr ""
"如果使用 :keyword:`with` 陳述句，你就可以不用明確地呼叫此方法，這將會自己關"
"閉 :class:`Executor`\\（如同呼叫 :meth:`Executor.shutdown` 時 *wait* 被設定"
"為 ``True`` 般等待）： ::"

#: ../../library/concurrent.futures.rst:100
msgid ""
"import shutil\n"
"with ThreadPoolExecutor(max_workers=4) as e:\n"
"    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')\n"
"    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')\n"
"    e.submit(shutil.copy, 'src4.txt', 'dest4.txt')"
msgstr ""
"import shutil\n"
"with ThreadPoolExecutor(max_workers=4) as e:\n"
"    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')\n"
"    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')\n"
"    e.submit(shutil.copy, 'src4.txt', 'dest4.txt')"

#: ../../library/concurrent.futures.rst:107
msgid "Added *cancel_futures*."
msgstr "新增 *cancel_futures*。"

#: ../../library/concurrent.futures.rst:112
msgid "ThreadPoolExecutor"
msgstr "ThreadPoolExecutor"

#: ../../library/concurrent.futures.rst:114
msgid ""
":class:`ThreadPoolExecutor` is an :class:`Executor` subclass that uses a "
"pool of threads to execute calls asynchronously."
msgstr ""
":class:`ThreadPoolExecutor` 是一個 :class:`Executor` 子類別，它使用執行緒池來"
"非同步地執行呼叫。"

#: ../../library/concurrent.futures.rst:117
msgid ""
"Deadlocks can occur when the callable associated with a :class:`Future` "
"waits on the results of another :class:`Future`.  For example::"
msgstr ""
"當與 :class:`Future` 關聯的可呼叫物件等待另一個 :class:`Future` 的結果時，可"
"能會發生死鎖 (deadlock)。例如： ::"

#: ../../library/concurrent.futures.rst:120
msgid ""
"import time\n"
"def wait_on_b():\n"
"    time.sleep(5)\n"
"    print(b.result())  # b will never complete because it is waiting on a.\n"
"    return 5\n"
"\n"
"def wait_on_a():\n"
"    time.sleep(5)\n"
"    print(a.result())  # a will never complete because it is waiting on b.\n"
"    return 6\n"
"\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=2)\n"
"a = executor.submit(wait_on_b)\n"
"b = executor.submit(wait_on_a)"
msgstr ""

#: ../../library/concurrent.futures.rst:136
msgid "And::"
msgstr "和： ::"

#: ../../library/concurrent.futures.rst:138
msgid ""
"def wait_on_future():\n"
"    f = executor.submit(pow, 5, 2)\n"
"    # This will never complete because there is only one worker thread and\n"
"    # it is executing this function.\n"
"    print(f.result())\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=1)\n"
"executor.submit(wait_on_future)"
msgstr ""

#: ../../library/concurrent.futures.rst:150
msgid ""
"An :class:`Executor` subclass that uses a pool of at most *max_workers* "
"threads to execute calls asynchronously."
msgstr ""
"一個 :class:`Executor` 子類別，它使用最多有 *max_workers* 個執行緒的池來非同"
"步地執行呼叫。"

#: ../../library/concurrent.futures.rst:153
msgid ""
"All threads enqueued to ``ThreadPoolExecutor`` will be joined before the "
"interpreter can exit. Note that the exit handler which does this is executed "
"*before* any exit handlers added using ``atexit``. This means exceptions in "
"the main thread must be caught and handled in order to signal threads to "
"exit gracefully. For this reason, it is recommended that "
"``ThreadPoolExecutor`` not be used for long-running tasks."
msgstr ""
"所有排隊到 ``ThreadPoolExecutor`` 的執行緒都將在直譯器退出之前加入。請注意，"
"執行此操作的退出處理程式會在任何使用 ``atexit`` 新增的退出處理程式\\ *之前"
"*\\ 執行。這意味著必須捕獲並處理主執行緒中的例外，以便向執行緒發出訊號來正常"
"退出 (gracefully exit)。因此，建議不要將 ``ThreadPoolExecutor`` 用於長時間運"
"行的任務。"

#: ../../library/concurrent.futures.rst:160
msgid ""
"*initializer* is an optional callable that is called at the start of each "
"worker thread; *initargs* is a tuple of arguments passed to the "
"initializer.  Should *initializer* raise an exception, all currently pending "
"jobs will raise a :exc:`~concurrent.futures.thread.BrokenThreadPool`, as "
"well as any attempt to submit more jobs to the pool."
msgstr ""
"*initializer* 是一個可選的可呼叫物件，在每個工作執行緒開始時呼叫； "
"*initargs* 是傳遞給 initializer 的引數元組 (tuple)。如果 *initializer* 引發例"
"外，所有當前未定的作業以及任何向池中提交 (submit) 更多作業的嘗試都將引發 :"
"exc:`~concurrent.futures.thread.BrokenThreadPool`。"

#: ../../library/concurrent.futures.rst:166
msgid ""
"If *max_workers* is ``None`` or not given, it will default to the number of "
"processors on the machine, multiplied by ``5``, assuming that :class:"
"`ThreadPoolExecutor` is often used to overlap I/O instead of CPU work and "
"the number of workers should be higher than the number of workers for :class:"
"`ProcessPoolExecutor`."
msgstr ""
"如果 *max_workers* 為 ``None`` 或未給定，它將預設為機器上的處理器數量乘以 "
"``5``，這假定了 :class:`ThreadPoolExecutor` 通常用於 I/O 重疊而非 CPU 密集的"
"作業，並且 worker 的數量應該高於 :class:`ProcessPoolExecutor` 的 worker 數"
"量。"

#: ../../library/concurrent.futures.rst:174
msgid ""
"Added the *thread_name_prefix* parameter to allow users to control the :"
"class:`threading.Thread` names for worker threads created by the pool for "
"easier debugging."
msgstr ""
"新增 *thread_name_prefix* 參數以允許使用者控制由池所建立的工作執行緒 (worker "
"thread) 的 :class:`threading.Thread` 名稱，以便於除錯。"

#: ../../library/concurrent.futures.rst:179
#: ../../library/concurrent.futures.rst:287
msgid "Added the *initializer* and *initargs* arguments."
msgstr "新增 *initializer* 與 *initargs* 引數。"

#: ../../library/concurrent.futures.rst:182
msgid ""
"Default value of *max_workers* is changed to ``min(32, os.cpu_count() + "
"4)``. This default value preserves at least 5 workers for I/O bound tasks. "
"It utilizes at most 32 CPU cores for CPU bound tasks which release the GIL. "
"And it avoids using very large resources implicitly on many-core machines."
msgstr ""
"*max_workers* 的預設值改為 ``min(32, os.cpu_count() + 4)``。此預設值為 I/O 密"
"集任務至少保留了 5 個 worker。它最多使用 32 個 CPU 核心來執行CPU 密集任務，以"
"釋放 GIL。並且它避免了在多核機器上隱晦地使用非常大量的資源。"

#: ../../library/concurrent.futures.rst:188
msgid ""
"ThreadPoolExecutor now reuses idle worker threads before starting "
"*max_workers* worker threads too."
msgstr ""
"ThreadPoolExecutor 現在在啟動 *max_workers* 工作執行緒之前會重用 (reuse) 空閒"
"的工作執行緒。"

#: ../../library/concurrent.futures.rst:191
msgid ""
"Default value of *max_workers* is changed to ``min(32, (os."
"process_cpu_count() or 1) + 4)``."
msgstr ""

#: ../../library/concurrent.futures.rst:199
msgid "ThreadPoolExecutor Example"
msgstr "ThreadPoolExecutor 範例"

#: ../../library/concurrent.futures.rst:202
msgid ""
"import concurrent.futures\n"
"import urllib.request\n"
"\n"
"URLS = ['http://www.foxnews.com/',\n"
"        'http://www.cnn.com/',\n"
"        'http://europe.wsj.com/',\n"
"        'http://www.bbc.co.uk/',\n"
"        'http://nonexistant-subdomain.python.org/']\n"
"\n"
"# Retrieve a single page and report the URL and contents\n"
"def load_url(url, timeout):\n"
"    with urllib.request.urlopen(url, timeout=timeout) as conn:\n"
"        return conn.read()\n"
"\n"
"# We can use a with statement to ensure threads are cleaned up promptly\n"
"with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n"
"    # Start the load operations and mark each future with its URL\n"
"    future_to_url = {executor.submit(load_url, url, 60): url for url in "
"URLS}\n"
"    for future in concurrent.futures.as_completed(future_to_url):\n"
"        url = future_to_url[future]\n"
"        try:\n"
"            data = future.result()\n"
"        except Exception as exc:\n"
"            print('%r generated an exception: %s' % (url, exc))\n"
"        else:\n"
"            print('%r page is %d bytes' % (url, len(data)))"
msgstr ""

#: ../../library/concurrent.futures.rst:231
msgid "ProcessPoolExecutor"
msgstr "ProcessPoolExecutor"

#: ../../library/concurrent.futures.rst:233
msgid ""
"The :class:`ProcessPoolExecutor` class is an :class:`Executor` subclass that "
"uses a pool of processes to execute calls asynchronously. :class:"
"`ProcessPoolExecutor` uses the :mod:`multiprocessing` module, which allows "
"it to side-step the :term:`Global Interpreter Lock <global interpreter "
"lock>` but also means that only picklable objects can be executed and "
"returned."
msgstr ""
":class:`ProcessPoolExecutor` 類別是一個 :class:`Executor` 的子類別，它使用行"
"程池來非同步地執行呼叫。:class:`ProcessPoolExecutor` 使用了 :mod:"
"`multiprocessing` 模組，這允許它避開\\ :term:`全域直譯器鎖 (Global "
"Interpreter Lock) <global interpreter lock>`，但也意味著只能執行和回傳可被 "
"pickle 的 (picklable) 物件。"

#: ../../library/concurrent.futures.rst:240
msgid ""
"The ``__main__`` module must be importable by worker subprocesses. This "
"means that :class:`ProcessPoolExecutor` will not work in the interactive "
"interpreter."
msgstr ""
"``__main__`` 模組必須可以被工作子行程 (worker subprocess) 引入。這意味著 :"
"class:`ProcessPoolExecutor` 將無法在交互式直譯器 (interactive interpreter) 中"
"工作。"

#: ../../library/concurrent.futures.rst:243
msgid ""
"Calling :class:`Executor` or :class:`Future` methods from a callable "
"submitted to a :class:`ProcessPoolExecutor` will result in deadlock."
msgstr ""
"從提交給 :class:`ProcessPoolExecutor` 的可呼叫物件中呼叫 :class:`Executor` "
"或 :class:`Future` 方法將導致死鎖。"

#: ../../library/concurrent.futures.rst:248
#, fuzzy
msgid ""
"An :class:`Executor` subclass that executes calls asynchronously using a "
"pool of at most *max_workers* processes.  If *max_workers* is ``None`` or "
"not given, it will default to :func:`os.process_cpu_count`. If *max_workers* "
"is less than or equal to ``0``, then a :exc:`ValueError` will be raised. On "
"Windows, *max_workers* must be less than or equal to ``61``. If it is not "
"then :exc:`ValueError` will be raised. If *max_workers* is ``None``, then "
"the default chosen will be at most ``61``, even if more processors are "
"available. *mp_context* can be a :mod:`multiprocessing` context or ``None``. "
"It will be used to launch the workers. If *mp_context* is ``None`` or not "
"given, the default :mod:`multiprocessing` context is used. See :ref:"
"`multiprocessing-start-methods`."
msgstr ""
"一個 :class:`Executor` 子類別，它使用了最多有 *max_workers* 個行程的池來非同"
"步地執行呼叫。如果 *max_workers* 為 ``None`` 或未給定，它將被預設為機器上的處"
"理器數量。如果 *max_workers* 小於或等於 ``0``，則會引發 :exc:`ValueError`。"
"在 Windows 上，*max_workers* 必須小於或等於 ``61``。如果不是，則會引發 :exc:"
"`ValueError`。如果 *max_workers* 為 ``None``，則預設選擇最多為 ``61``，即便有"
"更多處理器可用。*mp_context* 可以是 :mod:`multiprocessing` 情境 (context) 或 "
"``None``。它將用於啟動 worker。如果 *mp_context* 為 ``None`` 或未給定，則使用"
"預設的 :mod:`multiprocessing` 情境。請見 :ref:`multiprocessing-start-"
"methods`。"

#: ../../library/concurrent.futures.rst:262
msgid ""
"*initializer* is an optional callable that is called at the start of each "
"worker process; *initargs* is a tuple of arguments passed to the "
"initializer.  Should *initializer* raise an exception, all currently pending "
"jobs will raise a :exc:`~concurrent.futures.process.BrokenProcessPool`, as "
"well as any attempt to submit more jobs to the pool."
msgstr ""
"*initializer* 是一個可選的可呼叫物件，在每個工作行程 (worker process) 開始時"
"呼叫；*initargs* 是傳遞給 initializer 的引數元組。如果 *initializer* 引發例"
"外，所有當前未定的作業以及任何向池中提交更多作業的嘗試都將引發 :exc:"
"`~concurrent.futures.process.BrokenProcessPool`。"

#: ../../library/concurrent.futures.rst:268
msgid ""
"*max_tasks_per_child* is an optional argument that specifies the maximum "
"number of tasks a single process can execute before it will exit and be "
"replaced with a fresh worker process. By default *max_tasks_per_child* is "
"``None`` which means worker processes will live as long as the pool. When a "
"max is specified, the \"spawn\" multiprocessing start method will be used by "
"default in absence of a *mp_context* parameter. This feature is incompatible "
"with the \"fork\" start method."
msgstr ""
"*max_tasks_per_child* 是一個可選引數，它指定單個行程在退出並被新的工作行程替"
"換之前可以執行的最大任務數。預設情況下 *max_tasks_per_child* 是 ``None``，這"
"意味著工作行程的生命週期將與池一樣長。當指定最大值時，在沒有 *mp_context* 參"
"數的情況下，將預設使用 \"spawn\" 做為 multiprocessing 啟動方法。此功能與 "
"\"fork\" 啟動方法不相容。"

#: ../../library/concurrent.futures.rst:276
msgid ""
"When one of the worker processes terminates abruptly, a :exc:`~concurrent."
"futures.process.BrokenProcessPool` error is now raised. Previously, "
"behaviour was undefined but operations on the executor or its futures would "
"often freeze or deadlock."
msgstr ""
"當其中一個工作行程突然終止時，現在會引發 :exc:`~concurrent.futures.process."
"BrokenProcessPool` 錯誤。在過去，此行為是未定義的 (undefined)，但對 executor "
"或其 future 的操作經常會發生凍結或死鎖。"

#: ../../library/concurrent.futures.rst:283
msgid ""
"The *mp_context* argument was added to allow users to control the "
"start_method for worker processes created by the pool."
msgstr ""
"新增了 *mp_context* 引數以允許使用者控制由池所建立的工作行程的 start_method。"

#: ../../library/concurrent.futures.rst:290
msgid ""
"The default :mod:`multiprocessing` start method (see :ref:`multiprocessing-"
"start-methods`) will change away from *fork* in Python 3.14.  Code that "
"requires *fork* be used for their :class:`ProcessPoolExecutor` should "
"explicitly specify that by passing a ``mp_context=multiprocessing."
"get_context(\"fork\")`` parameter."
msgstr ""
"預設的 :mod:`multiprocessing` 啟動方法（請參閱 :ref:`multiprocessing-start-"
"methods`\\ ）將不再是 Python 3.14 中的 *fork*。需要 *fork* 用於其 :class:"
"`ProcessPoolExecutor` 的程式碼應透過傳遞 ``mp_context=multiprocessing."
"get_context(\"fork\")`` 參數來明確指定。"

#: ../../library/concurrent.futures.rst:297
msgid ""
"The *max_tasks_per_child* argument was added to allow users to control the "
"lifetime of workers in the pool."
msgstr ""
"新增了 *max_tasks_per_child* 引數以允許使用者控制池中 worker 的生命週期。"

#: ../../library/concurrent.futures.rst:301
msgid ""
"On POSIX systems, if your application has multiple threads and the :mod:"
"`multiprocessing` context uses the ``\"fork\"`` start method: The :func:`os."
"fork` function called internally to spawn workers may raise a :exc:"
"`DeprecationWarning`. Pass a *mp_context* configured to use a different "
"start method. See the :func:`os.fork` documentation for further explanation."
msgstr ""
"在 POSIX 系統上，如果你的應用程式有多個執行緒並且 :mod:`multiprocessing` 情境"
"使用了 ``\"fork\"`` 啟動方法：內部呼叫以產生 worker 的 :func:`os.fork` 函式可"
"能會引發 :exc:`DeprecationWarning`。傳遞一個 *mp_context* 以配置為使用不同的"
"啟動方法。更多說明請參閱 :func:`os.fork` 文件。"

#: ../../library/concurrent.futures.rst:309
msgid ""
"*max_workers* uses :func:`os.process_cpu_count` by default, instead of :func:"
"`os.cpu_count`."
msgstr ""

#: ../../library/concurrent.futures.rst:316
msgid "ProcessPoolExecutor Example"
msgstr "ProcessPoolExecutor 範例"

#: ../../library/concurrent.futures.rst:319
msgid ""
"import concurrent.futures\n"
"import math\n"
"\n"
"PRIMES = [\n"
"    112272535095293,\n"
"    112582705942171,\n"
"    112272535095293,\n"
"    115280095190773,\n"
"    115797848077099,\n"
"    1099726899285419]\n"
"\n"
"def is_prime(n):\n"
"    if n < 2:\n"
"        return False\n"
"    if n == 2:\n"
"        return True\n"
"    if n % 2 == 0:\n"
"        return False\n"
"\n"
"    sqrt_n = int(math.floor(math.sqrt(n)))\n"
"    for i in range(3, sqrt_n + 1, 2):\n"
"        if n % i == 0:\n"
"            return False\n"
"    return True\n"
"\n"
"def main():\n"
"    with concurrent.futures.ProcessPoolExecutor() as executor:\n"
"        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n"
"            print('%d is prime: %s' % (number, prime))\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"
msgstr ""
"import concurrent.futures\n"
"import math\n"
"\n"
"PRIMES = [\n"
"    112272535095293,\n"
"    112582705942171,\n"
"    112272535095293,\n"
"    115280095190773,\n"
"    115797848077099,\n"
"    1099726899285419]\n"
"\n"
"def is_prime(n):\n"
"    if n < 2:\n"
"        return False\n"
"    if n == 2:\n"
"        return True\n"
"    if n % 2 == 0:\n"
"        return False\n"
"\n"
"    sqrt_n = int(math.floor(math.sqrt(n)))\n"
"    for i in range(3, sqrt_n + 1, 2):\n"
"        if n % i == 0:\n"
"            return False\n"
"    return True\n"
"\n"
"def main():\n"
"    with concurrent.futures.ProcessPoolExecutor() as executor:\n"
"        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n"
"            print('%d is prime: %s' % (number, prime))\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"

#: ../../library/concurrent.futures.rst:354
msgid "Future Objects"
msgstr "Future 物件"

#: ../../library/concurrent.futures.rst:356
msgid ""
"The :class:`Future` class encapsulates the asynchronous execution of a "
"callable. :class:`Future` instances are created by :meth:`Executor.submit`."
msgstr ""
":class:`Future` 類別封裝了可呼叫物件的非同步執行。:class:`Future` 實例由 :"
"meth:`Executor.submit` 建立。"

#: ../../library/concurrent.futures.rst:361
msgid ""
"Encapsulates the asynchronous execution of a callable.  :class:`Future` "
"instances are created by :meth:`Executor.submit` and should not be created "
"directly except for testing."
msgstr ""
"封裝可呼叫物件的非同步執行。:class:`Future` 實例由 :meth:`Executor.submit` 建"
"立，且除測試外不應直接建立。"

#: ../../library/concurrent.futures.rst:367
msgid ""
"Attempt to cancel the call.  If the call is currently being executed or "
"finished running and cannot be cancelled then the method will return "
"``False``, otherwise the call will be cancelled and the method will return "
"``True``."
msgstr ""
"嘗試取消呼叫。如果呼叫當前正在執行或已完成運行且無法取消，則該方法將回傳 "
"``False``，否則呼叫將被取消並且該方法將回傳 ``True``。"

#: ../../library/concurrent.futures.rst:374
msgid "Return ``True`` if the call was successfully cancelled."
msgstr "如果該呼叫成功被取消，則回傳 ``True``。"

#: ../../library/concurrent.futures.rst:378
msgid ""
"Return ``True`` if the call is currently being executed and cannot be "
"cancelled."
msgstr "如果呼叫正在執行且無法取消，則回傳 ``True``。"

#: ../../library/concurrent.futures.rst:383
msgid ""
"Return ``True`` if the call was successfully cancelled or finished running."
msgstr "如果呼叫成功被取消或結束運行，則回傳 ``True``。"

#: ../../library/concurrent.futures.rst:388
msgid ""
"Return the value returned by the call. If the call hasn't yet completed then "
"this method will wait up to *timeout* seconds.  If the call hasn't completed "
"in *timeout* seconds, then a :exc:`TimeoutError` will be raised. *timeout* "
"can be an int or float.  If *timeout* is not specified or ``None``, there is "
"no limit to the wait time."
msgstr ""
"回傳該呼叫回傳的值。如果呼叫尚未完成，則此方法將等待至多 *timeout* 秒。如果呼"
"叫在 *timeout* 秒內未完成，則會引發 :exc:`TimeoutError`。*timeout* 可以是整數"
"或浮點數。如果未指定 *timeout* 或為 ``None``，則等待時間就不會有限制。"

#: ../../library/concurrent.futures.rst:395
#: ../../library/concurrent.futures.rst:409
msgid ""
"If the future is cancelled before completing then :exc:`.CancelledError` "
"will be raised."
msgstr "如果 future 在完成之前被取消，那麼 :exc:`.CancelledError` 將被引發。"

#: ../../library/concurrent.futures.rst:398
msgid ""
"If the call raised an exception, this method will raise the same exception."
msgstr "如果該呼叫引發了例外，此方法將引發相同的例外。"

#: ../../library/concurrent.futures.rst:402
msgid ""
"Return the exception raised by the call.  If the call hasn't yet completed "
"then this method will wait up to *timeout* seconds.  If the call hasn't "
"completed in *timeout* seconds, then a :exc:`TimeoutError` will be raised.  "
"*timeout* can be an int or float.  If *timeout* is not specified or "
"``None``, there is no limit to the wait time."
msgstr ""
"回傳該呼叫引發的例外。如果呼叫尚未完成，則此方法將等待至多 *timeout* 秒。如果"
"呼叫在 *timeout* 秒內未完成，則會引發 :exc:`TimeoutError`。 *timeout* 可以是"
"整數或浮點數。如果未指定 *timeout* 或為 ``None``，則等待時間就不會有限制。"

#: ../../library/concurrent.futures.rst:412
msgid "If the call completed without raising, ``None`` is returned."
msgstr "如果呼叫在沒有引發的情況下完成，則回傳 ``None``。"

#: ../../library/concurrent.futures.rst:416
msgid ""
"Attaches the callable *fn* to the future.  *fn* will be called, with the "
"future as its only argument, when the future is cancelled or finishes "
"running."
msgstr ""
"將可呼叫的 *fn* 附加到 future 上。當 future 被取消或完成運行時，*fn* 將被以 "
"future 作為其唯一引數來呼叫。"

#: ../../library/concurrent.futures.rst:420
msgid ""
"Added callables are called in the order that they were added and are always "
"called in a thread belonging to the process that added them.  If the "
"callable raises an :exc:`Exception` subclass, it will be logged and "
"ignored.  If the callable raises a :exc:`BaseException` subclass, the "
"behavior is undefined."
msgstr ""
"新增的可呼叫物件按新增順序呼叫，並且始終在屬於新增它們的行程的執行緒中呼叫。"
"如果可呼叫物件引發 :exc:`Exception` 子類別，它將被記錄 (log) 並忽略。如果可呼"
"叫物件引發 :exc:`BaseException` 子類別，該行為未定義。"

#: ../../library/concurrent.futures.rst:426
msgid ""
"If the future has already completed or been cancelled, *fn* will be called "
"immediately."
msgstr "如果 future 已經完成或被取消，*fn* 將立即被呼叫。"

#: ../../library/concurrent.futures.rst:429
msgid ""
"The following :class:`Future` methods are meant for use in unit tests and :"
"class:`Executor` implementations."
msgstr "以下 :class:`Future` 方法旨在用於單元測試和 :class:`Executor` 實作。"

#: ../../library/concurrent.futures.rst:434
msgid ""
"This method should only be called by :class:`Executor` implementations "
"before executing the work associated with the :class:`Future` and by unit "
"tests."
msgstr ""
"此方法只能在與 :class:`Future` 關聯的工作被執行之前於 :class:`Executor` 實作"
"中呼叫，或者在單元測試中呼叫。"

#: ../../library/concurrent.futures.rst:438
msgid ""
"If the method returns ``False`` then the :class:`Future` was cancelled, i."
"e. :meth:`Future.cancel` was called and returned ``True``.  Any threads "
"waiting on the :class:`Future` completing (i.e. through :func:`as_completed` "
"or :func:`wait`) will be woken up."
msgstr ""
"如果該方法回傳 ``False`` 則 :class:`Future` 已被取消，即 :meth:`Future."
"cancel` 被呼叫並回傳 ``True``。任何等待 :class:`Future` 完成的執行緒（即透"
"過 :func:`as_completed` 或 :func:`wait`）將被喚醒。"

#: ../../library/concurrent.futures.rst:443
msgid ""
"If the method returns ``True`` then the :class:`Future` was not cancelled "
"and has been put in the running state, i.e. calls to :meth:`Future.running` "
"will return ``True``."
msgstr ""
"如果該方法回傳 ``True`` 則代表 :class:`Future` 未被取消並已進入運行狀態，意即"
"呼叫 :meth:`Future.running` 將回傳 ``True``。"

#: ../../library/concurrent.futures.rst:447
msgid ""
"This method can only be called once and cannot be called after :meth:`Future."
"set_result` or :meth:`Future.set_exception` have been called."
msgstr ""
"此方法只能呼叫一次，且不能在呼叫 :meth:`Future.set_result` 或 :meth:`Future."
"set_exception` 之後呼叫。"

#: ../../library/concurrent.futures.rst:453
msgid ""
"Sets the result of the work associated with the :class:`Future` to *result*."
msgstr "將與 :class:`Future` 關聯的工作結果設定為 *result*。"

#: ../../library/concurrent.futures.rst:456
#: ../../library/concurrent.futures.rst:469
msgid ""
"This method should only be used by :class:`Executor` implementations and "
"unit tests."
msgstr "此方法只能在 :class:`Executor` 實作中和單元測試中使用。"

#: ../../library/concurrent.futures.rst:459
#: ../../library/concurrent.futures.rst:472
msgid ""
"This method raises :exc:`concurrent.futures.InvalidStateError` if the :class:"
"`Future` is already done."
msgstr ""
"如果 :class:`Future` 已經完成，此方法會引發 :exc:`concurrent.futures."
"InvalidStateError`。"

#: ../../library/concurrent.futures.rst:466
msgid ""
"Sets the result of the work associated with the :class:`Future` to the :"
"class:`Exception` *exception*."
msgstr ""
"將與 :class:`Future` 關聯的工作結果設定為 :class:`Exception` *exception*。"

#: ../../library/concurrent.futures.rst:478
msgid "Module Functions"
msgstr "模組函式"

#: ../../library/concurrent.futures.rst:482
msgid ""
"Wait for the :class:`Future` instances (possibly created by different :class:"
"`Executor` instances) given by *fs* to complete. Duplicate futures given to "
"*fs* are removed and will be returned only once. Returns a named 2-tuple of "
"sets.  The first set, named ``done``, contains the futures that completed "
"(finished or cancelled futures) before the wait completed.  The second set, "
"named ``not_done``, contains the futures that did not complete (pending or "
"running futures)."
msgstr ""
"等待 *fs* 給定的 :class:`Future` 實例（可能由不同的 :class:`Executor` 實例建"
"立）完成。提供給 *fs* 的重複 future 將被刪除，並且只會回傳一次。回傳一個集合"
"的附名二元組 (named 2-tuple of sets)。第一組名為 ``done``，包含在等待完成之前"
"完成的 future（已完成或被取消的 future）。第二組名為 ``not_done``，包含未完成"
"的 future（未定或運行中的 future）。"

#: ../../library/concurrent.futures.rst:490
msgid ""
"*timeout* can be used to control the maximum number of seconds to wait "
"before returning.  *timeout* can be an int or float.  If *timeout* is not "
"specified or ``None``, there is no limit to the wait time."
msgstr ""
"*timeout* 可用於控制回傳前等待的最大秒數。*timeout* 可以是整數或浮點數。如果"
"未指定 *timeout* 或為 ``None``，則等待時間就沒有限制。"

#: ../../library/concurrent.futures.rst:494
msgid ""
"*return_when* indicates when this function should return.  It must be one of "
"the following constants:"
msgstr "*return_when* 表示此函式應回傳的時間。它必須是以下常數之一："

#: ../../library/concurrent.futures.rst:500
msgid "Constant"
msgstr "常數"

#: ../../library/concurrent.futures.rst:501
msgid "Description"
msgstr "描述"

#: ../../library/concurrent.futures.rst:504
msgid "The function will return when any future finishes or is cancelled."
msgstr "當任何 future 完成或被取消時，該函式就會回傳。"

#: ../../library/concurrent.futures.rst:507
msgid ""
"The function will return when any future finishes by raising an exception. "
"If no future raises an exception then it is equivalent to :const:"
"`ALL_COMPLETED`."
msgstr ""
"該函式會在任何 future 透過引發例外而完結時回傳。如果 future 沒有引發例外，那"
"麼它等同於 :const:`ALL_COMPLETED`。"

#: ../../library/concurrent.futures.rst:512
msgid "The function will return when all futures finish or are cancelled."
msgstr "當所有 future 都完成或被取消時，該函式才會回傳。"

#: ../../library/concurrent.futures.rst:516
msgid ""
"Returns an iterator over the :class:`Future` instances (possibly created by "
"different :class:`Executor` instances) given by *fs* that yields futures as "
"they complete (finished or cancelled futures). Any futures given by *fs* "
"that are duplicated will be returned once. Any futures that completed "
"before :func:`as_completed` is called will be yielded first.  The returned "
"iterator raises a :exc:`TimeoutError` if :meth:`~iterator.__next__` is "
"called and the result isn't available after *timeout* seconds from the "
"original call to :func:`as_completed`.  *timeout* can be an int or float. If "
"*timeout* is not specified or ``None``, there is no limit to the wait time."
msgstr ""
"回傳由 *fs* 給定的 :class:`Future` 實例（可能由不同的 :class:`Executor` 實例"
"建立）的疊代器，它在完成時產生 future（已完成或被取消的 future）。*fs* 給定的"
"任何重複的 future 將只被回傳一次。呼叫 :func:`as_completed` 之前完成的任何 "
"future 將首先產生。如果 :meth:`~iterator.__next__` 被呼叫，並且在原先呼叫 :"
"func:`as_completed` 的 *timeout* 秒後結果仍不可用，則回傳的疊代器會引發 :exc:"
"`TimeoutError`。*timeout* 可以是整數或浮點數。如果未指定 *timeout* 或為 "
"``None``，則等待時間就沒有限制。"

#: ../../library/concurrent.futures.rst:529
msgid ":pep:`3148` -- futures - execute computations asynchronously"
msgstr ":pep:`3148` -- futures - 非同步地執行運算"

#: ../../library/concurrent.futures.rst:530
msgid ""
"The proposal which described this feature for inclusion in the Python "
"standard library."
msgstr "描述此功能並提出被包含於 Python 標準函式庫中的提案。"

#: ../../library/concurrent.futures.rst:535
msgid "Exception classes"
msgstr "例外類別"

#: ../../library/concurrent.futures.rst:541
msgid "Raised when a future is cancelled."
msgstr "當 future 被取消時引發。"

#: ../../library/concurrent.futures.rst:545
msgid ""
"A deprecated alias of :exc:`TimeoutError`, raised when a future operation "
"exceeds the given timeout."
msgstr ""
":exc:`TimeoutError` 的棄用別名，在 future 操作超過給定超時 (timeout) 時引發。"

#: ../../library/concurrent.futures.rst:550
msgid "This class was made an alias of :exc:`TimeoutError`."
msgstr "這個類別是 :exc:`TimeoutError` 的別名。"

#: ../../library/concurrent.futures.rst:555
msgid ""
"Derived from :exc:`RuntimeError`, this exception class is raised when an "
"executor is broken for some reason, and cannot be used to submit or execute "
"new tasks."
msgstr ""
"衍生自 :exc:`RuntimeError`，當執行器因某種原因損壞時會引發此例外類別，並且不"
"能用於提交或執行新任務。"

#: ../../library/concurrent.futures.rst:563
msgid ""
"Raised when an operation is performed on a future that is not allowed in the "
"current state."
msgstr "當前狀態下不允許的 future 操作被執行時而引發。"

#: ../../library/concurrent.futures.rst:572
msgid ""
"Derived from :exc:`~concurrent.futures.BrokenExecutor`, this exception class "
"is raised when one of the workers of a :class:`~concurrent.futures."
"ThreadPoolExecutor` has failed initializing."
msgstr ""
"衍生自 :exc:`~concurrent.futures.BrokenExecutor`，當 :class:`~concurrent."
"futures.ThreadPoolExecutor` 的其中一個 worker 初始化失敗時會引發此例外類別。"

#: ../../library/concurrent.futures.rst:583
msgid ""
"Derived from :exc:`~concurrent.futures.BrokenExecutor` (formerly :exc:"
"`RuntimeError`), this exception class is raised when one of the workers of "
"a :class:`~concurrent.futures.ProcessPoolExecutor` has terminated in a non-"
"clean fashion (for example, if it was killed from the outside)."
msgstr ""
"衍生自 :exc:`~concurrent.futures.BrokenExecutor`\\（以前為 :exc:"
"`RuntimeError`），當 :class:`~concurrent.futures.ProcessPoolExecutor` 的其中"
"一個 worker 以不乾淨的方式終止時將引發此例外類別（例如它是從外面被 kill 掉"
"的）。"
