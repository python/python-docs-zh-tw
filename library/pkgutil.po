# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Matt Wang <mattwang44@gmail.com>, 2024
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-09 00:03+0000\n"
"PO-Revision-Date: 2024-03-08 16:07+0000\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pkgutil.rst:2
msgid ":mod:`!pkgutil` --- Package extension utility"
msgstr ":mod:`!pkgutil` --- 套件擴充工具程式"

#: ../../library/pkgutil.rst:7
msgid "**Source code:** :source:`Lib/pkgutil.py`"
msgstr "**原始碼：**\\ :source:`Lib/pkgutil.py`"

#: ../../library/pkgutil.rst:11
msgid ""
"This module provides utilities for the import system, in particular package "
"support."
msgstr "此模組提供了引入系統 (import system) 的工具程式，特別是套件相關支援。"

#: ../../library/pkgutil.rst:16
msgid "A namedtuple that holds a brief summary of a module's info."
msgstr "一個包含模組資訊之簡短摘要的附名元組 (namedtuple)。"

#: ../../library/pkgutil.rst:22
msgid ""
"Extend the search path for the modules which comprise a package.  Intended "
"use is to place the following code in a package's :file:`__init__.py`::"
msgstr ""
"擴充組成一個套件之模組的搜尋路徑。預期用法是將以下程式碼放入套件的 :file:"
"`__init__.py`： ::"

#: ../../library/pkgutil.rst:28
msgid ""
"For each directory on :data:`sys.path` that has a subdirectory that matches "
"the package name, add the subdirectory to the package's :attr:`__path__`.  "
"This is useful if one wants to distribute different parts of a single "
"logical package as multiple directories."
msgstr ""
"對於 :data:`sys.path` 上具有與套件名稱相符的子目錄的每個目錄，將該子目錄新增"
"至套件的 :attr:`__path__` 中。如果想要將單一邏輯套件的不同部分給分配到多個目"
"錄時，這會非常有用。"

#: ../../library/pkgutil.rst:33
msgid ""
"It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the "
"*name* argument.  This feature is similar to :file:`\\*.pth` files (see the :"
"mod:`site` module for more information), except that it doesn't special-case "
"lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at face "
"value: apart from checking for duplicates, all entries found in a :file:`\\*."
"pkg` file are added to the path, regardless of whether they exist on the "
"filesystem.  (This is a feature.)"
msgstr ""
"它還會尋找 :file:`\\*.pkg` 檔案，其中開頭的 ``*`` 與 *name* 引數相符。此功能"
"類似於 :file:`\\*.pth` 檔案（更多資訊請參閱 :mod:`site` 模組），但他不特別處"
"理以 ``import`` 為開頭的行。:file:`\\*.pkg` 檔案從表面上看是受信任的：除了檢"
"查重複項之外，在 :file:`\\*.pkg` 檔案中找到的所有條目都將新增到路徑中，無論它"
"們是否存在於檔案系統。（這是一個功能。）"

#: ../../library/pkgutil.rst:41
msgid ""
"If the input path is not a list (as is the case for frozen packages) it is "
"returned unchanged.  The input path is not modified; an extended copy is "
"returned.  Items are only appended to the copy at the end."
msgstr ""
"如果輸入路徑不是串列（像是凍結套件 (frozen package) 的情況），它將原封不動地"
"被回傳。輸入路徑不會被修改；而是回傳擴充後的副本。僅將項目附加到副本的尾端。"

#: ../../library/pkgutil.rst:45
msgid ""
"It is assumed that :data:`sys.path` is a sequence.  Items of :data:`sys."
"path` that are not strings referring to existing directories are ignored. "
"Unicode items on :data:`sys.path` that cause errors when used as filenames "
"may cause this function to raise an exception (in line with :func:`os.path."
"isdir` behavior)."
msgstr ""
":data:`sys.path` 被假設是一個序列，:data:`sys.path` 中的項目裡，若不是代表現"
"存目錄的字串則將被忽略。:data:`sys.path` 上用作檔案名稱時導致錯誤的 Unicode "
"項目可能會導致此函式引發例外（與 :func:`os.path.isdir` 行為一致）。"

#: ../../library/pkgutil.rst:53
msgid "Retrieve a module :term:`loader` for the given *fullname*."
msgstr "取得給定之 *fullname* 的模組 :term:`loader`。"

#: ../../library/pkgutil.rst:55
msgid ""
"This is a backwards compatibility wrapper around :func:`importlib.util."
"find_spec` that converts most failures to :exc:`ImportError` and only "
"returns the loader rather than the full :class:`importlib.machinery."
"ModuleSpec`."
msgstr ""
"這是一個 :func:`importlib.util.find_spec` 的向後相容包裝器，它將大多數的失敗"
"轉換為 :exc:`ImportError` 並且僅回傳載入器而不是完整的 :class:`importlib."
"machinery.ModuleSpec`。"

#: ../../library/pkgutil.rst:60 ../../library/pkgutil.rst:81
#: ../../library/pkgutil.rst:96 ../../library/pkgutil.rst:120
#: ../../library/pkgutil.rst:141 ../../library/pkgutil.rst:180
msgid ""
"Updated to be based directly on :mod:`importlib` rather than relying on the "
"package internal :pep:`302` import emulation."
msgstr ""
"更新為直接基於 :mod:`importlib`，而不是依賴套件內部 :pep:`302` 的引入模擬 "
"(import emulation)。"

#: ../../library/pkgutil.rst:64 ../../library/pkgutil.rst:100
msgid "Updated to be based on :pep:`451`"
msgstr "基於 :pep:`451` 來更新"

#: ../../library/pkgutil.rst:68 ../../library/pkgutil.rst:104
msgid "Use :func:`importlib.util.find_spec` instead."
msgstr "改用 :func:`importlib.util.find_spec`。"

#: ../../library/pkgutil.rst:73
msgid "Retrieve a :term:`finder` for the given *path_item*."
msgstr "取得給定之 *path_item* 的 :term:`finder`。"

#: ../../library/pkgutil.rst:75
msgid ""
"The returned finder is cached in :data:`sys.path_importer_cache` if it was "
"newly created by a path hook."
msgstr ""
"如果回傳的尋檢器 (finder) 是由路徑勾點 (path hook) 所新建立的，則它會被快取"
"在 :data:`sys.path_importer_cache` 中。"

#: ../../library/pkgutil.rst:78
msgid ""
"The cache (or part of it) can be cleared manually if a rescan of :data:`sys."
"path_hooks` is necessary."
msgstr ""
"如果需要重新掃描 :data:`sys.path_hooks`，可以手動清除快取（或部分快取）。"

#: ../../library/pkgutil.rst:88
msgid "Get a :term:`loader` object for *module_or_name*."
msgstr "取得 *module_or_name* 的 :term:`loader` 物件。"

#: ../../library/pkgutil.rst:90
msgid ""
"If the module or package is accessible via the normal import mechanism, a "
"wrapper around the relevant part of that machinery is returned.  Returns "
"``None`` if the module cannot be found or imported.  If the named module is "
"not already imported, its containing package (if any) is imported, in order "
"to establish the package ``__path__``."
msgstr ""
"如果可以透過正常引入機制存取模組或套件，則回傳該機制相關部分的包裝器。如果找"
"不到或無法引入模組，則回傳 ``None``。如果指定的模組尚未被引入，則引入其包含的"
"套件（如有存在）以建立套件 ``__path__``。"

#: ../../library/pkgutil.rst:109
msgid "Yield :term:`finder` objects for the given module name."
msgstr "yield 給定模組名稱的 :term:`finder` 物件。"

#: ../../library/pkgutil.rst:111
msgid ""
"If fullname contains a ``'.'``, the finders will be for the package "
"containing fullname, otherwise they will be all registered top level finders "
"(i.e. those on both :data:`sys.meta_path` and :data:`sys.path_hooks`)."
msgstr ""
"如果 fullname 包含 ``'.'``，則尋檢器將針對包含 fullname 的套件，否則它們全部"
"會是在頂層被註冊的尋檢器（即 :data:`sys.meta_path` 和 :data:`sys.path_hooks` "
"上的尋檢器）。"

#: ../../library/pkgutil.rst:115
msgid ""
"If the named module is in a package, that package is imported as a side "
"effect of invoking this function."
msgstr ""
"如果指定的模組位於套件中，則作為呼叫此函式的副作用 (side effect) ，該套件會被"
"引入。"

#: ../../library/pkgutil.rst:118
msgid "If no module name is specified, all top level finders are produced."
msgstr "如果未指定模組名稱，則會產生所有頂層尋檢器。"

#: ../../library/pkgutil.rst:127
msgid ""
"Yields :class:`ModuleInfo` for all submodules on *path*, or, if *path* is "
"``None``, all top-level modules on :data:`sys.path`."
msgstr ""
"yield *path* 上所有子模組的 :class:`ModuleInfo`，或者如果 *path* 為 "
"``None``，則產生 :data:`sys.path` 上的所有頂層模組。"

#: ../../library/pkgutil.rst:130 ../../library/pkgutil.rst:151
msgid ""
"*path* should be either ``None`` or a list of paths to look for modules in."
msgstr "*path* 應該是 ``None`` 或用來尋找模組的路徑串列。"

#: ../../library/pkgutil.rst:132 ../../library/pkgutil.rst:153
msgid ""
"*prefix* is a string to output on the front of every module name on output."
msgstr "*prefix* 是在輸出的每個模組名稱前面的輸出字串。"

#: ../../library/pkgutil.rst:136 ../../library/pkgutil.rst:175
msgid ""
"Only works for a :term:`finder` which defines an ``iter_modules()`` method. "
"This interface is non-standard, so the module also provides implementations "
"for :class:`importlib.machinery.FileFinder` and :class:`zipimport."
"zipimporter`."
msgstr ""
"僅適用於有定義 ``iter_modules()`` 方法的 :term:`finder`。此介面並非是標準的，"
"因此該模組還提供了 :class:`importlib.machinery.FileFinder` 和 :class:"
"`zipimport.zipimporter` 的實作。"

#: ../../library/pkgutil.rst:148
msgid ""
"Yields :class:`ModuleInfo` for all modules recursively on *path*, or, if "
"*path* is ``None``, all accessible modules."
msgstr ""
"為 *path* 上的所有模組遞迴 yield 出 :class:`ModuleInfo`，或如果 *path* 為 "
"``None`` 則 yield 所有可存取的模組。"

#: ../../library/pkgutil.rst:155
msgid ""
"Note that this function must import all *packages* (*not* all modules!) on "
"the given *path*, in order to access the ``__path__`` attribute to find "
"submodules."
msgstr ""
"請注意，此函式必須引入給定之 *path* 上的所有\\ *套件*\\ （*不是*\\ 所有模"
"組！），以便存取 ``__path__`` 屬性來尋找子模組。"

#: ../../library/pkgutil.rst:159
msgid ""
"*onerror* is a function which gets called with one argument (the name of the "
"package which was being imported) if any exception occurs while trying to "
"import a package.  If no *onerror* function is supplied, :exc:"
"`ImportError`\\s are caught and ignored, while all other exceptions are "
"propagated, terminating the search."
msgstr ""
"*onerror* 是一個函式，如果在嘗試引入套件時發生任何例外，則使用一個引數（正在"
"引入之套件的名稱）來呼叫函式。如果未提供 *onerror* 函式，則會捕獲並忽略 :exc:"
"`ImportError`，同時傳播所有其他例外並終止搜尋。"

#: ../../library/pkgutil.rst:165
msgid "Examples::"
msgstr "範例： ::"

#: ../../library/pkgutil.rst:187
msgid "Get a resource from a package."
msgstr "從套件中取得資源。"

#: ../../library/pkgutil.rst:189
msgid ""
"This is a wrapper for the :term:`loader` :meth:`get_data <importlib.abc."
"ResourceLoader.get_data>` API.  The *package* argument should be the name of "
"a package, in standard module format (``foo.bar``).  The *resource* argument "
"should be in the form of a relative filename, using ``/`` as the path "
"separator.  The parent directory name ``..`` is not allowed, and nor is a "
"rooted name (starting with a ``/``)."
msgstr ""
"這是 :term:`loader` :meth:`get_data <importlib.abc.ResourceLoader.get_data>` "
"API 的包裝器。*package* 引數應該是採用標準模組格式 (``foo.bar``) 的套件名稱。"
"*resource* 引數應為相對檔案名稱的形式，並使用 ``/`` 作為路徑分隔符號。不允許"
"使用父目錄名稱 ``..``，也不允許使用根目錄名稱（以 ``/`` 開頭）。"

#: ../../library/pkgutil.rst:196
msgid ""
"The function returns a binary string that is the contents of the specified "
"resource."
msgstr "該函式回傳一個二進位字串，它是指定資源的內容。"

#: ../../library/pkgutil.rst:199
msgid ""
"For packages located in the filesystem, which have already been imported, "
"this is the rough equivalent of::"
msgstr "對於位於檔案系統中且已被引入過的套件，這大致相當於： ::"

#: ../../library/pkgutil.rst:205
msgid ""
"If the package cannot be located or loaded, or it uses a :term:`loader` "
"which does not support :meth:`get_data <importlib.abc.ResourceLoader."
"get_data>`, then ``None`` is returned.  In particular, the :term:`loader` "
"for :term:`namespace packages <namespace package>` does not support :meth:"
"`get_data <importlib.abc.ResourceLoader.get_data>`."
msgstr ""
"如果無法定位或載入套件，或者它使用不支援 :meth:`get_data <importlib.abc."
"ResourceLoader.get_data>` 的 :term:`loader` 則回傳 ``None``。特別是\\ :term:`"
"命名空間套件 <namespace package>`\\ 的 :term:`loader` 不支援 :meth:`get_data "
"<importlib.abc.ResourceLoader.get_data>`。"

#: ../../library/pkgutil.rst:214
msgid "Resolve a name to an object."
msgstr "將名稱解析為物件。"

#: ../../library/pkgutil.rst:216
msgid ""
"This functionality is used in numerous places in the standard library (see :"
"issue:`12915`) - and equivalent functionality is also in widely used third-"
"party packages such as setuptools, Django and Pyramid."
msgstr ""
"標準函式庫中的許多地方都使用了此功能（請參閱 :issue:`12915`），且相同功能也被"
"用於擁有廣大使用者的第三方套件，如 setuptools、Django 和 Pyramid。"

#: ../../library/pkgutil.rst:220
msgid ""
"It is expected that *name* will be a string in one of the following formats, "
"where W is shorthand for a valid Python identifier and dot stands for a "
"literal period in these pseudo-regexes:"
msgstr ""
"*name* 預期要是以下格式之一的字串，其中 W 是有效 Python 識別字的簡寫，而點 "
"(dot) 代表這些偽正規表示式 (pseudo-regex) 中的字面句點 (literal period)："

#: ../../library/pkgutil.rst:224
msgid "``W(.W)*``"
msgstr "``W(.W)*``"

#: ../../library/pkgutil.rst:225
msgid "``W(.W)*:(W(.W)*)?``"
msgstr "``W(.W)*:(W(.W)*)?``"

#: ../../library/pkgutil.rst:227
msgid ""
"The first form is intended for backward compatibility only. It assumes that "
"some part of the dotted name is a package, and the rest is an object "
"somewhere within that package, possibly nested inside other objects. Because "
"the place where the package stops and the object hierarchy starts can't be "
"inferred by inspection, repeated attempts to import must be done with this "
"form."
msgstr ""
"第一種形式僅是為了要向後相容。它假設點名稱 (dotted name) 的某些部分是一個套"
"件，其餘部分是該套件內某處的物件，其可能巢狀地存在於 (nested) 其他物件內。由"
"於無法透過檢查 (inspection) 來推斷出套件停止的位置和物件層次結構的開始位置，"
"因此必須使用此形式來重複嘗試引入。"

#: ../../library/pkgutil.rst:234
msgid ""
"In the second form, the caller makes the division point clear through the "
"provision of a single colon: the dotted name to the left of the colon is a "
"package to be imported, and the dotted name to the right is the object "
"hierarchy within that package. Only one import is needed in this form. If it "
"ends with the colon, then a module object is returned."
msgstr ""
"在第二種形式中，呼叫者透過使用一個冒號來明確標明分隔點：冒號左側的點名稱是要"
"引入的套件，右側的點名稱是該套件內的物件層次結構。這種形式只需要一次引入。如"
"果它以冒號結尾，則回傳一個模組物件。"

#: ../../library/pkgutil.rst:240
msgid ""
"The function will return an object (which might be a module), or raise one "
"of the following exceptions:"
msgstr "此函式會回傳一個物件（可能是一個模組），或引發以下其中一個例外："

#: ../../library/pkgutil.rst:243
msgid ":exc:`ValueError` -- if *name* isn't in a recognised format."
msgstr ":exc:`ValueError` -- 如果 *name* 不是可辨識的格式。"

#: ../../library/pkgutil.rst:245
msgid ":exc:`ImportError` -- if an import failed when it shouldn't have."
msgstr ":exc:`ImportError` -- 如果在不應該失敗的情況下引入失敗。"

#: ../../library/pkgutil.rst:247
msgid ""
":exc:`AttributeError` -- If a failure occurred when traversing the object "
"hierarchy within the imported package to get to the desired object."
msgstr ""
":exc:`AttributeError` -- 如果在遍歷引入套件中的物件層次結構以取得所需物件時發"
"生失敗。"
