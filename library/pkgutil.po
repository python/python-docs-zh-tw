# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-09 00:03+0000\n"
"PO-Revision-Date: 2018-05-23 16:07+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pkgutil.rst:2
msgid ":mod:`!pkgutil` --- Package extension utility"
msgstr ""

#: ../../library/pkgutil.rst:7
msgid "**Source code:** :source:`Lib/pkgutil.py`"
msgstr "**原始碼：**\\ :source:`Lib/pkgutil.py`"

#: ../../library/pkgutil.rst:11
msgid ""
"This module provides utilities for the import system, in particular package "
"support."
msgstr ""

#: ../../library/pkgutil.rst:16
msgid "A namedtuple that holds a brief summary of a module's info."
msgstr ""

#: ../../library/pkgutil.rst:22
msgid ""
"Extend the search path for the modules which comprise a package.  Intended "
"use is to place the following code in a package's :file:`__init__.py`::"
msgstr ""

#: ../../library/pkgutil.rst:28
msgid ""
"For each directory on :data:`sys.path` that has a subdirectory that matches "
"the package name, add the subdirectory to the package's :attr:`__path__`.  "
"This is useful if one wants to distribute different parts of a single "
"logical package as multiple directories."
msgstr ""

#: ../../library/pkgutil.rst:33
msgid ""
"It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the "
"*name* argument.  This feature is similar to :file:`\\*.pth` files (see the :"
"mod:`site` module for more information), except that it doesn't special-case "
"lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at face "
"value: apart from checking for duplicates, all entries found in a :file:`\\*."
"pkg` file are added to the path, regardless of whether they exist on the "
"filesystem.  (This is a feature.)"
msgstr ""

#: ../../library/pkgutil.rst:41
msgid ""
"If the input path is not a list (as is the case for frozen packages) it is "
"returned unchanged.  The input path is not modified; an extended copy is "
"returned.  Items are only appended to the copy at the end."
msgstr ""

#: ../../library/pkgutil.rst:45
msgid ""
"It is assumed that :data:`sys.path` is a sequence.  Items of :data:`sys."
"path` that are not strings referring to existing directories are ignored. "
"Unicode items on :data:`sys.path` that cause errors when used as filenames "
"may cause this function to raise an exception (in line with :func:`os.path."
"isdir` behavior)."
msgstr ""

#: ../../library/pkgutil.rst:53
msgid "Retrieve a module :term:`loader` for the given *fullname*."
msgstr ""

#: ../../library/pkgutil.rst:55
msgid ""
"This is a backwards compatibility wrapper around :func:`importlib.util."
"find_spec` that converts most failures to :exc:`ImportError` and only "
"returns the loader rather than the full :class:`importlib.machinery."
"ModuleSpec`."
msgstr ""

#: ../../library/pkgutil.rst:60 ../../library/pkgutil.rst:81
#: ../../library/pkgutil.rst:96 ../../library/pkgutil.rst:120
#: ../../library/pkgutil.rst:141 ../../library/pkgutil.rst:180
msgid ""
"Updated to be based directly on :mod:`importlib` rather than relying on the "
"package internal :pep:`302` import emulation."
msgstr ""

#: ../../library/pkgutil.rst:64 ../../library/pkgutil.rst:100
msgid "Updated to be based on :pep:`451`"
msgstr "基於 :pep:`451` 來更新"

#: ../../library/pkgutil.rst:68 ../../library/pkgutil.rst:104
msgid "Use :func:`importlib.util.find_spec` instead."
msgstr ""

#: ../../library/pkgutil.rst:73
msgid "Retrieve a :term:`finder` for the given *path_item*."
msgstr ""

#: ../../library/pkgutil.rst:75
msgid ""
"The returned finder is cached in :data:`sys.path_importer_cache` if it was "
"newly created by a path hook."
msgstr ""

#: ../../library/pkgutil.rst:78
msgid ""
"The cache (or part of it) can be cleared manually if a rescan of :data:`sys."
"path_hooks` is necessary."
msgstr ""

#: ../../library/pkgutil.rst:88
msgid "Get a :term:`loader` object for *module_or_name*."
msgstr ""

#: ../../library/pkgutil.rst:90
msgid ""
"If the module or package is accessible via the normal import mechanism, a "
"wrapper around the relevant part of that machinery is returned.  Returns "
"``None`` if the module cannot be found or imported.  If the named module is "
"not already imported, its containing package (if any) is imported, in order "
"to establish the package ``__path__``."
msgstr ""

#: ../../library/pkgutil.rst:109
msgid "Yield :term:`finder` objects for the given module name."
msgstr ""

#: ../../library/pkgutil.rst:111
msgid ""
"If fullname contains a ``'.'``, the finders will be for the package "
"containing fullname, otherwise they will be all registered top level finders "
"(i.e. those on both :data:`sys.meta_path` and :data:`sys.path_hooks`)."
msgstr ""

#: ../../library/pkgutil.rst:115
msgid ""
"If the named module is in a package, that package is imported as a side "
"effect of invoking this function."
msgstr ""

#: ../../library/pkgutil.rst:118
msgid "If no module name is specified, all top level finders are produced."
msgstr ""

#: ../../library/pkgutil.rst:127
msgid ""
"Yields :class:`ModuleInfo` for all submodules on *path*, or, if *path* is "
"``None``, all top-level modules on :data:`sys.path`."
msgstr ""

#: ../../library/pkgutil.rst:130 ../../library/pkgutil.rst:151
msgid ""
"*path* should be either ``None`` or a list of paths to look for modules in."
msgstr ""

#: ../../library/pkgutil.rst:132 ../../library/pkgutil.rst:153
msgid ""
"*prefix* is a string to output on the front of every module name on output."
msgstr ""

#: ../../library/pkgutil.rst:136 ../../library/pkgutil.rst:175
msgid ""
"Only works for a :term:`finder` which defines an ``iter_modules()`` method. "
"This interface is non-standard, so the module also provides implementations "
"for :class:`importlib.machinery.FileFinder` and :class:`zipimport."
"zipimporter`."
msgstr ""

#: ../../library/pkgutil.rst:148
msgid ""
"Yields :class:`ModuleInfo` for all modules recursively on *path*, or, if "
"*path* is ``None``, all accessible modules."
msgstr ""

#: ../../library/pkgutil.rst:155
msgid ""
"Note that this function must import all *packages* (*not* all modules!) on "
"the given *path*, in order to access the ``__path__`` attribute to find "
"submodules."
msgstr ""

#: ../../library/pkgutil.rst:159
msgid ""
"*onerror* is a function which gets called with one argument (the name of the "
"package which was being imported) if any exception occurs while trying to "
"import a package.  If no *onerror* function is supplied, :exc:"
"`ImportError`\\s are caught and ignored, while all other exceptions are "
"propagated, terminating the search."
msgstr ""

#: ../../library/pkgutil.rst:165
msgid "Examples::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../library/pkgutil.rst:187
msgid "Get a resource from a package."
msgstr ""

#: ../../library/pkgutil.rst:189
msgid ""
"This is a wrapper for the :term:`loader` :meth:`get_data <importlib.abc."
"ResourceLoader.get_data>` API.  The *package* argument should be the name of "
"a package, in standard module format (``foo.bar``).  The *resource* argument "
"should be in the form of a relative filename, using ``/`` as the path "
"separator.  The parent directory name ``..`` is not allowed, and nor is a "
"rooted name (starting with a ``/``)."
msgstr ""

#: ../../library/pkgutil.rst:196
msgid ""
"The function returns a binary string that is the contents of the specified "
"resource."
msgstr ""

#: ../../library/pkgutil.rst:199
msgid ""
"For packages located in the filesystem, which have already been imported, "
"this is the rough equivalent of::"
msgstr ""

#: ../../library/pkgutil.rst:205
msgid ""
"If the package cannot be located or loaded, or it uses a :term:`loader` "
"which does not support :meth:`get_data <importlib.abc.ResourceLoader."
"get_data>`, then ``None`` is returned.  In particular, the :term:`loader` "
"for :term:`namespace packages <namespace package>` does not support :meth:"
"`get_data <importlib.abc.ResourceLoader.get_data>`."
msgstr ""

#: ../../library/pkgutil.rst:214
msgid "Resolve a name to an object."
msgstr ""

#: ../../library/pkgutil.rst:216
msgid ""
"This functionality is used in numerous places in the standard library (see :"
"issue:`12915`) - and equivalent functionality is also in widely used third-"
"party packages such as setuptools, Django and Pyramid."
msgstr ""

#: ../../library/pkgutil.rst:220
msgid ""
"It is expected that *name* will be a string in one of the following formats, "
"where W is shorthand for a valid Python identifier and dot stands for a "
"literal period in these pseudo-regexes:"
msgstr ""

#: ../../library/pkgutil.rst:224
msgid "``W(.W)*``"
msgstr "``W(.W)*``"

#: ../../library/pkgutil.rst:225
msgid "``W(.W)*:(W(.W)*)?``"
msgstr "``W(.W)*:(W(.W)*)?``"

#: ../../library/pkgutil.rst:227
msgid ""
"The first form is intended for backward compatibility only. It assumes that "
"some part of the dotted name is a package, and the rest is an object "
"somewhere within that package, possibly nested inside other objects. Because "
"the place where the package stops and the object hierarchy starts can't be "
"inferred by inspection, repeated attempts to import must be done with this "
"form."
msgstr ""

#: ../../library/pkgutil.rst:234
msgid ""
"In the second form, the caller makes the division point clear through the "
"provision of a single colon: the dotted name to the left of the colon is a "
"package to be imported, and the dotted name to the right is the object "
"hierarchy within that package. Only one import is needed in this form. If it "
"ends with the colon, then a module object is returned."
msgstr ""

#: ../../library/pkgutil.rst:240
msgid ""
"The function will return an object (which might be a module), or raise one "
"of the following exceptions:"
msgstr ""

#: ../../library/pkgutil.rst:243
msgid ":exc:`ValueError` -- if *name* isn't in a recognised format."
msgstr ""

#: ../../library/pkgutil.rst:245
msgid ":exc:`ImportError` -- if an import failed when it shouldn't have."
msgstr ""

#: ../../library/pkgutil.rst:247
msgid ""
":exc:`AttributeError` -- If a failure occurred when traversing the object "
"hierarchy within the imported package to get to the desired object."
msgstr ""
