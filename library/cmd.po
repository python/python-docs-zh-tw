# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-03 11:11+0800\n"
"PO-Revision-Date: 2018-05-23 14:40+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/cmd.rst:2
msgid ":mod:`!cmd` --- Support for line-oriented command interpreters"
msgstr ":mod:`!cmd` --- 以列為導向的指令直譯器支援"

#: ../../library/cmd.rst:9
msgid "**Source code:** :source:`Lib/cmd.py`"
msgstr "**原始碼：**\\ :source:`Lib/cmd.py`"

#: ../../library/cmd.rst:13
msgid ""
"The :class:`Cmd` class provides a simple framework for writing line-oriented "
"command interpreters.  These are often useful for test harnesses, "
"administrative tools, and prototypes that will later be wrapped in a more "
"sophisticated interface."
msgstr ""

#: ../../library/cmd.rst:20
msgid ""
"A :class:`Cmd` instance or subclass instance is a line-oriented interpreter "
"framework.  There is no good reason to instantiate :class:`Cmd` itself; "
"rather, it's useful as a superclass of an interpreter class you define "
"yourself in order to inherit :class:`Cmd`'s methods and encapsulate action "
"methods."
msgstr ""

#: ../../library/cmd.rst:25
msgid ""
"The optional argument *completekey* is the :mod:`readline` name of a "
"completion key; it defaults to :kbd:`Tab`. If *completekey* is not :const:"
"`None` and :mod:`readline` is available, command completion is done "
"automatically."
msgstr ""

#: ../../library/cmd.rst:29
msgid ""
"The optional arguments *stdin* and *stdout* specify the  input and output "
"file objects that the Cmd instance or subclass  instance will use for input "
"and output. If not specified, they will default to :data:`sys.stdin` and :"
"data:`sys.stdout`."
msgstr ""

#: ../../library/cmd.rst:34
msgid ""
"If you want a given *stdin* to be used, make sure to set the instance's :"
"attr:`use_rawinput` attribute to ``False``, otherwise *stdin* will be "
"ignored."
msgstr ""

#: ../../library/cmd.rst:42
msgid "Cmd Objects"
msgstr "Cmd 物件"

#: ../../library/cmd.rst:44
msgid "A :class:`Cmd` instance has the following methods:"
msgstr ""

#: ../../library/cmd.rst:49
msgid ""
"Repeatedly issue a prompt, accept input, parse an initial prefix off the "
"received input, and dispatch to action methods, passing them the remainder "
"of the line as argument."
msgstr ""

#: ../../library/cmd.rst:53
msgid ""
"The optional argument is a banner or intro string to be issued before the "
"first prompt (this overrides the :attr:`intro` class attribute)."
msgstr ""

#: ../../library/cmd.rst:56
msgid ""
"If the :mod:`readline` module is loaded, input will automatically inherit :"
"program:`bash`\\ -like history-list editing (e.g. :kbd:`Control-P` scrolls "
"back to the last command, :kbd:`Control-N` forward to the next one, :kbd:"
"`Control-F` moves the cursor to the right non-destructively, :kbd:`Control-"
"B` moves the cursor to the left non-destructively, etc.)."
msgstr ""

#: ../../library/cmd.rst:62
msgid "An end-of-file on input is passed back as the string ``'EOF'``."
msgstr ""

#: ../../library/cmd.rst:68
msgid ""
"An interpreter instance will recognize a command name ``foo`` if and only if "
"it has a method :meth:`!do_foo`.  As a special case, a line beginning with "
"the character ``'?'`` is dispatched to the method :meth:`do_help`.  As "
"another special case, a line beginning with the character ``'!'`` is "
"dispatched to the method :meth:`!do_shell` (if such a method is defined)."
msgstr ""

#: ../../library/cmd.rst:74
msgid ""
"This method will return when the :meth:`postcmd` method returns a true "
"value. The *stop* argument to :meth:`postcmd` is the return value from the "
"command's corresponding :meth:`!do_\\*` method."
msgstr ""

#: ../../library/cmd.rst:78
msgid ""
"If completion is enabled, completing commands will be done automatically, "
"and completing of commands args is done by calling :meth:`!complete_foo` "
"with arguments *text*, *line*, *begidx*, and *endidx*.  *text* is the string "
"prefix we are attempting to match: all returned matches must begin with it. "
"*line* is the current input line with leading whitespace removed, *begidx* "
"and *endidx* are the beginning and ending indexes of the prefix text, which "
"could be used to provide different completion depending upon which position "
"the argument is in."
msgstr ""

#: ../../library/cmd.rst:89
msgid ""
"All subclasses of :class:`Cmd` inherit a predefined :meth:`!do_help`.  This "
"method, called with an argument ``'bar'``, invokes the corresponding method :"
"meth:`!help_bar`, and if that is not present, prints the docstring of :meth:"
"`!do_bar`, if available.  With no argument, :meth:`!do_help` lists all "
"available help topics (that is, all commands with corresponding :meth:`!"
"help_\\*` methods or commands that have docstrings), and also lists any "
"undocumented commands."
msgstr ""

#: ../../library/cmd.rst:100
msgid ""
"Interpret the argument as though it had been typed in response to the "
"prompt. This may be overridden, but should not normally need to be; see the :"
"meth:`precmd` and :meth:`postcmd` methods for useful execution hooks.  The "
"return value is a flag indicating whether interpretation of commands by the "
"interpreter should stop.  If there is a :meth:`!do_\\*` method for the "
"command *str*, the return value of that method is returned, otherwise the "
"return value from the :meth:`default` method is returned."
msgstr ""

#: ../../library/cmd.rst:111
msgid ""
"Method called when an empty line is entered in response to the prompt. If "
"this method is not overridden, it repeats the last nonempty command entered."
msgstr ""

#: ../../library/cmd.rst:117
msgid ""
"Method called on an input line when the command prefix is not recognized. If "
"this method is not overridden, it prints an error message and returns."
msgstr ""

#: ../../library/cmd.rst:123
msgid ""
"Method called to complete an input line when no command-specific :meth:`!"
"complete_\\*` method is available.  By default, it returns an empty list."
msgstr ""

#: ../../library/cmd.rst:129
msgid ""
"Method called to display a list of strings as a compact set of columns. Each "
"column is only as wide as necessary. Columns are separated by two spaces for "
"readability."
msgstr ""

#: ../../library/cmd.rst:136
msgid ""
"Hook method executed just before the command line *line* is interpreted, but "
"after the input prompt is generated and issued.  This method is a stub in :"
"class:`Cmd`; it exists to be overridden by subclasses.  The return value is "
"used as the command which will be executed by the :meth:`onecmd` method; "
"the :meth:`precmd` implementation may re-write the command or simply return "
"*line* unchanged."
msgstr ""

#: ../../library/cmd.rst:146
msgid ""
"Hook method executed just after a command dispatch is finished.  This method "
"is a stub in :class:`Cmd`; it exists to be overridden by subclasses.  *line* "
"is the command line which was executed, and *stop* is a flag which indicates "
"whether execution will be terminated after the call to :meth:`postcmd`; this "
"will be the return value of the :meth:`onecmd` method.  The return value of "
"this method will be used as the new value for the internal flag which "
"corresponds to *stop*; returning false will cause interpretation to continue."
msgstr ""

#: ../../library/cmd.rst:157
msgid ""
"Hook method executed once when :meth:`cmdloop` is called.  This method is a "
"stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""

#: ../../library/cmd.rst:163
msgid ""
"Hook method executed once when :meth:`cmdloop` is about to return. This "
"method is a stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""

#: ../../library/cmd.rst:167
msgid ""
"Instances of :class:`Cmd` subclasses have some public instance variables:"
msgstr ""

#: ../../library/cmd.rst:171
msgid "The prompt issued to solicit input."
msgstr ""

#: ../../library/cmd.rst:176
msgid "The string of characters accepted for the command prefix."
msgstr ""

#: ../../library/cmd.rst:181
msgid "The last nonempty command prefix seen."
msgstr ""

#: ../../library/cmd.rst:186
msgid ""
"A list of queued input lines.  The cmdqueue list is checked in :meth:"
"`cmdloop` when new input is needed; if it is nonempty, its elements will be "
"processed in order, as if entered at the prompt."
msgstr ""

#: ../../library/cmd.rst:193
msgid ""
"A string to issue as an intro or banner.  May be overridden by giving the :"
"meth:`cmdloop` method an argument."
msgstr ""

#: ../../library/cmd.rst:199
msgid ""
"The header to issue if the help output has a section for documented commands."
msgstr ""

#: ../../library/cmd.rst:204
msgid ""
"The header to issue if the help output has a section for miscellaneous  help "
"topics (that is, there are :meth:`!help_\\*` methods without corresponding :"
"meth:`!do_\\*` methods)."
msgstr ""

#: ../../library/cmd.rst:211
msgid ""
"The header to issue if the help output has a section for undocumented  "
"commands (that is, there are :meth:`!do_\\*` methods without corresponding :"
"meth:`!help_\\*` methods)."
msgstr ""

#: ../../library/cmd.rst:218
msgid ""
"The character used to draw separator lines under the help-message headers.  "
"If empty, no ruler line is drawn.  It defaults to ``'='``."
msgstr ""

#: ../../library/cmd.rst:224
msgid ""
"A flag, defaulting to true.  If true, :meth:`cmdloop` uses :func:`input` to "
"display a prompt and read the next command; if false, :data:`sys.stdout."
"write() <sys.stdout>` and :data:`sys.stdin.readline() <sys.stdin>` are used. "
"(This means that by importing :mod:`readline`, on systems that support it, "
"the interpreter will automatically support :program:`Emacs`\\ -like line "
"editing  and command-history keystrokes.)"
msgstr ""

#: ../../library/cmd.rst:234
msgid "Cmd Example"
msgstr ""

#: ../../library/cmd.rst:238
msgid ""
"The :mod:`cmd` module is mainly useful for building custom shells that let a "
"user work with a program interactively."
msgstr ""

#: ../../library/cmd.rst:241
msgid ""
"This section presents a simple example of how to build a shell around a few "
"of the commands in the :mod:`turtle` module."
msgstr ""

#: ../../library/cmd.rst:244
msgid ""
"Basic turtle commands such as :meth:`~turtle.forward` are added to a :class:"
"`Cmd` subclass with method named :meth:`!do_forward`.  The argument is "
"converted to a number and dispatched to the turtle module.  The docstring is "
"used in the help utility provided by the shell."
msgstr ""

#: ../../library/cmd.rst:249
msgid ""
"The example also includes a basic record and playback facility implemented "
"with the :meth:`~Cmd.precmd` method which is responsible for converting the "
"input to lowercase and writing the commands to a file.  The :meth:`!"
"do_playback` method reads the file and adds the recorded commands to the :"
"attr:`~Cmd.cmdqueue` for immediate playback::"
msgstr ""

#: ../../library/cmd.rst:255
msgid ""
"import cmd, sys\n"
"from turtle import *\n"
"\n"
"class TurtleShell(cmd.Cmd):\n"
"    intro = 'Welcome to the turtle shell.   Type help or ? to list commands."
"\\n'\n"
"    prompt = '(turtle) '\n"
"    file = None\n"
"\n"
"    # ----- basic turtle commands -----\n"
"    def do_forward(self, arg):\n"
"        'Move the turtle forward by the specified distance:  FORWARD 10'\n"
"        forward(*parse(arg))\n"
"    def do_right(self, arg):\n"
"        'Turn turtle right by given number of degrees:  RIGHT 20'\n"
"        right(*parse(arg))\n"
"    def do_left(self, arg):\n"
"        'Turn turtle left by given number of degrees:  LEFT 90'\n"
"        left(*parse(arg))\n"
"    def do_goto(self, arg):\n"
"        'Move turtle to an absolute position with changing orientation.  "
"GOTO 100 200'\n"
"        goto(*parse(arg))\n"
"    def do_home(self, arg):\n"
"        'Return turtle to the home position:  HOME'\n"
"        home()\n"
"    def do_circle(self, arg):\n"
"        'Draw circle with given radius an options extent and steps:  CIRCLE "
"50'\n"
"        circle(*parse(arg))\n"
"    def do_position(self, arg):\n"
"        'Print the current turtle position:  POSITION'\n"
"        print('Current position is %d %d\\n' % position())\n"
"    def do_heading(self, arg):\n"
"        'Print the current turtle heading in degrees:  HEADING'\n"
"        print('Current heading is %d\\n' % (heading(),))\n"
"    def do_color(self, arg):\n"
"        'Set the color:  COLOR BLUE'\n"
"        color(arg.lower())\n"
"    def do_undo(self, arg):\n"
"        'Undo (repeatedly) the last turtle action(s):  UNDO'\n"
"    def do_reset(self, arg):\n"
"        'Clear the screen and return turtle to center:  RESET'\n"
"        reset()\n"
"    def do_bye(self, arg):\n"
"        'Stop recording, close the turtle window, and exit:  BYE'\n"
"        print('Thank you for using Turtle')\n"
"        self.close()\n"
"        bye()\n"
"        return True\n"
"\n"
"    # ----- record and playback -----\n"
"    def do_record(self, arg):\n"
"        'Save future commands to filename:  RECORD rose.cmd'\n"
"        self.file = open(arg, 'w')\n"
"    def do_playback(self, arg):\n"
"        'Playback commands from a file:  PLAYBACK rose.cmd'\n"
"        self.close()\n"
"        with open(arg) as f:\n"
"            self.cmdqueue.extend(f.read().splitlines())\n"
"    def precmd(self, line):\n"
"        line = line.lower()\n"
"        if self.file and 'playback' not in line:\n"
"            print(line, file=self.file)\n"
"        return line\n"
"    def close(self):\n"
"        if self.file:\n"
"            self.file.close()\n"
"            self.file = None\n"
"\n"
"def parse(arg):\n"
"    'Convert a series of zero or more numbers to an argument tuple'\n"
"    return tuple(map(int, arg.split()))\n"
"\n"
"if __name__ == '__main__':\n"
"    TurtleShell().cmdloop()"
msgstr ""

#: ../../library/cmd.rst:330
msgid ""
"Here is a sample session with the turtle shell showing the help functions, "
"using blank lines to repeat commands, and the simple record and playback "
"facility:"
msgstr ""

#: ../../library/cmd.rst:333
msgid ""
"Welcome to the turtle shell.   Type help or ? to list commands.\n"
"\n"
"(turtle) ?\n"
"\n"
"Documented commands (type help <topic>):\n"
"========================================\n"
"bye     color    goto     home  playback  record  right\n"
"circle  forward  heading  left  position  reset   undo\n"
"\n"
"(turtle) help forward\n"
"Move the turtle forward by the specified distance:  FORWARD 10\n"
"(turtle) record spiral.cmd\n"
"(turtle) position\n"
"Current position is 0 0\n"
"\n"
"(turtle) heading\n"
"Current heading is 0\n"
"\n"
"(turtle) reset\n"
"(turtle) circle 20\n"
"(turtle) right 30\n"
"(turtle) circle 40\n"
"(turtle) right 30\n"
"(turtle) circle 60\n"
"(turtle) right 30\n"
"(turtle) circle 80\n"
"(turtle) right 30\n"
"(turtle) circle 100\n"
"(turtle) right 30\n"
"(turtle) circle 120\n"
"(turtle) right 30\n"
"(turtle) circle 120\n"
"(turtle) heading\n"
"Current heading is 180\n"
"\n"
"(turtle) forward 100\n"
"(turtle)\n"
"(turtle) right 90\n"
"(turtle) forward 100\n"
"(turtle)\n"
"(turtle) right 90\n"
"(turtle) forward 400\n"
"(turtle) right 90\n"
"(turtle) forward 500\n"
"(turtle) right 90\n"
"(turtle) forward 400\n"
"(turtle) right 90\n"
"(turtle) forward 300\n"
"(turtle) playback spiral.cmd\n"
"Current position is 0 0\n"
"\n"
"Current heading is 0\n"
"\n"
"Current heading is 180\n"
"\n"
"(turtle) bye\n"
"Thank you for using Turtle"
msgstr ""
"Welcome to the turtle shell.   Type help or ? to list commands.\n"
"\n"
"(turtle) ?\n"
"\n"
"Documented commands (type help <topic>):\n"
"========================================\n"
"bye     color    goto     home  playback  record  right\n"
"circle  forward  heading  left  position  reset   undo\n"
"\n"
"(turtle) help forward\n"
"Move the turtle forward by the specified distance:  FORWARD 10\n"
"(turtle) record spiral.cmd\n"
"(turtle) position\n"
"Current position is 0 0\n"
"\n"
"(turtle) heading\n"
"Current heading is 0\n"
"\n"
"(turtle) reset\n"
"(turtle) circle 20\n"
"(turtle) right 30\n"
"(turtle) circle 40\n"
"(turtle) right 30\n"
"(turtle) circle 60\n"
"(turtle) right 30\n"
"(turtle) circle 80\n"
"(turtle) right 30\n"
"(turtle) circle 100\n"
"(turtle) right 30\n"
"(turtle) circle 120\n"
"(turtle) right 30\n"
"(turtle) circle 120\n"
"(turtle) heading\n"
"Current heading is 180\n"
"\n"
"(turtle) forward 100\n"
"(turtle)\n"
"(turtle) right 90\n"
"(turtle) forward 100\n"
"(turtle)\n"
"(turtle) right 90\n"
"(turtle) forward 400\n"
"(turtle) right 90\n"
"(turtle) forward 500\n"
"(turtle) right 90\n"
"(turtle) forward 400\n"
"(turtle) right 90\n"
"(turtle) forward 300\n"
"(turtle) playback spiral.cmd\n"
"Current position is 0 0\n"
"\n"
"Current heading is 0\n"
"\n"
"Current heading is 180\n"
"\n"
"(turtle) bye\n"
"Thank you for using Turtle"

#: ../../library/cmd.rst:64
msgid "? (question mark)"
msgstr "? （問號）"

#: ../../library/cmd.rst:64
msgid "in a command interpreter"
msgstr "於 command interpreter（指令直譯器）中"

#: ../../library/cmd.rst:64
msgid "! (exclamation)"
msgstr "! （驚嘆號）"
