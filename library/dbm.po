# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# jerrychen <jerrychen.ee@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-27 00:03+0000\n"
"PO-Revision-Date: 2018-05-23 14:42+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ":mod:`dbm` --- Unix \"databases\" 的介面"

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**原始碼：**\\ :source:`Lib/dbm/__init__.py`"

#: ../../library/dbm.rst:11
msgid ""
":mod:`dbm` is a generic interface to variants of the DBM database --- :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the "
"slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  "
"There is a `third party interface <https://www.jcea.es/programacion/pybsddb."
"htm>`_ to the Oracle Berkeley DB."
msgstr ""

#: ../../library/dbm.rst:20
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""

#: ../../library/dbm.rst:27
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should "
"be used to open a given file."
msgstr ""

#: ../../library/dbm.rst:31
#, fuzzy
msgid "Return one of the following values:"
msgstr "此模組定義了以下項目："

#: ../../library/dbm.rst:33
msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr ""

#: ../../library/dbm.rst:34
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr ""

#: ../../library/dbm.rst:35
msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr ""

#: ../../library/dbm.rst:37 ../../library/dbm.rst:397
msgid "*filename* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:61
msgid "Open a database and return the corresponding database object."
msgstr ""

#: ../../library/dbm.rst:0
msgid "Parameters"
msgstr ""

#: ../../library/dbm.rst:63
msgid ""
"The database file to open.  If the database file already exists, the :func:"
"`whichdb` function is used to determine its type and the appropriate module "
"is used; if it does not exist, the first submodule listed above that can be "
"imported is used."
msgstr ""

#: ../../library/dbm.rst:64
msgid "The database file to open."
msgstr ""

#: ../../library/dbm.rst:66
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first submodule listed above that can be imported is used."
msgstr ""

#: ../../library/dbm.rst:71
msgid ""
"* ``'r'`` (default), |flag_r| * ``'w'``, |flag_w| * ``'c'``, |flag_c| * "
"``'n'``, |flag_n|"
msgstr ""

#: ../../library/dbm.rst:72
msgid "``'r'`` (default), |flag_r|"
msgstr ""

#: ../../library/dbm.rst:73
#, fuzzy
msgid "``'w'``, |flag_w|"
msgstr "|flag_w|"

#: ../../library/dbm.rst:74
#, fuzzy
msgid "``'c'``, |flag_c|"
msgstr "|flag_c|"

#: ../../library/dbm.rst:75
#, fuzzy
msgid "``'n'``, |flag_n|"
msgstr "|flag_n|"

#: ../../library/dbm.rst:77
msgid ""
"The Unix file access mode of the file (default: octal ``0o666``), used only "
"when the database has to be created."
msgstr ""

#: ../../library/dbm.rst:81
msgid "*file* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:84
msgid ""
"The object returned by :func:`~dbm.open` supports the same basic "
"functionality as a :class:`dict`; keys and their corresponding values can be "
"stored, retrieved, and deleted, and the :keyword:`in` operator and the :meth:"
"`!keys` method are available, as well as :meth:`!get` and :meth:`!"
"setdefault` methods."
msgstr ""

#: ../../library/dbm.rst:89
msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr ""

#: ../../library/dbm.rst:93
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""

#: ../../library/dbm.rst:96
msgid ""
":meth:`!get` and :meth:`!setdefault` methods are now available for all :mod:"
"`dbm` backends."
msgstr ""

#: ../../library/dbm.rst:100
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`~dbm.open`."
msgstr ""

#: ../../library/dbm.rst:104
msgid ""
"Deleting a key from a read-only database raises a database module specific "
"exception instead of :exc:`KeyError`."
msgstr ""

#: ../../library/dbm.rst:108
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""

#: ../../library/dbm.rst:138
msgid "Module :mod:`shelve`"
msgstr ":mod:`shelve` 模組"

#: ../../library/dbm.rst:139
msgid "Persistence module which stores non-string data."
msgstr ""

#: ../../library/dbm.rst:142
msgid "The individual submodules are described in the following sections."
msgstr ""

#: ../../library/dbm.rst:146
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ""

#: ../../library/dbm.rst:152
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**原始碼：**\\ :source:`Lib/dbm/gnu.py`"

#: ../../library/dbm.rst:156
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""

#: ../../library/dbm.rst:160
msgid ""
":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, except "
"that keys and values are always converted to :class:`bytes` before storing, "
"and the :meth:`!items` and :meth:`!values` methods are not supported."
msgstr ""

#: ../../library/dbm.rst:164 ../../library/dbm.rst:272
msgid "|incompat_note|"
msgstr ""

#: ../../library/dbm.rst:168
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../library/dbm.rst:174
msgid ""
"Open a GDBM database and return a :class:`!gdbm` object.  The *filename* "
"argument is the name of the database file."
msgstr ""

#: ../../library/dbm.rst:177
msgid "The optional *flag* argument can be:"
msgstr ""

#: ../../library/dbm.rst:1 ../../library/dbm.rst:191
msgid "Value"
msgstr ""

#: ../../library/dbm.rst:1 ../../library/dbm.rst:191
msgid "Meaning"
msgstr ""

#: ../../library/dbm.rst:1
msgid "``'r'`` (default)"
msgstr ""

#: ../../library/dbm.rst:1
msgid "|flag_r|"
msgstr "|flag_r|"

#: ../../library/dbm.rst:1
msgid "``'w'``"
msgstr "``'w'``"

#: ../../library/dbm.rst:1
msgid "|flag_w|"
msgstr "|flag_w|"

#: ../../library/dbm.rst:1
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/dbm.rst:1
msgid "|flag_c|"
msgstr "|flag_c|"

#: ../../library/dbm.rst:1
msgid "``'n'``"
msgstr "``'n'``"

#: ../../library/dbm.rst:1
msgid "|flag_n|"
msgstr "|flag_n|"

#: ../../library/dbm.rst:187
msgid ""
"The following additional characters may be appended to the flag to control "
"how the database is opened:"
msgstr ""

#: ../../library/dbm.rst:193
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/dbm.rst:193
msgid ""
"Open the database in fast mode.  Writes to the database will not be "
"synchronized."
msgstr ""

#: ../../library/dbm.rst:196
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/dbm.rst:196
msgid ""
"Synchronized mode. This will cause changes to the database to be immediately "
"written to the file."
msgstr ""

#: ../../library/dbm.rst:200
msgid "``'u'``"
msgstr "``'u'``"

#: ../../library/dbm.rst:200
msgid "Do not lock database."
msgstr "不要鎖住資料庫"

#: ../../library/dbm.rst:203
msgid ""
"Not all flags are valid for all versions of GDBM.  The module constant :"
"const:`open_flags` is a string of supported flag characters.  The exception :"
"exc:`error` is raised if an invalid flag is specified."
msgstr ""

#: ../../library/dbm.rst:207
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666``."
msgstr ""

#: ../../library/dbm.rst:210
msgid ""
"In addition to the dictionary-like methods, :class:`gdbm` objects have the "
"following methods:"
msgstr ""

#: ../../library/dbm.rst:213 ../../library/dbm.rst:315
msgid "Accepts :term:`path-like object` for filename."
msgstr ""

#: ../../library/dbm.rst:218
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""

#: ../../library/dbm.rst:225
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""

#: ../../library/dbm.rst:236
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  :"
"class:`!gdbm` objects will not shorten the length of a database file except "
"by using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""

#: ../../library/dbm.rst:244
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""

#: ../../library/dbm.rst:249
#, fuzzy
msgid "Close the GDBM database."
msgstr "關閉 ``ndbm`` 資料庫。"

#: ../../library/dbm.rst:253
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ""

#: ../../library/dbm.rst:259
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**原始碼：**\\ :source:`Lib/dbm/ndbm.py`"

#: ../../library/dbm.rst:263
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. :class:`!ndbm` objects behave similar to :term:"
"`mappings <mapping>`, except that keys and values are always stored as :"
"class:`bytes`, and the :meth:`!items` and :meth:`!values` methods are not "
"supported."
msgstr ""

#: ../../library/dbm.rst:269
msgid ""
"This module can be used with the \"classic\" NDBM interface or the :abbr:"
"`GDBM (GNU dbm)` compatibility interface."
msgstr ""

#: ../../library/dbm.rst:276
msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""

#: ../../library/dbm.rst:283
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../library/dbm.rst:289
msgid "Name of the NDBM implementation library used."
msgstr ""

#: ../../library/dbm.rst:294
msgid ""
"Open an NDBM database and return an :class:`!ndbm` object. The *filename* "
"argument is the name of the database file (without the :file:`.dir` or :file:"
"`.pag` extensions)."
msgstr ""

#: ../../library/dbm.rst:298
msgid "The optional *flag* argument must be one of these values:"
msgstr ""

#: ../../library/dbm.rst:308
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666`` (and will be "
"modified by the prevailing umask)."
msgstr ""

#: ../../library/dbm.rst:312
msgid ""
"In addition to the dictionary-like methods, :class:`!ndbm` objects provide "
"the following method:"
msgstr ""

#: ../../library/dbm.rst:320
#, fuzzy
msgid "Close the NDBM database."
msgstr "關閉 ``ndbm`` 資料庫。"

#: ../../library/dbm.rst:324
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ":mod:`dbm.dumb` --- 可攜式 DBM 實作"

#: ../../library/dbm.rst:329
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**原始碼：**\\ :source:`Lib/dbm/dumb.py`"

#: ../../library/dbm.rst:335
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""

#: ../../library/dbm.rst:342
msgid ""
"The :mod:`dbm.dumb` module provides a persistent :class:`dict`-like "
"interface which is written entirely in Python. Unlike other :mod:`dbm` "
"backends, such as :mod:`dbm.gnu`, no external library is required. As with "
"other :mod:`dbm` backends, the keys and values are always stored as :class:"
"`bytes`."
msgstr ""

#: ../../library/dbm.rst:349
#, fuzzy
msgid "The :mod:`!dbm.dumb` module defines the following:"
msgstr "此模組定義了以下項目："

#: ../../library/dbm.rst:353
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../library/dbm.rst:359
msgid ""
"Open a :mod:`!dbm.dumb` database. The returned database object behaves "
"similar to a :term:`mapping`, in addition to providing :meth:`~dumbdbm.sync` "
"and :meth:`~dumbdbm.close` methods."
msgstr ""

#: ../../library/dbm.rst:364
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:  - :file:`{filename}.dat` - :file:`{filename}."
"dir`"
msgstr ""

#: ../../library/dbm.rst:365
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:"
msgstr ""

#: ../../library/dbm.rst:368
msgid ":file:`{filename}.dat`"
msgstr ""

#: ../../library/dbm.rst:369
msgid ":file:`{filename}.dir`"
msgstr ""

#: ../../library/dbm.rst:372
msgid ""
".. csv-table::    :header: \"Value\", \"Meaning\"     ``'r'``, |flag_r|    "
"``'w'``, |flag_w|    ``'c'`` (default), |flag_c|    ``'n'``, |flag_n|"
msgstr ""

#: ../../library/dbm.rst:1
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/dbm.rst:1
msgid "``'c'`` (default)"
msgstr ""

#: ../../library/dbm.rst:381
msgid ""
"The Unix file access mode of the file (default: ``0o666``), used only when "
"the database has to be created."
msgstr ""

#: ../../library/dbm.rst:386
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""

#: ../../library/dbm.rst:390
msgid ":func:`open` always creates a new database when *flag* is ``'n'``."
msgstr ""

#: ../../library/dbm.rst:393
msgid ""
"A database opened read-only if *flag* is ``'r'``. A database is not created "
"if it does not exist if *flag* is ``'r'`` or ``'w'``."
msgstr ""

#: ../../library/dbm.rst:400
msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, the following methods are provided:"
msgstr ""

#: ../../library/dbm.rst:406
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""

#: ../../library/dbm.rst:411
#, fuzzy
msgid "Close the database."
msgstr "關閉 ``ndbm`` 資料庫。"

#: ../../library/dbm.rst:331
msgid "databases"
msgstr "databases（資料庫）"

#~ msgid "Close the ``dumbdbm`` database."
#~ msgstr "關閉 ``dumbdbm`` 資料庫。"
