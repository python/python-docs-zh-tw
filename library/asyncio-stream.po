# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-15 00:13+0000\n"
"PO-Revision-Date: 2022-02-20 12:39+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr ""

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr "**原始碼：**\\ :source:`Lib/asyncio/streams.py`"

#: ../../library/asyncio-stream.rst:13
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""

#: ../../library/asyncio-stream.rst:19
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""

#: ../../library/asyncio-stream.rst:42
msgid "See also the `Examples`_ section below."
msgstr "另請參閱下方\\ `Examples`_\\ 。"

#: ../../library/asyncio-stream.rst:46
msgid "Stream Functions"
msgstr ""

#: ../../library/asyncio-stream.rst:47
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""

#: ../../library/asyncio-stream.rst:57
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""

#: ../../library/asyncio-stream.rst:60
msgid ""
"The returned *reader* and *writer* objects are instances of :class:"
"`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../../library/asyncio-stream.rst:63 ../../library/asyncio-stream.rst:99
msgid ""
"*limit* determines the buffer size limit used by the returned :class:"
"`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:67
msgid ""
"The rest of the arguments are passed directly to :meth:`loop."
"create_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:70
msgid "Added the *ssl_handshake_timeout* parameter."
msgstr "新增 *ssl_handshake_timeout* 參數。"

#: ../../library/asyncio-stream.rst:73
msgid "Added *happy_eyeballs_delay* and *interleave* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:76 ../../library/asyncio-stream.rst:109
#: ../../library/asyncio-stream.rst:132 ../../library/asyncio-stream.rst:152
msgid "Removed the *loop* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:88
msgid "Start a socket server."
msgstr ""

#: ../../library/asyncio-stream.rst:90
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""

#: ../../library/asyncio-stream.rst:95
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""

#: ../../library/asyncio-stream.rst:103
msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:106
msgid "Added the *ssl_handshake_timeout* and *start_serving* parameters."
msgstr "新增 *ssl_handshake_timeout* 與 *start_serving* 參數。"

#: ../../library/asyncio-stream.rst:114
msgid "Unix Sockets"
msgstr ""

#: ../../library/asyncio-stream.rst:119
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""

#: ../../library/asyncio-stream.rst:122
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr ""

#: ../../library/asyncio-stream.rst:124
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr "另請參閱 :meth:`loop.create_unix_connection` 文件。"

#: ../../library/asyncio-stream.rst:127 ../../library/asyncio-stream.rst:147
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`適用 <availability>`：Unix。"

#: ../../library/asyncio-stream.rst:128
msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be "
"a :term:`path-like object`"
msgstr ""
"新增 *ssl_handshake_timeout* 參數。\\ *path* 參數現在可以是個\\ :term:`path-"
"like object`"

#: ../../library/asyncio-stream.rst:140
msgid "Start a Unix socket server."
msgstr ""

#: ../../library/asyncio-stream.rst:142
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr ""

#: ../../library/asyncio-stream.rst:144
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr "另請參閱 :meth:`loop.create_unix_server` 文件。"

#: ../../library/asyncio-stream.rst:148
msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path* "
"parameter can now be a :term:`path-like object`."
msgstr ""
"新增 *ssl_handshake_timeout* 與 *start_serving* 參數。\\ *path* 參數現在可以"
"是個 :term:`path-like object`\\ 。"

#: ../../library/asyncio-stream.rst:157
msgid "StreamReader"
msgstr "StreamReader"

#: ../../library/asyncio-stream.rst:161
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream."
msgstr ""

#: ../../library/asyncio-stream.rst:164
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:170
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:173
msgid ""
"If EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:178
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../../library/asyncio-stream.rst:181
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr ""

#: ../../library/asyncio-stream.rst:184
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:189
msgid "Read exactly *n* bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:191
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""

#: ../../library/asyncio-stream.rst:197
msgid "Read data from the stream until *separator* is found."
msgstr ""

#: ../../library/asyncio-stream.rst:199
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""

#: ../../library/asyncio-stream.rst:203
msgid ""
"If the amount of data read exceeds the configured stream limit, a :exc:"
"`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""

#: ../../library/asyncio-stream.rst:207
msgid ""
"If EOF is reached before the complete separator is found, an :exc:"
"`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""

#: ../../library/asyncio-stream.rst:216
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../../library/asyncio-stream.rst:221
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../../library/asyncio-stream.rst:225
msgid ""
"Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""

#: ../../library/asyncio-stream.rst:228
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:234
msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""

#: ../../library/asyncio-stream.rst:238 ../../library/asyncio-stream.rst:250
msgid "The method should be used along with the ``drain()`` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:245
msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""

#: ../../library/asyncio-stream.rst:257
msgid "The method closes the stream and the underlying socket."
msgstr ""

#: ../../library/asyncio-stream.rst:259
msgid "The method should be used along with the ``wait_closed()`` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:266
msgid ""
"Return ``True`` if the underlying transport supports the :meth:`write_eof` "
"method, ``False`` otherwise."
msgstr ""

#: ../../library/asyncio-stream.rst:271
msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr ""

#: ../../library/asyncio-stream.rst:276
msgid "Return the underlying asyncio transport."
msgstr ""

#: ../../library/asyncio-stream.rst:280
msgid ""
"Access optional transport information; see :meth:`BaseTransport."
"get_extra_info` for details."
msgstr ""

#: ../../library/asyncio-stream.rst:285
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""

#: ../../library/asyncio-stream.rst:291
msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and "
"writing can be resumed.  When there is nothing to wait for, the :meth:"
"`drain` returns immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:300
msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""

#: ../../library/asyncio-stream.rst:307
msgid "Wait until the stream is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:309
msgid ""
"Should be called after :meth:`close` to wait until the underlying connection "
"is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:316
msgid "Examples"
msgstr "範例"

#: ../../library/asyncio-stream.rst:321
msgid "TCP echo client using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:323
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:345
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:"
"`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:352
msgid "TCP echo server using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:354
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:387
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop."
"create_server` method."
msgstr ""

#: ../../library/asyncio-stream.rst:392
msgid "Get HTTP headers"
msgstr ""

#: ../../library/asyncio-stream.rst:394
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../../library/asyncio-stream.rst:432
msgid "Usage::"
msgstr ""
"用法：\n"
"\n"
"::"

#: ../../library/asyncio-stream.rst:436
msgid "or with HTTPS::"
msgstr ""

#: ../../library/asyncio-stream.rst:444
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:446
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:480
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:484
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level :meth:`loop."
"add_reader` method to watch a file descriptor."
msgstr ""
