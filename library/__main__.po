# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-03 11:11+0800\n"
"PO-Revision-Date: 2023-12-21 14:49+0800\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.4\n"

#: ../../library/__main__.rst:2
msgid ":mod:`!__main__` --- Top-level code environment"
msgstr ":mod:`!__main__` --- 頂層程式碼環境"

#: ../../library/__main__.rst:10
msgid ""
"In Python, the special name ``__main__`` is used for two important "
"constructs:"
msgstr "在 Python 中，特殊名稱 ``__main__`` 用於兩個重要的建構："

#: ../../library/__main__.rst:12
msgid ""
"the name of the top-level environment of the program, which can be checked "
"using the ``__name__ == '__main__'`` expression; and"
msgstr ""
"程式頂層環境的名稱，可以使用 ``__name__ == '__main__'`` 運算式進行檢查；和"

#: ../../library/__main__.rst:14
msgid "the ``__main__.py`` file in Python packages."
msgstr "在 Python 套件中的 ``__main__.py`` 檔案。"

#: ../../library/__main__.rst:16
msgid ""
"Both of these mechanisms are related to Python modules; how users interact "
"with them and how they interact with each other.  They are explained in "
"detail below.  If you're new to Python modules, see the tutorial section :"
"ref:`tut-modules` for an introduction."
msgstr ""
"這兩種機制都與 Python 模組有關；使用者如何與它們互動以及它們如何彼此互動。下"
"面會詳細解釋它們。如果你不熟悉 Python 模組，請參閱教學章節 :ref:`tut-"
"modules` 的介紹。"

#: ../../library/__main__.rst:25
msgid "``__name__ == '__main__'``"
msgstr "``__name__ == '__main__'``"

#: ../../library/__main__.rst:27
msgid ""
"When a Python module or package is imported, ``__name__`` is set to the "
"module's name.  Usually, this is the name of the Python file itself without "
"the ``.py`` extension::"
msgstr ""
"當引入 Python 模組或套件時，``__name__`` 設定為模組的名稱。通常來說，這是 "
"Python 檔案本身的名稱，且不含 .py 副檔名： ::"

#: ../../library/__main__.rst:31
msgid ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"
msgstr ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"

#: ../../library/__main__.rst:35
msgid ""
"If the file is part of a package, ``__name__`` will also include the parent "
"package's path::"
msgstr ""
"如果檔案是套件的一部分，則 ``__name__`` 也會包含父套件 (parent package) 的路"
"徑： ::"

#: ../../library/__main__.rst:38
msgid ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"
msgstr ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"

#: ../../library/__main__.rst:42
msgid ""
"However, if the module is executed in the top-level code environment, its "
"``__name__`` is set to the string ``'__main__'``."
msgstr ""
"但是，如果模組在頂層程式碼環境中執行，則其 ``__name__`` 將被設定為字串 "
"``'__main__'``。"

#: ../../library/__main__.rst:46
msgid "What is the \"top-level code environment\"?"
msgstr "什麼是「頂層程式碼環境」？"

#: ../../library/__main__.rst:48
msgid ""
"``__main__`` is the name of the environment where top-level code is run. "
"\"Top-level code\" is the first user-specified Python module that starts "
"running. It's \"top-level\" because it imports all other modules that the "
"program needs. Sometimes \"top-level code\" is called an *entry point* to "
"the application."
msgstr ""
"``__main__`` 是執行頂層程式碼的環境名稱。「頂層程式碼」是使用者指定且第一個開"
"始運作的 Python 模組。它是「頂層」的原因是因為它引入程式所需的所有其他模組。"
"有時「頂層程式碼」被稱為應用程式的\\ *入口點*。"

#: ../../library/__main__.rst:53
msgid "The top-level code environment can be:"
msgstr "頂層程式碼環境可以是："

#: ../../library/__main__.rst:55
msgid "the scope of an interactive prompt::"
msgstr "互動式提示字元的作用域： ::"

#: ../../library/__main__.rst:57
msgid ""
">>> __name__\n"
"'__main__'"
msgstr ""
">>> __name__\n"
"'__main__'"

#: ../../library/__main__.rst:60
msgid "the Python module passed to the Python interpreter as a file argument:"
msgstr "將 Python 模組作為檔案引數傳遞給 Python 直譯器："

#: ../../library/__main__.rst:62
msgid ""
"$ python helloworld.py\n"
"Hello, world!"
msgstr ""
"$ python helloworld.py\n"
"Hello, world!"

#: ../../library/__main__.rst:67
msgid ""
"the Python module or package passed to the Python interpreter with the :"
"option:`-m` argument:"
msgstr "使用 :option:`-m` 引數傳遞給 Python 直譯器的 Python 模組或套件："

#: ../../library/__main__.rst:70
msgid ""
"$ python -m tarfile\n"
"usage: tarfile.py [-h] [-v] (...)"
msgstr ""
"$ python -m tarfile\n"
"usage: tarfile.py [-h] [-v] (...)"

#: ../../library/__main__.rst:75
msgid "Python code read by the Python interpreter from standard input:"
msgstr "Python 直譯器從標準輸入讀取 Python 程式碼："

#: ../../library/__main__.rst:77
msgid ""
"$ echo \"import this\" | python\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""
"$ echo \"import this\" | python\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."

#: ../../library/__main__.rst:86
msgid ""
"Python code passed to the Python interpreter with the :option:`-c` argument:"
msgstr "使用 :option:`-c` 引數傳遞給 Python 直譯器的 Python 程式碼："

#: ../../library/__main__.rst:88
msgid ""
"$ python -c \"import this\"\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""
"$ python -c \"import this\"\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."

#: ../../library/__main__.rst:97
msgid ""
"In each of these situations, the top-level module's ``__name__`` is set to "
"``'__main__'``."
msgstr "在這些情況下，頂層模組的 ``__name__`` 都會設定為 ``'__main__'``。"

#: ../../library/__main__.rst:100
msgid ""
"As a result, a module can discover whether or not it is running in the top-"
"level environment by checking its own ``__name__``, which allows a common "
"idiom for conditionally executing code when the module is not initialized "
"from an import statement::"
msgstr ""
"因此，模組可以透過檢查自己的 ``__name__`` 來發現它是否在頂層環境中執行，這允"
"許當模組未從 import 陳述式初始化時，使用常見的慣用語法 (idiom) 來有條件地執行"
"程式碼： ::"

#: ../../library/__main__.rst:105
msgid ""
"if __name__ == '__main__':\n"
"    # Execute when the module is not initialized from an import statement.\n"
"    ..."
msgstr ""

#: ../../library/__main__.rst:111
msgid ""
"For a more detailed look at how ``__name__`` is set in all situations, see "
"the tutorial section :ref:`tut-modules`."
msgstr ""
"若要更詳細地了解如何在所有情況下設定 ``__name__``，請參閱教學章節 :ref:`tut-"
"modules`。"

#: ../../library/__main__.rst:116 ../../library/__main__.rst:239
msgid "Idiomatic Usage"
msgstr "慣用 (Idiomatic) 用法"

#: ../../library/__main__.rst:118
msgid ""
"Some modules contain code that is intended for script use only, like parsing "
"command-line arguments or fetching data from standard input.  If a module "
"like this was imported from a different module, for example to unit test it, "
"the script code would unintentionally execute as well."
msgstr ""
"某些模組包含僅供腳本使用的程式碼，例如剖析命令列引數或從標準輸入取得資料。如"
"果從不同的模組匯入這樣的模組（例如對其進行單元測試 (unit test)），則腳本程式"
"碼也會無意間執行。"

#: ../../library/__main__.rst:123
msgid ""
"This is where using the ``if __name__ == '__main__'`` code block comes in "
"handy. Code within this block won't run unless the module is executed in the "
"top-level environment."
msgstr ""
"這就是使用 ``if __name__ == '__main__'`` 程式碼區塊派上用場的地方。除非該模組"
"在頂層環境中執行，否則此區塊中的程式碼不會執行。"

#: ../../library/__main__.rst:127
msgid ""
"Putting as few statements as possible in the block below ``if __name__ == "
"'__main__'`` can improve code clarity and correctness. Most often, a "
"function named ``main`` encapsulates the program's primary behavior::"
msgstr ""
"在 ``if __name__ == '__main__'`` 下面的區塊中放置盡可能少的陳述式可以提高程式"
"碼的清晰度和正確性。大多數情況下，名為 ``main`` 的函式封裝 (encapsulate) 了程"
"式的主要行為： ::"

#: ../../library/__main__.rst:131
msgid ""
"# echo.py\n"
"\n"
"import shlex\n"
"import sys\n"
"\n"
"def echo(phrase: str) -> None:\n"
"   \"\"\"A dummy wrapper around print.\"\"\"\n"
"   # for demonstration purposes, you can imagine that there is some\n"
"   # valuable and reusable logic inside this function\n"
"   print(phrase)\n"
"\n"
"def main() -> int:\n"
"    \"\"\"Echo the input arguments to standard output\"\"\"\n"
"    phrase = shlex.join(sys.argv)\n"
"    echo(phrase)\n"
"    return 0\n"
"\n"
"if __name__ == '__main__':\n"
"    sys.exit(main())  # next section explains the use of sys.exit"
msgstr ""

#: ../../library/__main__.rst:151
msgid ""
"Note that if the module didn't encapsulate code inside the ``main`` function "
"but instead put it directly within the ``if __name__ == '__main__'`` block, "
"the ``phrase`` variable would be global to the entire module.  This is error-"
"prone as other functions within the module could be unintentionally using "
"the global variable instead of a local name.  A ``main`` function solves "
"this problem."
msgstr ""
"請注意，如果模組沒有將程式碼封裝在 ``main`` 函式中，而是直接將其放在 ``if "
"__name__ == '__main__'`` 區塊中，則 ``phrase`` 變數對於整個模組來說將是全域"
"的。這很容易出錯，因為模組中的其他函式可能會無意中使用此全域變數而不是區域變"
"數。``main`` 函式解決了這個問題。"

#: ../../library/__main__.rst:158
msgid ""
"Using a ``main`` function has the added benefit of the ``echo`` function "
"itself being isolated and importable elsewhere. When ``echo.py`` is "
"imported, the ``echo`` and ``main`` functions will be defined, but neither "
"of them will be called, because ``__name__ != '__main__'``."
msgstr ""
"使用 ``main`` 函式還有一個額外的好處，``echo`` 函式本身是隔離的 (isolated) 並"
"且可以在其他地方引入。當引入 ``echo.py`` 時，``echo`` 和 ``main`` 函式將被定"
"義，但它們都不會被呼叫，因為 ``__name__ != '__main__'``。"

#: ../../library/__main__.rst:165
msgid "Packaging Considerations"
msgstr "打包時須考慮的事情"

#: ../../library/__main__.rst:167
msgid ""
"``main`` functions are often used to create command-line tools by specifying "
"them as entry points for console scripts.  When this is done, `pip <https://"
"pip.pypa.io/>`_ inserts the function call into a template script, where the "
"return value of ``main`` is passed into :func:`sys.exit`. For example::"
msgstr ""
"``main`` 函式通常用於透過將它們指定為控制台腳本的入口點來建立命令列工具。完成"
"後，`pip <https://pip.pypa.io/>`_ 將函式呼叫插入到模板腳本中，其中 ``main`` "
"的回傳值被傳遞到 :func:`sys.exit` 中。例如： ::"

#: ../../library/__main__.rst:173
msgid "sys.exit(main())"
msgstr "sys.exit(main())"

#: ../../library/__main__.rst:175
msgid ""
"Since the call to ``main`` is wrapped in :func:`sys.exit`, the expectation "
"is that your function will return some value acceptable as an input to :func:"
"`sys.exit`; typically, an integer or ``None`` (which is implicitly returned "
"if your function does not have a return statement)."
msgstr ""
"由於對 ``main`` 的呼叫包含在 :func:`sys.exit` 中，因此期望你的函式將傳回一些"
"可接受作為 :func:`sys.exit` 輸入的值；通常來說，會是一個整數或 ``None``\\（如"
"果你的函式沒有 return 陳述式，則相當於回傳此值）。"

#: ../../library/__main__.rst:180
msgid ""
"By proactively following this convention ourselves, our module will have the "
"same behavior when run directly (i.e. ``python echo.py``) as it will have if "
"we later package it as a console script entry-point in a pip-installable "
"package."
msgstr ""
"透過我們自己主動遵循這個慣例，我們的模組在直接執行時（即 ``python echo.py``）"
"的行為，將和我們稍後將其打包為 pip 可安裝套件中的控制台腳本入口點相同。"

#: ../../library/__main__.rst:185
msgid ""
"In particular, be careful about returning strings from your ``main`` "
"function. :func:`sys.exit` will interpret a string argument as a failure "
"message, so your program will have an exit code of ``1``, indicating "
"failure, and the string will be written to :data:`sys.stderr`.  The ``echo."
"py`` example from earlier exemplifies using the ``sys.exit(main())`` "
"convention."
msgstr ""
"特別是，要謹慎處理從 ``main`` 函式回傳字串。:func:`sys.exit` 會將字串引數直譯"
"為失敗訊息，因此你的程式將有一個表示失敗的結束代碼 ``1``，並且該字串將被寫"
"入 :data:`sys.stderr`。前面的 ``echo.py`` 範例使用慣例的 ``sys."
"exit(main())`` 進行示範。"

#: ../../library/__main__.rst:193
msgid ""
"`Python Packaging User Guide <https://packaging.python.org/>`_ contains a "
"collection of tutorials and references on how to distribute and install "
"Python packages with modern tools."
msgstr ""
"`Python 打包使用者指南 <https://packaging.python.org/>`_\\ 包含一系列如何使用"
"現代工具發行和安裝 Python 套件的教學和參考資料。"

#: ../../library/__main__.rst:199
msgid "``__main__.py`` in Python Packages"
msgstr "Python 套件中的 ``__main__.py``"

#: ../../library/__main__.rst:201
msgid ""
"If you are not familiar with Python packages, see section :ref:`tut-"
"packages` of the tutorial.  Most commonly, the ``__main__.py`` file is used "
"to provide a command-line interface for a package. Consider the following "
"hypothetical package, \"bandclass\":"
msgstr ""
"如果你不熟悉 Python 套件，請參閱 :ref:`tut-packages` 的教學章節。最常見的是，"
"``__main__.py`` 檔案用於為套件提供命令列介面。假設下面有虛構的套件 "
"\"bandclass\"："

#: ../../library/__main__.rst:206
msgid ""
"bandclass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"
msgstr ""
"bandclass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"

#: ../../library/__main__.rst:213
msgid ""
"``__main__.py`` will be executed when the package itself is invoked directly "
"from the command line using the :option:`-m` flag. For example:"
msgstr ""
"當使用 :option:`-m` 旗標 (flag) 直接從命令列呼叫套件本身時，將執行 "
"``__main__.py``。例如："

#: ../../library/__main__.rst:216
msgid "$ python -m bandclass"
msgstr "$ python -m bandclass"

#: ../../library/__main__.rst:220
msgid ""
"This command will cause ``__main__.py`` to run. How you utilize this "
"mechanism will depend on the nature of the package you are writing, but in "
"this hypothetical case, it might make sense to allow the teacher to search "
"for students::"
msgstr ""
"該命令將導致 ``__main__.py`` 執行。如何利用此機制將取決於你正在編寫的套件的性"
"質，但在這種虛構的情況下，允許教師搜尋學生可能是有意義的： ::"

#: ../../library/__main__.rst:225
msgid ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"
msgstr ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"

#: ../../library/__main__.rst:233
msgid ""
"Note that ``from .student import search_students`` is an example of a "
"relative import.  This import style can be used when referencing modules "
"within a package.  For more details, see :ref:`intra-package-references` in "
"the :ref:`tut-modules` section of the tutorial."
msgstr ""
"請注意，``from .student import search_students`` 是相對引入的範例。在引用套件"
"內的模組時，可以使用此引入樣式。有關更多詳細資訊，請參閱 :ref:`tut-modules` "
"教學章節中的 :ref:`intra-package-references`。"

#: ../../library/__main__.rst:241
msgid ""
"The content of ``__main__.py`` typically isn't fenced with an ``if __name__ "
"== '__main__'`` block.  Instead, those files are kept short and import "
"functions to execute from other modules.  Those other modules can then be "
"easily unit-tested and are properly reusable."
msgstr ""
"``__main__.py`` 的內容通常不會被 ``if __name__ == '__main__'`` 區塊包圍。相反"
"的，這些檔案保持簡短並引入其他模組的函式來執行。那些其他模組就可以輕鬆地進行"
"單元測試並且可以正確地重複使用。"

#: ../../library/__main__.rst:246
msgid ""
"If used, an ``if __name__ == '__main__'`` block will still work as expected "
"for a ``__main__.py`` file within a package, because its ``__name__`` "
"attribute will include the package's path if imported::"
msgstr ""
"如果在套件裡面的 ``__main__.py`` 檔案使用 ``if __name__ == '__main__'`` 區"
"塊，它依然會如預期般地運作。因為當引入套件，其 ``__name__`` 屬性將會包含套件"
"的路徑： ::"

#: ../../library/__main__.rst:250
msgid ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"
msgstr ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"

#: ../../library/__main__.rst:254
msgid ""
"This won't work for ``__main__.py`` files in the root directory of a ``."
"zip`` file though.  Hence, for consistency, a minimal ``__main__.py`` "
"without a ``__name__`` check is preferred."
msgstr ""
"但這對於 ``.zip`` 檔案根目錄中的 ``__main__.py`` 檔案不起作用。因此，為了保持"
"一致性，最小的、沒有 ``__name__`` 檢查的 ``__main__.py`` 會是首選。"

#: ../../library/__main__.rst:260
msgid ""
"See :mod:`venv` for an example of a package with a minimal ``__main__.py`` "
"in the standard library. It doesn't contain a ``if __name__ == '__main__'`` "
"block. You can invoke it with ``python -m venv [directory]``."
msgstr ""
"請參閱 :mod:`venv` 作為標準函式庫中具有最小 ``__main__.py`` 的套件為範例。它"
"不包含 ``if __name__ == '__main__'`` 區塊。你可以使用 ``python -m venv "
"[directory]`` 來呼叫它。"

#: ../../library/__main__.rst:264
msgid ""
"See :mod:`runpy` for more details on the :option:`-m` flag to the "
"interpreter executable."
msgstr ""
"請參閱 :mod:`runpy` 取得有關直譯器可執行檔的 :option:`-m` 旗標的更多詳細資"
"訊。"

#: ../../library/__main__.rst:267
msgid ""
"See :mod:`zipapp` for how to run applications packaged as *.zip* files. In "
"this case Python looks for a ``__main__.py`` file in the root directory of "
"the archive."
msgstr ""
"請參閱 :mod:`zipapp` 了解如何執行打包成 *.zip* 檔案的應用程式。在這種情況下，"
"Python 會在封存檔案的根目錄中尋找 ``__main__.py`` 檔案。"

#: ../../library/__main__.rst:274
msgid "``import __main__``"
msgstr "``import __main__``"

#: ../../library/__main__.rst:276
msgid ""
"Regardless of which module a Python program was started with, other modules "
"running within that same program can import the top-level environment's "
"scope (:term:`namespace`) by importing the ``__main__`` module.  This "
"doesn't import a ``__main__.py`` file but rather whichever module that "
"received the special name ``'__main__'``."
msgstr ""
"無論 Python 程式是從哪個模組啟動的，在同一程式中執行的其他模組都可以透過匯入 "
"``__main__`` 模組來引入頂層環境的作用域 (:term:`namespace`)。這不會引入 "
"``__main__.py`` 檔案，而是引入接收特殊名稱 ``'__main__'`` 的模組。"

#: ../../library/__main__.rst:282
msgid "Here is an example module that consumes the ``__main__`` namespace::"
msgstr "這是一個使用 ``__main__`` 命名空間的範例模組："

#: ../../library/__main__.rst:284
msgid ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    if '__file__' in dir(__main__):\n"
"        print(__main__.my_name, \"found in file\", __main__.__file__)\n"
"    else:\n"
"        print(__main__.my_name)"
msgstr ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    if '__file__' in dir(__main__):\n"
"        print(__main__.my_name, \"found in file\", __main__.__file__)\n"
"    else:\n"
"        print(__main__.my_name)"

#: ../../library/__main__.rst:300
msgid "Example usage of this module could be as follows::"
msgstr "該模組的範例用法如下： ::"

#: ../../library/__main__.rst:302
msgid ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"
msgstr ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"

#: ../../library/__main__.rst:319
msgid "Now, if we started our program, the result would look like this:"
msgstr "現在，如果我們啟動程式，結果將如下所示："

#: ../../library/__main__.rst:321
msgid ""
"$ python start.py\n"
"Define the variable `my_name`!"
msgstr ""
"$ python start.py\n"
"Define the variable `my_name`!"

#: ../../library/__main__.rst:326
msgid ""
"The exit code of the program would be 1, indicating an error. Uncommenting "
"the line with ``my_name = \"Dinsdale\"`` fixes the program and now it exits "
"with status code 0, indicating success:"
msgstr ""
"程式的結束代碼將為 1，表示出現錯誤。取消註解 ``my_name = \"Dinsdale\"`` 而修"
"復程式後，現在它以狀態碼 0 結束，表示成功："

#: ../../library/__main__.rst:330
msgid ""
"$ python start.py\n"
"Dinsdale found in file /path/to/start.py"
msgstr ""
"$ python start.py\n"
"Dinsdale found in file /path/to/start.py"

#: ../../library/__main__.rst:335
msgid ""
"Note that importing ``__main__`` doesn't cause any issues with "
"unintentionally running top-level code meant for script use which is put in "
"the ``if __name__ == \"__main__\"`` block of the ``start`` module. Why does "
"this work?"
msgstr ""
"請注意，引入 ``__main__`` 並不會因為不經意地執行放在 ``start`` 模組中 ``if "
"__name__ == \"__main__\"`` 區塊的頂層程式碼（本來是給腳本使用的）而造成任何問"
"題。為什麼這樣做會如預期運作？"

#: ../../library/__main__.rst:339
msgid ""
"Python inserts an empty ``__main__`` module in :data:`sys.modules` at "
"interpreter startup, and populates it by running top-level code. In our "
"example this is the ``start`` module which runs line by line and imports "
"``namely``. In turn, ``namely`` imports ``__main__`` (which is really "
"``start``). That's an import cycle! Fortunately, since the partially "
"populated ``__main__`` module is present in :data:`sys.modules`, Python "
"passes that to ``namely``. See :ref:`Special considerations for __main__ "
"<import-dunder-main>` in the import system's reference for details on how "
"this works."
msgstr ""
"當 Python 直譯器啟動時，會在 :data:`sys.modules` 中插入一個空的 ``__main__`` "
"模組，並透過執行頂層程式碼來填充它。在我們的範例中，這是 ``start`` 模組，它將"
"逐行執行並引入 ``namely``。接著，``namely`` 引入 ``__main__``\\ （其實是 "
"``start``）。這就是一個引入循環！幸運的是，由於部分填充的 ``__main__`` 模組存"
"在於 :data:`sys.modules` 中，Python 將其傳遞給 ``namely``。請參閱引入系統參考"
"文件中的\\ :ref:`關於 __main__ 的特別考量 <import-dunder-main>`\\ 了解其工作"
"原理的詳細資訊。"

#: ../../library/__main__.rst:348
msgid ""
"The Python REPL is another example of a \"top-level environment\", so "
"anything defined in the REPL becomes part of the ``__main__`` scope::"
msgstr ""
"Python REPL 是「頂層環境」的另一個範例，因此 REPL 中定義的任何內容都成為 作域"
"的一部分： ::"

#: ../../library/__main__.rst:351
msgid ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"False\n"
">>> namely.print_user_name()\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Define the variable `my_name`!\n"
">>> my_name = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"True\n"
">>> namely.print_user_name()\n"
"Jabberwocky"
msgstr ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"False\n"
">>> namely.print_user_name()\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Define the variable `my_name`!\n"
">>> my_name = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"True\n"
">>> namely.print_user_name()\n"
"Jabberwocky"

#: ../../library/__main__.rst:364
msgid ""
"Note that in this case the ``__main__`` scope doesn't contain a ``__file__`` "
"attribute as it's interactive."
msgstr ""
"請注意，在這種情況下， ``__main__`` 作用域不包含 ``__file__`` 屬性，因為它是"
"互動式的。"

#: ../../library/__main__.rst:367
msgid ""
"The ``__main__`` scope is used in the implementation of :mod:`pdb` and :mod:"
"`rlcompleter`."
msgstr "``__main__`` 作用域用於 :mod:`pdb` 和 :mod:`rlcompleter` 的實作。"
