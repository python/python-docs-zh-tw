# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-07 00:17+0000\n"
"PO-Revision-Date: 2018-05-23 16:10+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sqlite3.rst:2
msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ""

#: ../../library/sqlite3.rst:9
msgid "**Source code:** :source:`Lib/sqlite3/`"
msgstr "**原始碼：**\\ :source:`Lib/sqlite3/`"

#: ../../library/sqlite3.rst:13
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""

#: ../../library/sqlite3.rst:20
msgid ""
"The sqlite3 module was written by Gerhard Häring.  It provides an SQL "
"interface compliant with the DB-API 2.0 specification described by :pep:"
"`249`, and requires SQLite 3.7.15 or newer."
msgstr ""

#: ../../library/sqlite3.rst:24
msgid ""
"To use the module, start by creating a :class:`Connection` object that "
"represents the database.  Here the data will be stored in the :file:`example."
"db` file::"
msgstr ""

#: ../../library/sqlite3.rst:31
msgid ""
"The special path name ``:memory:`` can be provided to create a temporary "
"database in RAM."
msgstr ""

#: ../../library/sqlite3.rst:34
msgid ""
"Once a :class:`Connection` has been established, create a :class:`Cursor` "
"object and call its :meth:`~Cursor.execute` method to perform SQL commands::"
msgstr ""

#: ../../library/sqlite3.rst:53
msgid ""
"The saved data is persistent: it can be reloaded in a subsequent session "
"even after restarting the Python interpreter::"
msgstr ""

#: ../../library/sqlite3.rst:60
msgid ""
"To retrieve data after executing a SELECT statement, either treat the cursor "
"as an :term:`iterator`, call the cursor's :meth:`~Cursor.fetchone` method to "
"retrieve a single matching row, or call :meth:`~Cursor.fetchall` to get a "
"list of the matching rows."
msgstr ""

#: ../../library/sqlite3.rst:65
msgid "This example uses the iterator form::"
msgstr ""

#: ../../library/sqlite3.rst:78
msgid ""
"SQL operations usually need to use values from Python variables. However, "
"beware of using Python's string operations to assemble queries, as they are "
"vulnerable to SQL injection attacks (see the `xkcd webcomic <https://xkcd."
"com/327/>`_ for a humorous example of what can go wrong)::"
msgstr ""

#: ../../library/sqlite3.rst:87
msgid ""
"Instead, use the DB-API's parameter substitution. To insert a variable into "
"a query string, use a placeholder in the string, and substitute the actual "
"values into the query by providing them as a :class:`tuple` of values to the "
"second argument of the cursor's :meth:`~Cursor.execute` method. An SQL "
"statement may use one of two kinds of placeholders: question marks (qmark "
"style) or named placeholders (named style). For the qmark style, "
"``parameters`` must be a :term:`sequence <sequence>`. For the named style, "
"it can be either a :term:`sequence <sequence>` or :class:`dict` instance. "
"The length of the :term:`sequence <sequence>` must match the number of "
"placeholders, or a :exc:`ProgrammingError` is raised. If a :class:`dict` is "
"given, it must contain keys for all named parameters. Any extra items are "
"ignored. Here's an example of both styles:"
msgstr ""

#: ../../library/sqlite3.rst:107
msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

#: ../../library/sqlite3.rst:106
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""

#: ../../library/sqlite3.rst:110
msgid "https://www.w3schools.com/sql/"
msgstr "https://www.w3schools.com/sql/"

#: ../../library/sqlite3.rst:110
msgid "Tutorial, reference and examples for learning SQL syntax."
msgstr ""

#: ../../library/sqlite3.rst:112
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ""

#: ../../library/sqlite3.rst:113
msgid "PEP written by Marc-André Lemburg."
msgstr "PEP 由 Marc-André Lemburg 撰寫。"

#: ../../library/sqlite3.rst:119
msgid "Module functions and constants"
msgstr ""

#: ../../library/sqlite3.rst:124
msgid ""
"String constant stating the supported DB-API level. Required by the DB-API. "
"Hard-coded to ``\"2.0\"``."
msgstr ""

#: ../../library/sqlite3.rst:129
msgid ""
"String constant stating the type of parameter marker formatting expected by "
"the :mod:`sqlite3` module. Required by the DB-API. Hard-coded to ``\"qmark"
"\"``."
msgstr ""

#: ../../library/sqlite3.rst:135
msgid ""
"The :mod:`sqlite3` module supports both ``qmark`` and ``numeric`` DB-API "
"parameter styles, because that is what the underlying SQLite library "
"supports. However, the DB-API does not allow multiple values for the "
"``paramstyle`` attribute."
msgstr ""

#: ../../library/sqlite3.rst:142
msgid ""
"The version number of this module, as a string. This is not the version of "
"the SQLite library."
msgstr ""

#: ../../library/sqlite3.rst:148
msgid ""
"The version number of this module, as a tuple of integers. This is not the "
"version of the SQLite library."
msgstr ""

#: ../../library/sqlite3.rst:154
msgid "The version number of the run-time SQLite library, as a string."
msgstr ""

#: ../../library/sqlite3.rst:159
msgid ""
"The version number of the run-time SQLite library, as a tuple of integers."
msgstr ""

#: ../../library/sqlite3.rst:164
msgid ""
"Integer constant required by the DB-API, stating the level of thread safety "
"the :mod:`sqlite3` module supports. Currently hard-coded to ``1``, meaning *"
"\"Threads may share the module, but not connections.\"* However, this may "
"not always be true. You can check the underlying SQLite library's compile-"
"time threaded mode using the following query::"
msgstr ""

#: ../../library/sqlite3.rst:177
msgid ""
"Note that the `SQLITE_THREADSAFE levels <https://sqlite.org/compile."
"html#threadsafe>`_ do not match the DB-API 2.0 ``threadsafety`` levels."
msgstr ""

#: ../../library/sqlite3.rst:184
msgid ""
"Pass this flag value to the *detect_types* parameter of :func:`connect` to "
"look up a converter function using the declared types for each column. The "
"types are declared when the database table is created. ``sqlite3`` will look "
"up a converter function using the first word of the declared type as the "
"converter dictionary key. For example:"
msgstr ""

#: ../../library/sqlite3.rst:201
msgid ""
"This flag may be combined with :const:`PARSE_COLNAMES` using the ``|`` "
"(bitwise or) operator."
msgstr ""

#: ../../library/sqlite3.rst:207
msgid ""
"Pass this flag value to the *detect_types* parameter of :func:`connect` to "
"look up a converter function by using the type name, parsed from the query "
"column name, as the converter dictionary key. The type name must be wrapped "
"in square brackets (``[]``)."
msgstr ""

#: ../../library/sqlite3.rst:217
msgid ""
"This flag may be combined with :const:`PARSE_DECLTYPES` using the ``|`` "
"(bitwise or) operator."
msgstr ""

#: ../../library/sqlite3.rst:223
msgid ""
"Opens a connection to the SQLite database file *database*. By default "
"returns a :class:`Connection` object, unless a custom *factory* is given."
msgstr ""

#: ../../library/sqlite3.rst:226
msgid ""
"*database* is a :term:`path-like object` giving the pathname (absolute or "
"relative to the current  working directory) of the database file to be "
"opened. You can use ``\":memory:\"`` to open a database connection to a "
"database that resides in RAM instead of on disk."
msgstr ""

#: ../../library/sqlite3.rst:231
msgid ""
"When a database is accessed by multiple connections, and one of the "
"processes modifies the database, the SQLite database is locked until that "
"transaction is committed. The *timeout* parameter specifies how long the "
"connection should wait for the lock to go away until raising an exception. "
"The default for the timeout parameter is 5.0 (five seconds)."
msgstr ""

#: ../../library/sqlite3.rst:237
msgid ""
"For the *isolation_level* parameter, please see the :attr:`~Connection."
"isolation_level` property of :class:`Connection` objects."
msgstr ""

#: ../../library/sqlite3.rst:240
msgid ""
"SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL. "
"If you want to use other types you must add support for them yourself. The "
"*detect_types* parameter and using custom **converters** registered with the "
"module-level :func:`register_converter` function allow you to easily do that."
msgstr ""

#: ../../library/sqlite3.rst:245
msgid ""
"*detect_types* defaults to 0 (type detection disabled). Set it to any "
"combination (using ``|``, bitwise or) of :const:`PARSE_DECLTYPES` and :const:"
"`PARSE_COLNAMES` to enable type detection. Column names takes precedence "
"over declared types if both flags are set. Types cannot be detected for "
"generated fields (for example ``max(data)``), even when the *detect_types* "
"parameter is set. In such cases, the returned type is :class:`str`."
msgstr ""

#: ../../library/sqlite3.rst:254
msgid ""
"By default, *check_same_thread* is :const:`True` and only the creating "
"thread may use the connection. If set :const:`False`, the returned "
"connection may be shared across multiple threads. When using multiple "
"threads with the same connection writing operations should be serialized by "
"the user to avoid data corruption."
msgstr ""

#: ../../library/sqlite3.rst:259
msgid ""
"By default, the :mod:`sqlite3` module uses its :class:`Connection` class for "
"the connect call.  You can, however, subclass the :class:`Connection` class "
"and make :func:`connect` use your class instead by providing your class for "
"the *factory* parameter."
msgstr ""

#: ../../library/sqlite3.rst:264
msgid "Consult the section :ref:`sqlite3-types` of this manual for details."
msgstr ""

#: ../../library/sqlite3.rst:266
msgid ""
"The :mod:`sqlite3` module internally uses a statement cache to avoid SQL "
"parsing overhead. If you want to explicitly set the number of statements "
"that are cached for the connection, you can set the *cached_statements* "
"parameter. The currently implemented default is to cache 100 statements."
msgstr ""

#: ../../library/sqlite3.rst:271
msgid ""
"If *uri* is :const:`True`, *database* is interpreted as a :abbr:`URI "
"(Uniform Resource Identifier)` with a file path and an optional query "
"string.  The scheme part *must* be ``\"file:\"``.  The path can be a "
"relative or absolute file path.  The query string allows us to pass "
"parameters to SQLite. Some useful URI tricks include::"
msgstr ""

#: ../../library/sqlite3.rst:290
msgid ""
"More information about this feature, including a list of recognized "
"parameters, can be found in the `SQLite URI documentation <https://www."
"sqlite.org/uri.html>`_."
msgstr ""

#: ../../library/sqlite3.rst:294
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect`` with argument "
"``database``."
msgstr ""

#: ../../library/sqlite3.rst:295
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect/handle`` with "
"argument ``connection_handle``."
msgstr ""

#: ../../library/sqlite3.rst:297
msgid "Added the *uri* parameter."
msgstr "新增 *uri* 參數。"

#: ../../library/sqlite3.rst:300
msgid ""
"*database* can now also be a :term:`path-like object`, not only a string."
msgstr ""

#: ../../library/sqlite3.rst:303
msgid "Added the ``sqlite3.connect/handle`` auditing event."
msgstr ""

#: ../../library/sqlite3.rst:309
msgid ""
"Register the *converter* callable to convert SQLite objects of type "
"*typename* into a Python object of a specific type. The converter is invoked "
"for all SQLite values of type *typename*; it is passed a :class:`bytes` "
"object and should return an object of the desired Python type. Consult the "
"parameter *detect_types* of :func:`connect` for information regarding how "
"type detection works."
msgstr ""

#: ../../library/sqlite3.rst:317
msgid ""
"Note: *typename* and the name of the type in your query are matched case-"
"insensitively."
msgstr ""

#: ../../library/sqlite3.rst:323
msgid ""
"Register an *adapter* callable to adapt the Python type *type* into an "
"SQLite type. The adapter is called with a Python object of type *type* as "
"its sole argument, and must return a value of a :ref:`type that SQLite "
"natively understands<sqlite3-types>`."
msgstr ""

#: ../../library/sqlite3.rst:332
msgid ""
"Returns :const:`True` if the string *statement* contains one or more "
"complete SQL statements terminated by semicolons. It does not verify that "
"the SQL is syntactically correct, only that there are no unclosed string "
"literals and the statement is terminated by a semicolon."
msgstr ""

#: ../../library/sqlite3.rst:337
msgid ""
"This can be used to build a shell for SQLite, as in the following example:"
msgstr ""

#: ../../library/sqlite3.rst:345
msgid ""
"By default you will not get any tracebacks in user-defined functions, "
"aggregates, converters, authorizer callbacks etc. If you want to debug them, "
"you can call this function with *flag* set to ``True``. Afterwards, you will "
"get tracebacks from callbacks on ``sys.stderr``. Use :const:`False` to "
"disable the feature again."
msgstr ""

#: ../../library/sqlite3.rst:355
msgid "Connection Objects"
msgstr ""

#: ../../library/sqlite3.rst:359
msgid "An SQLite database connection has the following attributes and methods:"
msgstr ""

#: ../../library/sqlite3.rst:363
msgid ""
"This attribute controls the :ref:`transaction handling <sqlite3-controlling-"
"transactions>` performed by ``sqlite3``. If set to :const:`None`, "
"transactions are never implicitly opened. If set to one of ``\"DEFERRED\"``, "
"``\"IMMEDIATE\"``, or ``\"EXCLUSIVE\"``, corresponding to the underlying "
"`SQLite transaction behaviour`_, implicit :ref:`transaction management "
"<sqlite3-controlling-transactions>` is performed."
msgstr ""

#: ../../library/sqlite3.rst:371
msgid ""
"If not overridden by the *isolation_level* parameter of :func:`connect`, the "
"default is ``\"\"``, which is an alias for ``\"DEFERRED\"``."
msgstr ""

#: ../../library/sqlite3.rst:376
msgid ""
"This read-only attribute corresponds to the low-level SQLite `autocommit "
"mode`_."
msgstr ""

#: ../../library/sqlite3.rst:379
msgid ""
":const:`True` if a transaction is active (there are uncommitted changes), :"
"const:`False` otherwise."
msgstr ""

#: ../../library/sqlite3.rst:386
msgid ""
"The cursor method accepts a single optional parameter *factory*. If "
"supplied, this must be a callable returning an instance of :class:`Cursor` "
"or its subclasses."
msgstr ""

#: ../../library/sqlite3.rst:392
msgid ""
"Commit any pending transaction to the database. If there is no open "
"transaction, this method is a no-op."
msgstr ""

#: ../../library/sqlite3.rst:397
msgid ""
"Roll back to the start of any pending transaction. If there is no open "
"transaction, this method is a no-op."
msgstr ""

#: ../../library/sqlite3.rst:402
msgid ""
"Close the database connection. Any pending transaction is not committed "
"implicitly; make sure to :meth:`commit` before closing to avoid losing "
"pending changes."
msgstr ""

#: ../../library/sqlite3.rst:409
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.execute` on it "
"with the given *sql* and *parameters*. Return the new cursor object."
msgstr ""

#: ../../library/sqlite3.rst:415
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.executemany` on "
"it with the given *sql* and *parameters*. Return the new cursor object."
msgstr ""

#: ../../library/sqlite3.rst:421
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.executescript` "
"on it with the given *sql_script*. Return the new cursor object."
msgstr ""

#: ../../library/sqlite3.rst:427
msgid ""
"Creates a user-defined function that you can later use from within SQL "
"statements under the function name *name*. *narg* is the number of "
"parameters the function accepts (if *narg* is -1, the function may take any "
"number of arguments), and *func* is a Python callable that is called as the "
"SQL function. If *deterministic* is true, the created function is marked as "
"`deterministic <https://sqlite.org/deterministic.html>`_, which allows "
"SQLite to perform additional optimizations. This flag is supported by SQLite "
"3.8.3 or higher, :exc:`NotSupportedError` will be raised if used with older "
"versions."
msgstr ""

#: ../../library/sqlite3.rst:437
msgid ""
"The function can return any of the types supported by SQLite: bytes, str, "
"int, float and ``None``."
msgstr ""

#: ../../library/sqlite3.rst:440
msgid "The *deterministic* parameter was added."
msgstr "新增 *deterministic* 參數。"

#: ../../library/sqlite3.rst:443 ../../library/sqlite3.rst:460
#: ../../library/sqlite3.rst:589 ../../library/sqlite3.rst:747
msgid "Example:"
msgstr "範例："

#: ../../library/sqlite3.rst:450
msgid "Creates a user-defined aggregate function."
msgstr ""

#: ../../library/sqlite3.rst:452
msgid ""
"The aggregate class must implement a ``step`` method, which accepts the "
"number of parameters *n_arg* (if *n_arg* is -1, the function may take any "
"number of arguments), and a ``finalize`` method which will return the final "
"result of the aggregate."
msgstr ""

#: ../../library/sqlite3.rst:457
msgid ""
"The ``finalize`` method can return any of the types supported by SQLite: "
"bytes, str, int, float and ``None``."
msgstr ""

#: ../../library/sqlite3.rst:467
msgid ""
"Create a collation named *name* using the collating function *callable*. "
"*callable* is passed two :class:`string <str>` arguments, and it should "
"return an :class:`integer <int>`:"
msgstr ""

#: ../../library/sqlite3.rst:471
msgid "``1`` if the first is ordered higher than the second"
msgstr ""

#: ../../library/sqlite3.rst:472
msgid "``-1`` if the first is ordered lower than the second"
msgstr ""

#: ../../library/sqlite3.rst:473
msgid "``0`` if they are ordered equal"
msgstr ""

#: ../../library/sqlite3.rst:475
msgid "The following example shows a reverse sorting collation:"
msgstr ""

#: ../../library/sqlite3.rst:479
msgid "Remove a collation function by setting *callable* to :const:`None`."
msgstr ""

#: ../../library/sqlite3.rst:484
msgid ""
"You can call this method from a different thread to abort any queries that "
"might be executing on the connection. The query will then abort and the "
"caller will get an exception."
msgstr ""

#: ../../library/sqlite3.rst:491
msgid ""
"This routine registers a callback. The callback is invoked for each attempt "
"to access a column of a table in the database. The callback should return :"
"const:`SQLITE_OK` if access is allowed, :const:`SQLITE_DENY` if the entire "
"SQL statement should be aborted with an error and :const:`SQLITE_IGNORE` if "
"the column should be treated as a NULL value. These constants are available "
"in the :mod:`sqlite3` module."
msgstr ""

#: ../../library/sqlite3.rst:498
msgid ""
"The first argument to the callback signifies what kind of operation is to be "
"authorized. The second and third argument will be arguments or :const:`None` "
"depending on the first argument. The 4th argument is the name of the "
"database (\"main\", \"temp\", etc.) if applicable. The 5th argument is the "
"name of the inner-most trigger or view that is responsible for the access "
"attempt or :const:`None` if this access attempt is directly from input SQL "
"code."
msgstr ""

#: ../../library/sqlite3.rst:505
msgid ""
"Please consult the SQLite documentation about the possible values for the "
"first argument and the meaning of the second and third argument depending on "
"the first one. All necessary constants are available in the :mod:`sqlite3` "
"module."
msgstr ""

#: ../../library/sqlite3.rst:512
msgid ""
"This routine registers a callback. The callback is invoked for every *n* "
"instructions of the SQLite virtual machine. This is useful if you want to "
"get called from SQLite during long-running operations, for example to update "
"a GUI."
msgstr ""

#: ../../library/sqlite3.rst:517
msgid ""
"If you want to clear any previously installed progress handler, call the "
"method with :const:`None` for *progress_handler*."
msgstr ""

#: ../../library/sqlite3.rst:520
msgid ""
"Returning a non-zero value from the handler function will terminate the "
"currently executing query and cause it to raise an :exc:`OperationalError` "
"exception."
msgstr ""

#: ../../library/sqlite3.rst:527
msgid ""
"Registers *trace_callback* to be called for each SQL statement that is "
"actually executed by the SQLite backend."
msgstr ""

#: ../../library/sqlite3.rst:530
msgid ""
"The only argument passed to the callback is the statement (as :class:`str`) "
"that is being executed. The return value of the callback is ignored. Note "
"that the backend does not only run statements passed to the :meth:`Cursor."
"execute` methods.  Other sources include the :ref:`transaction management "
"<sqlite3-controlling-transactions>` of the sqlite3 module and the execution "
"of triggers defined in the current database."
msgstr ""

#: ../../library/sqlite3.rst:538
msgid ""
"Passing :const:`None` as *trace_callback* will disable the trace callback."
msgstr ""

#: ../../library/sqlite3.rst:541
msgid ""
"Exceptions raised in the trace callback are not propagated. As a development "
"and debugging aid, use :meth:`~sqlite3.enable_callback_tracebacks` to enable "
"printing tracebacks from exceptions raised in the trace callback."
msgstr ""

#: ../../library/sqlite3.rst:551
msgid ""
"This routine allows/disallows the SQLite engine to load SQLite extensions "
"from shared libraries.  SQLite extensions can define new functions, "
"aggregates or whole new virtual table implementations.  One well-known "
"extension is the fulltext-search extension distributed with SQLite."
msgstr ""

#: ../../library/sqlite3.rst:556 ../../library/sqlite3.rst:573
msgid "Loadable extensions are disabled by default. See [#f1]_."
msgstr ""

#: ../../library/sqlite3.rst:558
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.enable_load_extension`` "
"with arguments ``connection``, ``enabled``."
msgstr ""

#: ../../library/sqlite3.rst:562
msgid "Added the ``sqlite3.enable_load_extension`` auditing event."
msgstr ""

#: ../../library/sqlite3.rst:569
msgid ""
"This routine loads an SQLite extension from a shared library.  You have to "
"enable extension loading with :meth:`enable_load_extension` before you can "
"use this routine."
msgstr ""

#: ../../library/sqlite3.rst:575
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.load_extension`` with "
"arguments ``connection``, ``path``."
msgstr ""

#: ../../library/sqlite3.rst:579
msgid "Added the ``sqlite3.load_extension`` auditing event."
msgstr ""

#: ../../library/sqlite3.rst:584
msgid ""
"You can change this attribute to a callable that accepts the cursor and the "
"original row as a tuple and will return the real result row.  This way, you "
"can implement more advanced ways of returning results, such  as returning an "
"object that can also access columns by name."
msgstr ""

#: ../../library/sqlite3.rst:593
msgid ""
"If returning a tuple doesn't suffice and you want name-based access to "
"columns, you should consider setting :attr:`row_factory` to the highly "
"optimized :class:`sqlite3.Row` type. :class:`Row` provides both index-based "
"and case-insensitive name-based access to columns with almost no memory "
"overhead. It will probably be better than your own custom dictionary-based "
"approach or even a db_row based solution."
msgstr ""

#: ../../library/sqlite3.rst:605
msgid ""
"Using this attribute you can control what objects are returned for the "
"``TEXT`` data type. By default, this attribute is set to :class:`str` and "
"the :mod:`sqlite3` module will return :class:`str` objects for ``TEXT``. If "
"you want to return :class:`bytes` instead, you can set it to :class:`bytes`."
msgstr ""

#: ../../library/sqlite3.rst:610
msgid ""
"You can also set it to any other callable that accepts a single bytestring "
"parameter and returns the resulting object."
msgstr ""

#: ../../library/sqlite3.rst:613
msgid "See the following example code for illustration:"
msgstr ""

#: ../../library/sqlite3.rst:620
msgid ""
"Returns the total number of database rows that have been modified, inserted, "
"or deleted since the database connection was opened."
msgstr ""

#: ../../library/sqlite3.rst:626
msgid ""
"Returns an iterator to dump the database in an SQL text format.  Useful when "
"saving an in-memory database for later restoration.  This function provides "
"the same capabilities as the :kbd:`.dump` command in the :program:`sqlite3` "
"shell."
msgstr ""

#: ../../library/sqlite3.rst:631
msgid "Example::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../library/sqlite3.rst:645
msgid ""
"This method makes a backup of an SQLite database even while it's being "
"accessed by other clients, or concurrently by the same connection.  The copy "
"will be written into the mandatory argument *target*, that must be another :"
"class:`Connection` instance."
msgstr ""

#: ../../library/sqlite3.rst:650
msgid ""
"By default, or when *pages* is either ``0`` or a negative integer, the "
"entire database is copied in a single step; otherwise the method performs a "
"loop copying up to *pages* pages at a time."
msgstr ""

#: ../../library/sqlite3.rst:654
msgid ""
"If *progress* is specified, it must either be ``None`` or a callable object "
"that will be executed at each iteration with three integer arguments, "
"respectively the *status* of the last iteration, the *remaining* number of "
"pages still to be copied and the *total* number of pages."
msgstr ""

#: ../../library/sqlite3.rst:659
msgid ""
"The *name* argument specifies the database name that will be copied: it must "
"be a string containing either ``\"main\"``, the default, to indicate the "
"main database, ``\"temp\"`` to indicate the temporary database or the name "
"specified after the ``AS`` keyword in an ``ATTACH DATABASE`` statement for "
"an attached database."
msgstr ""

#: ../../library/sqlite3.rst:665
msgid ""
"The *sleep* argument specifies the number of seconds to sleep by between "
"successive attempts to backup remaining pages, can be specified either as an "
"integer or a floating point value."
msgstr ""

#: ../../library/sqlite3.rst:669
msgid "Example 1, copy an existing database into another::"
msgstr ""

#: ../../library/sqlite3.rst:683
msgid "Example 2, copy an existing database into a transient copy::"
msgstr ""

#: ../../library/sqlite3.rst:697
msgid "Cursor Objects"
msgstr ""

#: ../../library/sqlite3.rst:701
msgid "A :class:`Cursor` instance has the following attributes and methods."
msgstr ""

#: ../../library/sqlite3.rst:708
msgid ""
"Execute an SQL statement. Values may be bound to the statement using :ref:"
"`placeholders <sqlite3-placeholders>`."
msgstr ""

#: ../../library/sqlite3.rst:711
msgid ""
":meth:`execute` will only execute a single SQL statement. If you try to "
"execute more than one statement with it, it will raise a :exc:`Warning`. "
"Use :meth:`executescript` if you want to execute multiple SQL statements "
"with one call."
msgstr ""

#: ../../library/sqlite3.rst:716
msgid ""
"If :attr:`~Connection.isolation_level` is not :const:`None`, *sql* is an "
"``INSERT``, ``UPDATE``, ``DELETE``, or ``REPLACE`` statement, and there is "
"no open transaction, a transaction is implicitly opened before executing "
"*sql*."
msgstr ""

#: ../../library/sqlite3.rst:724
msgid ""
"Execute a :ref:`parameterized <sqlite3-placeholders>` SQL command against "
"all parameter sequences or mappings found in the sequence "
"*seq_of_parameters*.  It is also possible to use an :term:`iterator` "
"yielding parameters instead of a sequence. Uses the same implicit "
"transaction handling as :meth:`~Cursor.execute`."
msgstr ""

#: ../../library/sqlite3.rst:732
msgid "Here's a shorter example using a :term:`generator`:"
msgstr ""

#: ../../library/sqlite3.rst:739
msgid ""
"Execute multiple SQL statements at once. If there is a pending transaciton, "
"an implicit ``COMMIT`` statement is executed first. No other implicit "
"transaction control is performed; any transaction control must be added to "
"*sql_script*."
msgstr ""

#: ../../library/sqlite3.rst:745
msgid "*sql_script* must be a :class:`string <str>`."
msgstr ""

#: ../../library/sqlite3.rst:754
msgid ""
"Fetches the next row of a query result set, returning a single sequence, or :"
"const:`None` when no more data is available."
msgstr ""

#: ../../library/sqlite3.rst:760
msgid ""
"Fetches the next set of rows of a query result, returning a list.  An empty "
"list is returned when no more rows are available."
msgstr ""

#: ../../library/sqlite3.rst:763
msgid ""
"The number of rows to fetch per call is specified by the *size* parameter. "
"If it is not given, the cursor's arraysize determines the number of rows to "
"be fetched. The method should try to fetch as many rows as indicated by the "
"size parameter. If this is not possible due to the specified number of rows "
"not being available, fewer rows may be returned."
msgstr ""

#: ../../library/sqlite3.rst:769
msgid ""
"Note there are performance considerations involved with the *size* "
"parameter. For optimal performance, it is usually best to use the arraysize "
"attribute. If the *size* parameter is used, then it is best for it to retain "
"the same value from one :meth:`fetchmany` call to the next."
msgstr ""

#: ../../library/sqlite3.rst:776
msgid ""
"Fetches all (remaining) rows of a query result, returning a list.  Note that "
"the cursor's arraysize attribute can affect the performance of this "
"operation. An empty list is returned when no rows are available."
msgstr ""

#: ../../library/sqlite3.rst:782
msgid "Close the cursor now (rather than whenever ``__del__`` is called)."
msgstr ""

#: ../../library/sqlite3.rst:784
msgid ""
"The cursor will be unusable from this point forward; a :exc:"
"`ProgrammingError` exception will be raised if any operation is attempted "
"with the cursor."
msgstr ""

#: ../../library/sqlite3.rst:789 ../../library/sqlite3.rst:793
msgid "Required by the DB-API. Does nothing in :mod:`sqlite3`."
msgstr ""

#: ../../library/sqlite3.rst:797
msgid ""
"Although the :class:`Cursor` class of the :mod:`sqlite3` module implements "
"this attribute, the database engine's own support for the determination of "
"\"rows affected\"/\"rows selected\" is quirky."
msgstr ""

#: ../../library/sqlite3.rst:801
msgid ""
"For :meth:`executemany` statements, the number of modifications are summed "
"up into :attr:`rowcount`."
msgstr ""

#: ../../library/sqlite3.rst:804
msgid ""
"As required by the Python DB API Spec, the :attr:`rowcount` attribute \"is "
"-1 in case no ``executeXX()`` has been performed on the cursor or the "
"rowcount of the last operation is not determinable by the interface\". This "
"includes ``SELECT`` statements because we cannot determine the number of "
"rows a query produced until all rows were fetched."
msgstr ""

#: ../../library/sqlite3.rst:812
msgid ""
"This read-only attribute provides the row id of the last inserted row. It is "
"only updated after successful ``INSERT`` or ``REPLACE`` statements using "
"the :meth:`execute` method.  For other statements, after :meth:`executemany` "
"or :meth:`executescript`, or if the insertion failed, the value of "
"``lastrowid`` is left unchanged.  The initial value of ``lastrowid`` is :"
"const:`None`."
msgstr ""

#: ../../library/sqlite3.rst:820
msgid "Inserts into ``WITHOUT ROWID`` tables are not recorded."
msgstr ""

#: ../../library/sqlite3.rst:822
msgid "Added support for the ``REPLACE`` statement."
msgstr "新增 ``REPLACE`` 陳述式的支援。"

#: ../../library/sqlite3.rst:827
msgid ""
"Read/write attribute that controls the number of rows returned by :meth:"
"`fetchmany`. The default value is 1 which means a single row would be "
"fetched per call."
msgstr ""

#: ../../library/sqlite3.rst:832
msgid ""
"This read-only attribute provides the column names of the last query. To "
"remain compatible with the Python DB API, it returns a 7-tuple for each "
"column where the last six items of each tuple are :const:`None`."
msgstr ""

#: ../../library/sqlite3.rst:836
msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr ""

#: ../../library/sqlite3.rst:840
msgid ""
"This read-only attribute provides the SQLite database :class:`Connection` "
"used by the :class:`Cursor` object.  A :class:`Cursor` object created by "
"calling :meth:`con.cursor() <Connection.cursor>` will have a :attr:"
"`connection` attribute that refers to *con*::"
msgstr ""

#: ../../library/sqlite3.rst:853
msgid "Row Objects"
msgstr ""

#: ../../library/sqlite3.rst:857
msgid ""
"A :class:`Row` instance serves as a highly optimized :attr:`~Connection."
"row_factory` for :class:`Connection` objects. It tries to mimic a tuple in "
"most of its features."
msgstr ""

#: ../../library/sqlite3.rst:861
msgid ""
"It supports mapping access by column name and index, iteration, "
"representation, equality testing and :func:`len`."
msgstr ""

#: ../../library/sqlite3.rst:864
msgid ""
"If two :class:`Row` objects have exactly the same columns and their members "
"are equal, they compare equal."
msgstr ""

#: ../../library/sqlite3.rst:869
msgid ""
"This method returns a list of column names. Immediately after a query, it is "
"the first member of each tuple in :attr:`Cursor.description`."
msgstr ""

#: ../../library/sqlite3.rst:872
msgid "Added support of slicing."
msgstr ""

#: ../../library/sqlite3.rst:875
msgid "Let's assume we initialize a table as in the example given above::"
msgstr ""

#: ../../library/sqlite3.rst:887
msgid "Now we plug :class:`Row` in::"
msgstr ""

#: ../../library/sqlite3.rst:919
msgid "Exceptions"
msgstr "例外"

#: ../../library/sqlite3.rst:921
msgid "The exception hierarchy is defined by the DB-API 2.0 (:pep:`249`)."
msgstr ""

#: ../../library/sqlite3.rst:925
msgid ""
"This exception is raised by ``sqlite3`` if an SQL query is not a :class:"
"`string <str>`, or if multiple statements are passed to :meth:`~Cursor."
"execute` or :meth:`~Cursor.executemany`. ``Warning`` is a subclass of :exc:"
"`Exception`."
msgstr ""

#: ../../library/sqlite3.rst:932
msgid ""
"The base class of the other exceptions in this module. Use this to catch all "
"errors with one single :keyword:`except` statement. ``Error`` is a subclass "
"of :exc:`Exception`."
msgstr ""

#: ../../library/sqlite3.rst:938
msgid ""
"This exception is raised by ``sqlite3`` for fetch across rollback, or if "
"``sqlite3`` is unable to bind parameters. ``InterfaceError`` is a subclass "
"of :exc:`Error`."
msgstr ""

#: ../../library/sqlite3.rst:944
msgid ""
"Exception raised for errors that are related to the database. This serves as "
"the base exception for several types of database errors. It is only raised "
"implicitly through the specialised subclasses. ``DatabaseError`` is a "
"subclass of :exc:`Error`."
msgstr ""

#: ../../library/sqlite3.rst:951
msgid ""
"Exception raised for errors caused by problems with the processed data, like "
"numeric values out of range, and strings which are too long. ``DataError`` "
"is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:957
msgid ""
"Exception raised for errors that are related to the database's operation, "
"and not necessarily under the control of the programmer. For example, the "
"database path is not found, or a transaction could not be processed. "
"``OperationalError`` is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:965
msgid ""
"Exception raised when the relational integrity of the database is affected, "
"e.g. a foreign key check fails.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:970
msgid ""
"Exception raised when SQLite encounters an internal error. If this is "
"raised, it may indicate that there is a problem with the runtime SQLite "
"library. ``InternalError`` is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:977
msgid ""
"Exception raised for ``sqlite3`` API programming errors, for example trying "
"to operate on a closed :class:`Connection`, or trying to execute non-DML "
"statements with :meth:`~Cursor.executemany`. ``ProgrammingError`` is a "
"subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:984
msgid ""
"Exception raised in case a method or database API is not supported by the "
"underlying SQLite library. For example, setting *deterministic* to :const:"
"`True` in :meth:`~Connection.create_function`, if the underlying SQLite "
"library does not support deterministic functions. ``NotSupportedError`` is a "
"subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:994
msgid "SQLite and Python types"
msgstr ""

#: ../../library/sqlite3.rst:998
msgid "Introduction"
msgstr "簡介"

#: ../../library/sqlite3.rst:1000
msgid ""
"SQLite natively supports the following types: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."
msgstr ""

#: ../../library/sqlite3.rst:1003
msgid ""
"The following Python types can thus be sent to SQLite without any problem:"
msgstr ""

#: ../../library/sqlite3.rst:1006 ../../library/sqlite3.rst:1023
msgid "Python type"
msgstr ""

#: ../../library/sqlite3.rst:1006 ../../library/sqlite3.rst:1023
msgid "SQLite type"
msgstr ""

#: ../../library/sqlite3.rst:1008 ../../library/sqlite3.rst:1025
msgid ":const:`None`"
msgstr ":const:`None`"

#: ../../library/sqlite3.rst:1008 ../../library/sqlite3.rst:1025
msgid "``NULL``"
msgstr "``NULL``"

#: ../../library/sqlite3.rst:1010 ../../library/sqlite3.rst:1027
msgid ":class:`int`"
msgstr ":class:`int`"

#: ../../library/sqlite3.rst:1010 ../../library/sqlite3.rst:1027
msgid "``INTEGER``"
msgstr "``INTEGER``"

#: ../../library/sqlite3.rst:1012 ../../library/sqlite3.rst:1029
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/sqlite3.rst:1012 ../../library/sqlite3.rst:1029
msgid "``REAL``"
msgstr "``REAL``"

#: ../../library/sqlite3.rst:1014
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../library/sqlite3.rst:1014 ../../library/sqlite3.rst:1031
msgid "``TEXT``"
msgstr "``TEXT``"

#: ../../library/sqlite3.rst:1016 ../../library/sqlite3.rst:1034
msgid ":class:`bytes`"
msgstr ":class:`bytes`"

#: ../../library/sqlite3.rst:1016 ../../library/sqlite3.rst:1034
msgid "``BLOB``"
msgstr "``BLOB``"

#: ../../library/sqlite3.rst:1020
msgid "This is how SQLite types are converted to Python types by default:"
msgstr ""

#: ../../library/sqlite3.rst:1031
msgid "depends on :attr:`~Connection.text_factory`, :class:`str` by default"
msgstr ""

#: ../../library/sqlite3.rst:1037
msgid ""
"The type system of the :mod:`sqlite3` module is extensible in two ways: you "
"can store additional Python types in an SQLite database via object "
"adaptation, and you can let the :mod:`sqlite3` module convert SQLite types "
"to different Python types via converters."
msgstr ""

#: ../../library/sqlite3.rst:1044
msgid "Using adapters to store custom Python types in SQLite databases"
msgstr ""

#: ../../library/sqlite3.rst:1046
msgid ""
"SQLite supports only a limited set of data types natively. To store custom "
"Python types in SQLite databases, *adapt* them to one of the :ref:`Python "
"types SQLite natively understands<sqlite3-types>`."
msgstr ""

#: ../../library/sqlite3.rst:1050
msgid ""
"There are two ways to adapt Python objects to SQLite types: letting your "
"object adapt itself, or using an *adapter callable*. The latter will take "
"precedence above the former. For a library that exports a custom type, it "
"may make sense to enable that type to adapt itself. As an application "
"developer, it may make more sense to take direct control by registering "
"custom adapter functions."
msgstr ""

#: ../../library/sqlite3.rst:1060
msgid "Letting your object adapt itself"
msgstr ""

#: ../../library/sqlite3.rst:1062
msgid ""
"Suppose we have a ``Point`` class that represents a pair of coordinates, "
"``x`` and ``y``, in a Cartesian coordinate system. The coordinate pair will "
"be stored as a text string in the database, using a semicolon to separate "
"the coordinates. This can be implemented by adding a ``__conform__(self, "
"protocol)`` method which returns the adapted value. The object passed to "
"*protocol* will be of type :class:`PrepareProtocol`."
msgstr ""

#: ../../library/sqlite3.rst:1074
msgid "Registering an adapter callable"
msgstr ""

#: ../../library/sqlite3.rst:1076
msgid ""
"The other possibility is to create a function that converts the Python "
"object to an SQLite-compatible type. This function can then be registered "
"using :func:`register_adapter`."
msgstr ""

#: ../../library/sqlite3.rst:1084
msgid "Converting SQLite values to custom Python types"
msgstr ""

#: ../../library/sqlite3.rst:1086
msgid ""
"Writing an adapter lets you convert *from* custom Python types *to* SQLite "
"values. To be able to convert *from* SQLite values *to* custom Python types, "
"we use *converters*."
msgstr ""

#: ../../library/sqlite3.rst:1091
msgid ""
"Let's go back to the :class:`Point` class. We stored the x and y coordinates "
"separated via semicolons as strings in SQLite."
msgstr ""

#: ../../library/sqlite3.rst:1094
msgid ""
"First, we'll define a converter function that accepts the string as a "
"parameter and constructs a :class:`Point` object from it."
msgstr ""

#: ../../library/sqlite3.rst:1099
msgid ""
"Converter functions are **always** passed a :class:`bytes` object, no matter "
"the underlying SQLite data type."
msgstr ""

#: ../../library/sqlite3.rst:1108
msgid ""
"We now need to tell ``sqlite3`` when it should convert a given SQLite value. "
"This is done when connecting to a database, using the *detect_types* "
"parameter of :func:`connect`. There are three options:"
msgstr ""

#: ../../library/sqlite3.rst:1112
msgid "Implicit: set *detect_types* to :const:`PARSE_DECLTYPES`"
msgstr ""

#: ../../library/sqlite3.rst:1113
msgid "Explicit: set *detect_types* to :const:`PARSE_COLNAMES`"
msgstr ""

#: ../../library/sqlite3.rst:1114
msgid ""
"Both: set *detect_types* to ``sqlite3.PARSE_DECLTYPES | sqlite3."
"PARSE_COLNAMES``. Colum names take precedence over declared types."
msgstr ""

#: ../../library/sqlite3.rst:1118
msgid "The following example illustrates the implicit and explicit approaches:"
msgstr ""

#: ../../library/sqlite3.rst:1124
msgid "Default adapters and converters"
msgstr ""

#: ../../library/sqlite3.rst:1126
msgid ""
"There are default adapters for the date and datetime types in the datetime "
"module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""

#: ../../library/sqlite3.rst:1129
msgid ""
"The default converters are registered under the name \"date\" for :class:"
"`datetime.date` and under the name \"timestamp\" for :class:`datetime."
"datetime`."
msgstr ""

#: ../../library/sqlite3.rst:1133
msgid ""
"This way, you can use date/timestamps from Python without any additional "
"fiddling in most cases. The format of the adapters is also compatible with "
"the experimental SQLite date/time functions."
msgstr ""

#: ../../library/sqlite3.rst:1137
msgid "The following example demonstrates this."
msgstr ""

#: ../../library/sqlite3.rst:1141
msgid ""
"If a timestamp stored in SQLite has a fractional part longer than 6 numbers, "
"its value will be truncated to microsecond precision by the timestamp "
"converter."
msgstr ""

#: ../../library/sqlite3.rst:1147
msgid ""
"The default \"timestamp\" converter ignores UTC offsets in the database and "
"always returns a naive :class:`datetime.datetime` object. To preserve UTC "
"offsets in timestamps, either leave converters disabled, or register an "
"offset-aware converter with :func:`register_converter`."
msgstr ""

#: ../../library/sqlite3.rst:1156
msgid "Adapter and Converter Recipes"
msgstr ""

#: ../../library/sqlite3.rst:1158
msgid "This section shows recipes for common adapters and converters."
msgstr ""

#: ../../library/sqlite3.rst:1201
msgid "Controlling Transactions"
msgstr ""

#: ../../library/sqlite3.rst:1203
msgid ""
"The ``sqlite3`` module does not adhere to the transaction handling "
"recommended by :pep:`249`."
msgstr ""

#: ../../library/sqlite3.rst:1206
msgid ""
"If the connection attribute :attr:`~Connection.isolation_level` is not :"
"const:`None`, new transactions are implicitly opened before :meth:`~Cursor."
"execute` and :meth:`~Cursor.executemany` executes ``INSERT``, ``UPDATE``, "
"``DELETE``, or ``REPLACE`` statements. Use the :meth:`~Connection.commit` "
"and :meth:`~Connection.rollback` methods to respectively commit and roll "
"back pending transactions. You can choose the underlying `SQLite transaction "
"behaviour`_ — that is, whether and what type of ``BEGIN`` statements "
"``sqlite3`` implicitly executes – via the :attr:`~Connection."
"isolation_level` attribute."
msgstr ""

#: ../../library/sqlite3.rst:1218
msgid ""
"If :attr:`~Connection.isolation_level` is set to :const:`None`, no "
"transactions are implicitly opened at all. This leaves the underlying SQLite "
"library in `autocommit mode`_, but also allows the user to perform their own "
"transaction handling using explicit SQL statements. The underlying SQLite "
"library autocommit mode can be queried using the :attr:`~Connection."
"in_transaction` attribute."
msgstr ""

#: ../../library/sqlite3.rst:1226
msgid ""
"The :meth:`~Cursor.executescript` method implicitly commits any pending "
"transaction before execution of the given SQL script, regardless of the "
"value of :attr:`~Connection.isolation_level`."
msgstr ""

#: ../../library/sqlite3.rst:1230
msgid ""
":mod:`sqlite3` used to implicitly commit an open transaction before DDL "
"statements.  This is no longer the case."
msgstr ""

#: ../../library/sqlite3.rst:1242
msgid "Using :mod:`sqlite3` efficiently"
msgstr ""

#: ../../library/sqlite3.rst:1246
msgid "Using shortcut methods"
msgstr ""

#: ../../library/sqlite3.rst:1248
msgid ""
"Using the nonstandard :meth:`execute`, :meth:`executemany` and :meth:"
"`executescript` methods of the :class:`Connection` object, your code can be "
"written more concisely because you don't have to create the (often "
"superfluous) :class:`Cursor` objects explicitly. Instead, the :class:"
"`Cursor` objects are created implicitly and these shortcut methods return "
"the cursor objects. This way, you can execute a ``SELECT`` statement and "
"iterate over it directly using only a single call on the :class:`Connection` "
"object."
msgstr ""

#: ../../library/sqlite3.rst:1260
msgid "Accessing columns by name instead of by index"
msgstr ""

#: ../../library/sqlite3.rst:1262
msgid ""
"One useful feature of the :mod:`sqlite3` module is the built-in :class:"
"`sqlite3.Row` class designed to be used as a row factory."
msgstr ""

#: ../../library/sqlite3.rst:1265
msgid ""
"Rows wrapped with this class can be accessed both by index (like tuples) and "
"case-insensitively by name:"
msgstr ""

#: ../../library/sqlite3.rst:1274
msgid "Using the connection as a context manager"
msgstr ""

#: ../../library/sqlite3.rst:1276
msgid ""
"A :class:`Connection` object can be used as a context manager that "
"automatically commits or rolls back open transactions when leaving the body "
"of the context manager. If the body of the :keyword:`with` statement "
"finishes without exceptions, the transaction is committed. If this commit "
"fails, or if the body of the ``with`` statement raises an uncaught "
"exception, the transaction is rolled back."
msgstr ""

#: ../../library/sqlite3.rst:1285
msgid ""
"If there is no open transaction upon leaving the body of the ``with`` "
"statement, the context manager is a no-op."
msgstr ""

#: ../../library/sqlite3.rst:1290
msgid ""
"The context manager neither implicitly opens a new transaction nor closes "
"the connection."
msgstr ""

#: ../../library/sqlite3.rst:1297
msgid "Footnotes"
msgstr "註解"

#: ../../library/sqlite3.rst:1298
msgid ""
"The sqlite3 module is not built with loadable extension support by default, "
"because some platforms (notably macOS) have SQLite libraries which are "
"compiled without this feature. To get loadable extension support, you must "
"pass the :option:`--enable-loadable-sqlite-extensions` option to configure."
msgstr ""
