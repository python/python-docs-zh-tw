# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 00:15+0000\n"
"PO-Revision-Date: 2023-07-13 14:06+0800\n"
"Last-Translator: Po-Chuan Chen <present90308@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.3.2\n"

#: ../../library/os.path.rst:2
msgid ":mod:`os.path` --- Common pathname manipulations"
msgstr ":mod:`os.path` --- 常見的路徑名操作"

#: ../../library/os.path.rst:7
msgid ""
"**Source code:** :source:`Lib/posixpath.py` (for POSIX) and :source:`Lib/"
"ntpath.py` (for Windows)."
msgstr ""
"**原始碼：** :source:`Lib/posixpath.py` (用於 POSIX 系統) 和 :source:`Lib/"
"ntpath.py` (用於 Windows)."

#: ../../library/os.path.rst:14
msgid ""
"This module implements some useful functions on pathnames. To read or write "
"files see :func:`open`, and for accessing the filesystem see the :mod:`os` "
"module. The path parameters can be passed as strings, or bytes, or any "
"object implementing the :class:`os.PathLike` protocol."
msgstr ""
"該模組實現了一些有用的路徑名操作函式。若要讀取或寫入檔案，請參閱 :func:"
"`open` 函數，要存取檔案系統，請參閱 :mod:`os` 模組。路徑參數可以以字串、位元"
"組或任何依照 :class:`os.PathLike` 協議實作的物件傳遞。"

#: ../../library/os.path.rst:19
msgid ""
"Unlike a Unix shell, Python does not do any *automatic* path expansions. "
"Functions such as :func:`expanduser` and :func:`expandvars` can be invoked "
"explicitly when an application desires shell-like path expansion.  (See also "
"the :mod:`glob` module.)"
msgstr ""
"與 Unix shell 不同，Python 不會\\ *自動*\\ 進行路徑展開（path expansions）。"
"當應用程式需要進行類似 shell 的路徑展開時，可以明確地呼叫 :func:`expanduser` "
"和 :func:`expandvars` 等函式。（另請參閱 :mod:`glob` 模組。）"

#: ../../library/os.path.rst:26
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ":mod:`pathlib` 模組提供了高階的路徑物件。"

#: ../../library/os.path.rst:31
msgid ""
"All of these functions accept either only bytes or only string objects as "
"their parameters.  The result is an object of the same type, if a path or "
"file name is returned."
msgstr ""
"所有這些函數都只接受位元組或字串物件作為參數。如果回傳的是路徑或檔案名稱，結"
"果將是相同型別的物件。"

#: ../../library/os.path.rst:37
msgid ""
"Since different operating systems have different path name conventions, "
"there are several versions of this module in the standard library.  The :mod:"
"`os.path` module is always the path module suitable for the operating system "
"Python is running on, and therefore usable for local paths.  However, you "
"can also import and use the individual modules if you want to manipulate a "
"path that is *always* in one of the different formats.  They all have the "
"same interface:"
msgstr ""
"由於不同的作業系統具有不同的路徑命名慣例，在標準函式庫中的路徑模組有數個版本"
"可供使用，而 :mod:`os.path` 模組都會是運行 Python 之作業系統所適用本地路徑。"
"然而，如果你想要操作\\ *始終*\\ 以某個不同於本機格式表示的路徑，你也可以引入"
"並使用對應的模組。它們都具有相同的介面："

#: ../../library/os.path.rst:45
msgid ":mod:`posixpath` for UNIX-style paths"
msgstr ":mod:`posixpath` 用於 UNIX 形式的路徑"

#: ../../library/os.path.rst:46
msgid ":mod:`ntpath` for Windows paths"
msgstr ":mod:`ntpath` 用於 Windows 的路徑"

#: ../../library/os.path.rst:51
msgid ""
":func:`exists`, :func:`lexists`, :func:`isdir`, :func:`isfile`, :func:"
"`islink`, and :func:`ismount` now return ``False`` instead of raising an "
"exception for paths that contain characters or bytes unrepresentable at the "
"OS level."
msgstr ""
"對於包含有作業系統層級無法表示之字元或位元組的路徑，:func:`exists`、:func:"
"`lexists`、:func:`isdir`、:func:`isfile`、:func:`islink` 和 :func:`ismount` "
"函式現在會回傳 ``False``，而不是引發例外。"

#: ../../library/os.path.rst:59
msgid ""
"Return a normalized absolutized version of the pathname *path*. On most "
"platforms, this is equivalent to calling the function :func:`normpath` as "
"follows: ``normpath(join(os.getcwd(), path))``."
msgstr ""
"回傳經正規化的絕對路徑名 *path* 。在大多數平台上，這等效於按照以下方式呼叫 :"
"func:`normpath` 函式：``normpath(join(os.getcwd(), path))``。"

#: ../../library/os.path.rst:63 ../../library/os.path.rst:76
#: ../../library/os.path.rst:116 ../../library/os.path.rst:125
#: ../../library/os.path.rst:141 ../../library/os.path.rst:151
#: ../../library/os.path.rst:177 ../../library/os.path.rst:197
#: ../../library/os.path.rst:214 ../../library/os.path.rst:226
#: ../../library/os.path.rst:235 ../../library/os.path.rst:245
#: ../../library/os.path.rst:255 ../../library/os.path.rst:265
#: ../../library/os.path.rst:275 ../../library/os.path.rst:294
#: ../../library/os.path.rst:325 ../../library/os.path.rst:345
#: ../../library/os.path.rst:368 ../../library/os.path.rst:390
#: ../../library/os.path.rst:408 ../../library/os.path.rst:421
#: ../../library/os.path.rst:437 ../../library/os.path.rst:453
#: ../../library/os.path.rst:478 ../../library/os.path.rst:509
msgid "Accepts a :term:`path-like object`."
msgstr "接受一個 :term:`path-like object`。"

#: ../../library/os.path.rst:69
msgid ""
"Return the base name of pathname *path*.  This is the second element of the "
"pair returned by passing *path* to the function :func:`split`.  Note that "
"the result of this function is different from the Unix :program:`basename` "
"program; where :program:`basename` for ``'/foo/bar/'`` returns ``'bar'``, "
"the :func:`basename` function returns an empty string (``''``)."
msgstr ""
"回傳路徑名 *path* 的基底名稱。這是將 *path* 傳遞給函式 :func:`split` 後回傳結"
"果中的第二個元素。請注意，此函式的結果與 Unix 的 :program:`basename` 程式不"
"同；對於 ``'/foo/bar/'``，:program:`basename` 回傳 ``'bar'``，而 :func:"
"`basename` 函式回傳空字串（``''``）。"

#: ../../library/os.path.rst:82
msgid ""
"Return the longest common sub-path of each pathname in the sequence "
"*paths*.  Raise :exc:`ValueError` if *paths* contain both absolute and "
"relative pathnames, the *paths* are on the different drives or if *paths* is "
"empty.  Unlike :func:`commonprefix`, this returns a valid path."
msgstr ""
"回傳序列 *paths* 中每個路徑名的最長共同子路徑。如果 *paths* 同時包含絕對路徑"
"和相對路徑、*paths* 位於不同的磁碟機或 *paths* 為空，則引發 :exc:"
"`ValueError`。與 :func:`commonprefix` 不同，此函式回傳的是有效路徑。"

#: ../../library/os.path.rst:88 ../../library/os.path.rst:388
#: ../../library/os.path.rst:400 ../../library/os.path.rst:416
#: ../../library/os.path.rst:432
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ":ref:`適用 <availability>`：Unix、Windows。"

#: ../../library/os.path.rst:92
msgid "Accepts a sequence of :term:`path-like objects <path-like object>`."
msgstr "接受一個\\ :term:`類路徑物件 <path-like object>`\\ 的序列。"

#: ../../library/os.path.rst:98
msgid ""
"Return the longest path prefix (taken character-by-character) that is a "
"prefix of all paths in  *list*.  If *list* is empty, return the empty string "
"(``''``)."
msgstr ""
"回傳 *list* 中所有路徑的最長路徑前綴（逐字元比較）。如果 *list* 為空，則回傳"
"空字串（``''``）。"

#: ../../library/os.path.rst:104
msgid ""
"This function may return invalid paths because it works a character at a "
"time.  To obtain a valid path, see :func:`commonpath`."
msgstr ""
"由於此函式是逐字元比較，因此可能會回傳無效的路徑。若要獲得有效的路徑，請參"
"考 :func:`commonpath` 函式。"

#: ../../library/os.path.rst:122
msgid ""
"Return the directory name of pathname *path*.  This is the first element of "
"the pair returned by passing *path* to the function :func:`split`."
msgstr ""
"回傳路徑名 *path* 的目錄名稱。這是將 *path* 傳遞給函式 :func:`split` 後回傳之"
"成對結果中的第一個元素。"

#: ../../library/os.path.rst:131
msgid ""
"Return ``True`` if *path* refers to an existing path or an open file "
"descriptor.  Returns ``False`` for broken symbolic links.  On some "
"platforms, this function may return ``False`` if permission is not granted "
"to execute :func:`os.stat` on the requested file, even if the *path* "
"physically exists."
msgstr ""
"如果 *path* 是一個存在的路徑或一個開啟的檔案描述器則回傳 ``True``。對於已損壞"
"的符號連結則回傳 ``False``。在某些平台上，即使 *path* 實際存在，如果未被授予"
"執行 :func:`os.stat` 的權限，此函式仍可能回傳 ``False``。"

#: ../../library/os.path.rst:137
msgid ""
"*path* can now be an integer: ``True`` is returned if it is an  open file "
"descriptor, ``False`` otherwise."
msgstr ""
"現在 *path* 可以是一個整數：如果它是一個開啟的檔案描述器，則回傳 ``True``；否"
"則回傳 ``False``。"

#: ../../library/os.path.rst:147
msgid ""
"Return ``True`` if *path* refers to an existing path. Returns ``True`` for "
"broken symbolic links.   Equivalent to :func:`exists` on platforms lacking :"
"func:`os.lstat`."
msgstr ""
"如果 *path* 是一個存在的路徑則回傳 ``True``。對於已損壞的符號連結也回傳 "
"``True``。在缺乏 :func:`os.lstat` 的平台上，與 :func:`exists` 函式等效。"

#: ../../library/os.path.rst:159
msgid ""
"On Unix and Windows, return the argument with an initial component of ``~`` "
"or ``~user`` replaced by that *user*'s home directory."
msgstr ""
"在 Unix 和 Windows 上，將引數中以 ``~`` 或 ``~user`` 開頭的部分替換為該 "
"*user* 的家目錄。"

#: ../../library/os.path.rst:164
msgid ""
"On Unix, an initial ``~`` is replaced by the environment variable :envvar:"
"`HOME` if it is set; otherwise the current user's home directory is looked "
"up in the password directory through the built-in module :mod:`pwd`. An "
"initial ``~user`` is looked up directly in the password directory."
msgstr ""
"在 Unix 上，如果環境變數 :envvar:`HOME` 有被設置，則將初始的 ``~`` 替換為該變"
"數的值；否則將使用內建模組 :mod:`pwd` 在密碼目錄中查找當前使用者的家目錄。對"
"於初始的 ``~user``，直接在密碼目錄中查找該使用者的家目錄。"

#: ../../library/os.path.rst:169
msgid ""
"On Windows, :envvar:`USERPROFILE` will be used if set, otherwise a "
"combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will be used.  An "
"initial ``~user`` is handled by checking that the last directory component "
"of the current user's home directory matches :envvar:`USERNAME`, and "
"replacing it if so."
msgstr ""
"在 Windows 上，如果 :envvar:`USERPROFILE` 有被設置，則使用該變數的值；否則將"
"結合 :envvar:`HOMEPATH` 和 :envvar:`HOMEDRIVE`。對於初始的 ``~user``，會檢查"
"當前使用者的家目錄的最後一個目錄元件是否與 :envvar:`USERNAME` 相符，如果相符"
"則替換它。"

#: ../../library/os.path.rst:174
msgid ""
"If the expansion fails or if the path does not begin with a tilde, the path "
"is returned unchanged."
msgstr ""
"如果展開失敗或路徑不以波浪符號（tilde）開頭，則回傳原始路徑，不做任何變更。"

#: ../../library/os.path.rst:180
msgid "No longer uses :envvar:`HOME` on Windows."
msgstr "在 Windows 上不再使用 :envvar:`HOME` 變數。"

#: ../../library/os.path.rst:189
msgid ""
"Return the argument with environment variables expanded.  Substrings of the "
"form ``$name`` or ``${name}`` are replaced by the value of environment "
"variable *name*.  Malformed variable names and references to non-existing "
"variables are left unchanged."
msgstr ""

#: ../../library/os.path.rst:194
msgid ""
"On Windows, ``%name%`` expansions are supported in addition to ``$name`` and "
"``${name}``."
msgstr ""

#: ../../library/os.path.rst:203
msgid ""
"Return the time of last access of *path*.  The return value is a floating "
"point number giving the number of seconds since the epoch (see the  :mod:"
"`time` module).  Raise :exc:`OSError` if the file does not exist or is "
"inaccessible."
msgstr ""

#: ../../library/os.path.rst:210
msgid ""
"Return the time of last modification of *path*.  The return value is a "
"floating point number giving the number of seconds since the epoch (see "
"the  :mod:`time` module). Raise :exc:`OSError` if the file does not exist or "
"is inaccessible."
msgstr ""

#: ../../library/os.path.rst:220
msgid ""
"Return the system's ctime which, on some systems (like Unix) is the time of "
"the last metadata change, and, on others (like Windows), is the creation "
"time for *path*. The return value is a number giving the number of seconds "
"since the epoch (see the  :mod:`time` module).  Raise :exc:`OSError` if the "
"file does not exist or is inaccessible."
msgstr ""

#: ../../library/os.path.rst:232
msgid ""
"Return the size, in bytes, of *path*.  Raise :exc:`OSError` if the file does "
"not exist or is inaccessible."
msgstr ""

#: ../../library/os.path.rst:241
msgid ""
"Return ``True`` if *path* is an absolute pathname.  On Unix, that means it "
"begins with a slash, on Windows that it begins with a (back)slash after "
"chopping off a potential drive letter."
msgstr ""

#: ../../library/os.path.rst:251
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` regular file. This "
"follows symbolic links, so both :func:`islink` and :func:`isfile` can be "
"true for the same path."
msgstr ""

#: ../../library/os.path.rst:261
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` directory.  This "
"follows symbolic links, so both :func:`islink` and :func:`isdir` can be true "
"for the same path."
msgstr ""

#: ../../library/os.path.rst:271
msgid ""
"Return ``True`` if *path* refers to an :func:`existing <exists>` directory "
"entry that is a symbolic link.  Always ``False`` if symbolic links are not "
"supported by the Python runtime."
msgstr ""

#: ../../library/os.path.rst:281
msgid ""
"Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a "
"file system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`{path}/..`, is on a "
"different device than *path*, or whether :file:`{path}/..` and *path* point "
"to the same i-node on the same device --- this should detect mount points "
"for all Unix and POSIX variants.  It is not able to reliably detect bind "
"mounts on the same filesystem.  On Windows, a drive letter root and a share "
"UNC are always mount points, and for any other path ``GetVolumePathName`` is "
"called to see if it is different from the input path."
msgstr ""

#: ../../library/os.path.rst:291
msgid "Support for detecting non-root mount points on Windows."
msgstr ""

#: ../../library/os.path.rst:300
msgid ""
"Join one or more path segments intelligently.  The return value is the "
"concatenation of *path* and all members of *\\*paths*, with exactly one "
"directory separator following each non-empty part, except the last. That is, "
"the result will only end in a separator if the last part is either empty or "
"ends in a separator. If a segment is an absolute path (which on Windows "
"requires both a drive and a root), then all previous segments are ignored "
"and joining continues from the absolute path segment."
msgstr ""

#: ../../library/os.path.rst:308
msgid ""
"On Windows, the drive is not reset when a rooted path segment (e.g., "
"``r'\\foo'``) is encountered. If a segment is on a different drive or is an "
"absolute path, all previous segments are ignored and the drive is reset. "
"Note that since there is a current directory for each drive, ``os.path."
"join(\"c:\", \"foo\")`` represents a path relative to the current directory "
"on drive :file:`C:` (:file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""

#: ../../library/os.path.rst:315
msgid "Accepts a :term:`path-like object` for *path* and *paths*."
msgstr ""

#: ../../library/os.path.rst:321
msgid ""
"Normalize the case of a pathname.  On Windows, convert all characters in the "
"pathname to lowercase, and also convert forward slashes to backward slashes. "
"On other operating systems, return the path unchanged."
msgstr ""

#: ../../library/os.path.rst:331
msgid ""
"Normalize a pathname by collapsing redundant separators and up-level "
"references so that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all "
"become ``A/B``.  This string manipulation may change the meaning of a path "
"that contains symbolic links.  On Windows, it converts forward slashes to "
"backward slashes. To normalize case, use :func:`normcase`."
msgstr ""

#: ../../library/os.path.rst:338
msgid ""
"On POSIX systems, in accordance with `IEEE Std 1003.1 2013 Edition; 4.13 "
"Pathname Resolution <https://pubs.opengroup.org/onlinepubs/9699919799/"
"basedefs/V1_chap04.html#tag_04_13>`_, if a pathname begins with exactly two "
"slashes, the first component following the leading characters may be "
"interpreted in an implementation-defined manner, although more than two "
"leading characters shall be treated as a single character."
msgstr ""

#: ../../library/os.path.rst:351
msgid ""
"Return the canonical path of the specified filename, eliminating any "
"symbolic links encountered in the path (if they are supported by the "
"operating system)."
msgstr ""

#: ../../library/os.path.rst:355
msgid ""
"If a path doesn't exist or a symlink loop is encountered, and *strict* is "
"``True``, :exc:`OSError` is raised. If *strict* is ``False``, the path is "
"resolved as far as possible and any remainder is appended without checking "
"whether it exists."
msgstr ""

#: ../../library/os.path.rst:361
msgid ""
"This function emulates the operating system's procedure for making a path "
"canonical, which differs slightly between Windows and UNIX with respect to "
"how links and subsequent path components interact."
msgstr ""

#: ../../library/os.path.rst:365
msgid ""
"Operating system APIs make paths canonical as needed, so it's not normally "
"necessary to call this function."
msgstr ""

#: ../../library/os.path.rst:371
msgid "Symbolic links and junctions are now resolved on Windows."
msgstr ""

#: ../../library/os.path.rst:374
msgid "The *strict* parameter was added."
msgstr "新增 *strict* 參數。"

#: ../../library/os.path.rst:380
msgid ""
"Return a relative filepath to *path* either from the current directory or "
"from an optional *start* directory.  This is a path computation:  the "
"filesystem is not accessed to confirm the existence or nature of *path* or "
"*start*.  On Windows, :exc:`ValueError` is raised when *path* and *start* "
"are on different drives."
msgstr ""

#: ../../library/os.path.rst:386
msgid "*start* defaults to :attr:`os.curdir`."
msgstr ""

#: ../../library/os.path.rst:396
msgid ""
"Return ``True`` if both pathname arguments refer to the same file or "
"directory. This is determined by the device number and i-node number and "
"raises an exception if an :func:`os.stat` call on either pathname fails."
msgstr ""

#: ../../library/os.path.rst:402 ../../library/os.path.rst:418
#: ../../library/os.path.rst:434
msgid "Added Windows support."
msgstr "新增對 Windows 的支援。"

#: ../../library/os.path.rst:405
msgid "Windows now uses the same implementation as all other platforms."
msgstr ""

#: ../../library/os.path.rst:414
msgid ""
"Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same "
"file."
msgstr ""

#: ../../library/os.path.rst:427
msgid ""
"Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same "
"file. These structures may have been returned by :func:`os.fstat`, :func:`os."
"lstat`, or :func:`os.stat`.  This function implements the underlying "
"comparison used by :func:`samefile` and :func:`sameopenfile`."
msgstr ""

#: ../../library/os.path.rst:443
msgid ""
"Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the "
"last pathname component and *head* is everything leading up to that.  The "
"*tail* part will never contain a slash; if *path* ends in a slash, *tail* "
"will be empty.  If there is no slash in *path*, *head* will be empty.  If "
"*path* is empty, both *head* and *tail* are empty.  Trailing slashes are "
"stripped from *head* unless it is the root (one or more slashes only).  In "
"all cases, ``join(head, tail)`` returns a path to the same location as "
"*path* (but the strings may differ).  Also see the functions :func:`dirname` "
"and :func:`basename`."
msgstr ""

#: ../../library/os.path.rst:459
msgid ""
"Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is "
"either a mount point or the empty string.  On systems which do not use drive "
"specifications, *drive* will always be the empty string.  In all cases, "
"``drive + tail`` will be the same as *path*."
msgstr ""

#: ../../library/os.path.rst:464
msgid ""
"On Windows, splits a pathname into drive/UNC sharepoint and relative path."
msgstr ""

#: ../../library/os.path.rst:466
msgid ""
"If the path contains a drive letter, drive will contain everything up to and "
"including the colon::"
msgstr ""

#: ../../library/os.path.rst:472
msgid ""
"If the path contains a UNC path, drive will contain the host name and share, "
"up to but not including the fourth separator::"
msgstr ""

#: ../../library/os.path.rst:484
msgid ""
"Split the pathname *path* into a pair ``(root, ext)``  such that ``root + "
"ext == path``, and the extension, *ext*, is empty or begins with a period "
"and contains at most one period."
msgstr ""

#: ../../library/os.path.rst:488
msgid "If the path contains no extension, *ext* will be ``''``::"
msgstr ""

#: ../../library/os.path.rst:493
msgid ""
"If the path contains an extension, then *ext* will be set to this extension, "
"including the leading period. Note that previous periods will be ignored::"
msgstr ""

#: ../../library/os.path.rst:501
msgid ""
"Leading periods of the last component of the path are considered to be part "
"of the root::"
msgstr ""

#: ../../library/os.path.rst:515
msgid ""
"``True`` if arbitrary Unicode strings can be used as file names (within "
"limitations imposed by the file system)."
msgstr ""

#: ../../library/os.path.rst:10
msgid "path"
msgstr "path（路徑）"

#: ../../library/os.path.rst:10
msgid "operations"
msgstr "operations（操作）"

#: ../../library/os.path.rst:155
msgid "~ (tilde)"
msgstr "~ （波浪號）"

#: ../../library/os.path.rst:155
msgid "home directory expansion"
msgstr "home directory expansion（家目錄展開）"

#: ../../library/os.path.rst:162
msgid "module"
msgstr "module（模組）"

#: ../../library/os.path.rst:162
msgid "pwd"
msgstr "pwd"

#: ../../library/os.path.rst:183
msgid "$ (dollar)"
msgstr "$ （金錢符號）"

#: ../../library/os.path.rst:183
msgid "environment variables expansion"
msgstr "environment variables expansion（環境變數展開）"

#: ../../library/os.path.rst:183
msgid "% (percent)"
msgstr "% （百分號）"

#: ../../library/os.path.rst:183
msgid "environment variables expansion (Windows)"
msgstr "environment variables expansion (Windows)（環境變數展開 (Windows)）"
