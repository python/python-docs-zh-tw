# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-13 00:11+0000\n"
"PO-Revision-Date: 2018-05-23 16:07+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/os.path.rst:2
msgid ":mod:`os.path` --- Common pathname manipulations"
msgstr ""

#: ../../library/os.path.rst:7
msgid ""
"**Source code:** :source:`Lib/posixpath.py` (for POSIX) and :source:`Lib/"
"ntpath.py` (for Windows NT)."
msgstr ""

#: ../../library/os.path.rst:14
msgid ""
"This module implements some useful functions on pathnames. To read or write "
"files see :func:`open`, and for accessing the filesystem see the :mod:`os` "
"module. The path parameters can be passed as either strings, or bytes. "
"Applications are encouraged to represent file names as (Unicode) character "
"strings. Unfortunately, some file names may not be representable as strings "
"on Unix, so applications that need to support arbitrary file names on Unix "
"should use bytes objects to represent path names. Vice versa, using bytes "
"objects cannot represent all file names on Windows (in the standard ``mbcs`` "
"encoding), hence Windows applications should use string objects to access "
"all files."
msgstr ""

#: ../../library/os.path.rst:25
msgid ""
"Unlike a unix shell, Python does not do any *automatic* path expansions. "
"Functions such as :func:`expanduser` and :func:`expandvars` can be invoked "
"explicitly when an application desires shell-like path expansion.  (See also "
"the :mod:`glob` module.)"
msgstr ""

#: ../../library/os.path.rst:32
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ""

#: ../../library/os.path.rst:37
msgid ""
"All of these functions accept either only bytes or only string objects as "
"their parameters.  The result is an object of the same type, if a path or "
"file name is returned."
msgstr ""

#: ../../library/os.path.rst:44
msgid ""
"Since different operating systems have different path name conventions, "
"there are several versions of this module in the standard library.  The :mod:"
"`os.path` module is always the path module suitable for the operating system "
"Python is running on, and therefore usable for local paths.  However, you "
"can also import and use the individual modules if you want to manipulate a "
"path that is *always* in one of the different formats.  They all have the "
"same interface:"
msgstr ""

#: ../../library/os.path.rst:52
msgid ":mod:`posixpath` for UNIX-style paths"
msgstr ""

#: ../../library/os.path.rst:53
msgid ":mod:`ntpath` for Windows paths"
msgstr ""

#: ../../library/os.path.rst:58
msgid ""
":func:`exists`, :func:`lexists`, :func:`isdir`, :func:`isfile`, :func:"
"`islink`, and :func:`ismount` now return ``False`` instead of raising an "
"exception for paths that contain characters or bytes unrepresentable at the "
"OS level."
msgstr ""

#: ../../library/os.path.rst:66
msgid ""
"Return a normalized absolutized version of the pathname *path*. On most "
"platforms, this is equivalent to calling the function :func:`normpath` as "
"follows: ``normpath(join(os.getcwd(), path))``."
msgstr ""

#: ../../library/os.path.rst:70 ../../library/os.path.rst:83
#: ../../library/os.path.rst:123 ../../library/os.path.rst:132
#: ../../library/os.path.rst:148 ../../library/os.path.rst:158
#: ../../library/os.path.rst:184 ../../library/os.path.rst:204
#: ../../library/os.path.rst:221 ../../library/os.path.rst:233
#: ../../library/os.path.rst:242 ../../library/os.path.rst:252
#: ../../library/os.path.rst:262 ../../library/os.path.rst:272
#: ../../library/os.path.rst:282 ../../library/os.path.rst:301
#: ../../library/os.path.rst:331 ../../library/os.path.rst:351
#: ../../library/os.path.rst:365 ../../library/os.path.rst:384
#: ../../library/os.path.rst:402 ../../library/os.path.rst:415
#: ../../library/os.path.rst:431 ../../library/os.path.rst:447
#: ../../library/os.path.rst:472 ../../library/os.path.rst:498
msgid "Accepts a :term:`path-like object`."
msgstr ""

#: ../../library/os.path.rst:76
msgid ""
"Return the base name of pathname *path*.  This is the second element of the "
"pair returned by passing *path* to the function :func:`split`.  Note that "
"the result of this function is different from the Unix :program:`basename` "
"program; where :program:`basename` for ``'/foo/bar/'`` returns ``'bar'``, "
"the :func:`basename` function returns an empty string (``''``)."
msgstr ""

#: ../../library/os.path.rst:89
msgid ""
"Return the longest common sub-path of each pathname in the sequence "
"*paths*.  Raise :exc:`ValueError` if *paths* contain both absolute and "
"relative pathnames, the *paths* are on the different drives or if *paths* is "
"empty.  Unlike :func:`commonprefix`, this returns a valid path."
msgstr ""

#: ../../library/os.path.rst:96 ../../library/os.path.rst:383
#: ../../library/os.path.rst:395 ../../library/os.path.rst:411
#: ../../library/os.path.rst:427
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ""

#: ../../library/os.path.rst:99
msgid "Accepts a sequence of :term:`path-like objects <path-like object>`."
msgstr ""

#: ../../library/os.path.rst:105
msgid ""
"Return the longest path prefix (taken character-by-character) that is a "
"prefix of all paths in  *list*.  If *list* is empty, return the empty string "
"(``''``)."
msgstr ""

#: ../../library/os.path.rst:111
msgid ""
"This function may return invalid paths because it works a character at a "
"time.  To obtain a valid path, see :func:`commonpath`."
msgstr ""

#: ../../library/os.path.rst:129
msgid ""
"Return the directory name of pathname *path*.  This is the first element of "
"the pair returned by passing *path* to the function :func:`split`."
msgstr ""

#: ../../library/os.path.rst:138
msgid ""
"Return ``True`` if *path* refers to an existing path or an open file "
"descriptor.  Returns ``False`` for broken symbolic links.  On some "
"platforms, this function may return ``False`` if permission is not granted "
"to execute :func:`os.stat` on the requested file, even if the *path* "
"physically exists."
msgstr ""

#: ../../library/os.path.rst:144
msgid ""
"*path* can now be an integer: ``True`` is returned if it is an  open file "
"descriptor, ``False`` otherwise."
msgstr ""

#: ../../library/os.path.rst:154
msgid ""
"Return ``True`` if *path* refers to an existing path. Returns ``True`` for "
"broken symbolic links.   Equivalent to :func:`exists` on platforms lacking :"
"func:`os.lstat`."
msgstr ""

#: ../../library/os.path.rst:166
msgid ""
"On Unix and Windows, return the argument with an initial component of ``~`` "
"or ``~user`` replaced by that *user*'s home directory."
msgstr ""

#: ../../library/os.path.rst:171
msgid ""
"On Unix, an initial ``~`` is replaced by the environment variable :envvar:"
"`HOME` if it is set; otherwise the current user's home directory is looked "
"up in the password directory through the built-in module :mod:`pwd`. An "
"initial ``~user`` is looked up directly in the password directory."
msgstr ""

#: ../../library/os.path.rst:176
msgid ""
"On Windows, :envvar:`USERPROFILE` will be used if set, otherwise a "
"combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will be used.  An "
"initial ``~user`` is handled by stripping the last directory component from "
"the created user path derived above."
msgstr ""

#: ../../library/os.path.rst:181
msgid ""
"If the expansion fails or if the path does not begin with a tilde, the path "
"is returned unchanged."
msgstr ""

#: ../../library/os.path.rst:187
msgid "No longer uses :envvar:`HOME` on Windows."
msgstr ""

#: ../../library/os.path.rst:196
msgid ""
"Return the argument with environment variables expanded.  Substrings of the "
"form ``$name`` or ``${name}`` are replaced by the value of environment "
"variable *name*.  Malformed variable names and references to non-existing "
"variables are left unchanged."
msgstr ""

#: ../../library/os.path.rst:201
msgid ""
"On Windows, ``%name%`` expansions are supported in addition to ``$name`` and "
"``${name}``."
msgstr ""

#: ../../library/os.path.rst:210
msgid ""
"Return the time of last access of *path*.  The return value is a floating "
"point number giving the number of seconds since the epoch (see the  :mod:"
"`time` module).  Raise :exc:`OSError` if the file does not exist or is "
"inaccessible."
msgstr ""

#: ../../library/os.path.rst:217
msgid ""
"Return the time of last modification of *path*.  The return value is a "
"floating point number giving the number of seconds since the epoch (see "
"the  :mod:`time` module). Raise :exc:`OSError` if the file does not exist or "
"is inaccessible."
msgstr ""

#: ../../library/os.path.rst:227
msgid ""
"Return the system's ctime which, on some systems (like Unix) is the time of "
"the last metadata change, and, on others (like Windows), is the creation "
"time for *path*. The return value is a number giving the number of seconds "
"since the epoch (see the  :mod:`time` module).  Raise :exc:`OSError` if the "
"file does not exist or is inaccessible."
msgstr ""

#: ../../library/os.path.rst:239
msgid ""
"Return the size, in bytes, of *path*.  Raise :exc:`OSError` if the file does "
"not exist or is inaccessible."
msgstr ""

#: ../../library/os.path.rst:248
msgid ""
"Return ``True`` if *path* is an absolute pathname.  On Unix, that means it "
"begins with a slash, on Windows that it begins with a (back)slash after "
"chopping off a potential drive letter."
msgstr ""

#: ../../library/os.path.rst:258
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` regular file. This "
"follows symbolic links, so both :func:`islink` and :func:`isfile` can be "
"true for the same path."
msgstr ""

#: ../../library/os.path.rst:268
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` directory.  This "
"follows symbolic links, so both :func:`islink` and :func:`isdir` can be true "
"for the same path."
msgstr ""

#: ../../library/os.path.rst:278
msgid ""
"Return ``True`` if *path* refers to an :func:`existing <exists>` directory "
"entry that is a symbolic link.  Always ``False`` if symbolic links are not "
"supported by the Python runtime."
msgstr ""

#: ../../library/os.path.rst:288
msgid ""
"Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a "
"file system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`{path}/..`, is on a "
"different device than *path*, or whether :file:`{path}/..` and *path* point "
"to the same i-node on the same device --- this should detect mount points "
"for all Unix and POSIX variants.  It is not able to reliably detect bind "
"mounts on the same filesystem.  On Windows, a drive letter root and a share "
"UNC are always mount points, and for any other path ``GetVolumePathName`` is "
"called to see if it is different from the input path."
msgstr ""

#: ../../library/os.path.rst:298
msgid "Support for detecting non-root mount points on Windows."
msgstr ""

#: ../../library/os.path.rst:307
msgid ""
"Join one or more path components intelligently.  The return value is the "
"concatenation of *path* and any members of *\\*paths* with exactly one "
"directory separator following each non-empty part except the last, meaning "
"that the result will only end in a separator if the last part is empty.  If "
"a component is an absolute path, all previous components are thrown away and "
"joining continues from the absolute path component."
msgstr ""

#: ../../library/os.path.rst:314
msgid ""
"On Windows, the drive letter is not reset when an absolute path component (e."
"g., ``r'\\foo'``) is encountered.  If a component contains a drive letter, "
"all previous components are thrown away and the drive letter is reset.  Note "
"that since there is a current directory for each drive, ``os.path.join(\"c:"
"\", \"foo\")`` represents a path relative to the current directory on drive :"
"file:`C:` (:file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""

#: ../../library/os.path.rst:321
msgid "Accepts a :term:`path-like object` for *path* and *paths*."
msgstr ""

#: ../../library/os.path.rst:327
msgid ""
"Normalize the case of a pathname.  On Windows, convert all characters in the "
"pathname to lowercase, and also convert forward slashes to backward slashes. "
"On other operating systems, return the path unchanged."
msgstr ""

#: ../../library/os.path.rst:337
msgid ""
"Normalize a pathname by collapsing redundant separators and up-level "
"references so that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all "
"become ``A/B``.  This string manipulation may change the meaning of a path "
"that contains symbolic links.  On Windows, it converts forward slashes to "
"backward slashes. To normalize case, use :func:`normcase`."
msgstr ""

#: ../../library/os.path.rst:344
msgid ""
"On POSIX systems, in accordance with `IEEE Std 1003.1 2013 Edition; 4.13 "
"Pathname Resolution <http://pubs.opengroup.org/onlinepubs/9699919799/"
"basedefs/V1_chap04.html#tag_04_13>`_, if a pathname begins with exactly two "
"slashes, the first component following the leading characters may be "
"interpreted in an implementation-defined manner, although more than two "
"leading characters shall be treated as a single character."
msgstr ""

#: ../../library/os.path.rst:357
msgid ""
"Return the canonical path of the specified filename, eliminating any "
"symbolic links encountered in the path (if they are supported by the "
"operating system)."
msgstr ""

#: ../../library/os.path.rst:362
msgid ""
"When symbolic link cycles occur, the returned path will be one member of the "
"cycle, but no guarantee is made about which member that will be."
msgstr ""

#: ../../library/os.path.rst:368
msgid "Symbolic links and junctions are now resolved on Windows."
msgstr ""

#: ../../library/os.path.rst:374
msgid ""
"Return a relative filepath to *path* either from the current directory or "
"from an optional *start* directory.  This is a path computation:  the "
"filesystem is not accessed to confirm the existence or nature of *path* or "
"*start*.  On Windows, :exc:`ValueError` is raised when *path* and *start* "
"are on different drives."
msgstr ""

#: ../../library/os.path.rst:380
msgid "*start* defaults to :attr:`os.curdir`."
msgstr ""

#: ../../library/os.path.rst:390
msgid ""
"Return ``True`` if both pathname arguments refer to the same file or "
"directory. This is determined by the device number and i-node number and "
"raises an exception if an :func:`os.stat` call on either pathname fails."
msgstr ""

#: ../../library/os.path.rst:396 ../../library/os.path.rst:412
#: ../../library/os.path.rst:428
msgid "Added Windows support."
msgstr ""

#: ../../library/os.path.rst:399
msgid "Windows now uses the same implementation as all other platforms."
msgstr ""

#: ../../library/os.path.rst:408
msgid ""
"Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same "
"file."
msgstr ""

#: ../../library/os.path.rst:421
msgid ""
"Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same "
"file. These structures may have been returned by :func:`os.fstat`, :func:`os."
"lstat`, or :func:`os.stat`.  This function implements the underlying "
"comparison used by :func:`samefile` and :func:`sameopenfile`."
msgstr ""

#: ../../library/os.path.rst:437
msgid ""
"Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the "
"last pathname component and *head* is everything leading up to that.  The "
"*tail* part will never contain a slash; if *path* ends in a slash, *tail* "
"will be empty.  If there is no slash in *path*, *head* will be empty.  If "
"*path* is empty, both *head* and *tail* are empty.  Trailing slashes are "
"stripped from *head* unless it is the root (one or more slashes only).  In "
"all cases, ``join(head, tail)`` returns a path to the same location as "
"*path* (but the strings may differ).  Also see the functions :func:`dirname` "
"and :func:`basename`."
msgstr ""

#: ../../library/os.path.rst:453
msgid ""
"Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is "
"either a mount point or the empty string.  On systems which do not use drive "
"specifications, *drive* will always be the empty string.  In all cases, "
"``drive + tail`` will be the same as *path*."
msgstr ""

#: ../../library/os.path.rst:458
msgid ""
"On Windows, splits a pathname into drive/UNC sharepoint and relative path."
msgstr ""

#: ../../library/os.path.rst:460
msgid ""
"If the path contains a drive letter, drive will contain everything up to and "
"including the colon::"
msgstr ""

#: ../../library/os.path.rst:466
msgid ""
"If the path contains a UNC path, drive will contain the host name and share, "
"up to but not including the fourth separator::"
msgstr ""

#: ../../library/os.path.rst:478
msgid ""
"Split the pathname *path* into a pair ``(root, ext)``  such that ``root + "
"ext == path``, and the extension, *ext*, is empty or begins with a period "
"and contains at most one period."
msgstr ""

#: ../../library/os.path.rst:482
msgid "If the path contains no extension, *ext* will be ``''``::"
msgstr ""

#: ../../library/os.path.rst:487
msgid ""
"If the path contains an extension, then *ext* will be set to this extension, "
"including the leading period. Note that previous periods will be ignored::"
msgstr ""

#: ../../library/os.path.rst:493
msgid "Leading periods on the basename are ignored::"
msgstr ""

#: ../../library/os.path.rst:504
msgid ""
"``True`` if arbitrary Unicode strings can be used as file names (within "
"limitations imposed by the file system)."
msgstr ""
