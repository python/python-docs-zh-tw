# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-09 00:04+0000\n"
"PO-Revision-Date: 2023-11-06 10:51+0800\n"
"Last-Translator: RockLeon <therockleona@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.4\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- 支援型別提示"

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**原始碼：**\\ :source:`Lib/typing.py`"

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""
"Python runtime 不強制要求函式與變數的型別註釋。他們可以被第三方工具使用，如："
"\\ :term:`型別檢查器 <static type checker>`、IDE、linter 等。"

#: ../../library/typing.rst:26
msgid ""
"This module provides runtime support for type hints. For the original "
"specification of the typing system, see :pep:`484`. For a simplified "
"introduction to type hints, see :pep:`483`."
msgstr ""
"這個模組提供可以支援型別提示的 runtime。關於加註型別系統的原有規格，請看 :"
"pep:`484`。關於型別提示的簡易介紹，請看 :pep:`483`。"

#: ../../library/typing.rst:31
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr "以下函式接受及回傳都是使用字串，且註解方式如下： ::"

#: ../../library/typing.rst:36
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"在函式 ``greeting`` 當中，引數 ``name`` 的型別應為 :class:`str` 且回傳的型別"
"也是 :class:`str`。該引數也可以接受其子型別。"

#: ../../library/typing.rst:40
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""
"新功能會頻繁的新增至 ``typing`` 模組中。`typing_extensions <https://pypi.org/"
"project/typing-extensions/>`_ 套件為這些新功能提供了 backport（向後移植的）版"
"本，提供給舊版本的 Python 使用。"

#: ../../library/typing.rst:44
msgid ""
"For a summary of deprecated features and a deprecation timeline, please see "
"`Deprecation Timeline of Major Features`_."
msgstr ""
"棄用功能及其棄用時間線的簡介，請看\\ `Deprecation Timeline of Major "
"Features`_ \\。"

#: ../../library/typing.rst:50
msgid ""
"`\"Typing cheat sheet\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"
msgstr ""
"`\"型別小抄 (Typing cheat sheet)\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"

#: ../../library/typing.rst:50
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr "型別提示的快速預覽（發布於 mypy 的文件中）"

#: ../../library/typing.rst:55
msgid ""
"\"Type System Reference\" section of `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"
msgstr ""
"`mypy 文件 <https://mypy.readthedocs.io/en/stable/index.html>`_\\ 的 \"型別系"
"統參考資料 (Type System Reference)\" 章節"

#: ../../library/typing.rst:53
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""
"Python 的加註型別系統是基於 PEPs 進行標準化，所以這個參照 (reference) 應該在"
"多數 Python 型別檢查器中廣為使用。（某些部分依然是特定給 mypy 使用。）"

#: ../../library/typing.rst:59
msgid ""
"`\"Static Typing with Python\" <https://typing.readthedocs.io/en/latest/>`_"
msgstr ""
"`\"Python 的靜態型別 (Static Typing)\" <https://typing.readthedocs.io/en/"
"latest/>`_"

#: ../../library/typing.rst:58
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""
"由社群編寫的跨平台型別檢查器文件 (type-checker-agnostic) 詳細描述加註型別系統"
"的功能、實用的加註型別衍伸工具、以及加註型別的最佳實踐 (best practice)。"

#: ../../library/typing.rst:65
msgid "Relevant PEPs"
msgstr "相關的 PEPs"

#: ../../library/typing.rst:67
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations:"
msgstr ""
"自從 :pep:`484` 及 :pep:`483` 對於型別提示的基礎引入，多個 PEPs 針對型別註釋"
"的 Python 框架進行修訂及加強："

#: ../../library/typing.rst:77
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ":pep:`526`：變數註釋的語法"

#: ../../library/typing.rst:77
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr "*引入*\\ 在定義函式之外的變數註釋語法，以及 :data:`ClassVar`"

#: ../../library/typing.rst:80
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""
":pep:`544`： 協定：建構式子型別 (Structural Subtyping) （靜態鴨子型別，"
"Static Duck Typing）"

#: ../../library/typing.rst:80
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""
"*引入* :class:`Protocol` 以及 :func:`@runtime_checkable<runtime_checkable>` "
"裝飾器 (decorator)"

#: ../../library/typing.rst:83
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ""
":pep:`585`：基礎彙集 (collection) 中的型別提示泛型 (Type Hinting Generics In "
"Standard Collections)"

#: ../../library/typing.rst:83
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""
"*引入* :class:`types.GenericAlias` 以及使用基礎函式庫類別 :ref:`generic "
"types<types-genericalias>` 的能力"

#: ../../library/typing.rst:85
msgid ":pep:`586`: Literal Types"
msgstr ":pep:`586`：文字型別"

#: ../../library/typing.rst:86
msgid "*Introducing* :data:`Literal`"
msgstr "*引入* :data:`Literal`"

#: ../../library/typing.rst:87
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ":pep:`589`：TypedDict：含有一組固定 (fixed) 鍵值的型別提示字典"

#: ../../library/typing.rst:88
msgid "*Introducing* :class:`TypedDict`"
msgstr "*引入*  :class:`TypedDict`"

#: ../../library/typing.rst:89
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ":pep:`591`：為型別新增一個最終限定符 (final qualifier)"

#: ../../library/typing.rst:90
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr "*引入* :data:`Final` 以及 :func:`@final<final>` 裝飾器"

#: ../../library/typing.rst:91
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ":pep:`593`：彈性函式及變數註釋"

#: ../../library/typing.rst:92
msgid "*Introducing* :data:`Annotated`"
msgstr "*引入* :data:`Annotated`"

#: ../../library/typing.rst:95
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ":pep:`604`：允許寫入聯集型別 (union type) 為 ``X | Y``"

#: ../../library/typing.rst:94
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""
"*引入* :data:`types.UnionType` 以及使用 binary-or 運算子 ``|`` 以表示\\ :ref:"
"`型別聯合 <types-union>`\\ 的能力"

#: ../../library/typing.rst:97
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ":pep:`612`：參數規格變數 (Parameter Specification Variable)"

#: ../../library/typing.rst:98
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr "*引入* :class:`ParamSpec` 及 :data:`Concatenate`"

#: ../../library/typing.rst:99
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ":pep:`613`：顯式型別別名 (Explicit Type Alias)"

#: ../../library/typing.rst:100
msgid "*Introducing* :data:`TypeAlias`"
msgstr "*引入* :data:`TypeAlias`"

#: ../../library/typing.rst:101
msgid ":pep:`646`: Variadic Generics"
msgstr ":pep:`646`：可變參數泛型 (Variadic Generic)"

#: ../../library/typing.rst:102
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr "*引入* :data:`TypeVarTuple`"

#: ../../library/typing.rst:103
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ":pep:`647`：使用者定義的型別防護 (Type Guard)"

#: ../../library/typing.rst:104
msgid "*Introducing* :data:`TypeGuard`"
msgstr "*引入* :data:`TypeGuard`"

#: ../../library/typing.rst:105
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially "
"missing"
msgstr ":pep:`655`：標記個別的 TypedDict 物件為必需的或可能遺失的"

#: ../../library/typing.rst:106
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr "*引入*  :data:`Required` 和 :data:`NotRequired`"

#: ../../library/typing.rst:107
msgid ":pep:`673`: Self type"
msgstr ":pep:`673`：Self 型別"

#: ../../library/typing.rst:108
msgid "*Introducing* :data:`Self`"
msgstr "*引入* :data:`Self`"

#: ../../library/typing.rst:109
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ":pep:`675`：任意的文本字串型別 (Arbitrary Literal String Type)"

#: ../../library/typing.rst:110
msgid "*Introducing* :data:`LiteralString`"
msgstr "*引入* :data:`LiteralString`"

#: ../../library/typing.rst:111
msgid ":pep:`681`: Data Class Transforms"
msgstr ":pep:`681`：資料類別轉換"

#: ../../library/typing.rst:112
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` decorator"
msgstr "*引入* :func:`@dataclass_transform<dataclass_transform>` 裝飾器"

#: ../../library/typing.rst:114
msgid ":pep:`692`: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr ":pep:`692`：為更精準的 ``**kwargs`` 型別使用 ``TypedDict``"

#: ../../library/typing.rst:114
msgid ""
"*Introducing* a new way of typing ``**kwargs`` with :data:`Unpack` and :data:"
"`TypedDict`"
msgstr ""
"*引入* 型別 ``**kwargs`` 的新方式 :data:`Unpack` 以及 :data:`TypedDict`"

#: ../../library/typing.rst:116
msgid ":pep:`695`: Type Parameter Syntax"
msgstr ":pep:`695`：型別參數語法"

#: ../../library/typing.rst:117
msgid ""
"*Introducing* builtin syntax for creating generic functions, classes, and "
"type aliases."
msgstr "*引入*\\ 建立泛型函式、類別、型別別名的內建語法。"

#: ../../library/typing.rst:119
msgid ":pep:`698`: Adding an override decorator to typing"
msgstr ":pep:`698`：為型別新增可覆寫的裝飾器"

#: ../../library/typing.rst:119
msgid "*Introducing* the :func:`@override<override>` decorator"
msgstr "*引入* :func:`@override<override>` 裝飾器"

#: ../../library/typing.rst:129
msgid "Type aliases"
msgstr "型別別名"

#: ../../library/typing.rst:131
msgid ""
"A type alias is defined using the :keyword:`type` statement, which creates "
"an instance of :class:`TypeAliasType`. In this example, ``Vector`` and "
"``list[float]`` will be treated equivalently by static type checkers::"
msgstr ""
"一個型別別名被定義來使用 :keyword:`type` 陳述式，其建立了 :class:"
"`TypeAliasType` 的實例。在這個範例中，``Vector`` 及 ``list[float]`` 會被當作"
"和靜態型別檢查器一樣同等對待： ::"

#: ../../library/typing.rst:144
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"型別別名對於簡化複雜的型別簽名 (complex type signature) 非常好用。舉例來"
"說： ::"

#: ../../library/typing.rst:162
msgid ""
"The :keyword:`type` statement is new in Python 3.12. For backwards "
"compatibility, type aliases can also be created through simple assignment::"
msgstr ""
":keyword:`type` 陳述式是 Python 3.12 的新功能。為了向後相容性，型別別名可以透"
"過簡單的賦值來建立： ::"

#: ../../library/typing.rst:167
msgid ""
"Or marked with :data:`TypeAlias` to make it explicit that this is a type "
"alias, not a normal variable assignment::"
msgstr ""
"或是用 :data:`TypeAlias` 標記，讓它明確的表示這是一個型別別名，而非一般的變數"
"賦值： ::"

#: ../../library/typing.rst:177
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:179
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "使用 :class:`NewType` 輔助工具 (helper) 建立獨特型別： ::"

#: ../../library/typing.rst:186
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"若它是原本型別的子類別，靜態型別檢查器會將其視為一個新的型別。這對於幫助擷取"
"邏輯性錯誤非常有用： ::"

#: ../../library/typing.rst:198
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"你依然可以在對於型別 ``UserId`` 的變數中執行所有 ``int`` 的操作。這讓你可以在"
"預期接受 ``int`` 的地方傳遞一個 ``UserId``，還能預防你意外使用無效的方法建立"
"一個 ``UserId``： ::"

#: ../../library/typing.rst:206
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"注意這只會透過靜態型別檢查器強制檢查。在 runtime 中，陳述式 (statement) "
"``Derived = NewType('Derived', Base)`` 會使 ``Derived`` 成為一個 callable（可"
"呼叫物件），會立即回傳任何你傳遞的引數。這意味著 expression （運算式）"
"``Derived(some_value)`` 不會建立一個新的類別或過度引入原有的函式呼叫。"

#: ../../library/typing.rst:212
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"更精確地說，expression ``some_value is Derived(some_value)`` 在 runtime 永遠"
"為 true。"

#: ../../library/typing.rst:215
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "這會無法建立一個 ``Derived`` 的子型別： ::"

#: ../../library/typing.rst:224
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"無論如何，這有辦法基於 '衍生的' ``NewType`` 建立一個 :class:`NewType`： ::"

#: ../../library/typing.rst:232
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "以及針對 ``ProUserId`` 的型別檢查會如期運作。"

#: ../../library/typing.rst:234
msgid "See :pep:`484` for more details."
msgstr "更多細節請見 :pep:`484`\\ 。"

#: ../../library/typing.rst:238
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``type Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in all "
"cases. This is useful when you want to simplify complex type signatures."
msgstr ""
"請記得使用型別別名是宣告兩種型別是互相\\ *相等*\\ 的。使用 ``type Alias = "
"Original`` 則會讓靜態型別檢查器在任何情況之下將 ``Alias`` 視為與 "
"``Original`` \\ *完全相等*\\ 。這當你想把複雜的型別簽名進行簡化時，非常好用。"

#: ../../library/typing.rst:243
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"相反的，``NewType`` 宣告一個型別會是另外一種型別的子類別。使用 ``Derived = "
"NewType('Derived', Original)`` 會使靜態型別檢查器將 ``Derived`` 視為 "
"``Original`` 的子類別，也意味著一個型別為 ``Original`` 的值，不能被使用在任何"
"預期接收到型別 ``Derived`` 的值的區域。這當你想用最小的 runtime 成本預防邏輯"
"性錯誤而言，非常有用。"

#: ../../library/typing.rst:252
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""
"現在的 ``NewType`` 比起一個函式更像一個類別。因此，比起一般的函式，呼叫 "
"``NewType`` 需要額外的 runtime 成本。"

#: ../../library/typing.rst:257
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr "呼叫 ``NewType`` 的效能已經恢復與 Python 3.9 相同的水準。"

#: ../../library/typing.rst:264
msgid "Annotating callable objects"
msgstr "註釋 callable 物件"

#: ../../library/typing.rst:266
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using :"
"class:`collections.abc.Callable` or :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""
"函式，或者是其他 :term:`callable` 物件，可以使用 :class:`collections.abc."
"Callable` 或 :data:`typing.Callable` 進行註釋。 ``Callable[[int], str]`` 象徵"
"為一個函式，可以接受一個型別為 :class:`int` 的引數，並回傳一個 :class:`str`。"

#: ../../library/typing.rst:271 ../../library/typing.rst:2891
#: ../../library/typing.rst:3033
msgid "For example:"
msgstr "舉例來說："

#: ../../library/typing.rst:289
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""
"使用下標語法 (subscription syntax) 時，必須使用到兩個值，分別為引述串列以及回"
"傳類別。引數串列必須為一個型別串列：:class:`ParamSpec`、:data:`Concatenate` "
"或是一個刪節號 (ellipsis)。回傳類別必為一個單一類別。"

#: ../../library/typing.rst:294
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""
"若刪節號文字 ``...`` 被當作引數串列給定，其指出一個具任何、任意參數列表的 "
"callable 會被接受： ::"

#: ../../library/typing.rst:306
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a "
"variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a :meth:`~object."
"__call__` method:"
msgstr ""
"``Callable`` 不如有可變數量引數的函式、:func:`overloaded functions "
"<overload>`、或是僅限關鍵字參數的函式，可以表示複雜簽名。然而，這些簽名可以透"
"過定義一個具有 :meth:`~object.__call__` 方法的 :class:`Protocol` 類別進行表"
"示："

#: ../../library/typing.rst:333
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Callable 物件可以取用其他 callable 當作引數使用，可以透過 :class:`ParamSpec` "
"指出他們的參數型別是個別獨立的。另外，如果這個 callable 從其他 callable 新增"
"或刪除引數時，將會使用到 :data:`Concatenate` 運算子。他們可以分別採用 "
"``Callable[ParamSpecVariable, ReturnType]`` 以及 "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` 的形式。"

#: ../../library/typing.rst:341 ../../library/typing.rst:3562
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` 現已支援 :class:`ParamSpec` 以及 :data:`Concatenate`。請參閱 :"
"pep:`612` 閱讀詳細內容。"

#: ../../library/typing.rst:346
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
":class:`ParamSpec` 以及 :class:`Concatenate` 的文件中，提供範例如何在 "
"``Callable`` 中使用。"

#: ../../library/typing.rst:352
msgid "Generics"
msgstr "泛型"

#: ../../library/typing.rst:354
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""
"因為關於物件的型別資訊留存在容器之內，且無法使用通用的方式進行靜態推論 "
"(statically inferred)，許多標準函式庫的容器類別支援以下標來表示容器內預期的元"
"素。"

#: ../../library/typing.rst:371
msgid ""
"Generic functions and classes can be parameterized by using :ref:`type "
"parameter syntax <type-params>`::"
msgstr ""
"泛型函式及類別可以使用\\ :ref:`型別參數語法 (type parameter syntax) <type-"
"params>` 進行參數化 (parameterize) ： ::"

#: ../../library/typing.rst:379
msgid "Or by using the :class:`TypeVar` factory directly::"
msgstr "或是直接使用 :class:`TypeVar` 工廠 (factory)： ::"

#: ../../library/typing.rst:389
msgid "Syntactic support for generics is new in Python 3.12."
msgstr "在 Python 3.12 中，泛型的語法支援是全新功能。"

#: ../../library/typing.rst:395
msgid "Annotating tuples"
msgstr "註釋元組 (tuple)"

#: ../../library/typing.rst:397
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""
"在 Python 大多數的容器當中，加註型別系統認為容器內的所有元素會是相同型別。舉"
"例來說： ::"

#: ../../library/typing.rst:412
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, :class:`~collections.abc."
"Mapping` only accepts two type arguments: the first indicates the type of "
"the keys, and the second indicates the type of the values."
msgstr ""
":class:`list` 只接受一個型別引數，所以型別檢查器可能在上述 ``y`` 賦值 "
"(assignment) 觸發錯誤。類似的範例，:class:`~collections.abc.Mapping` 只接受兩"
"個型別引數：第一個引數指出 keys（鍵）的型別；第二個引數指出 values（值）的型"
"別。"

#: ../../library/typing.rst:418
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. :class:"
"`tuple` accepts *any number* of type arguments::"
msgstr ""
"然而，與其他多數的 Python 容器不同，在慣用的 (idiomatic) Python 程式碼中，元"
"組可以擁有不完全相同型別的元素是相當常見的。為此，元組在 Python 的加註型別系"
"統中是個特例 (special-cased)。:class:`tuple` 接受\\ *任何數量*\\ 的型別引"
"數： ::"

#: ../../library/typing.rst:434
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple, "
"use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""
"為了標示一個元組可以為\\ *任意*\\ 長度，且所有元素皆是相同型別 ``T``，請使用 "
"``tuple[T, ...]`` 進行標示。為了標示一個空元組，請使用 ``tuple[()]``。單純使"
"用 ``tuple`` 作為註釋，會與使用 ``tuple[Any, ...]`` 是相等的： ::"

#: ../../library/typing.rst:457
msgid "The type of class objects"
msgstr ""

#: ../../library/typing.rst:459
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or :class:`typing.Type[C] "
"<Type>`) may accept values that are classes themselves -- specifically, it "
"will accept the *class object* of ``C``. For example::"
msgstr ""

#: ../../library/typing.rst:469
msgid "Note that ``type[C]`` is covariant::"
msgstr ""

#: ../../library/typing.rst:485
msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""

#: ../../library/typing.rst:497
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's :"
"ref:`metaclass hierarchy <metaclasses>`."
msgstr ""

#: ../../library/typing.rst:503
msgid "User-defined generic types"
msgstr ""

#: ../../library/typing.rst:505
msgid "A user-defined class can be defined as a generic class."
msgstr ""

#: ../../library/typing.rst:528
msgid ""
"This syntax indicates that the class ``LoggedVar`` is parameterised around a "
"single :ref:`type variable <typevar>` ``T`` . This also makes ``T`` valid as "
"a type within the class body."
msgstr ""

#: ../../library/typing.rst:532
msgid ""
"Generic classes implicitly inherit from :class:`Generic`. For compatibility "
"with Python 3.11 and lower, it is also possible to inherit explicitly from :"
"class:`Generic` to indicate a generic class::"
msgstr ""

#: ../../library/typing.rst:543
msgid ""
"Generic classes have :meth:`~object.__class_getitem__` methods, meaning they "
"can be parameterised at runtime (e.g. ``LoggedVar[int]`` below)::"
msgstr ""

#: ../../library/typing.rst:552
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""

#: ../../library/typing.rst:567
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""

#: ../../library/typing.rst:581
msgid "Generic classes can also inherit from other classes::"
msgstr ""

#: ../../library/typing.rst:588
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr ""

#: ../../library/typing.rst:595
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr ""

#: ../../library/typing.rst:597
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""

#: ../../library/typing.rst:608
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""

#: ../../library/typing.rst:623
msgid ""
"For backward compatibility, generic type aliases can also be created through "
"a simple assignment::"
msgstr "為了向後相容性，泛型型別別名可以透過簡單的賦值來建立： ::"

#: ../../library/typing.rst:632
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ""

#: ../../library/typing.rst:635
msgid ""
"Syntactic support for generics and type aliases is new in version 3.12. "
"Previously, generic classes had to explicitly inherit from :class:`Generic` "
"or contain a type variable in one of their bases."
msgstr ""

#: ../../library/typing.rst:640
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``[**P]``.  The behavior is "
"consistent with type variables' described above as parameter specification "
"variables are treated by the typing module as a specialized type variable.  "
"The one exception to this is that a list of types can be used to substitute "
"a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:651
msgid ""
"Classes generic over a :class:`ParamSpec` can also be created using explicit "
"inheritance from :class:`Generic`. In this case, ``**`` is not used::"
msgstr ""

#: ../../library/typing.rst:661
msgid ""
"Another difference between :class:`TypeVar` and :class:`ParamSpec` is that a "
"generic with only one parameter specification variable will accept parameter "
"lists in the forms ``X[[Type1, Type2, ...]]`` and also ``X[Type1, "
"Type2, ...]`` for aesthetic reasons.  Internally, the latter is converted to "
"the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:674
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""

#: ../../library/typing.rst:678
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""

#: ../../library/typing.rst:682
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""

#: ../../library/typing.rst:689
msgid "The :data:`Any` type"
msgstr ":data:`Any` 型別"

#: ../../library/typing.rst:691
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""

#: ../../library/typing.rst:695
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""

#: ../../library/typing.rst:713
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""

#: ../../library/typing.rst:719
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""

#: ../../library/typing.rst:732
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""

#: ../../library/typing.rst:735
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""

#: ../../library/typing.rst:740
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""

#: ../../library/typing.rst:762
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""

#: ../../library/typing.rst:767
msgid "Nominal vs structural subtyping"
msgstr ""

#: ../../library/typing.rst:769
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""

#: ../../library/typing.rst:773
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""

#: ../../library/typing.rst:786
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""

#: ../../library/typing.rst:802
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""

#: ../../library/typing.rst:807
msgid "Module contents"
msgstr "模組內容"

#: ../../library/typing.rst:809
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr ""

#: ../../library/typing.rst:812
msgid "Special typing primitives"
msgstr ""

#: ../../library/typing.rst:815
msgid "Special types"
msgstr ""

#: ../../library/typing.rst:817
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""

#: ../../library/typing.rst:822
msgid "Special type indicating an unconstrained type."
msgstr ""

#: ../../library/typing.rst:824
msgid "Every type is compatible with :data:`Any`."
msgstr ""

#: ../../library/typing.rst:825
msgid ":data:`Any` is compatible with every type."
msgstr ""

#: ../../library/typing.rst:827
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""

#: ../../library/typing.rst:834
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr ""

#: ../../library/typing.rst:836
msgid "Definition::"
msgstr ""

#: ../../library/typing.rst:840
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` "
"or :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""

#: ../../library/typing.rst:843 ../../library/typing.rst:934
#: ../../library/typing.rst:954 ../../library/typing.rst:1011
#: ../../library/typing.rst:1177 ../../library/typing.rst:1234
#: ../../library/typing.rst:1443 ../../library/typing.rst:2831
msgid "For example::"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../library/typing.rst:852
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the :class:"
"`Any` type, nor does it mean \"any string\". In particular, ``AnyStr`` and "
"``str | bytes`` are different from each other and have different use cases::"
msgstr ""

#: ../../library/typing.rst:869
msgid "Special type that includes only literal strings."
msgstr ""

#: ../../library/typing.rst:871
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string "
"created by composing ``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""

#: ../../library/typing.rst:877 ../../library/typing.rst:1958
msgid "Example:"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../library/typing.rst:893
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""

#: ../../library/typing.rst:898
msgid "See :pep:`675` for more details."
msgstr "更多細節請見 :pep:`675`。"

#: ../../library/typing.rst:904
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type that "
"has no members."
msgstr ""

#: ../../library/typing.rst:907
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr ""

#: ../../library/typing.rst:927
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the same "
"concept. ``Never`` was added to make the intended meaning more explicit."
msgstr ""

#: ../../library/typing.rst:932
msgid "Special type indicating that a function never returns."
msgstr ""

#: ../../library/typing.rst:941
msgid ""
"``NoReturn`` can also be used as a `bottom type <https://en.wikipedia.org/"
"wiki/Bottom_type>`_, a type that has no values. Starting in Python 3.11, "
"the :data:`Never` type should be used for this concept instead. Type "
"checkers should treat the two equivalently."
msgstr ""

#: ../../library/typing.rst:952
msgid "Special type to represent the current enclosed class."
msgstr ""

#: ../../library/typing.rst:968
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""

#: ../../library/typing.rst:980
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""

#: ../../library/typing.rst:986
msgid "Other common use cases include:"
msgstr ""

#: ../../library/typing.rst:988
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""

#: ../../library/typing.rst:990
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr ""

#: ../../library/typing.rst:992
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is subclassed::"
msgstr ""

#: ../../library/typing.rst:1003
msgid "See :pep:`673` for more details."
msgstr "更多細節請見 :pep:`673`。"

#: ../../library/typing.rst:1009
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""

#: ../../library/typing.rst:1017
msgid ""
"``TypeAlias`` is particularly useful on older Python versions for annotating "
"aliases that make use of forward references, as it can be hard for type "
"checkers to distinguish these from normal variable assignments:"
msgstr ""

#: ../../library/typing.rst:1037
msgid "See :pep:`613` for more details."
msgstr "更多細節請見 :pep:`613`。"

#: ../../library/typing.rst:1041
msgid ""
":data:`TypeAlias` is deprecated in favor of the :keyword:`type` statement, "
"which creates instances of :class:`TypeAliasType` and which natively "
"supports forward references. Note that while :data:`TypeAlias` and :class:"
"`TypeAliasType` serve similar purposes and have similar names, they are "
"distinct and the latter is not the type of the former. Removal of :data:"
"`TypeAlias` is not currently planned, but users are encouraged to migrate "
"to :keyword:`type` statements."
msgstr ""

#: ../../library/typing.rst:1052
msgid "Special forms"
msgstr ""

#: ../../library/typing.rst:1054
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""

#: ../../library/typing.rst:1059
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""

#: ../../library/typing.rst:1061
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""

#: ../../library/typing.rst:1063
msgid "The arguments must be types and there must be at least one."
msgstr ""

#: ../../library/typing.rst:1065
msgid "Unions of unions are flattened, e.g.::"
msgstr ""

#: ../../library/typing.rst:1069
msgid "Unions of a single argument vanish, e.g.::"
msgstr ""

#: ../../library/typing.rst:1073
msgid "Redundant arguments are skipped, e.g.::"
msgstr ""

#: ../../library/typing.rst:1077
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""

#: ../../library/typing.rst:1081
msgid "You cannot subclass or instantiate a ``Union``."
msgstr ""

#: ../../library/typing.rst:1083
msgid "You cannot write ``Union[X][Y]``."
msgstr "你不能寫成 ``Union[X][Y]``。"

#: ../../library/typing.rst:1085
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""

#: ../../library/typing.rst:1088
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

#: ../../library/typing.rst:1094
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr ""

#: ../../library/typing.rst:1096
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""

#: ../../library/typing.rst:1104
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""

#: ../../library/typing.rst:1111
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

#: ../../library/typing.rst:1117
msgid "Special form for annotating higher-order functions."
msgstr ""

#: ../../library/typing.rst:1119
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which "
"adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to "
"a :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""

#: ../../library/typing.rst:1128
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""

#: ../../library/typing.rst:1164 ../../library/typing.rst:1926
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""

#: ../../library/typing.rst:1166
msgid ":class:`ParamSpec`"
msgstr ":class:`ParamSpec`。"

#: ../../library/typing.rst:1167 ../../library/typing.rst:1929
msgid ":ref:`annotating-callables`"
msgstr ":ref:`annotating-callables`"

#: ../../library/typing.rst:1171
msgid "Special typing form to define \"literal types\"."
msgstr ""

#: ../../library/typing.rst:1173
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""

#: ../../library/typing.rst:1189
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""

#: ../../library/typing.rst:1195
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""

#: ../../library/typing.rst:1203
msgid "Special type construct to mark class variables."
msgstr ""

#: ../../library/typing.rst:1205
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""

#: ../../library/typing.rst:1213
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""

#: ../../library/typing.rst:1215
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""

#: ../../library/typing.rst:1229
msgid "Special typing construct to indicate final names to type checkers."
msgstr ""

#: ../../library/typing.rst:1231
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class "
"scopes cannot be overridden in subclasses."
msgstr ""

#: ../../library/typing.rst:1245 ../../library/typing.rst:2847
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1252
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""

#: ../../library/typing.rst:1254
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict` "
"and :pep:`655` for more details."
msgstr ""
"主要用於 ``total=False`` 的 TypedDict。更多細節請見 :class:`TypedDict` 與 :"
"pep:`655`。"

#: ../../library/typing.rst:1261
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""

#: ../../library/typing.rst:1264
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "更多細節請見 :class:`TypedDict` 與 :pep:`655`。"

#: ../../library/typing.rst:1270
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""

#: ../../library/typing.rst:1272
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""

#: ../../library/typing.rst:1277
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""

#: ../../library/typing.rst:1283
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""

#: ../../library/typing.rst:1290
msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""

#: ../../library/typing.rst:1298
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""

#: ../../library/typing.rst:1311
msgid "Details of the syntax:"
msgstr ""

#: ../../library/typing.rst:1313
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../library/typing.rst:1315
msgid ""
"Multiple metadata elements can be supplied (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:1324
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""

#: ../../library/typing.rst:1328
msgid ""
"``Annotated`` must be subscripted with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:1331
msgid ""
"The order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""

#: ../../library/typing.rst:1338
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""

#: ../../library/typing.rst:1345
msgid "Duplicated metadata elements are not removed::"
msgstr ""

#: ../../library/typing.rst:1351
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr ""

#: ../../library/typing.rst:1365
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""

#: ../../library/typing.rst:1369
msgid "This would be equivalent to::"
msgstr ""
"這會等價於：\n"
"\n"
"::"

#: ../../library/typing.rst:1373
msgid ""
"where ``T1``, ``T2``, etc. are :class:`TypeVars <TypeVar>`. This would be "
"invalid: only one type should be passed to Annotated."
msgstr ""

#: ../../library/typing.rst:1376
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""

#: ../../library/typing.rst:1389
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""

#: ../../library/typing.rst:1403
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:1404
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr ""

#: ../../library/typing.rst:1411
msgid "Special typing construct for marking user-defined type guard functions."
msgstr ""

#: ../../library/typing.rst:1413
msgid ""
"``TypeGuard`` can be used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""

#: ../../library/typing.rst:1417
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""

#: ../../library/typing.rst:1432
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""

#: ../../library/typing.rst:1436
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""

#: ../../library/typing.rst:1439
msgid "The return value is a boolean."
msgstr ""

#: ../../library/typing.rst:1440
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""

#: ../../library/typing.rst:1457
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1461
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1467
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""

#: ../../library/typing.rst:1473
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1480
msgid "Typing operator to conceptually mark an object as having been unpacked."
msgstr ""

#: ../../library/typing.rst:1482
msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""

#: ../../library/typing.rst:1491
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""

#: ../../library/typing.rst:1505
msgid ""
"``Unpack`` can also be used along with :class:`typing.TypedDict` for typing "
"``**kwargs`` in a function signature::"
msgstr ""

#: ../../library/typing.rst:1518
msgid ""
"See :pep:`692` for more details on using ``Unpack`` for ``**kwargs`` typing."
msgstr ""

#: ../../library/typing.rst:1523
msgid "Building generic types and type aliases"
msgstr ""

#: ../../library/typing.rst:1525
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types and "
"type aliases."
msgstr ""

#: ../../library/typing.rst:1529
msgid ""
"These objects can be created through special syntax (:ref:`type parameter "
"lists <type-params>` and the :keyword:`type` statement). For compatibility "
"with Python 3.11 and earlier, they can also be created without the dedicated "
"syntax, as documented below."
msgstr ""

#: ../../library/typing.rst:1536
msgid "Abstract base class for generic types."
msgstr ""

#: ../../library/typing.rst:1538
msgid ""
"A generic type is typically declared by adding a list of type parameters "
"after the class name::"
msgstr ""

#: ../../library/typing.rst:1546
msgid ""
"Such a class implicitly inherits from ``Generic``. The runtime semantics of "
"this syntax are discussed in the :ref:`Language Reference <generic-classes>`."
msgstr ""

#: ../../library/typing.rst:1550
msgid "This class can then be used as follows::"
msgstr ""

#: ../../library/typing.rst:1558
msgid ""
"Here the brackets after the function name indicate a :ref:`generic function "
"<generic-functions>`."
msgstr ""

#: ../../library/typing.rst:1561
msgid ""
"For backwards compatibility, generic classes can also be declared by "
"explicitly inheriting from ``Generic``. In this case, the type parameters "
"must be declared separately::"
msgstr ""

#: ../../library/typing.rst:1578
msgid "Type variable."
msgstr ""

#: ../../library/typing.rst:1580
msgid ""
"The preferred way to construct a type variable is via the dedicated syntax "
"for :ref:`generic functions <generic-functions>`, :ref:`generic classes "
"<generic-classes>`, and :ref:`generic type aliases <generic-type-aliases>`::"
msgstr ""

#: ../../library/typing.rst:1588
msgid ""
"This syntax can also be used to create bound and constrained type variables::"
msgstr ""

#: ../../library/typing.rst:1598
msgid ""
"However, if desired, reusable type variables can also be constructed "
"manually, like so::"
msgstr ""

#: ../../library/typing.rst:1604
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:1625
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1628
msgid ""
"The variance of type variables is inferred by type checkers when they are "
"created through the :ref:`type parameter syntax <type-params>` or when "
"``infer_variance=True`` is passed. Manually created type variables may be "
"explicitly marked covariant or contravariant by passing ``covariant=True`` "
"or ``contravariant=True``. By default, manually created type variables are "
"invariant. See :pep:`484` and :pep:`695` for more details."
msgstr ""

#: ../../library/typing.rst:1636
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""

#: ../../library/typing.rst:1651
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1663
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""

#: ../../library/typing.rst:1674
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr ""

#: ../../library/typing.rst:1678
msgid "The name of the type variable."
msgstr ""

#: ../../library/typing.rst:1682
msgid "Whether the type var has been explicitly marked as covariant."
msgstr ""

#: ../../library/typing.rst:1686
msgid "Whether the type var has been explicitly marked as contravariant."
msgstr ""

#: ../../library/typing.rst:1690
msgid ""
"Whether the type variable's variance should be inferred by type checkers."
msgstr ""

#: ../../library/typing.rst:1696
msgid "The bound of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1700
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the bound is evaluated only when the attribute is accessed, not "
"when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

#: ../../library/typing.rst:1706
msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1710
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the constraints are evaluated only when the attribute is accessed, "
"not when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

#: ../../library/typing.rst:1716
msgid ""
"Type variables can now be declared using the :ref:`type parameter <type-"
"params>` syntax introduced by :pep:`695`. The ``infer_variance`` parameter "
"was added."
msgstr ""

#: ../../library/typing.rst:1724
msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr ""

#: ../../library/typing.rst:1727
msgid ""
"Type variable tuples can be declared in :ref:`type parameter lists <type-"
"params>` using a single asterisk (``*``) before the name::"
msgstr ""

#: ../../library/typing.rst:1733
msgid "Or by explicitly invoking the ``TypeVarTuple`` constructor::"
msgstr ""

#: ../../library/typing.rst:1741
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""

#: ../../library/typing.rst:1763
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""

#: ../../library/typing.rst:1771
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""

#: ../../library/typing.rst:1778
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""

#: ../../library/typing.rst:1786
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""

#: ../../library/typing.rst:1802
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""

#: ../../library/typing.rst:1809
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""

#: ../../library/typing.rst:1819
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""

#: ../../library/typing.rst:1826
msgid "See :pep:`646` for more details on type variable tuples."
msgstr ""

#: ../../library/typing.rst:1830
msgid "The name of the type variable tuple."
msgstr ""

#: ../../library/typing.rst:1836
msgid ""
"Type variable tuples can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

#: ../../library/typing.rst:1841
msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr ""

#: ../../library/typing.rst:1844
msgid ""
"In :ref:`type parameter lists <type-params>`, parameter specifications can "
"be declared with two asterisks (``**``)::"
msgstr ""

#: ../../library/typing.rst:1849
msgid ""
"For compatibility with Python 3.11 and earlier, ``ParamSpec`` objects can "
"also be created as follows::"
msgstr ""

#: ../../library/typing.rst:1854
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""

#: ../../library/typing.rst:1861
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""

#: ../../library/typing.rst:1881
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""

#: ../../library/typing.rst:1885
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""

#: ../../library/typing.rst:1887
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""

#: ../../library/typing.rst:1894
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""

#: ../../library/typing.rst:1906
msgid "The name of the parameter specification."
msgstr ""

#: ../../library/typing.rst:1908
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""

#: ../../library/typing.rst:1918
msgid ""
"Parameter specifications can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

#: ../../library/typing.rst:1922
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""

#: ../../library/typing.rst:1928
msgid ":data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:1934
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""

#: ../../library/typing.rst:1939
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""

#: ../../library/typing.rst:1956
msgid "The type of type aliases created through the :keyword:`type` statement."
msgstr ""

#: ../../library/typing.rst:1970
msgid "The name of the type alias:"
msgstr ""

#: ../../library/typing.rst:1980
msgid "The module in which the type alias was defined::"
msgstr ""

#: ../../library/typing.rst:1988
msgid ""
"The type parameters of the type alias, or an empty tuple if the alias is not "
"generic:"
msgstr ""

#: ../../library/typing.rst:2002
msgid ""
"The type alias's value. This is :ref:`lazily evaluated <lazy-evaluation>`, "
"so names used in the definition of the alias are not resolved until the "
"``__value__`` attribute is accessed:"
msgstr ""

#: ../../library/typing.rst:2020
msgid "Other special directives"
msgstr ""

#: ../../library/typing.rst:2022
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""

#: ../../library/typing.rst:2028
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ""

#: ../../library/typing.rst:2030 ../../library/typing.rst:2107
#: ../../library/typing.rst:3073
msgid "Usage::"
msgstr ""

#: ../../library/typing.rst:2036
msgid "This is equivalent to::"
msgstr ""
"這等價於：\n"
"\n"
"::"

#: ../../library/typing.rst:2040
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""

#: ../../library/typing.rst:2049
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""

#: ../../library/typing.rst:2051
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""

#: ../../library/typing.rst:2057
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""

#: ../../library/typing.rst:2067
msgid "``NamedTuple`` subclasses can be generic::"
msgstr ""

#: ../../library/typing.rst:2073
msgid "Backward-compatible usage::"
msgstr ""

#: ../../library/typing.rst:2083
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""

#: ../../library/typing.rst:2086
msgid "Added support for default values, methods, and docstrings."
msgstr ""

#: ../../library/typing.rst:2089
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""

#: ../../library/typing.rst:2093
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

#: ../../library/typing.rst:2097
msgid "Added support for generic namedtuples."
msgstr ""

#: ../../library/typing.rst:2102
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""

#: ../../library/typing.rst:2104
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""

#: ../../library/typing.rst:2114
msgid "The module in which the new type is defined."
msgstr ""

#: ../../library/typing.rst:2118
msgid "The name of the new type."
msgstr ""

#: ../../library/typing.rst:2122
msgid "The type that the new type is based on."
msgstr ""

#: ../../library/typing.rst:2126
msgid "``NewType`` is now a class rather than a function."
msgstr ""

#: ../../library/typing.rst:2131
msgid "Base class for protocol classes."
msgstr ""

#: ../../library/typing.rst:2133
msgid "Protocol classes are defined like this::"
msgstr ""

#: ../../library/typing.rst:2139
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

#: ../../library/typing.rst:2151
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""

#: ../../library/typing.rst:2156
msgid "Protocol classes can be generic, for example::"
msgstr ""

#: ../../library/typing.rst:2162
msgid ""
"In code that needs to be compatible with Python 3.11 or older, generic "
"Protocols can be written as follows::"
msgstr ""

#: ../../library/typing.rst:2175
msgid "Mark a protocol class as a runtime protocol."
msgstr ""

#: ../../library/typing.rst:2177
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:2197
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :ref:`Callable <annotating-callables>`. However, the ``ssl."
"SSLObject.__init__`` method exists only to raise a :exc:`TypeError` with a "
"more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""

#: ../../library/typing.rst:2208
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""

#: ../../library/typing.rst:2216
msgid ""
"The internal implementation of :func:`isinstance` checks against runtime-"
"checkable protocols now uses :func:`inspect.getattr_static` to look up "
"attributes (previously, :func:`hasattr` was used). As a result, some objects "
"which used to be considered instances of a runtime-checkable protocol may no "
"longer be considered instances of that protocol on Python 3.12+, and vice "
"versa. Most users are unlikely to be affected by this change."
msgstr ""

#: ../../library/typing.rst:2225
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. See :ref:"
"`\"What's new in Python 3.12\" <whatsnew-typing-py312>` for more details."
msgstr ""

#: ../../library/typing.rst:2236
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""

#: ../../library/typing.rst:2239
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../library/typing.rst:2255
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""

#: ../../library/typing.rst:2259
msgid "Using a literal :class:`dict` as the second argument::"
msgstr ""

#: ../../library/typing.rst:2263
msgid "Using keyword arguments::"
msgstr ""

#: ../../library/typing.rst:2270
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""

#: ../../library/typing.rst:2271
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""

#: ../../library/typing.rst:2283
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""

#: ../../library/typing.rst:2294
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""

#: ../../library/typing.rst:2297
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""

#: ../../library/typing.rst:2307
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""

#: ../../library/typing.rst:2312
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""

#: ../../library/typing.rst:2327
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

#: ../../library/typing.rst:2334
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

#: ../../library/typing.rst:2342
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""

#: ../../library/typing.rst:2357
msgid "A ``TypedDict`` can be generic::"
msgstr ""

#: ../../library/typing.rst:2363
msgid ""
"To create a generic ``TypedDict`` that is compatible with Python 3.11 or "
"lower, inherit from :class:`Generic` explicitly:"
msgstr ""

#: ../../library/typing.rst:2374
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""

#: ../../library/typing.rst:2380
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr ""

#: ../../library/typing.rst:2396
msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to True may have keys "
"marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to "
"use :attr:`__required_keys__` and :attr:`__optional_keys__` for "
"introspection."
msgstr ""

#: ../../library/typing.rst:2409
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""

#: ../../library/typing.rst:2412
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""

#: ../../library/typing.rst:2415
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""

#: ../../library/typing.rst:2440
msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and "
"``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""

#: ../../library/typing.rst:2446
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../library/typing.rst:2450
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""

#: ../../library/typing.rst:2454
msgid "Added support for generic ``TypedDict``\\ s."
msgstr ""

#: ../../library/typing.rst:2458
msgid "Protocols"
msgstr "協定"

#: ../../library/typing.rst:2460
msgid ""
"The following protocols are provided by the typing module. All are decorated "
"with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""

#: ../../library/typing.rst:2465
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

#: ../../library/typing.rst:2470
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "一個有抽象方法 ``__bytes__`` 的 ABC。"

#: ../../library/typing.rst:2474
msgid "An ABC with one abstract method ``__complex__``."
msgstr "一個有抽象方法 ``__complex__`` 的 ABC。"

#: ../../library/typing.rst:2478
msgid "An ABC with one abstract method ``__float__``."
msgstr "一個有抽象方法 ``__float__`` 的 ABC。"

#: ../../library/typing.rst:2482
msgid "An ABC with one abstract method ``__index__``."
msgstr "一個有抽象方法 ``__index__`` 的 ABC。"

#: ../../library/typing.rst:2488
msgid "An ABC with one abstract method ``__int__``."
msgstr "一個有抽象方法 ``__int__`` 的 ABC。"

#: ../../library/typing.rst:2492
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

#: ../../library/typing.rst:2496
msgid "ABCs for working with IO"
msgstr ""

#: ../../library/typing.rst:2502
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""

#: ../../library/typing.rst:2508
msgid "Functions and decorators"
msgstr "函式與裝飾器"

#: ../../library/typing.rst:2512
msgid "Cast a value to a type."
msgstr ""

#: ../../library/typing.rst:2514
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""

#: ../../library/typing.rst:2521
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""

#: ../../library/typing.rst:2523
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""

#: ../../library/typing.rst:2526
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""

#: ../../library/typing.rst:2533
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""

#: ../../library/typing.rst:2547
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""

#: ../../library/typing.rst:2549
msgid "Example::"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../library/typing.rst:2560
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases."
msgstr ""

#: ../../library/typing.rst:2565
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing "
"out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""

#: ../../library/typing.rst:2573
msgid "At runtime, this throws an exception when called."
msgstr ""

#: ../../library/typing.rst:2576
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""

#: ../../library/typing.rst:2584
msgid "Reveal the inferred static type of an expression."
msgstr ""

#: ../../library/typing.rst:2586
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the type of the argument. For example::"
msgstr ""

#: ../../library/typing.rst:2592
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""

#: ../../library/typing.rst:2595
msgid ""
"The function returns its argument unchanged, which allows using it within an "
"expression::"
msgstr ""

#: ../../library/typing.rst:2600
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing`` allows your "
"code to run without runtime errors and communicates intent more clearly."
msgstr ""

#: ../../library/typing.rst:2605
msgid ""
"At runtime, this function prints the runtime type of its argument to stderr "
"and returns it unchanged::"
msgstr ""

#: ../../library/typing.rst:2617
msgid ""
"Decorator to mark an object as providing :func:`dataclass <dataclasses."
"dataclass>`-like behavior."
msgstr ""

#: ../../library/typing.rst:2620
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""

#: ../../library/typing.rst:2627
msgid "Example usage with a decorator function:"
msgstr ""

#: ../../library/typing.rst:2641
msgid "On a base class::"
msgstr ""

#: ../../library/typing.rst:2650
msgid "On a metaclass::"
msgstr ""

#: ../../library/typing.rst:2661
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""

#: ../../library/typing.rst:2667
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""

#: ../../library/typing.rst:2675
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""

#: ../../library/typing.rst:0
msgid "Parameters"
msgstr ""

#: ../../library/typing.rst:2679
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2684
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2689
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2694
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``.  .. "
"versionadded:: 3.12"
msgstr ""

#: ../../library/typing.rst:2695
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2701
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""

#: ../../library/typing.rst:2707
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""

#: ../../library/typing.rst:2711
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""

#: ../../library/typing.rst:2714
msgid "**Recognised parameters for field specifiers**"
msgstr ""

#: ../../library/typing.rst:2718
msgid "Parameter name"
msgstr ""

#: ../../library/typing.rst:2719
msgid "Description"
msgstr ""

#: ../../library/typing.rst:2720
msgid "``init``"
msgstr "``init``"

#: ../../library/typing.rst:2721
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2724
msgid "``default``"
msgstr "``default``"

#: ../../library/typing.rst:2725
msgid "Provides the default value for the field."
msgstr ""

#: ../../library/typing.rst:2726
msgid "``default_factory``"
msgstr "``default_factory``"

#: ../../library/typing.rst:2727
msgid ""
"Provides a runtime callback that returns the default value for the field. If "
"neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class "
"is instantiated."
msgstr ""

#: ../../library/typing.rst:2732
msgid "``factory``"
msgstr "``factory``"

#: ../../library/typing.rst:2733
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr ""

#: ../../library/typing.rst:2734
msgid "``kw_only``"
msgstr "``kw_only``"

#: ../../library/typing.rst:2735
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""

#: ../../library/typing.rst:2741
msgid "``alias``"
msgstr "``alias``"

#: ../../library/typing.rst:2742
msgid ""
"Provides an alternative name for the field. This alternative name is used in "
"the synthesized ``__init__`` method."
msgstr ""

#: ../../library/typing.rst:2745
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""

#: ../../library/typing.rst:2749
msgid "See :pep:`681` for more details."
msgstr "更多細節請見 :pep:`681`。"

#: ../../library/typing.rst:2757
msgid "Decorator for creating overloaded functions and methods."
msgstr ""

#: ../../library/typing.rst:2759
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method)."
msgstr ""

#: ../../library/typing.rst:2764
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../library/typing.rst:2772
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""

#: ../../library/typing.rst:2789
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""

#: ../../library/typing.rst:2791
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr ""

#: ../../library/typing.rst:2798
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""

#: ../../library/typing.rst:2801
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""

#: ../../library/typing.rst:2808
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""

#: ../../library/typing.rst:2816
msgid "Clear all registered overloads in the internal registry."
msgstr ""

#: ../../library/typing.rst:2818
msgid "This can be used to reclaim the memory used by the registry."
msgstr ""

#: ../../library/typing.rst:2825
msgid "Decorator to indicate final methods and final classes."
msgstr ""

#: ../../library/typing.rst:2827
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""

#: ../../library/typing.rst:2852
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""

#: ../../library/typing.rst:2863
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""

#: ../../library/typing.rst:2865
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""

#: ../../library/typing.rst:2871
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr ""

#: ../../library/typing.rst:2875
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""

#: ../../library/typing.rst:2877
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""

#: ../../library/typing.rst:2883
msgid ""
"Decorator to indicate that a method in a subclass is intended to override a "
"method or attribute in a superclass."
msgstr ""

#: ../../library/typing.rst:2886
msgid ""
"Type checkers should emit an error if a method decorated with ``@override`` "
"does not, in fact, override anything. This helps prevent bugs that may occur "
"when a base class is changed without an equivalent change to a child class."
msgstr ""

#: ../../library/typing.rst:2908
msgid "There is no runtime checking of this property."
msgstr ""

#: ../../library/typing.rst:2910
msgid ""
"The decorator will attempt to set an ``__override__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, "
"\"__override__\", False)`` can be used at runtime to determine whether an "
"object ``obj`` has been marked as an override.  If the decorated object does "
"not support setting attributes, the decorator returns the object unchanged "
"without raising an exception."
msgstr ""

#: ../../library/typing.rst:2917
msgid "See :pep:`698` for more details."
msgstr "更多細節請見 :pep:`698`。"

#: ../../library/typing.rst:2924
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""

#: ../../library/typing.rst:2926
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../library/typing.rst:2937
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

#: ../../library/typing.rst:2941
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:2945
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""

#: ../../library/typing.rst:2948
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along ``C."
"__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:2954
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example:"
msgstr ""

#: ../../library/typing.rst:2971
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:2976
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""
"新增 ``include_extras`` 參數（如 :pep:`593` 中所述）。更多資訊請見 :data:"
"`Annotated` 的文件。"

#: ../../library/typing.rst:2980
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""

#: ../../library/typing.rst:2987
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""

#: ../../library/typing.rst:2990
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class, "
"it will be normalized to the original class. If ``X`` is an instance of :"
"class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying :"
"class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""

#: ../../library/typing.rst:2996 ../../library/typing.rst:3019
msgid "Examples:"
msgstr "舉例："

#: ../../library/typing.rst:3011
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""

#: ../../library/typing.rst:3014
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for unsupported "
"objects."
msgstr ""

#: ../../library/typing.rst:3031
msgid "Check if a type is a :class:`TypedDict`."
msgstr ""

#: ../../library/typing.rst:3052
msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""

#: ../../library/typing.rst:3054
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  ``ForwardRef`` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:3059
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""

#: ../../library/typing.rst:3066
msgid "Constant"
msgstr "常數"

#: ../../library/typing.rst:3070
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr ""

#: ../../library/typing.rst:3081
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""

#: ../../library/typing.rst:3088
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""

#: ../../library/typing.rst:3100
msgid "Deprecated aliases"
msgstr "棄用的別名"

#: ../../library/typing.rst:3102
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However, "
"the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""

#: ../../library/typing.rst:3109
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""

#: ../../library/typing.rst:3114
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
"typing module without deprecation warnings until at least Python 3.14."
msgstr ""

#: ../../library/typing.rst:3119
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""

#: ../../library/typing.rst:3125
msgid "Aliases to built-in types"
msgstr "內建型別的別名"

#: ../../library/typing.rst:3129
msgid "Deprecated alias to :class:`dict`."
msgstr "棄用 :class:`dict` 的別名。"

#: ../../library/typing.rst:3131
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Mapping` rather than to use :class:`dict` "
"or :class:`!typing.Dict`."
msgstr ""

#: ../../library/typing.rst:3135 ../../library/typing.rst:3377
msgid "This type can be used as follows::"
msgstr ""

#: ../../library/typing.rst:3140
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3146
msgid "Deprecated alias to :class:`list`."
msgstr "棄用 :class:`list` 的別名。"

#: ../../library/typing.rst:3148
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Sequence` or :class:`Iterable` rather than "
"to use :class:`list` or :class:`!typing.List`."
msgstr ""

#: ../../library/typing.rst:3152
msgid "This type may be used as follows::"
msgstr ""

#: ../../library/typing.rst:3160
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3166
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr "棄用 :class:`builtins.set <set>` 的別名。"

#: ../../library/typing.rst:3168
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`AbstractSet` rather than to use :class:`set` "
"or :class:`!typing.Set`."
msgstr ""

#: ../../library/typing.rst:3172
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3178
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr "棄用 :class:`builtins.frozenset <frozenset>` 的別名。"

#: ../../library/typing.rst:3180
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3187
msgid "Deprecated alias for :class:`tuple`."
msgstr "棄用 :class:`tuple` 的別名。"

#: ../../library/typing.rst:3189
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see :ref:"
"`annotating-tuples` for more details."
msgstr ""

#: ../../library/typing.rst:3192
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3198
msgid "Deprecated alias to :class:`type`."
msgstr "棄用 :class:`type` 的別名。"

#: ../../library/typing.rst:3200
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3205
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3212
msgid "Aliases to types in :mod:`collections`"
msgstr ":mod:`collections` 中型別的別名"

#: ../../library/typing.rst:3216
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr "棄用 :class:`collections.defaultdict` 的別名。"

#: ../../library/typing.rst:3220
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3226
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr "棄用 :class:`collections.OrderedDict` 的別名。"

#: ../../library/typing.rst:3230
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3236
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr "棄用 :class:`collections.ChainMap` 的別名。"

#: ../../library/typing.rst:3241
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3247
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr "棄用 :class:`collections.Counter` 的別名。"

#: ../../library/typing.rst:3252
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3258
msgid "Deprecated alias to :class:`collections.deque`."
msgstr "棄用 :class:`collections.deque` 的別名。"

#: ../../library/typing.rst:3263
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3270
msgid "Aliases to other concrete types"
msgstr ""

#: ../../library/typing.rst:3275
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:3279
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile` "
"and :func:`re.match`."
msgstr ""

#: ../../library/typing.rst:3282
msgid ""
"These types (and the corresponding functions) are generic over :data:"
"`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""

#: ../../library/typing.rst:3290
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:3291
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3297
msgid "Deprecated alias for :class:`str`."
msgstr "棄用 :class:`str` 的別名。"

#: ../../library/typing.rst:3299
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""

#: ../../library/typing.rst:3303
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

#: ../../library/typing.rst:3311
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""

#: ../../library/typing.rst:3321
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 中容器 ABC 的別名"

#: ../../library/typing.rst:3325
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr "棄用 :class:`collections.abc.Set` 的別名。"

#: ../../library/typing.rst:3327
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3333
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""

#: ../../library/typing.rst:3337
msgid ""
"Prefer :class:`collections.abc.Buffer`, or a union like ``bytes | bytearray "
"| memoryview``."
msgstr ""

#: ../../library/typing.rst:3341
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr "棄用 :class:`collections.abc.Collection` 的別名。"

#: ../../library/typing.rst:3345
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3351
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr "棄用 :class:`collections.abc.Container` 的別名。"

#: ../../library/typing.rst:3353
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3359
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr "棄用 :class:`collections.abc.ItemsView` 的別名。"

#: ../../library/typing.rst:3361
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3367
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr "棄用 :class:`collections.abc.KeysView` 的別名。"

#: ../../library/typing.rst:3369
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3375
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr "棄用 :class:`collections.abc.Mapping` 的別名。"

#: ../../library/typing.rst:3382
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3388
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr "棄用 :class:`collections.abc.MappingView` 的別名。"

#: ../../library/typing.rst:3390
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3396
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr "棄用 :class:`collections.abc.MutableMapping` 的別名。"

#: ../../library/typing.rst:3398
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3405
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr "棄用 :class:`collections.abc.MutableSequence` 的別名。"

#: ../../library/typing.rst:3407
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3414
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr "棄用 :class:`collections.abc.MutableSet` 的別名。"

#: ../../library/typing.rst:3416
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3422
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr "棄用 :class:`collections.abc.Sequence` 的別名。"

#: ../../library/typing.rst:3424
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3430
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr "棄用 :class:`collections.abc.ValuesView` 的別名。"

#: ../../library/typing.rst:3432
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3439
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3443
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr "棄用 :class:`collections.abc.Coroutine` 的別名。"

#: ../../library/typing.rst:3445
msgid ""
"The variance and order of type variables correspond to those of :class:"
"`Generator`, for example::"
msgstr ""

#: ../../library/typing.rst:3456
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3462
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr "棄用 :class:`collections.abc.AsyncGenerator` 的別名。"

#: ../../library/typing.rst:3464
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3473
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:3477
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3485
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3495
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3502
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr "棄用 :class:`collections.abc.AsyncIterable` 的別名。"

#: ../../library/typing.rst:3506
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3512
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr "棄用 :class:`collections.abc.AsyncIterator` 的別名。"

#: ../../library/typing.rst:3516
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3522
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr "棄用 :class:`collections.abc.Awaitable` 的別名。"

#: ../../library/typing.rst:3526
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3533
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3537
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr "棄用 :class:`collections.abc.Iterable` 的別名。"

#: ../../library/typing.rst:3539
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3545
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr "棄用 :class:`collections.abc.Iterator` 的別名。"

#: ../../library/typing.rst:3547
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3553
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr "棄用 :class:`collections.abc.Callable` 的別名。"

#: ../../library/typing.rst:3555
msgid ""
"See :ref:`annotating-callables` for details on how to use :class:"
"`collections.abc.Callable` and ``typing.Callable`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3558
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3568
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr "棄用 :class:`collections.abc.Generator` 的別名。"

#: ../../library/typing.rst:3570
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3579
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:3583
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3591
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3599
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3605
msgid "Deprecated alias to :class:`collections.abc.Hashable`."
msgstr "棄用 :class:`collections.abc.Hashable` 的別名。"

#: ../../library/typing.rst:3607
msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr "改為直接使用 :class:`collections.abc.Hashable`。"

#: ../../library/typing.rst:3612
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr "棄用 :class:`collections.abc.Reversible` 的別名。"

#: ../../library/typing.rst:3614
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3620
msgid "Deprecated alias to :class:`collections.abc.Sized`."
msgstr "棄用 :class:`collections.abc.Sized` 的別名。"

#: ../../library/typing.rst:3622
msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr "改為直接使用 :class:`collections.abc.Sized`。"

#: ../../library/typing.rst:3628
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr ":mod:`contextlib` ABC 的別名"

#: ../../library/typing.rst:3632
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../library/typing.rst:3637
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3644
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../library/typing.rst:3649
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3655
msgid "Deprecation Timeline of Major Features"
msgstr ""

#: ../../library/typing.rst:3657
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""

#: ../../library/typing.rst:3664
msgid "Feature"
msgstr ""

#: ../../library/typing.rst:3665
msgid "Deprecated in"
msgstr "棄用於"

#: ../../library/typing.rst:3666
msgid "Projected removal"
msgstr ""

#: ../../library/typing.rst:3667
msgid "PEP/issue"
msgstr ""

#: ../../library/typing.rst:3668
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr "``typing.io`` 和 ``typing.re`` 子模組"

#: ../../library/typing.rst:3669
msgid "3.8"
msgstr "3.8"

#: ../../library/typing.rst:3670
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:3671
msgid ":issue:`38291`"
msgstr ":issue:`38291`"

#: ../../library/typing.rst:3672
msgid "``typing`` versions of standard collections"
msgstr ""

#: ../../library/typing.rst:3673 ../../library/typing.rst:3677
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:3674
msgid "Undecided (see :ref:`deprecated-aliases` for more information)"
msgstr ""

#: ../../library/typing.rst:3675
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:3676
msgid ":class:`typing.ByteString`"
msgstr ":class:`typing.ByteString`"

#: ../../library/typing.rst:3678
msgid "3.14"
msgstr "3.14"

#: ../../library/typing.rst:3679
msgid ":gh:`91896`"
msgstr ":gh:`91896`"

#: ../../library/typing.rst:3680
msgid ":data:`typing.Text`"
msgstr ":data:`typing.Text`"

#: ../../library/typing.rst:3681
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:3682 ../../library/typing.rst:3686
#: ../../library/typing.rst:3690
msgid "Undecided"
msgstr ""

#: ../../library/typing.rst:3683
msgid ":gh:`92332`"
msgstr ":gh:`92332`"

#: ../../library/typing.rst:3684
msgid ":class:`typing.Hashable` and :class:`typing.Sized`"
msgstr ":class:`typing.Hashable` 和 :class:`typing.Sized`。"

#: ../../library/typing.rst:3685 ../../library/typing.rst:3689
msgid "3.12"
msgstr ""

#: ../../library/typing.rst:3687
msgid ":gh:`94309`"
msgstr ":gh:`94309`"

#: ../../library/typing.rst:3688
msgid ":data:`typing.TypeAlias`"
msgstr ":data:`typing.TypeAlias`"

#: ../../library/typing.rst:3691
msgid ":pep:`695`"
msgstr ":pep:`695`"
