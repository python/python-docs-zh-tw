# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-11 00:16+0000\n"
"PO-Revision-Date: 2018-05-23 16:14+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ""

#: ../../library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**原始碼：**\\ :source:`Lib/typing.py`"

#: ../../library/typing.rst:14
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""

#: ../../library/typing.rst:20
msgid ""
"This module provides runtime support for type hints. The most fundamental "
"support consists of the types :data:`Any`, :data:`Union`, :data:`Callable`, :"
"class:`TypeVar`, and :class:`Generic`. For a full specification, please see :"
"pep:`484`. For a simplified introduction to type hints, see :pep:`483`."
msgstr ""

#: ../../library/typing.rst:26
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""

#: ../../library/typing.rst:31
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""

#: ../../library/typing.rst:35
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""

#: ../../library/typing.rst:39
msgid ""
"For a summary of deprecated features and a deprecation timeline, please see "
"`Deprecation Timeline of Major Features`_."
msgstr ""

#: ../../library/typing.rst:44
msgid ""
"For a quick overview of type hints, refer to `this cheat sheet <https://mypy."
"readthedocs.io/en/stable/cheat_sheet_py3.html>`_."
msgstr ""

#: ../../library/typing.rst:47
msgid ""
"The \"Type System Reference\" section of https://mypy.readthedocs.io/ -- "
"since the Python typing system is standardised via PEPs, this reference "
"should broadly apply to most Python type checkers, although some parts may "
"still be specific to mypy."
msgstr ""

#: ../../library/typing.rst:52
msgid ""
"The documentation at https://typing.readthedocs.io/ serves as useful "
"reference for type system features, useful typing related tools and typing "
"best practices."
msgstr ""

#: ../../library/typing.rst:58
msgid "Relevant PEPs"
msgstr ""

#: ../../library/typing.rst:60
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations. These include:"
msgstr ""

#: ../../library/typing.rst:65
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ""

#: ../../library/typing.rst:65
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""

#: ../../library/typing.rst:68
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""

#: ../../library/typing.rst:68
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""

#: ../../library/typing.rst:71
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/typing.rst:71
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""

#: ../../library/typing.rst:73
msgid ":pep:`586`: Literal Types"
msgstr ""

#: ../../library/typing.rst:74
msgid "*Introducing* :data:`Literal`"
msgstr ""

#: ../../library/typing.rst:75
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ""

#: ../../library/typing.rst:76
msgid "*Introducing* :class:`TypedDict`"
msgstr ""

#: ../../library/typing.rst:77
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ""

#: ../../library/typing.rst:78
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr ""

#: ../../library/typing.rst:79
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:80
msgid "*Introducing* :data:`Annotated`"
msgstr ""

#: ../../library/typing.rst:83
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ""

#: ../../library/typing.rst:82
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""

#: ../../library/typing.rst:85
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ""

#: ../../library/typing.rst:86
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:87
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ""

#: ../../library/typing.rst:88
msgid "*Introducing* :data:`TypeAlias`"
msgstr "*引入* :data:`TypeAlias`"

#: ../../library/typing.rst:89
msgid ":pep:`646`: Variadic Generics"
msgstr ""

#: ../../library/typing.rst:90
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr "*引入* :data:`TypeVarTuple`"

#: ../../library/typing.rst:91
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ""

#: ../../library/typing.rst:92
msgid "*Introducing* :data:`TypeGuard`"
msgstr "*引入* :data:`TypeGuard`"

#: ../../library/typing.rst:93
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially "
"missing"
msgstr ""

#: ../../library/typing.rst:94
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr "*引入*  :data:`Required` 和 :data:`NotRequired`"

#: ../../library/typing.rst:95
msgid ":pep:`673`: Self type"
msgstr ""

#: ../../library/typing.rst:96
msgid "*Introducing* :data:`Self`"
msgstr "*引入* :data:`Self`"

#: ../../library/typing.rst:97
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ""

#: ../../library/typing.rst:98
msgid "*Introducing* :data:`LiteralString`"
msgstr "*引入* :data:`LiteralString`"

#: ../../library/typing.rst:100
msgid ":pep:`681`: Data Class Transforms"
msgstr ""

#: ../../library/typing.rst:100
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` decorator"
msgstr "*引入* :func:`@dataclass_transform<dataclass_transform>` 裝飾器"

#: ../../library/typing.rst:105
msgid "Type aliases"
msgstr ""

#: ../../library/typing.rst:107
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``list[float]`` will be treated as interchangeable synonyms::"
msgstr ""

#: ../../library/typing.rst:118
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""

#: ../../library/typing.rst:136
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr ""

#: ../../library/typing.rst:142
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:144
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr ""

#: ../../library/typing.rst:151
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""

#: ../../library/typing.rst:163
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""

#: ../../library/typing.rst:171
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""

#: ../../library/typing.rst:177
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""

#: ../../library/typing.rst:180
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr ""

#: ../../library/typing.rst:189
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""

#: ../../library/typing.rst:197
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr ""

#: ../../library/typing.rst:199
msgid "See :pep:`484` for more details."
msgstr "更多細節請見 :pep:`484`\\ 。"

#: ../../library/typing.rst:203
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""

#: ../../library/typing.rst:208
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""

#: ../../library/typing.rst:217
msgid ""
"``NewType`` is now a class rather than a function.  There is some additional "
"runtime cost when calling ``NewType`` over a regular function.  However, "
"this cost will be reduced in 3.11.0."
msgstr ""

#: ../../library/typing.rst:224
msgid "Callable"
msgstr ""

#: ../../library/typing.rst:226
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""

#: ../../library/typing.rst:229 ../../library/typing.rst:1171
#: ../../library/typing.rst:2832
msgid "For example::"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../library/typing.rst:244
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""

#: ../../library/typing.rst:248 ../../library/typing.rst:850
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""

#: ../../library/typing.rst:256 ../../library/typing.rst:862
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""

#: ../../library/typing.rst:261
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""

#: ../../library/typing.rst:267
msgid "Generics"
msgstr ""

#: ../../library/typing.rst:269
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr ""

#: ../../library/typing.rst:280
msgid ""
"Generics can be parameterized by using a factory available in typing called :"
"class:`TypeVar`."
msgstr ""

#: ../../library/typing.rst:296
msgid "User-defined generic types"
msgstr ""

#: ../../library/typing.rst:298
msgid "A user-defined class can be defined as a generic class."
msgstr ""

#: ../../library/typing.rst:324
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""

#: ../../library/typing.rst:328
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__` so "
"that ``LoggedVar[T]`` is valid as a type::"
msgstr ""

#: ../../library/typing.rst:337
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""

#: ../../library/typing.rst:349
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""

#: ../../library/typing.rst:360
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ""

#: ../../library/typing.rst:370
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr ""

#: ../../library/typing.rst:380
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr ""

#: ../../library/typing.rst:382
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""

#: ../../library/typing.rst:390
msgid "User defined generic type aliases are also supported. Examples::"
msgstr ""

#: ../../library/typing.rst:407
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ""

#: ../../library/typing.rst:410
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The behavior "
"is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized "
"type variable.  The one exception to this is that a list of types can be "
"used to substitute a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:427
msgid ""
"Furthermore, a generic with only one parameter specification variable will "
"accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also "
"``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the latter is "
"converted to the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:439
msgid ""
"Do note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""

#: ../../library/typing.rst:443
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""

#: ../../library/typing.rst:447
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""

#: ../../library/typing.rst:454
msgid "The :data:`Any` type"
msgstr ":data:`Any` 型別"

#: ../../library/typing.rst:456
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""

#: ../../library/typing.rst:460
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""

#: ../../library/typing.rst:478
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""

#: ../../library/typing.rst:484
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""

#: ../../library/typing.rst:497
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""

#: ../../library/typing.rst:500
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""

#: ../../library/typing.rst:505
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""

#: ../../library/typing.rst:527
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""

#: ../../library/typing.rst:532
msgid "Nominal vs structural subtyping"
msgstr ""

#: ../../library/typing.rst:534
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""

#: ../../library/typing.rst:538
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""

#: ../../library/typing.rst:551
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""

#: ../../library/typing.rst:567
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""

#: ../../library/typing.rst:572
msgid "Module contents"
msgstr "模組內容"

#: ../../library/typing.rst:574
msgid "The module defines the following classes, functions and decorators."
msgstr ""

#: ../../library/typing.rst:578
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support type "
"variables inside ``[]``. These types became redundant in Python 3.9 when the "
"corresponding pre-existing classes were enhanced to support ``[]``."
msgstr ""

#: ../../library/typing.rst:584
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""

#: ../../library/typing.rst:589
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the "
"first Python version released 5 years after the release of Python 3.9.0. See "
"details in :pep:`585`—*Type Hinting Generics In Standard Collections*."
msgstr ""

#: ../../library/typing.rst:595
msgid "Special typing primitives"
msgstr ""

#: ../../library/typing.rst:598
msgid "Special types"
msgstr ""

#: ../../library/typing.rst:600
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr ""

#: ../../library/typing.rst:604
msgid "Special type indicating an unconstrained type."
msgstr ""

#: ../../library/typing.rst:606
msgid "Every type is compatible with :data:`Any`."
msgstr ""

#: ../../library/typing.rst:607
msgid ":data:`Any` is compatible with every type."
msgstr ""

#: ../../library/typing.rst:609
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""

#: ../../library/typing.rst:616
msgid ""
"Special type that includes only literal strings. A string literal is "
"compatible with ``LiteralString``, as is another ``LiteralString``, but an "
"object typed as just ``str`` is not. A string created by composing "
"``LiteralString``-typed objects is also acceptable as a ``LiteralString``."
msgstr ""

#: ../../library/typing.rst:622 ../../library/typing.rst:2461
msgid "Example::"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../library/typing.rst:636
msgid ""
"This is useful for sensitive APIs where arbitrary user-generated strings "
"could generate problems. For example, the two cases above that generate type "
"checker errors could be vulnerable to an SQL injection attack."
msgstr ""

#: ../../library/typing.rst:641
msgid "See :pep:`675` for more details."
msgstr "更多細節請見 :pep:`675`。"

#: ../../library/typing.rst:647
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type that "
"has no members."
msgstr ""

#: ../../library/typing.rst:650
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr ""

#: ../../library/typing.rst:670
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the same "
"concept. ``Never`` was added to make the intended meaning more explicit."
msgstr ""

#: ../../library/typing.rst:675
msgid "Special type indicating that a function never returns. For example::"
msgstr ""

#: ../../library/typing.rst:683
msgid ""
"``NoReturn`` can also be used as a `bottom type <https://en.wikipedia.org/"
"wiki/Bottom_type>`_, a type that has no values. Starting in Python 3.11, "
"the :data:`Never` type should be used for this concept instead. Type "
"checkers should treat the two equivalently."
msgstr ""

#: ../../library/typing.rst:694
msgid "Special type to represent the current enclosed class. For example::"
msgstr ""

#: ../../library/typing.rst:705
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""

#: ../../library/typing.rst:717
msgid "In general if something currently follows the pattern of::"
msgstr ""

#: ../../library/typing.rst:724
msgid ""
"You should use :data:`Self` as calls to ``SubclassOfFoo.return_self`` would "
"have ``Foo`` as the return type and not ``SubclassOfFoo``."
msgstr ""

#: ../../library/typing.rst:727
msgid "Other common use cases include:"
msgstr ""

#: ../../library/typing.rst:729
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""

#: ../../library/typing.rst:731
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr ""

#: ../../library/typing.rst:733
msgid "See :pep:`673` for more details."
msgstr "更多細節請見 :pep:`673`。"

#: ../../library/typing.rst:739
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`. For example::"
msgstr ""

#: ../../library/typing.rst:746
msgid "See :pep:`613` for more details about explicit type aliases."
msgstr ""

#: ../../library/typing.rst:751
msgid "Special forms"
msgstr ""

#: ../../library/typing.rst:753
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique "
"syntax."
msgstr ""

#: ../../library/typing.rst:757
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""

#: ../../library/typing.rst:761
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""

#: ../../library/typing.rst:765
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""

#: ../../library/typing.rst:769
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:775
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""

#: ../../library/typing.rst:777
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""

#: ../../library/typing.rst:779
msgid "The arguments must be types and there must be at least one."
msgstr ""

#: ../../library/typing.rst:781
msgid "Unions of unions are flattened, e.g.::"
msgstr ""

#: ../../library/typing.rst:785
msgid "Unions of a single argument vanish, e.g.::"
msgstr ""

#: ../../library/typing.rst:789
msgid "Redundant arguments are skipped, e.g.::"
msgstr ""

#: ../../library/typing.rst:793
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""

#: ../../library/typing.rst:797
msgid "You cannot subclass or instantiate a ``Union``."
msgstr ""

#: ../../library/typing.rst:799
msgid "You cannot write ``Union[X][Y]``."
msgstr "你不能寫成 ``Union[X][Y]``。"

#: ../../library/typing.rst:801
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""

#: ../../library/typing.rst:804
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

#: ../../library/typing.rst:810
msgid "Optional type."
msgstr ""

#: ../../library/typing.rst:812
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr ""

#: ../../library/typing.rst:814
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""

#: ../../library/typing.rst:822
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""

#: ../../library/typing.rst:829
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

#: ../../library/typing.rst:835
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr ""

#: ../../library/typing.rst:837
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""

#: ../../library/typing.rst:842
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""

#: ../../library/typing.rst:858
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:867
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provide "
"examples of usage with ``Callable``."
msgstr ""

#: ../../library/typing.rst:872
msgid ""
"Used with :data:`Callable` and :class:`ParamSpec` to type annotate a higher "
"order callable which adds, removes, or transforms parameters of another "
"callable.  Usage is in the form ``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``. ``Concatenate`` is currently only valid when used as "
"the first argument to a :data:`Callable`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""

#: ../../library/typing.rst:880
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""

#: ../../library/typing.rst:919 ../../library/typing.rst:1507
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)."
msgstr ""

#: ../../library/typing.rst:921
msgid ":class:`ParamSpec` and :class:`Callable`."
msgstr ":class:`ParamSpec` 和 :class:`Callable`\\ 。"

#: ../../library/typing.rst:926
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""

#: ../../library/typing.rst:935
msgid "Note that ``Type[C]`` is covariant::"
msgstr ""

#: ../../library/typing.rst:947
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""

#: ../../library/typing.rst:955
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""

#: ../../library/typing.rst:961
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""

#: ../../library/typing.rst:966
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:972
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""

#: ../../library/typing.rst:986
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""

#: ../../library/typing.rst:992
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""

#: ../../library/typing.rst:1000
msgid "Special type construct to mark class variables."
msgstr ""

#: ../../library/typing.rst:1002
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""

#: ../../library/typing.rst:1010
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""

#: ../../library/typing.rst:1012
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""

#: ../../library/typing.rst:1026
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr ""

#: ../../library/typing.rst:1038 ../../library/typing.rst:2702
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1047
msgid ""
"Special typing constructs that mark individual keys of a :class:`TypedDict` "
"as either required or non-required respectively."
msgstr ""

#: ../../library/typing.rst:1050
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "更多細節請見 :class:`TypedDict` 與 :pep:`655`。"

#: ../../library/typing.rst:1056
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata "
"(possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static "
"analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it should "
"ignore it and simply treat the type as ``T``. Unlike the ``no_type_check`` "
"functionality that currently exists in the ``typing`` module which "
"completely disables typechecking annotations on a function or a class, the "
"``Annotated`` type allows for both static typechecking of ``T`` (which can "
"safely ignore ``x``) together with runtime access to ``x`` within a specific "
"application."
msgstr ""

#: ../../library/typing.rst:1070
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at "
"all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type can "
"scan through the annotations to determine if they are of interest (e.g., "
"using ``isinstance()``)."
msgstr ""

#: ../../library/typing.rst:1076
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as the "
"underlying type."
msgstr ""

#: ../../library/typing.rst:1080
msgid ""
"It's up to the tool consuming the annotations to decide whether the client "
"is allowed to have several annotations on one type and how to merge those "
"annotations."
msgstr ""

#: ../../library/typing.rst:1084
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the "
"same (or different) type(s) on any node, the tools or libraries consuming "
"those annotations are in charge of dealing with potential duplicates. For "
"example, if you are doing value range analysis you might allow this::"
msgstr ""

#: ../../library/typing.rst:1093
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access "
"the extra annotations at runtime."
msgstr ""

#: ../../library/typing.rst:1096
msgid "The details of the syntax:"
msgstr ""

#: ../../library/typing.rst:1098
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../library/typing.rst:1100
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:1105
msgid ""
"``Annotated`` must be called with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:1108
msgid ""
"The order of the annotations is preserved and matters for equality checks::"
msgstr ""

#: ../../library/typing.rst:1115
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr ""

#: ../../library/typing.rst:1122
msgid "Duplicated annotations are not removed::"
msgstr ""

#: ../../library/typing.rst:1128
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr ""

#: ../../library/typing.rst:1141
msgid ""
"Special typing form used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""

#: ../../library/typing.rst:1145
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""

#: ../../library/typing.rst:1160
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""

#: ../../library/typing.rst:1164
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""

#: ../../library/typing.rst:1167
msgid "The return value is a boolean."
msgstr ""

#: ../../library/typing.rst:1168
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""

#: ../../library/typing.rst:1185
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1189
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1195
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""

#: ../../library/typing.rst:1201
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1207
msgid "Building generic types"
msgstr ""

#: ../../library/typing.rst:1209
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr ""

#: ../../library/typing.rst:1213
msgid "Abstract base class for generic types."
msgstr ""

#: ../../library/typing.rst:1215
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""

#: ../../library/typing.rst:1224
msgid "This class can then be used as follows::"
msgstr ""

#: ../../library/typing.rst:1237
msgid "Type variable."
msgstr ""

#: ../../library/typing.rst:1239 ../../library/typing.rst:1436
#: ../../library/typing.rst:1629
msgid "Usage::"
msgstr ""
"用法：\n"
"\n"
"::"

#: ../../library/typing.rst:1245
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See :class:`Generic` for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:1265
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1268
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""

#: ../../library/typing.rst:1283
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1289
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""

#: ../../library/typing.rst:1300
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""

#: ../../library/typing.rst:1303
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""

#: ../../library/typing.rst:1309
msgid ""
"Type variable tuple. A specialized form of :class:`type variable <TypeVar>` "
"that enables *variadic* generics."
msgstr ""

#: ../../library/typing.rst:1312
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""

#: ../../library/typing.rst:1340
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""

#: ../../library/typing.rst:1348
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""

#: ../../library/typing.rst:1355
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""

#: ../../library/typing.rst:1364
msgid ""
"Type variable tuples can be happily combined with normal type variables::"
msgstr ""

#: ../../library/typing.rst:1377
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""

#: ../../library/typing.rst:1384
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""

#: ../../library/typing.rst:1394
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""

#: ../../library/typing.rst:1401
msgid "See :pep:`646` for more details on type variable tuples."
msgstr ""

#: ../../library/typing.rst:1407
msgid ""
"A typing operator that conceptually marks an object as having been unpacked. "
"For example, using the unpack operator ``*`` on a :class:`type variable "
"tuple <TypeVarTuple>` is equivalent to using ``Unpack`` to mark the type "
"variable tuple as having been unpacked::"
msgstr ""

#: ../../library/typing.rst:1417
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context of "
"types. You might see ``Unpack`` being used explicitly in older versions of "
"Python, where ``*`` couldn't be used in certain places::"
msgstr ""

#: ../../library/typing.rst:1433
msgid ""
"Parameter specification variable.  A specialized version of :class:`type "
"variables <TypeVar>`."
msgstr ""

#: ../../library/typing.rst:1440
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""

#: ../../library/typing.rst:1447
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""

#: ../../library/typing.rst:1471
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""

#: ../../library/typing.rst:1475
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""

#: ../../library/typing.rst:1477
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""

#: ../../library/typing.rst:1484
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""

#: ../../library/typing.rst:1494
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""

#: ../../library/typing.rst:1503
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""

#: ../../library/typing.rst:1509
msgid ":class:`Callable` and :class:`Concatenate`."
msgstr ":class:`Callable` 和 :class:`Concatenate`\\ 。"

#: ../../library/typing.rst:1514
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""

#: ../../library/typing.rst:1519
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``::"
msgstr ""

#: ../../library/typing.rst:1531
msgid ""
"``AnyStr`` is a :class:`constrained type variable <TypeVar>` defined as "
"``AnyStr = TypeVar('AnyStr', str, bytes)``."
msgstr ""

#: ../../library/typing.rst:1534
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""

#: ../../library/typing.rst:1546
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr ""

#: ../../library/typing.rst:1552
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

#: ../../library/typing.rst:1564
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""

#: ../../library/typing.rst:1569
msgid "Protocol classes can be generic, for example::"
msgstr ""

#: ../../library/typing.rst:1579
msgid "Mark a protocol class as a runtime protocol."
msgstr ""

#: ../../library/typing.rst:1581
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:1601
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :data:`Callable`.  However, the ``ssl.SSLObject.__init__`` "
"method exists only to raise a :exc:`TypeError` with a more informative "
"message, therefore making it impossible to call (instantiate) :class:`ssl."
"SSLObject`."
msgstr ""

#: ../../library/typing.rst:1612
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""

#: ../../library/typing.rst:1621
msgid "Other special directives"
msgstr ""

#: ../../library/typing.rst:1623
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr ""

#: ../../library/typing.rst:1627
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ""

#: ../../library/typing.rst:1635
msgid "This is equivalent to::"
msgstr ""
"這等價於：\n"
"\n"
"::"

#: ../../library/typing.rst:1639
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""

#: ../../library/typing.rst:1648
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""

#: ../../library/typing.rst:1650
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""

#: ../../library/typing.rst:1656
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""

#: ../../library/typing.rst:1666
msgid "``NamedTuple`` subclasses can be generic::"
msgstr ""

#: ../../library/typing.rst:1672
msgid "Backward-compatible usage::"
msgstr ""

#: ../../library/typing.rst:1676
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""

#: ../../library/typing.rst:1679
msgid "Added support for default values, methods, and docstrings."
msgstr ""

#: ../../library/typing.rst:1682
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""

#: ../../library/typing.rst:1686
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

#: ../../library/typing.rst:1690
msgid "Added support for generic namedtuples."
msgstr ""

#: ../../library/typing.rst:1695
msgid ""
"A helper class to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns an object that returns its argument when "
"called. Usage::"
msgstr ""

#: ../../library/typing.rst:1705
msgid "``NewType`` is now a class rather than a function."
msgstr ""

#: ../../library/typing.rst:1710
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""

#: ../../library/typing.rst:1713
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../library/typing.rst:1729
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""

#: ../../library/typing.rst:1733
msgid "Using a literal :class:`dict` as the second argument::"
msgstr ""

#: ../../library/typing.rst:1737
msgid "Using keyword arguments::"
msgstr ""

#: ../../library/typing.rst:1744
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""

#: ../../library/typing.rst:1745
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""

#: ../../library/typing.rst:1757
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""

#: ../../library/typing.rst:1768
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""

#: ../../library/typing.rst:1771
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""

#: ../../library/typing.rst:1781
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""

#: ../../library/typing.rst:1786
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""

#: ../../library/typing.rst:1801
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

#: ../../library/typing.rst:1808
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

#: ../../library/typing.rst:1816
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""

#: ../../library/typing.rst:1834
msgid "A ``TypedDict`` can be generic::"
msgstr ""

#: ../../library/typing.rst:1840
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""

#: ../../library/typing.rst:1846
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example::"
msgstr ""

#: ../../library/typing.rst:1866
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""

#: ../../library/typing.rst:1869
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""

#: ../../library/typing.rst:1872
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``::"
msgstr ""

#: ../../library/typing.rst:1893
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../library/typing.rst:1897
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""

#: ../../library/typing.rst:1901
msgid "Added support for generic ``TypedDict``\\ s."
msgstr ""

#: ../../library/typing.rst:1905
msgid "Generic concrete collections"
msgstr ""

#: ../../library/typing.rst:1908
msgid "Corresponding to built-in types"
msgstr ""

#: ../../library/typing.rst:1912
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""

#: ../../library/typing.rst:1916
msgid "This type can be used as follows::"
msgstr ""

#: ../../library/typing.rst:1921
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1927
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""

#: ../../library/typing.rst:1932
msgid "This type may be used as follows::"
msgstr ""

#: ../../library/typing.rst:1942
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1948
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""

#: ../../library/typing.rst:1952
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1958
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../library/typing.rst:1960
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1965
msgid ":data:`Tuple` is a special form."
msgstr ""

#: ../../library/typing.rst:1968
msgid "Corresponding to types in :mod:`collections`"
msgstr ""

#: ../../library/typing.rst:1972
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ""

#: ../../library/typing.rst:1976
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1982
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ""

#: ../../library/typing.rst:1986
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1992
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ""

#: ../../library/typing.rst:1997
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2003
msgid "A generic version of :class:`collections.Counter`."
msgstr ""

#: ../../library/typing.rst:2008
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2014
msgid "A generic version of :class:`collections.deque`."
msgstr ""

#: ../../library/typing.rst:2019
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2024
msgid "Other concrete types"
msgstr ""

#: ../../library/typing.rst:2030
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""

#: ../../library/typing.rst:2037
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:2042
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""

#: ../../library/typing.rst:2052
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:2053
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2059
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""

#: ../../library/typing.rst:2063
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

#: ../../library/typing.rst:2071
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text`` "
"wherever possible."
msgstr ""

#: ../../library/typing.rst:2078
msgid "Abstract Base Classes"
msgstr ""

#: ../../library/typing.rst:2081
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:2085
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ""

#: ../../library/typing.rst:2087
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2093
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""

#: ../../library/typing.rst:2097
msgid ""
"Prefer ``typing_extensions.Buffer``, or a union like ``bytes | bytearray | "
"memoryview``."
msgstr ""

#: ../../library/typing.rst:2101
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ""

#: ../../library/typing.rst:2105
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2111
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ""

#: ../../library/typing.rst:2113
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2119
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ""

#: ../../library/typing.rst:2121
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2127
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ""

#: ../../library/typing.rst:2129
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2135
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ""

#: ../../library/typing.rst:2141
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2147
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ""

#: ../../library/typing.rst:2149
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2155
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ""

#: ../../library/typing.rst:2157
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2164
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ""

#: ../../library/typing.rst:2166
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2173
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ""

#: ../../library/typing.rst:2175
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2181
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ""

#: ../../library/typing.rst:2183
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2189
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ""

#: ../../library/typing.rst:2191
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2196
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:2200
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ""

#: ../../library/typing.rst:2202
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2208
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ""

#: ../../library/typing.rst:2210
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2216
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:2225
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:2229
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:2237
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:2245
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2251
msgid "An alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:2255
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ""

#: ../../library/typing.rst:2257
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2263
msgid "An alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:2266
msgid "Asynchronous programming"
msgstr ""

#: ../../library/typing.rst:2270
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""

#: ../../library/typing.rst:2282
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2288
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:2297
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:2301
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:2309
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:2319
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2326
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ""

#: ../../library/typing.rst:2330
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2336
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ""

#: ../../library/typing.rst:2340
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2346
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ""

#: ../../library/typing.rst:2350
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2356
msgid "Context manager types"
msgstr ""

#: ../../library/typing.rst:2360
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../library/typing.rst:2365
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2372
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../library/typing.rst:2377
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:2383
msgid "Protocols"
msgstr "協定"

#: ../../library/typing.rst:2385
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr ""

#: ../../library/typing.rst:2389
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

#: ../../library/typing.rst:2394
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "一個有抽象方法 ``__bytes__`` 的 ABC。"

#: ../../library/typing.rst:2398
msgid "An ABC with one abstract method ``__complex__``."
msgstr "一個有抽象方法 ``__complex__`` 的 ABC。"

#: ../../library/typing.rst:2402
msgid "An ABC with one abstract method ``__float__``."
msgstr "一個有抽象方法 ``__float__`` 的 ABC。"

#: ../../library/typing.rst:2406
msgid "An ABC with one abstract method ``__index__``."
msgstr "一個有抽象方法 ``__index__`` 的 ABC。"

#: ../../library/typing.rst:2412
msgid "An ABC with one abstract method ``__int__``."
msgstr "一個有抽象方法 ``__int__`` 的 ABC。"

#: ../../library/typing.rst:2416
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

#: ../../library/typing.rst:2420
msgid "Functions and decorators"
msgstr "函式與裝飾器"

#: ../../library/typing.rst:2424
msgid "Cast a value to a type."
msgstr ""

#: ../../library/typing.rst:2426
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""

#: ../../library/typing.rst:2433
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""

#: ../../library/typing.rst:2435
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""

#: ../../library/typing.rst:2438
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""

#: ../../library/typing.rst:2445
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""

#: ../../library/typing.rst:2459
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""

#: ../../library/typing.rst:2472
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases. If a type checker finds that "
"a call to ``assert_never()`` is reachable, it will emit an error. For "
"example, if the type annotation for ``arg`` was instead ``int | str | "
"float``, the type checker would emit an error pointing out that "
"``unreachable`` is of type :class:`float`. For a call to ``assert_never`` to "
"pass type checking, the inferred type of the argument passed in must be the "
"bottom type, :data:`Never`, and nothing else."
msgstr ""

#: ../../library/typing.rst:2484
msgid "At runtime, this throws an exception when called."
msgstr ""

#: ../../library/typing.rst:2487
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""

#: ../../library/typing.rst:2495
msgid "Reveal the inferred static type of an expression."
msgstr ""

#: ../../library/typing.rst:2497
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the type of the argument. For example::"
msgstr ""

#: ../../library/typing.rst:2503
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""

#: ../../library/typing.rst:2506
msgid ""
"The function returns its argument unchanged, which allows using it within an "
"expression::"
msgstr ""

#: ../../library/typing.rst:2511
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing`` allows your "
"code to run without runtime errors and communicates intent more clearly."
msgstr ""

#: ../../library/typing.rst:2516
msgid ""
"At runtime, this function prints the runtime type of its argument to stderr "
"and returns it unchanged::"
msgstr ""

#: ../../library/typing.rst:2526
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class, giving it :func:"
"`dataclasses.dataclass`-like behaviors."
msgstr ""

#: ../../library/typing.rst:2532
msgid "Example usage with a decorator function::"
msgstr ""

#: ../../library/typing.rst:2546
msgid "On a base class::"
msgstr ""

#: ../../library/typing.rst:2555
msgid "On a metaclass::"
msgstr ""

#: ../../library/typing.rst:2566
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""

#: ../../library/typing.rst:2572
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""

#: ../../library/typing.rst:2580
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""

#: ../../library/typing.rst:2584
msgid ""
"``eq_default`` indicates whether the ``eq`` parameter is assumed to be "
"``True`` or ``False`` if it is omitted by the caller."
msgstr ""

#: ../../library/typing.rst:2586
msgid ""
"``order_default`` indicates whether the ``order`` parameter is assumed to be "
"True or False if it is omitted by the caller."
msgstr ""

#: ../../library/typing.rst:2588
msgid ""
"``kw_only_default`` indicates whether the ``kw_only`` parameter is assumed "
"to be True or False if it is omitted by the caller."
msgstr ""

#: ../../library/typing.rst:2590
msgid ""
"``field_specifiers`` specifies a static list of supported classes or "
"functions that describe fields, similar to ``dataclasses.field()``."
msgstr ""

#: ../../library/typing.rst:2592
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""

#: ../../library/typing.rst:2595
msgid ""
"Type checkers recognize the following optional arguments on field specifiers:"
msgstr ""

#: ../../library/typing.rst:2598
msgid ""
"``init`` indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2601
msgid "``default`` provides the default value for the field."
msgstr ""

#: ../../library/typing.rst:2602
msgid ""
"``default_factory`` provides a runtime callback that returns the default "
"value for the field. If neither ``default`` nor ``default_factory`` are "
"specified, the field is assumed to have no default value and must be "
"provided a value when the class is instantiated."
msgstr ""

#: ../../library/typing.rst:2607
msgid "``factory`` is an alias for ``default_factory``."
msgstr ""

#: ../../library/typing.rst:2608
msgid ""
"``kw_only`` indicates whether the field should be marked as keyword-only. If "
"``True``, the field will be keyword-only. If ``False``, it will not be "
"keyword-only. If unspecified, the value of the ``kw_only`` parameter on the "
"object decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""

#: ../../library/typing.rst:2614
msgid ""
"``alias`` provides an alternative name for the field. This alternative name "
"is used in the synthesized ``__init__`` method."
msgstr ""

#: ../../library/typing.rst:2617
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""

#: ../../library/typing.rst:2621
msgid "See :pep:`681` for more details."
msgstr "更多細節請見 :pep:`681`。"

#: ../../library/typing.rst:2627
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""

#: ../../library/typing.rst:2651
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""

#: ../../library/typing.rst:2653
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr ""

#: ../../library/typing.rst:2660
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*. *func* is the function object for the implementation of the "
"overloaded function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""

#: ../../library/typing.rst:2668
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""

#: ../../library/typing.rst:2676
msgid ""
"Clear all registered overloads in the internal registry. This can be used to "
"reclaim the memory used by the registry."
msgstr ""

#: ../../library/typing.rst:2684
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr ""

#: ../../library/typing.rst:2707
msgid ""
"The decorator will now set the ``__final__`` attribute to ``True`` on the "
"decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""

#: ../../library/typing.rst:2718
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""

#: ../../library/typing.rst:2720
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods and classes defined in that class (but not to "
"methods defined in its superclasses or subclasses)."
msgstr ""

#: ../../library/typing.rst:2724
msgid "This mutates the function(s) in place."
msgstr ""

#: ../../library/typing.rst:2728
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""

#: ../../library/typing.rst:2730
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""

#: ../../library/typing.rst:2735
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr ""

#: ../../library/typing.rst:2737
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../library/typing.rst:2748
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

#: ../../library/typing.rst:2752
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:2756
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""

#: ../../library/typing.rst:2759
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along ``C."
"__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:2765
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""

#: ../../library/typing.rst:2780
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:2785
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr "新增 ``include_extras`` 參數（如 :pep:`593` 中所述）。"

#: ../../library/typing.rst:2788
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""

#: ../../library/typing.rst:2795
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``. If ``X`` is a generic alias for a builtin or :"
"mod:`collections` class, it gets normalized to the original class. If ``X`` "
"is an instance of :class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return "
"the underlying :class:`ParamSpec`. Return ``None`` for unsupported objects. "
"Examples::"
msgstr ""

#: ../../library/typing.rst:2814
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``. If ``X`` is a union or :"
"class:`Literal` contained in another generic type, the order of ``(Y, "
"Z, ...)`` may be different from the order of the original arguments ``[Y, "
"Z, ...]`` due to type caching. Return ``()`` for unsupported objects. "
"Examples::"
msgstr ""

#: ../../library/typing.rst:2830
msgid "Check if a type is a :class:`TypedDict`."
msgstr ""

#: ../../library/typing.rst:2845
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:2851
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""

#: ../../library/typing.rst:2858
msgid "Constant"
msgstr "常數"

#: ../../library/typing.rst:2862
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""

#: ../../library/typing.rst:2871
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""

#: ../../library/typing.rst:2878
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""

#: ../../library/typing.rst:2887
msgid "Deprecation Timeline of Major Features"
msgstr ""

#: ../../library/typing.rst:2889
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""

#: ../../library/typing.rst:2894
msgid "Feature"
msgstr ""

#: ../../library/typing.rst:2894
msgid "Deprecated in"
msgstr "棄用於"

#: ../../library/typing.rst:2894
msgid "Projected removal"
msgstr ""

#: ../../library/typing.rst:2894
msgid "PEP/issue"
msgstr ""

#: ../../library/typing.rst:2896
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr ""

#: ../../library/typing.rst:2896
msgid "3.8"
msgstr "3.8"

#: ../../library/typing.rst:2896
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:2896
msgid ":issue:`38291`"
msgstr ":issue:`38291`"

#: ../../library/typing.rst:2899
msgid "``typing`` versions of standard collections"
msgstr ""

#: ../../library/typing.rst:2899 ../../library/typing.rst:2902
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:2899 ../../library/typing.rst:2904
msgid "Undecided"
msgstr ""

#: ../../library/typing.rst:2899
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:2902
#, fuzzy
msgid "``typing.ByteString``"
msgstr "``typing.Text``"

#: ../../library/typing.rst:2902
msgid "3.14"
msgstr ""

#: ../../library/typing.rst:2902
#, fuzzy
msgid ":gh:`91896`"
msgstr ":gh:`92332`"

#: ../../library/typing.rst:2904
msgid "``typing.Text``"
msgstr "``typing.Text``"

#: ../../library/typing.rst:2904
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:2904
msgid ":gh:`92332`"
msgstr ":gh:`92332`"
