# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Asoul Yang <azx754@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-09 00:03+0000\n"
"PO-Revision-Date: 2023-08-05 15:25+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.3.2\n"

#: ../../library/json.rst:2
msgid ":mod:`!json` --- JSON encoder and decoder"
msgstr ":mod:`!json` --- JSON 編碼器與解碼器"

#: ../../library/json.rst:10
msgid "**Source code:** :source:`Lib/json/__init__.py`"
msgstr "**原始碼：**\\ :source:`Lib/json/__init__.py`"

#: ../../library/json.rst:14
msgid ""
"`JSON (JavaScript Object Notation) <https://json.org>`_, specified by :rfc:"
"`7159` (which obsoletes :rfc:`4627`) and by `ECMA-404 <https://www.ecma-"
"international.org/publications-and-standards/standards/ecma-404/>`_, is a "
"lightweight data interchange format inspired by `JavaScript <https://en."
"wikipedia.org/wiki/JavaScript>`_ object literal syntax (although it is not a "
"strict subset of JavaScript [#rfc-errata]_ )."
msgstr ""
"`JSON (JavaScript Object Notation) <https://json.org>`_ 是一個輕量化的資料交"
"換格式，在 :rfc:`7159`\\ （其廢棄了 :rfc:`4627`\\ ）及 `ECMA-404 <https://"
"www.ecma-international.org/publications-and-standards/standards/ecma-404/>`_ "
"裡面有詳細說明，它啟發自 `JavaScript <https://en.wikipedia.org/wiki/"
"JavaScript>`_ 的物件字面語法 (object literal syntax)（雖然它並不是 "
"JavaScript 的嚴格子集 [#rfc-errata]_\\ ）。"

#: ../../library/json.rst:22
msgid ""
"Be cautious when parsing JSON data from untrusted sources. A malicious JSON "
"string may cause the decoder to consume considerable CPU and memory "
"resources. Limiting the size of data to be parsed is recommended."
msgstr ""
"當剖析無法信任來源的 JSON 資料時要小心。一段惡意的 JSON 字串可能會導致解碼器"
"耗費大量 CPU 與記憶體資源。建議限制剖析資料的大小。"

#: ../../library/json.rst:26
msgid ""
":mod:`json` exposes an API familiar to users of the standard library :mod:"
"`marshal` and :mod:`pickle` modules."
msgstr ""
":mod:`json` 為標準函式庫 :mod:`marshal` 與 :mod:`pickle` 模組的使用者提供熟悉"
"的 API。"

#: ../../library/json.rst:29
msgid "Encoding basic Python object hierarchies::"
msgstr "對基本 Python 物件階層進行編碼： ::"

#: ../../library/json.rst:48
msgid "Compact encoding::"
msgstr ""

#: ../../library/json.rst:54
msgid "Pretty printing::"
msgstr "美化輸出："

#: ../../library/json.rst:63
msgid "Decoding JSON::"
msgstr "JSON 解碼： ::"

#: ../../library/json.rst:75
msgid "Specializing JSON object decoding::"
msgstr ""

#: ../../library/json.rst:90
msgid "Extending :class:`JSONEncoder`::"
msgstr ""

#: ../../library/json.rst:108
msgid "Using :mod:`json.tool` from the shell to validate and pretty-print:"
msgstr ""

#: ../../library/json.rst:119
msgid "See :ref:`json-commandline` for detailed documentation."
msgstr "更詳盡的文件請見 :ref:`json-commandline`。"

#: ../../library/json.rst:123
msgid ""
"JSON is a subset of `YAML <https://yaml.org/>`_ 1.2.  The JSON produced by "
"this module's default settings (in particular, the default *separators* "
"value) is also a subset of YAML 1.0 and 1.1.  This module can thus also be "
"used as a YAML serializer."
msgstr ""

#: ../../library/json.rst:130
msgid ""
"This module's encoders and decoders preserve input and output order by "
"default.  Order is only lost if the underlying containers are unordered."
msgstr ""

#: ../../library/json.rst:135
msgid "Basic Usage"
msgstr "基本用法"

#: ../../library/json.rst:142
msgid ""
"Serialize *obj* as a JSON formatted stream to *fp* (a ``.write()``-"
"supporting :term:`file-like object`) using this :ref:`conversion table <py-"
"to-json-table>`."
msgstr ""

#: ../../library/json.rst:146
msgid ""
"If *skipkeys* is true (default: ``False``), then dict keys that are not of a "
"basic type (:class:`str`, :class:`int`, :class:`float`, :class:`bool`, "
"``None``) will be skipped instead of raising a :exc:`TypeError`."
msgstr ""

#: ../../library/json.rst:150
msgid ""
"The :mod:`json` module always produces :class:`str` objects, not :class:"
"`bytes` objects. Therefore, ``fp.write()`` must support :class:`str` input."
msgstr ""

#: ../../library/json.rst:154 ../../library/json.rst:433
msgid ""
"If *ensure_ascii* is true (the default), the output is guaranteed to have "
"all incoming non-ASCII characters escaped.  If *ensure_ascii* is false, "
"these characters will be output as-is."
msgstr ""

#: ../../library/json.rst:158
msgid ""
"If *check_circular* is false (default: ``True``), then the circular "
"reference check for container types will be skipped and a circular reference "
"will result in a :exc:`RecursionError` (or worse)."
msgstr ""
"如果 *check_circular* 設為 false（預設是 ``True``），則針對不同容器型別的循環"
"參照 (circular reference) 的檢查將會被跳過，若有循環參照則最後將引發 :exc:"
"`RecursionError` （或者更糟的錯誤）。"

#: ../../library/json.rst:162
msgid ""
"If *allow_nan* is false (default: ``True``), then it will be a :exc:"
"`ValueError` to serialize out of range :class:`float` values (``nan``, "
"``inf``, ``-inf``) in strict compliance of the JSON specification. If "
"*allow_nan* is true, their JavaScript equivalents (``NaN``, ``Infinity``, ``-"
"Infinity``) will be used."
msgstr ""
"如果 *allow_nan* 為 false（預設值：``True``\\ ），則序列化超出嚴格 JSON 規範"
"之範圍的 :class:`float` 值 (``nan``, ``inf``, ``-inf``) 會引發 :exc:"
"`ValueError`。如果 *allow_nan* 為 true，則將使用它們的 JavaScript 等效項 "
"(``NaN``, ``Infinity``, ``-Infinity``)。"

#: ../../library/json.rst:168 ../../library/json.rst:452
msgid ""
"If *indent* is a non-negative integer or string, then JSON array elements "
"and object members will be pretty-printed with that indent level.  An indent "
"level of 0, negative, or ``\"\"`` will only insert newlines.  ``None`` (the "
"default) selects the most compact representation. Using a positive integer "
"indent indents that many spaces per level.  If *indent* is a string (such as "
"``\"\\t\"``), that string is used to indent each level."
msgstr ""
"如果 *indent* 是非負整數或字串，則 JSON 陣列元素和物件成員將使用該縮排等級進"
"行漂亮列印。縮排等級 0、負數或 ``\"\"`` 只會插入換行符號。``None``\\ （預設"
"值）選擇最緊湊的表示法。使用正整數縮排可以在每層縮排數量相同的空格。如果 "
"*indent* 是一個字串（例如 ``\"\\t\"``\\ ），則該字串用於縮排每個層級。"

#: ../../library/json.rst:175 ../../library/json.rst:459
msgid "Allow strings for *indent* in addition to integers."
msgstr "除了整數之外，還允許使用字串進行 *indent*。"

#: ../../library/json.rst:178 ../../library/json.rst:462
msgid ""
"If specified, *separators* should be an ``(item_separator, key_separator)`` "
"tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and ``(',', "
"': ')`` otherwise.  To get the most compact JSON representation, you should "
"specify ``(',', ':')`` to eliminate whitespace."
msgstr ""
"如果有指定，*separators* 應該是一個 ``(item_separator, key_separator)`` 元"
"組。如果 *indent* 為 ``None`` 則預設為 ``(', ', ': ')``，否則預設為 ``(',', "
"': ')``。要獲得最緊湊的 JSON 表示形式，你應該指定 ``(',', ':')`` 來消除空格。"

#: ../../library/json.rst:183 ../../library/json.rst:467
msgid "Use ``(',', ': ')`` as default if *indent* is not ``None``."
msgstr "如果 *indent* 不是 ``None``，則用 ``(',', ': ')`` 當預設值"

#: ../../library/json.rst:186 ../../library/json.rst:470
msgid ""
"If specified, *default* should be a function that gets called for objects "
"that can't otherwise be serialized.  It should return a JSON encodable "
"version of the object or raise a :exc:`TypeError`.  If not specified, :exc:"
"`TypeError` is raised."
msgstr ""
"如果有指定，*default* 應該是一個為無法序列化的物件呼叫的函式。它應該傳回物件"
"的 JSON 可編碼版本或引發 :exc:`TypeError`。如果未指定，則會引發 :exc:"
"`TypeError`。"

#: ../../library/json.rst:191
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of dictionaries "
"will be sorted by key."
msgstr ""
"如果 *sort_keys* 為 true（預設值：``False``），則字典的輸出將按鍵排序。"

#: ../../library/json.rst:194
msgid ""
"To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides the :"
"meth:`~JSONEncoder.default` method to serialize additional types), specify "
"it with the *cls* kwarg; otherwise :class:`JSONEncoder` is used."
msgstr ""
"若要使用自訂 :class:`JSONEncoder` 子類別（例如覆寫 :meth:`~JSONEncoder."
"default` 方法來序列化其他型別的子類別），請使用 *cls* kwarg 指定它；否則使"
"用 :class:`JSONEncoder`。"

#: ../../library/json.rst:198 ../../library/json.rst:277
msgid ""
"All optional parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr ""
"所有可選參數現在都是\\ :ref:`僅限關鍵字 <keyword-only_parameter>`\\ 了。"

#: ../../library/json.rst:203
msgid ""
"Unlike :mod:`pickle` and :mod:`marshal`, JSON is not a framed protocol, so "
"trying to serialize multiple objects with repeated calls to :func:`dump` "
"using the same *fp* will result in an invalid JSON file."
msgstr ""
"與 :mod:`pickle` 和 :mod:`marshal` 不同，JSON 不是框架協定，因此嘗試使用相同"
"的 *fp* 重複呼叫 :func:`dump` 來序列化多個物件將導致無效的 JSON 檔案。"

#: ../../library/json.rst:212
msgid ""
"Serialize *obj* to a JSON formatted :class:`str` using this :ref:`conversion "
"table <py-to-json-table>`.  The arguments have the same meaning as in :func:"
"`dump`."
msgstr ""
"使用此\\ :ref:`轉換表 <json-to-py-table>`\\ 來將 *obj* 序列化為 JSON 格式化 :"
"class:`str`。這些引數與 :func:`dump` 中的意義相同。"

#: ../../library/json.rst:218
msgid ""
"Keys in key/value pairs of JSON are always of the type :class:`str`. When a "
"dictionary is converted into JSON, all the keys of the dictionary are "
"coerced to strings. As a result of this, if a dictionary is converted into "
"JSON and then back into a dictionary, the dictionary may not equal the "
"original one. That is, ``loads(dumps(x)) != x`` if x has non-string keys."
msgstr ""
"JSON 鍵/值對中的鍵始終為 :class:`str` 型別。當字典轉換為 JSON 時，字典的所有"
"鍵都被強制轉換為字串。因此，如果將字典轉換為 JSON，然後再轉換回字典，則該字典"
"可能不等於原始字典。也就是說，如果 x 有非字串鍵，則 ``loads(dumps(x)) != "
"x``。"

#: ../../library/json.rst:227
msgid ""
"Deserialize *fp* (a ``.read()``-supporting :term:`text file` or :term:"
"`binary file` containing a JSON document) to a Python object using this :ref:"
"`conversion table <json-to-py-table>`."
msgstr ""
"使用此\\ :ref:`轉換表 <json-to-py-table>`\\ 來將 *fp*\\ （一個支援 ``."
"read()``、包含 JSON 文件的\\ :term:`文字檔案 <text file>`\\ 或\\ :term:`二進"
"位檔案 <binary file>`\\ ）反序列化為 Python 物件。"

#: ../../library/json.rst:231
msgid ""
"*object_hook* is an optional function that will be called with the result of "
"any object literal decoded (a :class:`dict`).  The return value of "
"*object_hook* will be used instead of the :class:`dict`.  This feature can "
"be used to implement custom decoders (e.g. `JSON-RPC <https://www.jsonrpc."
"org>`_ class hinting)."
msgstr ""
"*object_hook* 是一個可選函式，將使用任何物件文本解碼的結果（一個 :class:"
"`dict`\\ ）來呼叫它。將使用 *object_hook* 的回傳值而不是 :class:`dict`。此功"
"能可用於實作自訂解碼器（例如 `JSON-RPC <https://www.jsonrpc.org>`_ 類別提"
"示）。"

#: ../../library/json.rst:237
msgid ""
"*object_pairs_hook* is an optional function that will be called with the "
"result of any object literal decoded with an ordered list of pairs.  The "
"return value of *object_pairs_hook* will be used instead of the :class:"
"`dict`.  This feature can be used to implement custom decoders. If "
"*object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""
"*object_pairs_hook* 是一個可選函式，將使用使用有序對列表解碼的任何物件文本的"
"結果來呼叫該函式。將使用 *object_pairs_hook* 的回傳值而不是 :class:`dict`。此"
"功能可用於實作自訂解碼器。如果也定義了 *object_hook*，則 *object_pairs_hook* "
"優先。"

#: ../../library/json.rst:243 ../../library/json.rst:348
msgid "Added support for *object_pairs_hook*."
msgstr "新增對於 *object_pairs_hook* 的支援。"

#: ../../library/json.rst:246 ../../library/json.rst:351
msgid ""
"*parse_float*, if specified, will be called with the string of every JSON "
"float to be decoded.  By default, this is equivalent to ``float(num_str)``. "
"This can be used to use another datatype or parser for JSON floats (e.g. :"
"class:`decimal.Decimal`)."
msgstr ""
"如有指定 *parse_float*，將使用要解碼的每個 JSON 浮點數字串進行呼叫。預設情況"
"下，這相當於 ``float(num_str)``。這可用於將另一種資料型別或剖析器用於 JSON 浮"
"點（例如 :class:`decimal.Decimal`\\ ）。"

#: ../../library/json.rst:251 ../../library/json.rst:356
msgid ""
"*parse_int*, if specified, will be called with the string of every JSON int "
"to be decoded.  By default, this is equivalent to ``int(num_str)``.  This "
"can be used to use another datatype or parser for JSON integers (e.g. :class:"
"`float`)."
msgstr ""
"如有指定 *parse_int*，將使用要解碼的每個 JSON 整數字串進行呼叫。預設情況下，"
"這相當於 ``int(num_str)``。這可用於對 JSON 整數使用另一種資料型別或剖析器（例"
"如 :class:`float`\\ ）。"

#: ../../library/json.rst:256
msgid ""
"The default *parse_int* of :func:`int` now limits the maximum length of the "
"integer string via the interpreter's :ref:`integer string conversion length "
"limitation <int_max_str_digits>` to help avoid denial of service attacks."
msgstr ""
":func:`int` 預設的 *parse_int* 現在對於整數字串有長度上限，上限是直譯器的\\ :"
"ref:`整數字串轉換長度限制 <int_max_str_digits>`，這能防止阻斷服務攻擊 "
"(denial of service attacks)。"

#: ../../library/json.rst:262 ../../library/json.rst:361
msgid ""
"*parse_constant*, if specified, will be called with one of the following "
"strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``. This can be used to "
"raise an exception if invalid JSON numbers are encountered."
msgstr ""
"如果 *parse_constant* 有值，那麼以 ``'-Infinity'``、``'Infinity'`` 或 "
"``'NaN'`` 字串其中之一來呼叫。這也可用於在遇到無效的 JSON 數字時引發一個例"
"外。"

#: ../../library/json.rst:267
msgid "*parse_constant* doesn't get called on 'null', 'true', 'false' anymore."
msgstr "*parse_constant* 不再以 'null'、 'true'、 'false' 呼叫了。"

#: ../../library/json.rst:270
msgid ""
"To use a custom :class:`JSONDecoder` subclass, specify it with the ``cls`` "
"kwarg; otherwise :class:`JSONDecoder` is used.  Additional keyword arguments "
"will be passed to the constructor of the class."
msgstr ""

#: ../../library/json.rst:274 ../../library/json.rst:292
#: ../../library/json.rst:371
msgid ""
"If the data being deserialized is not a valid JSON document, a :exc:"
"`JSONDecodeError` will be raised."
msgstr ""

#: ../../library/json.rst:280
msgid ""
"*fp* can now be a :term:`binary file`. The input encoding should be UTF-8, "
"UTF-16 or UTF-32."
msgstr ""

#: ../../library/json.rst:286
msgid ""
"Deserialize *s* (a :class:`str`, :class:`bytes` or :class:`bytearray` "
"instance containing a JSON document) to a Python object using this :ref:"
"`conversion table <json-to-py-table>`."
msgstr ""

#: ../../library/json.rst:290
msgid "The other arguments have the same meaning as in :func:`load`."
msgstr ""

#: ../../library/json.rst:295
msgid ""
"*s* can now be of type :class:`bytes` or :class:`bytearray`. The input "
"encoding should be UTF-8, UTF-16 or UTF-32."
msgstr ""

#: ../../library/json.rst:299
msgid "The keyword argument *encoding* has been removed."
msgstr "關鍵字引數 *encoding* 已經被刪除。"

#: ../../library/json.rst:304
msgid "Encoders and Decoders"
msgstr ""

#: ../../library/json.rst:308
msgid "Simple JSON decoder."
msgstr ""

#: ../../library/json.rst:310
msgid "Performs the following translations in decoding by default:"
msgstr ""

#: ../../library/json.rst:315 ../../library/json.rst:404
msgid "JSON"
msgstr "JSON"

#: ../../library/json.rst:315 ../../library/json.rst:404
msgid "Python"
msgstr "Python"

#: ../../library/json.rst:317 ../../library/json.rst:406
msgid "object"
msgstr "object"

#: ../../library/json.rst:317 ../../library/json.rst:406
msgid "dict"
msgstr "dict"

#: ../../library/json.rst:319 ../../library/json.rst:408
msgid "array"
msgstr "array"

#: ../../library/json.rst:319
msgid "list"
msgstr "list"

#: ../../library/json.rst:321 ../../library/json.rst:410
msgid "string"
msgstr "string"

#: ../../library/json.rst:321 ../../library/json.rst:410
msgid "str"
msgstr "str"

#: ../../library/json.rst:323
msgid "number (int)"
msgstr "number (int)"

#: ../../library/json.rst:323
msgid "int"
msgstr "int"

#: ../../library/json.rst:325
msgid "number (real)"
msgstr ""

#: ../../library/json.rst:325
msgid "float"
msgstr "float"

#: ../../library/json.rst:327 ../../library/json.rst:414
msgid "true"
msgstr "true"

#: ../../library/json.rst:327 ../../library/json.rst:414
msgid "True"
msgstr "True"

#: ../../library/json.rst:329 ../../library/json.rst:416
msgid "false"
msgstr "false"

#: ../../library/json.rst:329 ../../library/json.rst:416
msgid "False"
msgstr "False"

#: ../../library/json.rst:331 ../../library/json.rst:418
msgid "null"
msgstr "null"

#: ../../library/json.rst:331 ../../library/json.rst:418
msgid "None"
msgstr "None"

#: ../../library/json.rst:334
msgid ""
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their "
"corresponding ``float`` values, which is outside the JSON spec."
msgstr ""

#: ../../library/json.rst:337
msgid ""
"*object_hook*, if specified, will be called with the result of every JSON "
"object decoded and its return value will be used in place of the given :"
"class:`dict`.  This can be used to provide custom deserializations (e.g. to "
"support `JSON-RPC <https://www.jsonrpc.org>`_ class hinting)."
msgstr ""

#: ../../library/json.rst:342
msgid ""
"*object_pairs_hook*, if specified will be called with the result of every "
"JSON object decoded with an ordered list of pairs.  The return value of "
"*object_pairs_hook* will be used instead of the :class:`dict`.  This feature "
"can be used to implement custom decoders.  If *object_hook* is also defined, "
"the *object_pairs_hook* takes priority."
msgstr ""

#: ../../library/json.rst:366
msgid ""
"If *strict* is false (``True`` is the default), then control characters will "
"be allowed inside strings.  Control characters in this context are those "
"with character codes in the 0--31 range, including ``'\\t'`` (tab), "
"``'\\n'``, ``'\\r'`` and ``'\\0'``."
msgstr ""

#: ../../library/json.rst:374 ../../library/json.rst:475
msgid "All parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr ""

#: ../../library/json.rst:379
msgid ""
"Return the Python representation of *s* (a :class:`str` instance containing "
"a JSON document)."
msgstr ""

#: ../../library/json.rst:382
msgid ""
":exc:`JSONDecodeError` will be raised if the given JSON document is not "
"valid."
msgstr ""

#: ../../library/json.rst:387
msgid ""
"Decode a JSON document from *s* (a :class:`str` beginning with a JSON "
"document) and return a 2-tuple of the Python representation and the index in "
"*s* where the document ended."
msgstr ""

#: ../../library/json.rst:391
msgid ""
"This can be used to decode a JSON document from a string that may have "
"extraneous data at the end."
msgstr ""

#: ../../library/json.rst:397
msgid "Extensible JSON encoder for Python data structures."
msgstr ""

#: ../../library/json.rst:399
msgid "Supports the following objects and types by default:"
msgstr ""

#: ../../library/json.rst:408
msgid "list, tuple"
msgstr "list, tuple"

#: ../../library/json.rst:412
msgid "int, float, int- & float-derived Enums"
msgstr ""

#: ../../library/json.rst:412
msgid "number"
msgstr ""

#: ../../library/json.rst:421
msgid "Added support for int- and float-derived Enum classes."
msgstr ""

#: ../../library/json.rst:424
msgid ""
"To extend this to recognize other objects, subclass and implement a :meth:"
"`~JSONEncoder.default` method with another method that returns a "
"serializable object for ``o`` if possible, otherwise it should call the "
"superclass implementation (to raise :exc:`TypeError`)."
msgstr ""

#: ../../library/json.rst:429
msgid ""
"If *skipkeys* is false (the default), a :exc:`TypeError` will be raised when "
"trying to encode keys that are not :class:`str`, :class:`int`, :class:"
"`float` or ``None``.  If *skipkeys* is true, such items are simply skipped."
msgstr ""

#: ../../library/json.rst:437
msgid ""
"If *check_circular* is true (the default), then lists, dicts, and custom "
"encoded objects will be checked for circular references during encoding to "
"prevent an infinite recursion (which would cause a :exc:`RecursionError`). "
"Otherwise, no such check takes place."
msgstr ""

#: ../../library/json.rst:442
msgid ""
"If *allow_nan* is true (the default), then ``NaN``, ``Infinity``, and ``-"
"Infinity`` will be encoded as such.  This behavior is not JSON specification "
"compliant, but is consistent with most JavaScript based encoders and "
"decoders.  Otherwise, it will be a :exc:`ValueError` to encode such floats."
msgstr ""

#: ../../library/json.rst:448
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of dictionaries "
"will be sorted by key; this is useful for regression tests to ensure that "
"JSON serializations can be compared on a day-to-day basis."
msgstr ""

#: ../../library/json.rst:481
msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for *o*, or calls the base implementation (to raise a :exc:"
"`TypeError`)."
msgstr ""

#: ../../library/json.rst:485
msgid ""
"For example, to support arbitrary iterators, you could implement :meth:"
"`~JSONEncoder.default` like this::"
msgstr ""

#: ../../library/json.rst:501
msgid ""
"Return a JSON string representation of a Python data structure, *o*.  For "
"example::"
msgstr ""

#: ../../library/json.rst:510
msgid ""
"Encode the given object, *o*, and yield each string representation as "
"available.  For example::"
msgstr ""

#: ../../library/json.rst:518
msgid "Exceptions"
msgstr "例外"

#: ../../library/json.rst:522
msgid "Subclass of :exc:`ValueError` with the following additional attributes:"
msgstr ""

#: ../../library/json.rst:526
msgid "The unformatted error message."
msgstr ""

#: ../../library/json.rst:530
msgid "The JSON document being parsed."
msgstr ""

#: ../../library/json.rst:534
msgid "The start index of *doc* where parsing failed."
msgstr ""

#: ../../library/json.rst:538
msgid "The line corresponding to *pos*."
msgstr ""

#: ../../library/json.rst:542
msgid "The column corresponding to *pos*."
msgstr ""

#: ../../library/json.rst:548
msgid "Standard Compliance and Interoperability"
msgstr ""

#: ../../library/json.rst:550
msgid ""
"The JSON format is specified by :rfc:`7159` and by `ECMA-404 <https://www."
"ecma-international.org/publications-and-standards/standards/ecma-404/>`_. "
"This section details this module's level of compliance with the RFC. For "
"simplicity, :class:`JSONEncoder` and :class:`JSONDecoder` subclasses, and "
"parameters other than those explicitly mentioned, are not considered."
msgstr ""

#: ../../library/json.rst:556
msgid ""
"This module does not comply with the RFC in a strict fashion, implementing "
"some extensions that are valid JavaScript but not valid JSON.  In particular:"
msgstr ""

#: ../../library/json.rst:559
msgid "Infinite and NaN number values are accepted and output;"
msgstr ""

#: ../../library/json.rst:560
msgid ""
"Repeated names within an object are accepted, and only the value of the last "
"name-value pair is used."
msgstr ""

#: ../../library/json.rst:563
msgid ""
"Since the RFC permits RFC-compliant parsers to accept input texts that are "
"not RFC-compliant, this module's deserializer is technically RFC-compliant "
"under default settings."
msgstr ""

#: ../../library/json.rst:568
msgid "Character Encodings"
msgstr ""

#: ../../library/json.rst:570
msgid ""
"The RFC requires that JSON be represented using either UTF-8, UTF-16, or "
"UTF-32, with UTF-8 being the recommended default for maximum "
"interoperability."
msgstr ""

#: ../../library/json.rst:573
msgid ""
"As permitted, though not required, by the RFC, this module's serializer sets "
"*ensure_ascii=True* by default, thus escaping the output so that the "
"resulting strings only contain ASCII characters."
msgstr ""

#: ../../library/json.rst:577
msgid ""
"Other than the *ensure_ascii* parameter, this module is defined strictly in "
"terms of conversion between Python objects and :class:`Unicode strings "
"<str>`, and thus does not otherwise directly address the issue of character "
"encodings."
msgstr ""

#: ../../library/json.rst:582
msgid ""
"The RFC prohibits adding a byte order mark (BOM) to the start of a JSON "
"text, and this module's serializer does not add a BOM to its output. The RFC "
"permits, but does not require, JSON deserializers to ignore an initial BOM "
"in their input.  This module's deserializer raises a :exc:`ValueError` when "
"an initial BOM is present."
msgstr ""

#: ../../library/json.rst:588
msgid ""
"The RFC does not explicitly forbid JSON strings which contain byte sequences "
"that don't correspond to valid Unicode characters (e.g. unpaired UTF-16 "
"surrogates), but it does note that they may cause interoperability problems. "
"By default, this module accepts and outputs (when present in the original :"
"class:`str`) code points for such sequences."
msgstr ""

#: ../../library/json.rst:596
msgid "Infinite and NaN Number Values"
msgstr ""

#: ../../library/json.rst:598
msgid ""
"The RFC does not permit the representation of infinite or NaN number values. "
"Despite that, by default, this module accepts and outputs ``Infinity``, ``-"
"Infinity``, and ``NaN`` as if they were valid JSON number literal values::"
msgstr ""

#: ../../library/json.rst:613
msgid ""
"In the serializer, the *allow_nan* parameter can be used to alter this "
"behavior.  In the deserializer, the *parse_constant* parameter can be used "
"to alter this behavior."
msgstr ""

#: ../../library/json.rst:619
msgid "Repeated Names Within an Object"
msgstr ""

#: ../../library/json.rst:621
msgid ""
"The RFC specifies that the names within a JSON object should be unique, but "
"does not mandate how repeated names in JSON objects should be handled.  By "
"default, this module does not raise an exception; instead, it ignores all "
"but the last name-value pair for a given name::"
msgstr ""

#: ../../library/json.rst:630
msgid "The *object_pairs_hook* parameter can be used to alter this behavior."
msgstr "*object_parts_hook* 參數可以被使用來改變此行為。"

#: ../../library/json.rst:634
msgid "Top-level Non-Object, Non-Array Values"
msgstr ""

#: ../../library/json.rst:636
msgid ""
"The old version of JSON specified by the obsolete :rfc:`4627` required that "
"the top-level value of a JSON text must be either a JSON object or array "
"(Python :class:`dict` or :class:`list`), and could not be a JSON null, "
"boolean, number, or string value.  :rfc:`7159` removed that restriction, and "
"this module does not and has never implemented that restriction in either "
"its serializer or its deserializer."
msgstr ""

#: ../../library/json.rst:643
msgid ""
"Regardless, for maximum interoperability, you may wish to voluntarily adhere "
"to the restriction yourself."
msgstr ""

#: ../../library/json.rst:648
msgid "Implementation Limitations"
msgstr ""

#: ../../library/json.rst:650
msgid "Some JSON deserializer implementations may set limits on:"
msgstr ""

#: ../../library/json.rst:652
msgid "the size of accepted JSON texts"
msgstr ""

#: ../../library/json.rst:653
msgid "the maximum level of nesting of JSON objects and arrays"
msgstr ""

#: ../../library/json.rst:654
msgid "the range and precision of JSON numbers"
msgstr ""

#: ../../library/json.rst:655
msgid "the content and maximum length of JSON strings"
msgstr ""

#: ../../library/json.rst:657
msgid ""
"This module does not impose any such limits beyond those of the relevant "
"Python datatypes themselves or the Python interpreter itself."
msgstr ""

#: ../../library/json.rst:660
msgid ""
"When serializing to JSON, beware any such limitations in applications that "
"may consume your JSON.  In particular, it is common for JSON numbers to be "
"deserialized into IEEE 754 double precision numbers and thus subject to that "
"representation's range and precision limitations.  This is especially "
"relevant when serializing Python :class:`int` values of extremely large "
"magnitude, or when serializing instances of \"exotic\" numerical types such "
"as :class:`decimal.Decimal`."
msgstr ""

#: ../../library/json.rst:673
msgid "Command Line Interface"
msgstr "命令列介面"

#: ../../library/json.rst:678
msgid "**Source code:** :source:`Lib/json/tool.py`"
msgstr "**原始碼：**\\ :source:`Lib/json/tool.py`"

#: ../../library/json.rst:682
msgid ""
"The :mod:`json.tool` module provides a simple command line interface to "
"validate and pretty-print JSON objects."
msgstr ""

#: ../../library/json.rst:685
msgid ""
"If the optional ``infile`` and ``outfile`` arguments are not specified, :"
"data:`sys.stdin` and :data:`sys.stdout` will be used respectively:"
msgstr ""

#: ../../library/json.rst:697
msgid ""
"The output is now in the same order as the input. Use the :option:`--sort-"
"keys` option to sort the output of dictionaries alphabetically by key."
msgstr ""

#: ../../library/json.rst:704
msgid "Command line options"
msgstr "命令列選項"

#: ../../library/json.rst:708
msgid "The JSON file to be validated or pretty-printed:"
msgstr ""

#: ../../library/json.rst:724
msgid "If *infile* is not specified, read from :data:`sys.stdin`."
msgstr ""

#: ../../library/json.rst:728
msgid ""
"Write the output of the *infile* to the given *outfile*. Otherwise, write it "
"to :data:`sys.stdout`."
msgstr ""

#: ../../library/json.rst:733
msgid "Sort the output of dictionaries alphabetically by key."
msgstr ""

#: ../../library/json.rst:739
msgid ""
"Disable escaping of non-ascii characters, see :func:`json.dumps` for more "
"information."
msgstr ""

#: ../../library/json.rst:745
msgid "Parse every input line as separate JSON object."
msgstr ""

#: ../../library/json.rst:751
msgid "Mutually exclusive options for whitespace control."
msgstr ""

#: ../../library/json.rst:757
msgid "Show the help message."
msgstr ""

#: ../../library/json.rst:761
msgid "Footnotes"
msgstr "註解"

#: ../../library/json.rst:762
msgid ""
"As noted in `the errata for RFC 7159 <https://www.rfc-editor.org/"
"errata_search.php?rfc=7159>`_, JSON permits literal U+2028 (LINE SEPARATOR) "
"and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript "
"(as of ECMAScript Edition 5.1) does not."
msgstr ""
