# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-13 00:11+0000\n"
"PO-Revision-Date: 2018-05-23 16:02+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/glob.rst:2
msgid ":mod:`glob` --- Unix style pathname pattern expansion"
msgstr ""

#: ../../library/glob.rst:7
msgid "**Source code:** :source:`Lib/glob.py`"
msgstr ""

#: ../../library/glob.rst:21
msgid ""
"The :mod:`glob` module finds all the pathnames matching a specified pattern "
"according to the rules used by the Unix shell, although results are returned "
"in arbitrary order.  No tilde expansion is done, but ``*``, ``?``, and "
"character ranges expressed with ``[]`` will be correctly matched.  This is "
"done by using the :func:`os.scandir` and :func:`fnmatch.fnmatch` functions "
"in concert, and not by actually invoking a subshell.  Note that unlike :func:"
"`fnmatch.fnmatch`, :mod:`glob` treats filenames beginning with a dot (``.``) "
"as special cases. (For tilde and shell variable expansion, use :func:`os."
"path.expanduser` and :func:`os.path.expandvars`.)"
msgstr ""

#: ../../library/glob.rst:31
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``'[?]'`` matches the character ``'?'``."
msgstr ""

#: ../../library/glob.rst:36
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ""

#: ../../library/glob.rst:41
msgid ""
"Return a possibly-empty list of path names that match *pathname*, which must "
"be a string containing a path specification. *pathname* can be either "
"absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative (like :file:"
"`../../Tools/\\*/\\*.gif`), and can contain shell-style wildcards. Broken "
"symlinks are included in the results (as in the shell). Whether or not the "
"results are sorted depends on the file system.  If a file that satisfies "
"conditions is removed or added during the call of this function, whether a "
"path name for that file be included is unspecified."
msgstr ""

#: ../../library/glob.rst:53
msgid ""
"If *recursive* is true, the pattern \"``**``\" will match any files and zero "
"or more directories, subdirectories and symbolic links to directories. If "
"the pattern is followed by an :data:`os.sep` or :data:`os.altsep` then files "
"will not match."
msgstr ""

#: ../../library/glob.rst:58 ../../library/glob.rst:73
msgid ""
"Raises an :ref:`auditing event <auditing>` ``glob.glob`` with arguments "
"``pathname``, ``recursive``."
msgstr ""

#: ../../library/glob.rst:61
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""

#: ../../library/glob.rst:64
msgid "Support for recursive globs using \"``**``\"."
msgstr ""

#: ../../library/glob.rst:70
msgid ""
"Return an :term:`iterator` which yields the same values as :func:`glob` "
"without actually storing them all simultaneously."
msgstr ""

#: ../../library/glob.rst:78
msgid ""
"Escape all special characters (``'?'``, ``'*'`` and ``'['``). This is useful "
"if you want to match an arbitrary literal string that may have special "
"characters in it.  Special characters in drive/UNC sharepoints are not "
"escaped, e.g. on Windows ``escape('//?/c:/Quo vadis?.txt')`` returns ``'//?/"
"c:/Quo vadis[?].txt'``."
msgstr ""

#: ../../library/glob.rst:87
msgid ""
"For example, consider a directory containing the following files: :file:`1."
"gif`, :file:`2.txt`, :file:`card.gif` and a subdirectory :file:`sub` which "
"contains only the file :file:`3.txt`.  :func:`glob` will produce the "
"following results.  Notice how any leading components of the path are "
"preserved. ::"
msgstr ""

#: ../../library/glob.rst:105
msgid ""
"If the directory contains files starting with ``.`` they won't be matched by "
"default. For example, consider a directory containing :file:`card.gif` and :"
"file:`.card.gif`::"
msgstr ""

#: ../../library/glob.rst:117
msgid "Module :mod:`fnmatch`"
msgstr ""

#: ../../library/glob.rst:118
msgid "Shell-style filename (not path) expansion"
msgstr ""
