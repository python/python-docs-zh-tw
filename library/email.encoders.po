# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Matt Wang <mattwang44@gmail.com>, 2024
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-29 10:36+0000\n"
"PO-Revision-Date: 2024-05-03 03:44+0000\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.encoders.rst:2
msgid ":mod:`email.encoders`: Encoders"
msgstr ":mod:`email.encoders`：編碼器"

#: ../../library/email.encoders.rst:7
msgid "**Source code:** :source:`Lib/email/encoders.py`"
msgstr "**原始碼：**\\ :source:`Lib/email/encoders.py`"

#: ../../library/email.encoders.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  In the new API "
"the functionality is provided by the *cte* parameter of the :meth:`~email."
"message.EmailMessage.set_content` method."
msgstr ""
"此模組是舊版 (``Compat32``) 電子郵件 API 的一部分。在新 API 中，此功能由 :"
"meth:`~email.message.EmailMessage.set_content` 方法的 *cte* 參數提供。"

#: ../../library/email.encoders.rst:15
msgid ""
"This module is deprecated in Python 3.  The functions provided here should "
"not be called explicitly since the :class:`~email.mime.text.MIMEText` class "
"sets the content type and CTE header using the *_subtype* and *_charset* "
"values passed during the instantiation of that class."
msgstr ""
"此模組在 Python 3 中已棄用。不應明確呼叫此處提供的函式，因為 :class:`~email."
"mime.text.MIMEText` 類別使用在該類別的實例化過程中傳遞的 *_subtype* 和 "
"*_charset* 值來設定內容類型 (content type) 和 CTE 標頭。"

#: ../../library/email.encoders.rst:20
msgid ""
"The remaining text in this section is the original documentation of the "
"module."
msgstr "本節中的其餘文字是該模組的原始文件。"

#: ../../library/email.encoders.rst:22
msgid ""
"When creating :class:`~email.message.Message` objects from scratch, you "
"often need to encode the payloads for transport through compliant mail "
"servers. This is especially true for :mimetype:`image/\\*` and :mimetype:"
"`text/\\*` type messages containing binary data."
msgstr ""
"從零開始建立 :class:`~email.message.Message` 物件時，你通常需要對負載 "
"(payload) 進行編碼，以便透過相容的郵件伺服器進行傳輸。對於包含二進位資料的 :"
"mimetype:`image/\\*` 和 :mimetype:`text/\\*` 類型的訊息尤其如此。"

#: ../../library/email.encoders.rst:27
msgid ""
"The :mod:`email` package provides some convenient encoders in its :mod:"
"`~email.encoders` module.  These encoders are actually used by the :class:"
"`~email.mime.audio.MIMEAudio` and :class:`~email.mime.image.MIMEImage` class "
"constructors to provide default encodings.  All encoder functions take "
"exactly one argument, the message object to encode.  They usually extract "
"the payload, encode it, and reset the payload to this newly encoded value.  "
"They should also set the :mailheader:`Content-Transfer-Encoding` header as "
"appropriate."
msgstr ""
":mod:`email` 套件在其 :mod:`~email.encoders` 模組中提供了一些方便的編碼器。這"
"些編碼器實際上由 :class:`~email.mime.audio.MIMEAudio` 和 :class:`~email.mime."
"image.MIMEImage` 類別建構函式使用來提供預設編碼。所有編碼器函式都只接受一個引"
"數，也就是要編碼的訊息物件。他們通常會提取負載、對其進行編碼，然後將負載重設"
"為新編碼的值。他們也應適當地設定 :mailheader:`Content-Transfer-Encoding` 標"
"頭。"

#: ../../library/email.encoders.rst:35
msgid ""
"Note that these functions are not meaningful for a multipart message.  They "
"must be applied to individual subparts instead, and will raise a :exc:"
"`TypeError` if passed a message whose type is multipart."
msgstr ""
"請注意，這些函式對於多部分訊息 (multipart message) 沒有意義。它們必須應用於各"
"個子部分，如果傳遞類型為多部分訊息，則會引發 :exc:`TypeError`。"

#: ../../library/email.encoders.rst:39
msgid "Here are the encoding functions provided:"
msgstr "以下是提供的編碼函式："

#: ../../library/email.encoders.rst:44
msgid ""
"Encodes the payload into quoted-printable form and sets the :mailheader:"
"`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_. This is a "
"good encoding to use when most of your payload is normal printable data, but "
"contains a few unprintable characters."
msgstr ""
"將負載編碼為可列印字元 (quoted-printable) 形式，並將 :mailheader:`Content-"
"Transfer-Encoding` 標頭設定為 ``quoted-printable`` [#]_。當大部分負載是正常的"
"可列印資料，但包含一些不可列印的字元時，這是一種很好的編碼。"

#: ../../library/email.encoders.rst:52
msgid ""
"Encodes the payload into base64 form and sets the :mailheader:`Content-"
"Transfer-Encoding` header to ``base64``.  This is a good encoding to use "
"when most of your payload is unprintable data since it is a more compact "
"form than quoted-printable.  The drawback of base64 encoding is that it "
"renders the text non-human readable."
msgstr ""
"將負載編碼為 base64 形式，並將 :mailheader:`Content-Transfer-Encoding` 標頭設"
"定為 ``base64``。當大部分負載是不可列印資料時，這是一種很好的編碼，因為它是比"
"可列印字元更緊湊的形式。Base64 編碼的缺點是它使文字無法讓人類可讀。"

#: ../../library/email.encoders.rst:61
msgid ""
"This doesn't actually modify the message's payload, but it does set the :"
"mailheader:`Content-Transfer-Encoding` header to either ``7bit`` or ``8bit`` "
"as appropriate, based on the payload data."
msgstr ""
"這實際上並沒有修改訊息的負載，但它確實根據負載資料將 :mailheader:`Content-"
"Transfer-Encoding` 標頭設定為適當的 ``7bit`` 或 ``8bit``。"

#: ../../library/email.encoders.rst:68
msgid ""
"This does nothing; it doesn't even set the :mailheader:`Content-Transfer-"
"Encoding` header."
msgstr ""
"這沒有任何作用；它甚至沒有設定 :mailheader:`Content-Transfer-Encoding` 標頭。"

#: ../../library/email.encoders.rst:72
msgid "Footnotes"
msgstr "註腳"

#: ../../library/email.encoders.rst:73
msgid ""
"Note that encoding with :meth:`encode_quopri` also encodes all tabs and "
"space characters in the data."
msgstr ""
"請注意，使用 :meth:`encode_quopri` 進行編碼也會對資料中的所有定位字元 (tab) "
"和空格字元進行編碼。"
