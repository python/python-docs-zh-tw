# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Renyuan Lyu <renyuan.lyu@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-26 00:03+0000\n"
"PO-Revision-Date: 2018-05-23 16:13+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/turtle.rst:3
msgid ":mod:`turtle` --- Turtle graphics"
msgstr ":mod:`turtle` --- 龜圖學"

#: ../../library/turtle.rst:10
msgid "**Source code:** :source:`Lib/turtle.py`"
msgstr "**原始碼：**\\ :source:`Lib/turtle.py`"

#: ../../library/turtle.rst:20
msgid "Introduction"
msgstr "介紹"

#: ../../library/turtle.rst:22
#, fuzzy
msgid ""
"Turtle graphics is an implementation of `the popular geometric drawing tools "
"introduced in Logo <https://en.wikipedia.org/wiki/Turtle_ (robot)>`_, "
"developed by Wally Feurzeig, Seymour Papert and Cynthia Solomon in 1967."
msgstr ""
"龜圖學是介紹程式設計給孩子們的常用方法，這是由 Wally Feurzeig 和 Seymour "
"Papert 於 1966 年開發的原始 Logo 程式語言的一部分。"

#: ../../library/turtle.rst:29
msgid ""
"Turtle can draw intricate shapes using programs that repeat simple moves."
msgstr "龜可以使用重複簡單動作之程式來畫出複雜的形狀。"

#: ../../library/turtle.rst:35
msgid ""
"In Python, turtle graphics provides a representation of a physical "
"\"turtle\" (a little robot with a pen) that draws on a sheet of paper on the "
"floor."
msgstr ""

#: ../../library/turtle.rst:38
msgid ""
"It's an effective and well-proven way for learners to encounter programming "
"concepts and interaction with software, as it provides instant, visible "
"feedback. It also provides convenient access to graphical output in general."
msgstr ""

#: ../../library/turtle.rst:43
msgid ""
"Turtle drawing was originally created as an educational tool, to be used by "
"teachers in the classroom. For the programmer who needs to produce some "
"graphical output it can be a way to do that without the overhead of "
"introducing more complex or external libraries into their work."
msgstr ""

#: ../../library/turtle.rst:52
msgid "Tutorial"
msgstr ""

#: ../../library/turtle.rst:54
msgid ""
"New users should start here. In this tutorial we'll explore some of the "
"basics of turtle drawing."
msgstr ""

#: ../../library/turtle.rst:59
msgid "Starting a turtle environment"
msgstr ""

#: ../../library/turtle.rst:61
msgid "In a Python shell, import all the objects of the ``turtle`` module::"
msgstr ""

#: ../../library/turtle.rst:65
msgid ""
"If you run into a ``No module named '_tkinter'`` error, you'll have to "
"install the :mod:`Tk interface package <tkinter>` on your system."
msgstr ""

#: ../../library/turtle.rst:70
msgid "Basic drawing"
msgstr ""

#: ../../library/turtle.rst:72
msgid "Send the turtle forward 100 steps::"
msgstr ""

#: ../../library/turtle.rst:76
msgid ""
"You should see (most likely, in a new window on your display) a line drawn "
"by the turtle, heading East. Change the direction of the turtle, so that it "
"turns 120 degrees left (anti-clockwise)::"
msgstr ""

#: ../../library/turtle.rst:82
msgid "Let's continue by drawing a triangle::"
msgstr ""

#: ../../library/turtle.rst:88
msgid ""
"Notice how the turtle, represented by an arrow, points in different "
"directions as you steer it."
msgstr ""

#: ../../library/turtle.rst:91
msgid ""
"Experiment with those commands, and also with ``backward()`` and ``right()``."
msgstr ""

#: ../../library/turtle.rst:96 ../../library/turtle.rst:397
#: ../../library/turtle.rst:1067
msgid "Pen control"
msgstr ""

#: ../../library/turtle.rst:98
msgid ""
"Try changing the color - for example, ``color('blue')`` - and width of the "
"line - for example, ``width(3)`` - and then drawing again."
msgstr ""

#: ../../library/turtle.rst:101
msgid ""
"You can also move the turtle around without drawing, by lifting up the pen: "
"``up()`` before moving. To start drawing again, use ``down()``."
msgstr ""

#: ../../library/turtle.rst:106
msgid "The turtle's position"
msgstr ""

#: ../../library/turtle.rst:108
msgid ""
"Send your turtle back to its starting-point (useful if it has disappeared "
"off-screen)::"
msgstr ""

#: ../../library/turtle.rst:113
msgid ""
"The home position is at the center of the turtle's screen. If you ever need "
"to know them, get the turtle's x-y co-ordinates with::"
msgstr ""

#: ../../library/turtle.rst:118
msgid "Home is at ``(0, 0)``."
msgstr ""

#: ../../library/turtle.rst:120
msgid ""
"And after a while, it will probably help to clear the window so we can start "
"anew::"
msgstr ""

#: ../../library/turtle.rst:127
msgid "Making algorithmic patterns"
msgstr ""

#: ../../library/turtle.rst:129
msgid "Using loops, it's possible to build up geometric patterns::"
msgstr ""

#: ../../library/turtle.rst:138
msgid "\\ - which of course, are limited only by the imagination!"
msgstr ""

#: ../../library/turtle.rst:140
msgid ""
"Let's draw the star shape at the top of this page. We want red lines, filled "
"in with yellow::"
msgstr ""

#: ../../library/turtle.rst:146
msgid ""
"Just as ``up()`` and ``down()`` determine whether lines will be drawn, "
"filling can be turned on and off::"
msgstr ""

#: ../../library/turtle.rst:151
msgid "Next we'll create a loop::"
msgstr ""

#: ../../library/turtle.rst:159
msgid ""
"``abs(pos()) < 1`` is a good way to know when the turtle is back at its home "
"position."
msgstr ""

#: ../../library/turtle.rst:162
msgid "Finally, complete the filling::"
msgstr ""

#: ../../library/turtle.rst:166
msgid ""
"(Note that filling only actually takes place when you give the "
"``end_fill()`` command.)"
msgstr ""

#: ../../library/turtle.rst:173
msgid "How to..."
msgstr ""

#: ../../library/turtle.rst:175
msgid "This section covers some typical turtle use-cases and approaches."
msgstr ""

#: ../../library/turtle.rst:179
msgid "Get started as quickly as possible"
msgstr ""

#: ../../library/turtle.rst:181
msgid ""
"One of the joys of turtle graphics is the immediate, visual feedback that's "
"available from simple commands - it's an excellent way to introduce children "
"to programming ideas, with a minimum of overhead (not just children, of "
"course)."
msgstr ""

#: ../../library/turtle.rst:186
msgid ""
"The turtle module makes this possible by exposing all its basic "
"functionality as functions, available with ``from turtle import *``. The :"
"ref:`turtle graphics tutorial <turtle-tutorial>` covers this approach."
msgstr ""

#: ../../library/turtle.rst:190
msgid ""
"It's worth noting that many of the turtle commands also have even more terse "
"equivalents, such as ``fd()`` for :func:`forward`. These are especially "
"useful when working with learners for whom typing is not a skill."
msgstr ""

#: ../../library/turtle.rst:196
msgid ""
"You'll need to have the :mod:`Tk interface package <tkinter>` installed on "
"your system for turtle graphics to work. Be warned that this is not always "
"straightforward, so check this in advance if you're planning to use turtle "
"graphics with a learner."
msgstr ""

#: ../../library/turtle.rst:203
msgid "Use the ``turtle`` module namespace"
msgstr ""

#: ../../library/turtle.rst:205
msgid ""
"Using ``from turtle import *`` is convenient - but be warned that it imports "
"a rather large collection of objects, and if you're doing anything but "
"turtle graphics you run the risk of a name conflict (this becomes even more "
"an issue if you're using turtle graphics in a script where other modules "
"might be imported)."
msgstr ""

#: ../../library/turtle.rst:211
msgid ""
"The solution is to use ``import turtle`` - ``fd()`` becomes ``turtle.fd()``, "
"``width()`` becomes ``turtle.width()`` and so on. (If typing \"turtle\" over "
"and over again becomes tedious, use for example ``import turtle as t`` "
"instead.)"
msgstr ""

#: ../../library/turtle.rst:218
msgid "Use turtle graphics in a script"
msgstr ""

#: ../../library/turtle.rst:220
msgid ""
"It's recommended to use the ``turtle`` module namespace as described "
"immediately above, for example::"
msgstr ""

#: ../../library/turtle.rst:232
msgid ""
"Another step is also required though - as soon as the script ends, Python "
"will also close the turtle's window. Add::"
msgstr ""

#: ../../library/turtle.rst:237
msgid ""
"to the end of the script. The script will now wait to be dismissed and will "
"not exit until it is terminated, for example by closing the turtle graphics "
"window."
msgstr ""

#: ../../library/turtle.rst:243
msgid "Use object-oriented turtle graphics"
msgstr ""

#: ../../library/turtle.rst:245
msgid ""
":ref:`Explanation of the object-oriented interface <turtle-explanation>`"
msgstr ""

#: ../../library/turtle.rst:247
msgid ""
"Other than for very basic introductory purposes, or for trying things out as "
"quickly as possible, it's more usual and much more powerful to use the "
"object-oriented approach to turtle graphics. For example, this allows "
"multiple turtles on screen at once."
msgstr ""

#: ../../library/turtle.rst:252
msgid ""
"In this approach, the various turtle commands are methods of objects (mostly "
"of ``Turtle`` objects). You *can* use the object-oriented approach in the "
"shell, but it would be more typical in a Python script."
msgstr ""

#: ../../library/turtle.rst:256
msgid "The example above then becomes::"
msgstr ""

#: ../../library/turtle.rst:270
msgid ""
"Note the last line. ``t.screen`` is an instance of the :class:`Screen` that "
"a Turtle instance exists on; it's created automatically along with the "
"turtle."
msgstr ""

#: ../../library/turtle.rst:274
msgid "The turtle's screen can be customised, for example::"
msgstr ""

#: ../../library/turtle.rst:283
msgid "Explanation"
msgstr ""

#: ../../library/turtle.rst:285
msgid ""
"The :mod:`turtle` module is an extended reimplementation of the same-named "
"module from the Python standard distribution up to version Python 2.5."
msgstr ""

#: ../../library/turtle.rst:288
msgid ""
"It tries to keep the merits of the old turtle module and to be (nearly) 100% "
"compatible with it.  This means in the first place to enable the learning "
"programmer to use all the commands, classes and methods interactively when "
"using the module from within IDLE run with the ``-n`` switch."
msgstr ""

#: ../../library/turtle.rst:293
msgid ""
"The turtle module provides turtle graphics primitives, in both object-"
"oriented and procedure-oriented ways.  Because it uses :mod:`tkinter` for "
"the underlying graphics, it needs a version of Python installed with Tk "
"support."
msgstr ""

#: ../../library/turtle.rst:297
msgid "The object-oriented interface uses essentially two+two classes:"
msgstr ""

#: ../../library/turtle.rst:299
msgid ""
"The :class:`TurtleScreen` class defines graphics windows as a playground for "
"the drawing turtles.  Its constructor needs a :class:`tkinter.Canvas` or a :"
"class:`ScrolledCanvas` as argument.  It should be used when :mod:`turtle` is "
"used as part of some application."
msgstr ""

#: ../../library/turtle.rst:304
msgid ""
"The function :func:`Screen` returns a singleton object of a :class:"
"`TurtleScreen` subclass. This function should be used when :mod:`turtle` is "
"used as a standalone tool for doing graphics. As a singleton object, "
"inheriting from its class is not possible."
msgstr ""

#: ../../library/turtle.rst:309
msgid ""
"All methods of TurtleScreen/Screen also exist as functions, i.e. as part of "
"the procedure-oriented interface."
msgstr ""

#: ../../library/turtle.rst:312
msgid ""
":class:`RawTurtle` (alias: :class:`RawPen`) defines Turtle objects which "
"draw on a :class:`TurtleScreen`.  Its constructor needs a Canvas, "
"ScrolledCanvas or TurtleScreen as argument, so the RawTurtle objects know "
"where to draw."
msgstr ""

#: ../../library/turtle.rst:316
msgid ""
"Derived from RawTurtle is the subclass :class:`Turtle` (alias: :class:"
"`Pen`), which draws on \"the\" :class:`Screen` instance which is "
"automatically created, if not already present."
msgstr ""

#: ../../library/turtle.rst:320
msgid ""
"All methods of RawTurtle/Turtle also exist as functions, i.e. part of the "
"procedure-oriented interface."
msgstr ""

#: ../../library/turtle.rst:323
msgid ""
"The procedural interface provides functions which are derived from the "
"methods of the classes :class:`Screen` and :class:`Turtle`.  They have the "
"same names as the corresponding methods.  A screen object is automatically "
"created whenever a function derived from a Screen method is called.  An "
"(unnamed) turtle object is automatically created whenever any of the "
"functions derived from a Turtle method is called."
msgstr ""

#: ../../library/turtle.rst:330
msgid ""
"To use multiple turtles on a screen one has to use the object-oriented "
"interface."
msgstr ""

#: ../../library/turtle.rst:333
msgid ""
"In the following documentation the argument list for functions is given. "
"Methods, of course, have the additional first argument *self* which is "
"omitted here."
msgstr ""

#: ../../library/turtle.rst:339
msgid "Turtle graphics reference"
msgstr ""

#: ../../library/turtle.rst:342
msgid "Turtle methods"
msgstr ""

#: ../../library/turtle.rst:374 ../../library/turtle.rst:484
msgid "Turtle motion"
msgstr ""

#: ../../library/turtle.rst:362
msgid "Move and draw"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`forward` | :func:`fd`"
msgstr ":func:`forward` | :func:`fd`"

#: ../../library/turtle.rst:0
msgid ":func:`backward` | :func:`bk` | :func:`back`"
msgstr ":func:`backward` | :func:`bk` | :func:`back`"

#: ../../library/turtle.rst:0
msgid ":func:`right` | :func:`rt`"
msgstr ":func:`right` | :func:`rt`"

#: ../../library/turtle.rst:0
msgid ":func:`left` | :func:`lt`"
msgstr ":func:`left` | :func:`lt`"

#: ../../library/turtle.rst:0
msgid ":func:`goto` | :func:`setpos` | :func:`setposition`"
msgstr ":func:`goto` | :func:`setpos` | :func:`setposition`"

#: ../../library/turtle.rst:0
msgid ":func:`teleport`"
msgstr ":func:`teleport`"

#: ../../library/turtle.rst:0
msgid ":func:`setx`"
msgstr ":func:`setx`"

#: ../../library/turtle.rst:0
msgid ":func:`sety`"
msgstr ":func:`sety`"

#: ../../library/turtle.rst:0
msgid ":func:`setheading` | :func:`seth`"
msgstr ":func:`setheading` | :func:`seth`"

#: ../../library/turtle.rst:0
msgid ":func:`home`"
msgstr ":func:`home`"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2739
msgid ":func:`circle`"
msgstr ":func:`circle`"

#: ../../library/turtle.rst:0
msgid ":func:`dot`"
msgstr ":func:`dot`"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2717
msgid ":func:`stamp`"
msgstr ":func:`stamp`"

#: ../../library/turtle.rst:0
msgid ":func:`clearstamp`"
msgstr ":func:`clearstamp`"

#: ../../library/turtle.rst:0
msgid ":func:`clearstamps`"
msgstr ":func:`clearstamps`"

#: ../../library/turtle.rst:0
msgid ":func:`undo`"
msgstr ":func:`undo`"

#: ../../library/turtle.rst:0
msgid ":func:`speed`"
msgstr ":func:`speed`"

#: ../../library/turtle.rst:370 ../../library/turtle.rst:916
msgid "Tell Turtle's state"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`position` | :func:`pos`"
msgstr ":func:`position` | :func:`pos`"

#: ../../library/turtle.rst:0
msgid ":func:`towards`"
msgstr ":func:`towards`"

#: ../../library/turtle.rst:0
msgid ":func:`xcor`"
msgstr ":func:`xcor`"

#: ../../library/turtle.rst:0
msgid ":func:`ycor`"
msgstr ":func:`ycor`"

#: ../../library/turtle.rst:0
msgid ":func:`heading`"
msgstr ":func:`heading`"

#: ../../library/turtle.rst:0
msgid ":func:`distance`"
msgstr ":func:`distance`"

#: ../../library/turtle.rst:374
msgid "Setting and measurement"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`degrees`"
msgstr ":func:`degrees`"

#: ../../library/turtle.rst:0
msgid ":func:`radians`"
msgstr ":func:`radians`"

#: ../../library/turtle.rst:382 ../../library/turtle.rst:1070
msgid "Drawing state"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`pendown` | :func:`pd` | :func:`down`"
msgstr ":func:`pendown` | :func:`pd` | :func:`down`"

#: ../../library/turtle.rst:0
msgid ":func:`penup` | :func:`pu` | :func:`up`"
msgstr ":func:`penup` | :func:`pu` | :func:`up`"

#: ../../library/turtle.rst:0
msgid ":func:`pensize` | :func:`width`"
msgstr ":func:`pensize` | :func:`width`"

#: ../../library/turtle.rst:0
msgid ":func:`pen`"
msgstr ":func:`pen`"

#: ../../library/turtle.rst:0
msgid ":func:`isdown`"
msgstr ":func:`isdown`"

#: ../../library/turtle.rst:387 ../../library/turtle.rst:1162
msgid "Color control"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`color`"
msgstr ":func:`color`"

#: ../../library/turtle.rst:0
msgid ":func:`pencolor`"
msgstr ":func:`pencolor`"

#: ../../library/turtle.rst:0
msgid ":func:`fillcolor`"
msgstr ":func:`fillcolor`"

#: ../../library/turtle.rst:392 ../../library/turtle.rst:1294
msgid "Filling"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`filling`"
msgstr ":func:`filling`"

#: ../../library/turtle.rst:0
msgid ":func:`begin_fill`"
msgstr ":func:`begin_fill`"

#: ../../library/turtle.rst:0
msgid ":func:`end_fill`"
msgstr ":func:`end_fill`"

#: ../../library/turtle.rst:397 ../../library/turtle.rst:1341
msgid "More drawing control"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`reset`"
msgstr ":func:`reset`"

#: ../../library/turtle.rst:0
msgid ":func:`clear`"
msgstr ":func:`clear`"

#: ../../library/turtle.rst:0
msgid ":func:`write`"
msgstr ":func:`write`"

#: ../../library/turtle.rst:414 ../../library/turtle.rst:1387
msgid "Turtle state"
msgstr ""

#: ../../library/turtle.rst:403 ../../library/turtle.rst:1390
msgid "Visibility"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`showturtle` | :func:`st`"
msgstr ":func:`showturtle` | :func:`st`"

#: ../../library/turtle.rst:0
msgid ":func:`hideturtle` | :func:`ht`"
msgstr ":func:`hideturtle` | :func:`ht`"

#: ../../library/turtle.rst:0
msgid ":func:`isvisible`"
msgstr ":func:`isvisible`"

#: ../../library/turtle.rst:414 ../../library/turtle.rst:1429
msgid "Appearance"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`shape`"
msgstr ":func:`shape`"

#: ../../library/turtle.rst:0
msgid ":func:`resizemode`"
msgstr ":func:`resizemode`"

#: ../../library/turtle.rst:0
msgid ":func:`shapesize` | :func:`turtlesize`"
msgstr ":func:`shapesize` | :func:`turtlesize`"

#: ../../library/turtle.rst:0
msgid ":func:`shearfactor`"
msgstr ":func:`shearfactor`"

#: ../../library/turtle.rst:0
msgid ":func:`settiltangle`"
msgstr ":func:`settiltangle`"

#: ../../library/turtle.rst:0
msgid ":func:`tiltangle`"
msgstr ":func:`tiltangle`"

#: ../../library/turtle.rst:0
msgid ":func:`tilt`"
msgstr ":func:`tilt`"

#: ../../library/turtle.rst:0
msgid ":func:`shapetransform`"
msgstr ":func:`shapetransform`"

#: ../../library/turtle.rst:0
msgid ":func:`get_shapepoly`"
msgstr ":func:`get_shapepoly`"

#: ../../library/turtle.rst:419 ../../library/turtle.rst:1634
msgid "Using events"
msgstr ""

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2711
msgid ":func:`onclick`"
msgstr ":func:`onclick`"

#: ../../library/turtle.rst:0
msgid ":func:`onrelease`"
msgstr ":func:`onrelease`"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2694
msgid ":func:`ondrag`"
msgstr ":func:`ondrag`"

#: ../../library/turtle.rst:430 ../../library/turtle.rst:1708
msgid "Special Turtle methods"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`begin_poly`"
msgstr ":func:`begin_poly`"

#: ../../library/turtle.rst:0
msgid ":func:`end_poly`"
msgstr ":func:`end_poly`"

#: ../../library/turtle.rst:0
msgid ":func:`get_poly`"
msgstr ":func:`get_poly`"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2733
msgid ":func:`clone`"
msgstr ":func:`clone`"

#: ../../library/turtle.rst:0
msgid ":func:`getturtle` | :func:`getpen`"
msgstr ":func:`getturtle` | :func:`getpen`"

#: ../../library/turtle.rst:0
msgid ":func:`getscreen`"
msgstr ":func:`getscreen`"

#: ../../library/turtle.rst:0
msgid ":func:`setundobuffer`"
msgstr ":func:`setundobuffer`"

#: ../../library/turtle.rst:0
msgid ":func:`undobufferentries`"
msgstr ":func:`undobufferentries`"

#: ../../library/turtle.rst:433
msgid "Methods of TurtleScreen/Screen"
msgstr ""

#: ../../library/turtle.rst:441 ../../library/turtle.rst:1862
msgid "Window control"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`bgcolor`"
msgstr ":func:`bgcolor`"

#: ../../library/turtle.rst:0
msgid ":func:`bgpic`"
msgstr ":func:`bgpic`"

#: ../../library/turtle.rst:0
msgid ":func:`clearscreen`"
msgstr ":func:`clearscreen`"

#: ../../library/turtle.rst:0
msgid ":func:`resetscreen`"
msgstr ":func:`resetscreen`"

#: ../../library/turtle.rst:0
msgid ":func:`screensize`"
msgstr ":func:`screensize`"

#: ../../library/turtle.rst:0
msgid ":func:`setworldcoordinates`"
msgstr ":func:`setworldcoordinates`"

#: ../../library/turtle.rst:446 ../../library/turtle.rst:1985
msgid "Animation control"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`delay`"
msgstr ":func:`delay`"

#: ../../library/turtle.rst:0
msgid ":func:`tracer`"
msgstr ":func:`tracer`"

#: ../../library/turtle.rst:0
msgid ":func:`update`"
msgstr ":func:`update`"

#: ../../library/turtle.rst:454 ../../library/turtle.rst:2038
msgid "Using screen events"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`listen`"
msgstr ":func:`listen`"

#: ../../library/turtle.rst:0
msgid ":func:`onkey` | :func:`onkeyrelease`"
msgstr ":func:`onkey` | :func:`onkeyrelease`"

#: ../../library/turtle.rst:0
msgid ":func:`onkeypress`"
msgstr ":func:`onkeypress`"

#: ../../library/turtle.rst:0
msgid ":func:`onclick` | :func:`onscreenclick`"
msgstr ":func:`onclick` | :func:`onscreenclick`"

#: ../../library/turtle.rst:0
msgid ":func:`ontimer`"
msgstr ":func:`ontimer`"

#: ../../library/turtle.rst:0
msgid ":func:`mainloop` | :func:`done`"
msgstr ":func:`mainloop` | :func:`done`"

#: ../../library/turtle.rst:464 ../../library/turtle.rst:2183
msgid "Settings and special methods"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`mode`"
msgstr ":func:`mode`"

#: ../../library/turtle.rst:0
msgid ":func:`colormode`"
msgstr ":func:`colormode`"

#: ../../library/turtle.rst:0
msgid ":func:`getcanvas`"
msgstr ":func:`getcanvas`"

#: ../../library/turtle.rst:0
msgid ":func:`getshapes`"
msgstr ":func:`getshapes`"

#: ../../library/turtle.rst:0
msgid ":func:`register_shape` | :func:`addshape`"
msgstr ":func:`register_shape` | :func:`addshape`"

#: ../../library/turtle.rst:0
msgid ":func:`turtles`"
msgstr ":func:`turtles`"

#: ../../library/turtle.rst:0
msgid ":func:`window_height`"
msgstr ":func:`window_height`"

#: ../../library/turtle.rst:0
msgid ":func:`window_width`"
msgstr ":func:`window_width`"

#: ../../library/turtle.rst:468 ../../library/turtle.rst:2147
msgid "Input methods"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`textinput`"
msgstr ":func:`textinput`"

#: ../../library/turtle.rst:0
msgid ":func:`numinput`"
msgstr ":func:`numinput`"

#: ../../library/turtle.rst:475
msgid "Methods specific to Screen"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`bye`"
msgstr ":func:`bye`"

#: ../../library/turtle.rst:0
msgid ":func:`exitonclick`"
msgstr ":func:`exitonclick`"

#: ../../library/turtle.rst:0
msgid ":func:`setup`"
msgstr ":func:`setup`"

#: ../../library/turtle.rst:0
msgid ":func:`title`"
msgstr ":func:`title`"

#: ../../library/turtle.rst:478
msgid "Methods of RawTurtle/Turtle and corresponding functions"
msgstr ""

#: ../../library/turtle.rst:480
msgid ""
"Most of the examples in this section refer to a Turtle instance called "
"``turtle``."
msgstr ""

#: ../../library/turtle.rst:0
msgid "Parameters"
msgstr "參數"

#: ../../library/turtle.rst:489 ../../library/turtle.rst:534
#: ../../library/turtle.rst:559 ../../library/turtle.rst:657
#: ../../library/turtle.rst:680 ../../library/turtle.rst:703
msgid "a number (integer or float)"
msgstr ""

#: ../../library/turtle.rst:491
msgid ""
"Move the turtle forward by the specified *distance*, in the direction the "
"turtle is headed."
msgstr ""

#: ../../library/turtle.rst:511 ../../library/turtle.rst:753
#: ../../library/turtle.rst:1020 ../../library/turtle.rst:1528
#: ../../library/turtle.rst:1547
msgid "a number"
msgstr ""

#: ../../library/turtle.rst:513
msgid ""
"Move the turtle backward by *distance*, opposite to the direction the turtle "
"is headed.  Do not change the turtle's heading."
msgstr ""

#: ../../library/turtle.rst:536
msgid ""
"Turn turtle right by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

#: ../../library/turtle.rst:561
msgid ""
"Turn turtle left by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

#: ../../library/turtle.rst:585
msgid "a number or a pair/vector of numbers"
msgstr ""

#: ../../library/turtle.rst:586 ../../library/turtle.rst:619
#: ../../library/turtle.rst:620
msgid "a number or ``None``"
msgstr ""

#: ../../library/turtle.rst:588
msgid ""
"If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D` (e."
"g. as returned by :func:`pos`)."
msgstr ""

#: ../../library/turtle.rst:591
msgid ""
"Move turtle to an absolute position.  If the pen is down, draw line.  Do not "
"change the turtle's orientation."
msgstr ""

#: ../../library/turtle.rst:621
msgid "a boolean"
msgstr ""

#: ../../library/turtle.rst:623
msgid ""
"Move turtle to an absolute position. Unlike goto(x, y), a line will not be "
"drawn. The turtle's orientation does not change. If currently filling, the "
"polygon(s) teleported from will be filled after leaving, and filling will "
"begin again after teleporting. This can be disabled with fill_gap=True, "
"which makes the imaginary line traveled during teleporting act as a fill "
"barrier like in goto(x, y)."
msgstr ""

#: ../../library/turtle.rst:659
msgid ""
"Set the turtle's first coordinate to *x*, leave second coordinate unchanged."
msgstr ""

#: ../../library/turtle.rst:682
msgid ""
"Set the turtle's second coordinate to *y*, leave first coordinate unchanged."
msgstr ""

#: ../../library/turtle.rst:705
msgid ""
"Set the orientation of the turtle to *to_angle*.  Here are some common "
"directions in degrees:"
msgstr ""

#: ../../library/turtle.rst:709
msgid "standard mode"
msgstr ""

#: ../../library/turtle.rst:709
msgid "logo mode"
msgstr ""

#: ../../library/turtle.rst:711
msgid "0 - east"
msgstr ""

#: ../../library/turtle.rst:711
msgid "0 - north"
msgstr ""

#: ../../library/turtle.rst:712
msgid "90 - north"
msgstr ""

#: ../../library/turtle.rst:712
msgid "90 - east"
msgstr ""

#: ../../library/turtle.rst:713
msgid "180 - west"
msgstr ""

#: ../../library/turtle.rst:713
msgid "180 - south"
msgstr ""

#: ../../library/turtle.rst:714
msgid "270 - south"
msgstr ""

#: ../../library/turtle.rst:714
msgid "270 - west"
msgstr ""

#: ../../library/turtle.rst:727
msgid ""
"Move turtle to the origin -- coordinates (0,0) -- and set its heading to its "
"start-orientation (which depends on the mode, see :func:`mode`)."
msgstr ""

#: ../../library/turtle.rst:754
msgid "a number (or ``None``)"
msgstr ""

#: ../../library/turtle.rst:755 ../../library/turtle.rst:848
msgid "an integer (or ``None``)"
msgstr ""

#: ../../library/turtle.rst:757
msgid ""
"Draw a circle with given *radius*.  The center is *radius* units left of the "
"turtle; *extent* -- an angle -- determines which part of the circle is "
"drawn.  If *extent* is not given, draw the entire circle.  If *extent* is "
"not a full circle, one endpoint of the arc is the current pen position.  "
"Draw the arc in counterclockwise direction if *radius* is positive, "
"otherwise in clockwise direction.  Finally the direction of the turtle is "
"changed by the amount of *extent*."
msgstr ""

#: ../../library/turtle.rst:765
msgid ""
"As the circle is approximated by an inscribed regular polygon, *steps* "
"determines the number of steps to use.  If not given, it will be calculated "
"automatically.  May be used to draw regular polygons."
msgstr ""

#: ../../library/turtle.rst:791
msgid "an integer >= 1 (if given)"
msgstr ""

#: ../../library/turtle.rst:792
msgid "a colorstring or a numeric color tuple"
msgstr ""

#: ../../library/turtle.rst:794
msgid ""
"Draw a circular dot with diameter *size*, using *color*.  If *size* is not "
"given, the maximum of pensize+4 and 2*pensize is used."
msgstr ""

#: ../../library/turtle.rst:812
msgid ""
"Stamp a copy of the turtle shape onto the canvas at the current turtle "
"position.  Return a stamp_id for that stamp, which can be used to delete it "
"by calling ``clearstamp(stamp_id)``."
msgstr ""

#: ../../library/turtle.rst:826
msgid "an integer, must be return value of previous :func:`stamp` call"
msgstr ""

#: ../../library/turtle.rst:829
msgid "Delete stamp with given *stampid*."
msgstr ""

#: ../../library/turtle.rst:850
msgid ""
"Delete all or first/last *n* of turtle's stamps.  If *n* is ``None``, delete "
"all stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 delete last "
"*n* stamps."
msgstr ""

#: ../../library/turtle.rst:866
msgid ""
"Undo (repeatedly) the last turtle action(s).  Number of available undo "
"actions is determined by the size of the undobuffer."
msgstr ""

#: ../../library/turtle.rst:881
msgid "an integer in the range 0..10 or a speedstring (see below)"
msgstr ""

#: ../../library/turtle.rst:883
msgid ""
"Set the turtle's speed to an integer value in the range 0..10.  If no "
"argument is given, return current speed."
msgstr ""

#: ../../library/turtle.rst:886
msgid ""
"If input is a number greater than 10 or smaller than 0.5, speed is set to "
"0.  Speedstrings are mapped to speedvalues as follows:"
msgstr ""

#: ../../library/turtle.rst:889
msgid "\"fastest\":  0"
msgstr ""

#: ../../library/turtle.rst:890
msgid "\"fast\":  10"
msgstr ""

#: ../../library/turtle.rst:891
msgid "\"normal\":  6"
msgstr ""

#: ../../library/turtle.rst:892
msgid "\"slow\":  3"
msgstr ""

#: ../../library/turtle.rst:893
msgid "\"slowest\":  1"
msgstr ""

#: ../../library/turtle.rst:895
msgid ""
"Speeds from 1 to 10 enforce increasingly faster animation of line drawing "
"and turtle turning."
msgstr ""

#: ../../library/turtle.rst:898
msgid ""
"Attention: *speed* = 0 means that *no* animation takes place. forward/back "
"makes turtle jump and likewise left/right make the turtle turn instantly."
msgstr ""

#: ../../library/turtle.rst:921
msgid ""
"Return the turtle's current location (x,y) (as a :class:`Vec2D` vector)."
msgstr ""

#: ../../library/turtle.rst:932 ../../library/turtle.rst:995
msgid "a number or a pair/vector of numbers or a turtle instance"
msgstr ""

#: ../../library/turtle.rst:933 ../../library/turtle.rst:996
msgid "a number if *x* is a number, else ``None``"
msgstr ""

#: ../../library/turtle.rst:935
msgid ""
"Return the angle between the line from turtle position to position specified "
"by (x,y), the vector or the other turtle.  This depends on the turtle's "
"start orientation which depends on the mode - \"standard\"/\"world\" or "
"\"logo\"."
msgstr ""

#: ../../library/turtle.rst:949
msgid "Return the turtle's x coordinate."
msgstr ""

#: ../../library/turtle.rst:965
msgid "Return the turtle's y coordinate."
msgstr ""

#: ../../library/turtle.rst:981
msgid ""
"Return the turtle's current heading (value depends on the turtle mode, see :"
"func:`mode`)."
msgstr ""

#: ../../library/turtle.rst:998
msgid ""
"Return the distance from the turtle to (x,y), the given vector, or the given "
"other turtle, in turtle step units."
msgstr ""

#: ../../library/turtle.rst:1016
msgid "Settings for measurement"
msgstr ""

#: ../../library/turtle.rst:1022
msgid ""
"Set angle measurement units, i.e. set number of \"degrees\" for a full "
"circle. Default value is 360 degrees."
msgstr ""

#: ../../library/turtle.rst:1045
msgid ""
"Set the angle measurement units to radians.  Equivalent to ``degrees(2*math."
"pi)``."
msgstr ""

#: ../../library/turtle.rst:1076
msgid "Pull the pen down -- drawing when moving."
msgstr ""

#: ../../library/turtle.rst:1083
msgid "Pull the pen up -- no drawing when moving."
msgstr ""

#: ../../library/turtle.rst:1089
msgid "a positive number"
msgstr ""

#: ../../library/turtle.rst:1091
msgid ""
"Set the line thickness to *width* or return it.  If resizemode is set to "
"\"auto\" and turtleshape is a polygon, that polygon is drawn with the same "
"line thickness.  If no argument is given, the current pensize is returned."
msgstr ""

#: ../../library/turtle.rst:1105
msgid "a dictionary with some or all of the below listed keys"
msgstr ""

#: ../../library/turtle.rst:1106
msgid "one or more keyword-arguments with the below listed keys as keywords"
msgstr ""

#: ../../library/turtle.rst:1108
msgid ""
"Return or set the pen's attributes in a \"pen-dictionary\" with the "
"following key/value pairs:"
msgstr ""

#: ../../library/turtle.rst:1111
msgid "\"shown\": True/False"
msgstr ""

#: ../../library/turtle.rst:1112
msgid "\"pendown\": True/False"
msgstr ""

#: ../../library/turtle.rst:1113
msgid "\"pencolor\": color-string or color-tuple"
msgstr ""

#: ../../library/turtle.rst:1114
msgid "\"fillcolor\": color-string or color-tuple"
msgstr ""

#: ../../library/turtle.rst:1115
msgid "\"pensize\": positive number"
msgstr ""

#: ../../library/turtle.rst:1116
msgid "\"speed\": number in range 0..10"
msgstr ""

#: ../../library/turtle.rst:1117
msgid "\"resizemode\": \"auto\" or \"user\" or \"noresize\""
msgstr ""

#: ../../library/turtle.rst:1118
msgid "\"stretchfactor\": (positive number, positive number)"
msgstr ""

#: ../../library/turtle.rst:1119
msgid "\"outline\": positive number"
msgstr ""

#: ../../library/turtle.rst:1120
msgid "\"tilt\": number"
msgstr ""

#: ../../library/turtle.rst:1122
msgid ""
"This dictionary can be used as argument for a subsequent call to :func:`pen` "
"to restore the former pen-state.  Moreover one or more of these attributes "
"can be provided as keyword-arguments.  This can be used to set several pen "
"attributes in one statement."
msgstr ""

#: ../../library/turtle.rst:1148
msgid "Return ``True`` if pen is down, ``False`` if it's up."
msgstr ""

#: ../../library/turtle.rst:1166
msgid "Return or set the pencolor."
msgstr ""

#: ../../library/turtle.rst:1168 ../../library/turtle.rst:1217
msgid "Four input formats are allowed:"
msgstr ""

#: ../../library/turtle.rst:1173
msgid "``pencolor()``"
msgstr "``pencolor()``"

#: ../../library/turtle.rst:1171
msgid ""
"Return the current pencolor as color specification string or as a tuple (see "
"example).  May be used as input to another color/pencolor/fillcolor call."
msgstr ""

#: ../../library/turtle.rst:1177
msgid "``pencolor(colorstring)``"
msgstr "``pencolor(colorstring)``"

#: ../../library/turtle.rst:1176
msgid ""
"Set pencolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

#: ../../library/turtle.rst:1182
msgid "``pencolor((r, g, b))``"
msgstr "``pencolor((r, g, b))``"

#: ../../library/turtle.rst:1180
msgid ""
"Set pencolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

#: ../../library/turtle.rst:1186
msgid "``pencolor(r, g, b)``"
msgstr "``pencolor(r, g, b)``"

#: ../../library/turtle.rst:1185
msgid ""
"Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

#: ../../library/turtle.rst:1188
msgid ""
"If turtleshape is a polygon, the outline of that polygon is drawn with the "
"newly set pencolor."
msgstr ""

#: ../../library/turtle.rst:1215
msgid "Return or set the fillcolor."
msgstr ""

#: ../../library/turtle.rst:1222
msgid "``fillcolor()``"
msgstr "``fillcolor()``"

#: ../../library/turtle.rst:1220
msgid ""
"Return the current fillcolor as color specification string, possibly in "
"tuple format (see example).  May be used as input to another color/pencolor/"
"fillcolor call."
msgstr ""

#: ../../library/turtle.rst:1226
msgid "``fillcolor(colorstring)``"
msgstr "``fillcolor(colorstring)``"

#: ../../library/turtle.rst:1225
msgid ""
"Set fillcolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

#: ../../library/turtle.rst:1231
msgid "``fillcolor((r, g, b))``"
msgstr "``fillcolor((r, g, b))``"

#: ../../library/turtle.rst:1229
msgid ""
"Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

#: ../../library/turtle.rst:1235
msgid "``fillcolor(r, g, b)``"
msgstr "``fillcolor(r, g, b)``"

#: ../../library/turtle.rst:1234
msgid ""
"Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

#: ../../library/turtle.rst:1237
msgid ""
"If turtleshape is a polygon, the interior of that polygon is drawn with the "
"newly set fillcolor."
msgstr ""

#: ../../library/turtle.rst:1258
msgid "Return or set pencolor and fillcolor."
msgstr ""

#: ../../library/turtle.rst:1260
msgid ""
"Several input formats are allowed.  They use 0 to 3 arguments as follows:"
msgstr ""

#: ../../library/turtle.rst:1266
msgid "``color()``"
msgstr "``color()``"

#: ../../library/turtle.rst:1264
msgid ""
"Return the current pencolor and the current fillcolor as a pair of color "
"specification strings or tuples as returned by :func:`pencolor` and :func:"
"`fillcolor`."
msgstr ""

#: ../../library/turtle.rst:1270
msgid "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"
msgstr "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"

#: ../../library/turtle.rst:1269
msgid ""
"Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the "
"given value."
msgstr ""

#: ../../library/turtle.rst:1274
msgid ""
"``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"
msgstr ""
"``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"

#: ../../library/turtle.rst:1273
msgid ""
"Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)`` and "
"analogously if the other input format is used."
msgstr ""

#: ../../library/turtle.rst:1276
msgid ""
"If turtleshape is a polygon, outline and interior of that polygon is drawn "
"with the newly set colors."
msgstr ""

#: ../../library/turtle.rst:1290
msgid "See also: Screen method :func:`colormode`."
msgstr ""

#: ../../library/turtle.rst:1304
msgid "Return fillstate (``True`` if filling, ``False`` else)."
msgstr ""

#: ../../library/turtle.rst:1319
msgid "To be called just before drawing a shape to be filled."
msgstr ""

#: ../../library/turtle.rst:1324
msgid "Fill the shape drawn after the last call to :func:`begin_fill`."
msgstr ""

#: ../../library/turtle.rst:1326
msgid ""
"Whether or not overlap regions for self-intersecting polygons or multiple "
"shapes are filled depends on the operating system graphics, type of overlap, "
"and number of overlaps.  For example, the Turtle star above may be either "
"all yellow or have some white regions."
msgstr ""

#: ../../library/turtle.rst:1345
msgid ""
"Delete the turtle's drawings from the screen, re-center the turtle and set "
"variables to the default values."
msgstr ""

#: ../../library/turtle.rst:1366
msgid ""
"Delete the turtle's drawings from the screen.  Do not move turtle.  State "
"and position of the turtle as well as drawings of other turtles are not "
"affected."
msgstr ""

#: ../../library/turtle.rst:1372
msgid "object to be written to the TurtleScreen"
msgstr ""

#: ../../library/turtle.rst:1373
msgid "True/False"
msgstr ""

#: ../../library/turtle.rst:1374
msgid "one of the strings \"left\", \"center\" or right\""
msgstr ""

#: ../../library/turtle.rst:1375
msgid "a triple (fontname, fontsize, fonttype)"
msgstr ""

#: ../../library/turtle.rst:1377
msgid ""
"Write text - the string representation of *arg* - at the current turtle "
"position according to *align* (\"left\", \"center\" or \"right\") and with "
"the given font.  If *move* is true, the pen is moved to the bottom-right "
"corner of the text.  By default, *move* is ``False``."
msgstr ""

#: ../../library/turtle.rst:1395
msgid ""
"Make the turtle invisible.  It's a good idea to do this while you're in the "
"middle of doing some complex drawing, because hiding the turtle speeds up "
"the drawing observably."
msgstr ""

#: ../../library/turtle.rst:1408
msgid "Make the turtle visible."
msgstr ""

#: ../../library/turtle.rst:1418
msgid "Return ``True`` if the Turtle is shown, ``False`` if it's hidden."
msgstr ""

#: ../../library/turtle.rst:1433
msgid "a string which is a valid shapename"
msgstr ""

#: ../../library/turtle.rst:1435
msgid ""
"Set turtle shape to shape with given *name* or, if name is not given, return "
"name of current shape.  Shape with *name* must exist in the TurtleScreen's "
"shape dictionary.  Initially there are the following polygon shapes: "
"\"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".  "
"To learn about how to deal with shapes see Screen method :func:"
"`register_shape`."
msgstr ""

#: ../../library/turtle.rst:1453
msgid "one of the strings \"auto\", \"user\", \"noresize\""
msgstr ""

#: ../../library/turtle.rst:1455
msgid ""
"Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".  If "
"*rmode* is not given, return current resizemode.  Different resizemodes have "
"the following effects:"
msgstr ""

#: ../../library/turtle.rst:1459
msgid ""
"\"auto\": adapts the appearance of the turtle corresponding to the value of "
"pensize."
msgstr ""

#: ../../library/turtle.rst:1460
msgid ""
"\"user\": adapts the appearance of the turtle according to the values of "
"stretchfactor and outlinewidth (outline), which are set by :func:`shapesize`."
msgstr ""

#: ../../library/turtle.rst:1463
msgid "\"noresize\": no adaption of the turtle's appearance takes place."
msgstr ""

#: ../../library/turtle.rst:1465
msgid ""
"``resizemode(\"user\")`` is called by :func:`shapesize` when used with "
"arguments."
msgstr ""

#: ../../library/turtle.rst:1480 ../../library/turtle.rst:1481
#: ../../library/turtle.rst:1482
msgid "positive number"
msgstr ""

#: ../../library/turtle.rst:1484
msgid ""
"Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set "
"resizemode to \"user\".  If and only if resizemode is set to \"user\", the "
"turtle will be displayed stretched according to its stretchfactors: "
"*stretch_wid* is stretchfactor perpendicular to its orientation, "
"*stretch_len* is stretchfactor in direction of its orientation, *outline* "
"determines the width of the shape's outline."
msgstr ""

#: ../../library/turtle.rst:1507 ../../library/turtle.rst:2166
#: ../../library/turtle.rst:2167 ../../library/turtle.rst:2168
msgid "number (optional)"
msgstr ""

#: ../../library/turtle.rst:1509
msgid ""
"Set or return the current shearfactor. Shear the turtleshape according to "
"the given shearfactor shear, which is the tangent of the shear angle. Do "
"*not* change the turtle's heading (direction of movement). If shear is not "
"given: return the current shearfactor, i. e. the tangent of the shear angle, "
"by which lines parallel to the heading of the turtle are sheared."
msgstr ""

#: ../../library/turtle.rst:1530
msgid ""
"Rotate the turtleshape by *angle* from its current tilt-angle, but do *not* "
"change the turtle's heading (direction of movement)."
msgstr ""

#: ../../library/turtle.rst:1549
msgid ""
"Rotate the turtleshape to point in the direction specified by *angle*, "
"regardless of its current tilt-angle.  *Do not* change the turtle's heading "
"(direction of movement)."
msgstr ""

#: ../../library/turtle.rst:1569 ../../library/turtle.rst:1592
#: ../../library/turtle.rst:1593 ../../library/turtle.rst:1594
#: ../../library/turtle.rst:1595
msgid "a number (optional)"
msgstr ""

#: ../../library/turtle.rst:1571
msgid ""
"Set or return the current tilt-angle. If angle is given, rotate the "
"turtleshape to point in the direction specified by angle, regardless of its "
"current tilt-angle. Do *not* change the turtle's heading (direction of "
"movement). If angle is not given: return the current tilt-angle, i. e. the "
"angle between the orientation of the turtleshape and the heading of the "
"turtle (its direction of movement)."
msgstr ""

#: ../../library/turtle.rst:1597
msgid "Set or return the current transformation matrix of the turtle shape."
msgstr ""

#: ../../library/turtle.rst:1599
msgid ""
"If none of the matrix elements are given, return the transformation matrix "
"as a tuple of 4 elements. Otherwise set the given elements and transform the "
"turtleshape according to the matrix consisting of first row t11, t12 and "
"second row t21, t22. The determinant t11 * t22 - t12 * t21 must not be zero, "
"otherwise an error is raised. Modify stretchfactor, shearfactor and "
"tiltangle according to the given matrix."
msgstr ""

#: ../../library/turtle.rst:1621
msgid ""
"Return the current shape polygon as tuple of coordinate pairs. This can be "
"used to define a new shape or components of a compound shape."
msgstr ""

#: ../../library/turtle.rst:1639 ../../library/turtle.rst:1661
#: ../../library/turtle.rst:1686 ../../library/turtle.rst:2090
msgid ""
"a function with two arguments which will be called with the coordinates of "
"the clicked point on the canvas"
msgstr ""

#: ../../library/turtle.rst:1641 ../../library/turtle.rst:1663
#: ../../library/turtle.rst:1688 ../../library/turtle.rst:2092
msgid "number of the mouse-button, defaults to 1 (left mouse button)"
msgstr ""

#: ../../library/turtle.rst:1642 ../../library/turtle.rst:1664
#: ../../library/turtle.rst:1689 ../../library/turtle.rst:2093
msgid ""
"``True`` or ``False`` -- if ``True``, a new binding will be added, otherwise "
"it will replace a former binding"
msgstr ""

#: ../../library/turtle.rst:1645
msgid ""
"Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed.  Example for the anonymous turtle, i.e. the "
"procedural way:"
msgstr ""

#: ../../library/turtle.rst:1667
msgid ""
"Bind *fun* to mouse-button-release events on this turtle.  If *fun* is "
"``None``, existing bindings are removed."
msgstr ""

#: ../../library/turtle.rst:1692
msgid ""
"Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr ""

#: ../../library/turtle.rst:1695
msgid ""
"Remark: Every sequence of mouse-move-events on a turtle is preceded by a "
"mouse-click event on that turtle."
msgstr ""

#: ../../library/turtle.rst:1703
msgid ""
"Subsequently, clicking and dragging the Turtle will move it across the "
"screen thereby producing handdrawings (if pen is down)."
msgstr ""

#: ../../library/turtle.rst:1712
msgid ""
"Start recording the vertices of a polygon.  Current turtle position is first "
"vertex of polygon."
msgstr ""

#: ../../library/turtle.rst:1718
msgid ""
"Stop recording the vertices of a polygon.  Current turtle position is last "
"vertex of polygon.  This will be connected with the first vertex."
msgstr ""

#: ../../library/turtle.rst:1724
msgid "Return the last recorded polygon."
msgstr ""

#: ../../library/turtle.rst:1743
msgid ""
"Create and return a clone of the turtle with same position, heading and "
"turtle properties."
msgstr ""

#: ../../library/turtle.rst:1756
msgid ""
"Return the Turtle object itself.  Only reasonable use: as a function to "
"return the \"anonymous turtle\":"
msgstr ""

#: ../../library/turtle.rst:1770
msgid ""
"Return the :class:`TurtleScreen` object the turtle is drawing on. "
"TurtleScreen methods can then be called for that object."
msgstr ""

#: ../../library/turtle.rst:1784
msgid "an integer or ``None``"
msgstr ""

#: ../../library/turtle.rst:1786
msgid ""
"Set or disable undobuffer.  If *size* is an integer, an empty undobuffer of "
"given size is installed.  *size* gives the maximum number of turtle actions "
"that can be undone by the :func:`undo` method/function.  If *size* is "
"``None``, the undobuffer is disabled."
msgstr ""

#: ../../library/turtle.rst:1799
msgid "Return number of entries in the undobuffer."
msgstr ""

#: ../../library/turtle.rst:1812
msgid "Compound shapes"
msgstr ""

#: ../../library/turtle.rst:1814
msgid ""
"To use compound turtle shapes, which consist of several polygons of "
"different color, you must use the helper class :class:`Shape` explicitly as "
"described below:"
msgstr ""

#: ../../library/turtle.rst:1818
msgid "Create an empty Shape object of type \"compound\"."
msgstr ""

#: ../../library/turtle.rst:1819
msgid ""
"Add as many components to this object as desired, using the :meth:`~Shape."
"addcomponent` method."
msgstr ""

#: ../../library/turtle.rst:1822
msgid "For example:"
msgstr "舉例來說："

#: ../../library/turtle.rst:1833
msgid "Now add the Shape to the Screen's shapelist and use it:"
msgstr ""

#: ../../library/turtle.rst:1844
msgid ""
"The :class:`Shape` class is used internally by the :func:`register_shape` "
"method in different ways.  The application programmer has to deal with the "
"Shape class *only* when using compound shapes like shown above!"
msgstr ""

#: ../../library/turtle.rst:1850
msgid "Methods of TurtleScreen/Screen and corresponding functions"
msgstr ""

#: ../../library/turtle.rst:1852
msgid ""
"Most of the examples in this section refer to a TurtleScreen instance called "
"``screen``."
msgstr ""

#: ../../library/turtle.rst:1866
msgid ""
"a color string or three numbers in the range 0..colormode or a 3-tuple of "
"such numbers"
msgstr ""

#: ../../library/turtle.rst:1870
msgid "Set or return background color of the TurtleScreen."
msgstr ""

#: ../../library/turtle.rst:1885
msgid "a string, name of a gif-file or ``\"nopic\"``, or ``None``"
msgstr ""

#: ../../library/turtle.rst:1887
msgid ""
"Set background image or return name of current backgroundimage.  If "
"*picname* is a filename, set the corresponding image as background.  If "
"*picname* is ``\"nopic\"``, delete background image, if present.  If "
"*picname* is ``None``, return the filename of the current backgroundimage. ::"
msgstr ""

#: ../../library/turtle.rst:1903
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``clearscreen``.  The global function ``clear`` is a different one "
"derived from the Turtle method ``clear``."
msgstr ""

#: ../../library/turtle.rst:1910
msgid ""
"Delete all drawings and all turtles from the TurtleScreen.  Reset the now "
"empty TurtleScreen to its initial state: white background, no background "
"image, no event bindings and tracing on."
msgstr ""

#: ../../library/turtle.rst:1919
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``resetscreen``.  The global function ``reset`` is another one derived "
"from the Turtle method ``reset``."
msgstr ""

#: ../../library/turtle.rst:1926
msgid "Reset all Turtles on the Screen to their initial state."
msgstr ""

#: ../../library/turtle.rst:1931
msgid "positive integer, new width of canvas in pixels"
msgstr ""

#: ../../library/turtle.rst:1932
msgid "positive integer, new height of canvas in pixels"
msgstr ""

#: ../../library/turtle.rst:1933
msgid "colorstring or color-tuple, new background color"
msgstr ""

#: ../../library/turtle.rst:1935
msgid ""
"If no arguments are given, return current (canvaswidth, canvasheight).  Else "
"resize the canvas the turtles are drawing on.  Do not alter the drawing "
"window.  To observe hidden parts of the canvas, use the scrollbars. With "
"this method, one can make visible those parts of a drawing which were "
"outside the canvas before."
msgstr ""

#: ../../library/turtle.rst:1947
msgid "e.g. to search for an erroneously escaped turtle ;-)"
msgstr ""

#: ../../library/turtle.rst:1952
msgid "a number, x-coordinate of lower left corner of canvas"
msgstr ""

#: ../../library/turtle.rst:1953
msgid "a number, y-coordinate of lower left corner of canvas"
msgstr ""

#: ../../library/turtle.rst:1954
msgid "a number, x-coordinate of upper right corner of canvas"
msgstr ""

#: ../../library/turtle.rst:1955
msgid "a number, y-coordinate of upper right corner of canvas"
msgstr ""

#: ../../library/turtle.rst:1957
msgid ""
"Set up user-defined coordinate system and switch to mode \"world\" if "
"necessary.  This performs a ``screen.reset()``.  If mode \"world\" is "
"already active, all drawings are redrawn according to the new coordinates."
msgstr ""

#: ../../library/turtle.rst:1961
msgid ""
"**ATTENTION**: in user-defined coordinate systems angles may appear "
"distorted."
msgstr ""

#: ../../library/turtle.rst:1989
msgid "positive integer"
msgstr ""

#: ../../library/turtle.rst:1991
msgid ""
"Set or return the drawing *delay* in milliseconds.  (This is approximately "
"the time interval between two consecutive canvas updates.)  The longer the "
"drawing delay, the slower the animation."
msgstr ""

#: ../../library/turtle.rst:1995
msgid "Optional argument:"
msgstr ""

#: ../../library/turtle.rst:2009 ../../library/turtle.rst:2010
msgid "nonnegative integer"
msgstr ""

#: ../../library/turtle.rst:2012
msgid ""
"Turn turtle animation on/off and set delay for update drawings.  If *n* is "
"given, only each n-th regular screen update is really performed.  (Can be "
"used to accelerate the drawing of complex graphics.)  When called without "
"arguments, returns the currently stored value of n. Second argument sets "
"delay value (see :func:`delay`)."
msgstr ""

#: ../../library/turtle.rst:2032
msgid "Perform a TurtleScreen update. To be used when tracer is turned off."
msgstr ""

#: ../../library/turtle.rst:2034
msgid "See also the RawTurtle/Turtle method :func:`speed`."
msgstr ""

#: ../../library/turtle.rst:2042
msgid ""
"Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments "
"are provided in order to be able to pass :func:`listen` to the onclick "
"method."
msgstr ""

#: ../../library/turtle.rst:2049 ../../library/turtle.rst:2069
msgid "a function with no arguments or ``None``"
msgstr ""

#: ../../library/turtle.rst:2050 ../../library/turtle.rst:2070
msgid "a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")"
msgstr ""

#: ../../library/turtle.rst:2052
msgid ""
"Bind *fun* to key-release event of key.  If *fun* is ``None``, event "
"bindings are removed. Remark: in order to be able to register key-events, "
"TurtleScreen must have the focus. (See method :func:`listen`.)"
msgstr ""

#: ../../library/turtle.rst:2072
msgid ""
"Bind *fun* to key-press event of key if key is given, or to any key-press-"
"event if no key is given. Remark: in order to be able to register key-"
"events, TurtleScreen must have focus. (See method :func:`listen`.)"
msgstr ""

#: ../../library/turtle.rst:2096
msgid ""
"Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr ""

#: ../../library/turtle.rst:2099
msgid ""
"Example for a TurtleScreen instance named ``screen`` and a Turtle instance "
"named ``turtle``:"
msgstr ""

#: ../../library/turtle.rst:2110
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``onscreenclick``.  The global function ``onclick`` is another one "
"derived from the Turtle method ``onclick``."
msgstr ""

#: ../../library/turtle.rst:2117
msgid "a function with no arguments"
msgstr ""

#: ../../library/turtle.rst:2118
msgid "a number >= 0"
msgstr ""

#: ../../library/turtle.rst:2120
msgid "Install a timer that calls *fun* after *t* milliseconds."
msgstr ""

#: ../../library/turtle.rst:2138
msgid ""
"Starts event loop - calling Tkinter's mainloop function. Must be the last "
"statement in a turtle graphics program. Must *not* be used if a script is "
"run from within IDLE in -n mode (No subprocess) - for interactive use of "
"turtle graphics. ::"
msgstr ""

#: ../../library/turtle.rst:2151 ../../library/turtle.rst:2152
#: ../../library/turtle.rst:2164 ../../library/turtle.rst:2165
msgid "string"
msgstr "string（字串）"

#: ../../library/turtle.rst:2154
msgid ""
"Pop up a dialog window for input of a string. Parameter title is the title "
"of the dialog window, prompt is a text mostly describing what information to "
"input. Return the string input. If the dialog is canceled, return "
"``None``. ::"
msgstr ""

#: ../../library/turtle.rst:2170
msgid ""
"Pop up a dialog window for input of a number. title is the title of the "
"dialog window, prompt is a text mostly describing what numerical information "
"to input. default: default value, minval: minimum value for input, maxval: "
"maximum value for input. The number input must be in the range minval .. "
"maxval if these are given. If not, a hint is issued and the dialog remains "
"open for correction. Return the number input. If the dialog is canceled,  "
"return ``None``. ::"
msgstr ""

#: ../../library/turtle.rst:2187
msgid "one of the strings \"standard\", \"logo\" or \"world\""
msgstr ""

#: ../../library/turtle.rst:2189
msgid ""
"Set turtle mode (\"standard\", \"logo\" or \"world\") and perform reset.  If "
"mode is not given, current mode is returned."
msgstr ""

#: ../../library/turtle.rst:2192
msgid ""
"Mode \"standard\" is compatible with old :mod:`turtle`.  Mode \"logo\" is "
"compatible with most Logo turtle graphics.  Mode \"world\" uses user-defined "
"\"world coordinates\". **Attention**: in this mode angles appear distorted "
"if ``x/y`` unit-ratio doesn't equal 1."
msgstr ""

#: ../../library/turtle.rst:2198
msgid "Mode"
msgstr ""

#: ../../library/turtle.rst:2198
msgid "Initial turtle heading"
msgstr ""

#: ../../library/turtle.rst:2198
msgid "positive angles"
msgstr ""

#: ../../library/turtle.rst:2200
msgid "\"standard\""
msgstr ""

#: ../../library/turtle.rst:2200
msgid "to the right (east)"
msgstr ""

#: ../../library/turtle.rst:2200
msgid "counterclockwise"
msgstr ""

#: ../../library/turtle.rst:2201
msgid "\"logo\""
msgstr ""

#: ../../library/turtle.rst:2201
msgid "upward    (north)"
msgstr ""

#: ../../library/turtle.rst:2201
msgid "clockwise"
msgstr ""

#: ../../library/turtle.rst:2214
msgid "one of the values 1.0 or 255"
msgstr ""

#: ../../library/turtle.rst:2216
msgid ""
"Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b* "
"values of color triples have to be in the range 0..*cmode*."
msgstr ""

#: ../../library/turtle.rst:2237
msgid ""
"Return the Canvas of this TurtleScreen.  Useful for insiders who know what "
"to do with a Tkinter Canvas."
msgstr ""

#: ../../library/turtle.rst:2250
msgid "Return a list of names of all currently available turtle shapes."
msgstr ""

#: ../../library/turtle.rst:2262
msgid "There are three different ways to call this function:"
msgstr ""

#: ../../library/turtle.rst:2264
msgid ""
"*name* is the name of a gif-file and *shape* is ``None``: Install the "
"corresponding image shape. ::"
msgstr ""

#: ../../library/turtle.rst:2270
msgid ""
"Image shapes *do not* rotate when turning the turtle, so they do not display "
"the heading of the turtle!"
msgstr ""

#: ../../library/turtle.rst:2273
msgid ""
"*name* is an arbitrary string and *shape* is a tuple of pairs of "
"coordinates: Install the corresponding polygon shape."
msgstr ""

#: ../../library/turtle.rst:2281
msgid ""
"*name* is an arbitrary string and *shape* is a (compound) :class:`Shape` "
"object: Install the corresponding compound shape."
msgstr ""

#: ../../library/turtle.rst:2284
msgid ""
"Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered "
"shapes can be used by issuing the command ``shape(shapename)``."
msgstr ""

#: ../../library/turtle.rst:2290
msgid "Return the list of turtles on the screen."
msgstr ""

#: ../../library/turtle.rst:2301
msgid "Return the height of the turtle window. ::"
msgstr ""

#: ../../library/turtle.rst:2309
msgid "Return the width of the turtle window. ::"
msgstr ""

#: ../../library/turtle.rst:2318
msgid "Methods specific to Screen, not inherited from TurtleScreen"
msgstr ""

#: ../../library/turtle.rst:2322
msgid "Shut the turtlegraphics window."
msgstr ""

#: ../../library/turtle.rst:2327
msgid "Bind ``bye()`` method to mouse clicks on the Screen."
msgstr ""

#: ../../library/turtle.rst:2330
msgid ""
"If the value \"using_IDLE\" in the configuration dictionary is ``False`` "
"(default value), also enter mainloop.  Remark: If IDLE with the ``-n`` "
"switch (no subprocess) is used, this value should be set to ``True`` in :"
"file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for the "
"client script."
msgstr ""

#: ../../library/turtle.rst:2339
msgid ""
"Set the size and position of the main window.  Default values of arguments "
"are stored in the configuration dictionary and can be changed via a :file:"
"`turtle.cfg` file."
msgstr ""

#: ../../library/turtle.rst:2343
msgid ""
"if an integer, a size in pixels, if a float, a fraction of the screen; "
"default is 50% of screen"
msgstr ""

#: ../../library/turtle.rst:2345
msgid ""
"if an integer, the height in pixels, if a float, a fraction of the screen; "
"default is 75% of screen"
msgstr ""

#: ../../library/turtle.rst:2347
msgid ""
"if positive, starting position in pixels from the left edge of the screen, "
"if negative from the right edge, if ``None``, center window horizontally"
msgstr ""

#: ../../library/turtle.rst:2350
msgid ""
"if positive, starting position in pixels from the top edge of the screen, if "
"negative from the bottom edge, if ``None``, center window vertically"
msgstr ""

#: ../../library/turtle.rst:2365
msgid "a string that is shown in the titlebar of the turtle graphics window"
msgstr ""

#: ../../library/turtle.rst:2368
msgid "Set title of turtle window to *titlestring*."
msgstr ""

#: ../../library/turtle.rst:2377
msgid "Public classes"
msgstr ""

#: ../../library/turtle.rst:2383
msgid ""
"a :class:`tkinter.Canvas`, a :class:`ScrolledCanvas` or a :class:"
"`TurtleScreen`"
msgstr ""

#: ../../library/turtle.rst:2386
msgid ""
"Create a turtle.  The turtle has all methods described above as \"methods of "
"Turtle/RawTurtle\"."
msgstr ""

#: ../../library/turtle.rst:2392
msgid ""
"Subclass of RawTurtle, has the same interface but draws on a default :class:"
"`Screen` object created automatically when needed for the first time."
msgstr ""

#: ../../library/turtle.rst:2398
msgid "a :class:`tkinter.Canvas`"
msgstr ""

#: ../../library/turtle.rst:2400
msgid ""
"Provides screen oriented methods like :func:`bgcolor` etc. that are "
"described above."
msgstr ""

#: ../../library/turtle.rst:2405
msgid ""
"Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`."
msgstr ""

#: ../../library/turtle.rst:2410
msgid ""
"some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas "
"with scrollbars added"
msgstr ""

#: ../../library/turtle.rst:2413
msgid ""
"Used by class Screen, which thus automatically provides a ScrolledCanvas as "
"playground for the turtles."
msgstr ""

#: ../../library/turtle.rst:2418
msgid "one of the strings \"polygon\", \"image\", \"compound\""
msgstr ""

#: ../../library/turtle.rst:2420
msgid ""
"Data structure modeling shapes.  The pair ``(type_, data)`` must follow this "
"specification:"
msgstr ""

#: ../../library/turtle.rst:2425
msgid "*type_*"
msgstr "*type_*"

#: ../../library/turtle.rst:2425
msgid "*data*"
msgstr ""

#: ../../library/turtle.rst:2427
msgid "\"polygon\""
msgstr ""

#: ../../library/turtle.rst:2427
msgid "a polygon-tuple, i.e. a tuple of pairs of coordinates"
msgstr ""

#: ../../library/turtle.rst:2428
msgid "\"image\""
msgstr ""

#: ../../library/turtle.rst:2428
msgid "an image  (in this form only used internally!)"
msgstr ""

#: ../../library/turtle.rst:2429
msgid "\"compound\""
msgstr ""

#: ../../library/turtle.rst:2429
msgid ""
"``None`` (a compound shape has to be constructed using the :meth:"
"`addcomponent` method)"
msgstr ""

#: ../../library/turtle.rst:2435
msgid "a polygon, i.e. a tuple of pairs of numbers"
msgstr ""

#: ../../library/turtle.rst:2436
msgid "a color the *poly* will be filled with"
msgstr ""

#: ../../library/turtle.rst:2437
msgid "a color for the poly's outline (if given)"
msgstr ""

#: ../../library/turtle.rst:2439
msgid "Example:"
msgstr "例如："

#: ../../library/turtle.rst:2449
msgid "See :ref:`compoundshapes`."
msgstr "請見\\ :ref:`compoundshapes`\\ 。"

#: ../../library/turtle.rst:2454
msgid ""
"A two-dimensional vector class, used as a helper class for implementing "
"turtle graphics.  May be useful for turtle graphics programs too.  Derived "
"from tuple, so a vector is a tuple!"
msgstr ""

#: ../../library/turtle.rst:2458
msgid "Provides (for *a*, *b* vectors, *k* number):"
msgstr ""

#: ../../library/turtle.rst:2460
msgid "``a + b`` vector addition"
msgstr ""

#: ../../library/turtle.rst:2461
msgid "``a - b`` vector subtraction"
msgstr ""

#: ../../library/turtle.rst:2462
msgid "``a * b`` inner product"
msgstr ""

#: ../../library/turtle.rst:2463
msgid "``k * a`` and ``a * k`` multiplication with scalar"
msgstr ""

#: ../../library/turtle.rst:2464
msgid "``abs(a)`` absolute value of a"
msgstr ""

#: ../../library/turtle.rst:2465
msgid "``a.rotate(angle)`` rotation"
msgstr ""

#: ../../library/turtle.rst:2469
msgid "Help and configuration"
msgstr ""

#: ../../library/turtle.rst:2472
msgid "How to use help"
msgstr ""

#: ../../library/turtle.rst:2474
msgid ""
"The public methods of the Screen and Turtle classes are documented "
"extensively via docstrings.  So these can be used as online-help via the "
"Python help facilities:"
msgstr ""

#: ../../library/turtle.rst:2478
msgid ""
"When using IDLE, tooltips show the signatures and first lines of the "
"docstrings of typed in function-/method calls."
msgstr ""

#: ../../library/turtle.rst:2481
msgid "Calling :func:`help` on methods or functions displays the docstrings::"
msgstr ""

#: ../../library/turtle.rst:2512
msgid ""
"The docstrings of the functions which are derived from methods have a "
"modified form::"
msgstr ""

#: ../../library/turtle.rst:2546
msgid ""
"These modified docstrings are created automatically together with the "
"function definitions that are derived from the methods at import time."
msgstr ""

#: ../../library/turtle.rst:2551
msgid "Translation of docstrings into different languages"
msgstr ""

#: ../../library/turtle.rst:2553
msgid ""
"There is a utility to create a dictionary the keys of which are the method "
"names and the values of which are the docstrings of the public methods of "
"the classes Screen and Turtle."
msgstr ""

#: ../../library/turtle.rst:2559
msgid "a string, used as filename"
msgstr ""

#: ../../library/turtle.rst:2561
msgid ""
"Create and write docstring-dictionary to a Python script with the given "
"filename.  This function has to be called explicitly (it is not used by the "
"turtle graphics classes).  The docstring dictionary will be written to the "
"Python script :file:`{filename}.py`.  It is intended to serve as a template "
"for translation of the docstrings into different languages."
msgstr ""

#: ../../library/turtle.rst:2567
msgid ""
"If you (or your students) want to use :mod:`turtle` with online help in your "
"native language, you have to translate the docstrings and save the resulting "
"file as e.g. :file:`turtle_docstringdict_german.py`."
msgstr ""

#: ../../library/turtle.rst:2571
msgid ""
"If you have an appropriate entry in your :file:`turtle.cfg` file this "
"dictionary will be read in at import time and will replace the original "
"English docstrings."
msgstr ""

#: ../../library/turtle.rst:2574
msgid ""
"At the time of this writing there are docstring dictionaries in German and "
"in Italian.  (Requests please to glingl@aon.at.)"
msgstr ""

#: ../../library/turtle.rst:2580
msgid "How to configure Screen and Turtles"
msgstr ""

#: ../../library/turtle.rst:2582
msgid ""
"The built-in default configuration mimics the appearance and behaviour of "
"the old turtle module in order to retain best possible compatibility with it."
msgstr ""

#: ../../library/turtle.rst:2585
msgid ""
"If you want to use a different configuration which better reflects the "
"features of this module or which better fits to your needs, e.g. for use in "
"a classroom, you can prepare a configuration file ``turtle.cfg`` which will "
"be read at import time and modify the configuration according to its "
"settings."
msgstr ""

#: ../../library/turtle.rst:2590
msgid ""
"The built in configuration would correspond to the following ``turtle.cfg``:"
msgstr ""

#: ../../library/turtle.rst:2615
msgid "Short explanation of selected entries:"
msgstr ""

#: ../../library/turtle.rst:2617
msgid ""
"The first four lines correspond to the arguments of the :func:`Screen.setup "
"<setup>` method."
msgstr ""

#: ../../library/turtle.rst:2619
msgid ""
"Line 5 and 6 correspond to the arguments of the method :func:`Screen."
"screensize <screensize>`."
msgstr ""

#: ../../library/turtle.rst:2621
msgid ""
"*shape* can be any of the built-in shapes, e.g: arrow, turtle, etc.  For "
"more info try ``help(shape)``."
msgstr ""

#: ../../library/turtle.rst:2623
msgid ""
"If you want to use no fill color (i.e. make the turtle transparent), you "
"have to write ``fillcolor = \"\"`` (but all nonempty strings must not have "
"quotes in the cfg file)."
msgstr ""

#: ../../library/turtle.rst:2626
msgid ""
"If you want to reflect the turtle its state, you have to use ``resizemode = "
"auto``."
msgstr ""

#: ../../library/turtle.rst:2628
msgid ""
"If you set e.g. ``language = italian`` the docstringdict :file:"
"`turtle_docstringdict_italian.py` will be loaded at import time (if present "
"on the import path, e.g. in the same directory as :mod:`turtle`)."
msgstr ""

#: ../../library/turtle.rst:2631
msgid ""
"The entries *exampleturtle* and *examplescreen* define the names of these "
"objects as they occur in the docstrings.  The transformation of method-"
"docstrings to function-docstrings will delete these names from the "
"docstrings."
msgstr ""

#: ../../library/turtle.rst:2635
msgid ""
"*using_IDLE*: Set this to ``True`` if you regularly work with IDLE and its "
"``-n`` switch (\"no subprocess\").  This will prevent :func:`exitonclick` to "
"enter the mainloop."
msgstr ""

#: ../../library/turtle.rst:2639
msgid ""
"There can be a :file:`turtle.cfg` file in the directory where :mod:`turtle` "
"is stored and an additional one in the current working directory.  The "
"latter will override the settings of the first one."
msgstr ""

#: ../../library/turtle.rst:2643
msgid ""
"The :file:`Lib/turtledemo` directory contains a :file:`turtle.cfg` file.  "
"You can study it as an example and see its effects when running the demos "
"(preferably not from within the demo-viewer)."
msgstr ""

#: ../../library/turtle.rst:2649
msgid ":mod:`turtledemo` --- Demo scripts"
msgstr ""

#: ../../library/turtle.rst:2654
msgid ""
"The :mod:`turtledemo` package includes a set of demo scripts.  These scripts "
"can be run and viewed using the supplied demo viewer as follows::"
msgstr ""

#: ../../library/turtle.rst:2659
msgid ""
"Alternatively, you can run the demo scripts individually.  For example, ::"
msgstr ""

#: ../../library/turtle.rst:2663
msgid "The :mod:`turtledemo` package directory contains:"
msgstr ""

#: ../../library/turtle.rst:2665
msgid ""
"A demo viewer :file:`__main__.py` which can be used to view the sourcecode "
"of the scripts and run them at the same time."
msgstr ""

#: ../../library/turtle.rst:2667
msgid ""
"Multiple scripts demonstrating different features of the :mod:`turtle` "
"module.  Examples can be accessed via the Examples menu.  They can also be "
"run standalone."
msgstr ""

#: ../../library/turtle.rst:2670
msgid ""
"A :file:`turtle.cfg` file which serves as an example of how to write and use "
"such files."
msgstr ""

#: ../../library/turtle.rst:2673
msgid "The demo scripts are:"
msgstr ""

#: ../../library/turtle.rst:2680
msgid "Name"
msgstr ""

#: ../../library/turtle.rst:2680
msgid "Description"
msgstr "描述"

#: ../../library/turtle.rst:2680
msgid "Features"
msgstr ""

#: ../../library/turtle.rst:2682
msgid "bytedesign"
msgstr ""

#: ../../library/turtle.rst:2682
msgid "complex classical turtle graphics pattern"
msgstr ""

#: ../../library/turtle.rst:2682
msgid ":func:`tracer`, delay, :func:`update`"
msgstr ""

#: ../../library/turtle.rst:2685
msgid "chaos"
msgstr ""

#: ../../library/turtle.rst:2685
msgid ""
"graphs Verhulst dynamics, shows that computer's computations can generate "
"results sometimes against the common sense expectations"
msgstr ""

#: ../../library/turtle.rst:2685
msgid "world coordinates"
msgstr ""

#: ../../library/turtle.rst:2691
msgid "clock"
msgstr ""

#: ../../library/turtle.rst:2691
msgid "analog clock showing time of your computer"
msgstr ""

#: ../../library/turtle.rst:2691
msgid "turtles as clock's hands, ontimer"
msgstr ""

#: ../../library/turtle.rst:2694
msgid "colormixer"
msgstr ""

#: ../../library/turtle.rst:2694
msgid "experiment with r, g, b"
msgstr ""

#: ../../library/turtle.rst:2696
msgid "forest"
msgstr ""

#: ../../library/turtle.rst:2696
msgid "3 breadth-first trees"
msgstr ""

#: ../../library/turtle.rst:2696
msgid "randomization"
msgstr ""

#: ../../library/turtle.rst:2698
msgid "fractalcurves"
msgstr ""

#: ../../library/turtle.rst:2698
msgid "Hilbert & Koch curves"
msgstr ""

#: ../../library/turtle.rst:2698
msgid "recursion"
msgstr ""

#: ../../library/turtle.rst:2700
msgid "lindenmayer"
msgstr ""

#: ../../library/turtle.rst:2700
msgid "ethnomathematics (indian kolams)"
msgstr ""

#: ../../library/turtle.rst:2700
msgid "L-System"
msgstr ""

#: ../../library/turtle.rst:2703
msgid "minimal_hanoi"
msgstr "minimal_hanoi"

#: ../../library/turtle.rst:2703
msgid "Towers of Hanoi"
msgstr ""

#: ../../library/turtle.rst:2703
msgid "Rectangular Turtles as Hanoi discs (shape, shapesize)"
msgstr ""

#: ../../library/turtle.rst:2707
msgid "nim"
msgstr ""

#: ../../library/turtle.rst:2707
msgid ""
"play the classical nim game with three heaps of sticks against the computer."
msgstr ""

#: ../../library/turtle.rst:2707
msgid "turtles as nimsticks, event driven (mouse, keyboard)"
msgstr ""

#: ../../library/turtle.rst:2711
msgid "paint"
msgstr ""

#: ../../library/turtle.rst:2711
msgid "super minimalistic drawing program"
msgstr ""

#: ../../library/turtle.rst:2714
msgid "peace"
msgstr ""

#: ../../library/turtle.rst:2714
msgid "elementary"
msgstr ""

#: ../../library/turtle.rst:2714
msgid "turtle: appearance and animation"
msgstr ""

#: ../../library/turtle.rst:2717
msgid "penrose"
msgstr ""

#: ../../library/turtle.rst:2717
msgid "aperiodic tiling with kites and darts"
msgstr ""

#: ../../library/turtle.rst:2720
msgid "planet_and_moon"
msgstr "planet_and_moon"

#: ../../library/turtle.rst:2720
msgid "simulation of gravitational system"
msgstr ""

#: ../../library/turtle.rst:2720
msgid "compound shapes, :class:`Vec2D`"
msgstr ""

#: ../../library/turtle.rst:2723
msgid "rosette"
msgstr ""

#: ../../library/turtle.rst:2723
msgid "a pattern from the wikipedia article on turtle graphics"
msgstr ""

#: ../../library/turtle.rst:2723
msgid ":func:`clone`, :func:`undo`"
msgstr ":func:`clone`, :func:`undo`"

#: ../../library/turtle.rst:2726
msgid "round_dance"
msgstr "round_dance"

#: ../../library/turtle.rst:2726
msgid "dancing turtles rotating pairwise in opposite direction"
msgstr ""

#: ../../library/turtle.rst:2726
msgid "compound shapes, clone shapesize, tilt, get_shapepoly, update"
msgstr ""

#: ../../library/turtle.rst:2730
msgid "sorting_animate"
msgstr "sorting_animate"

#: ../../library/turtle.rst:2730
msgid "visual demonstration of different sorting methods"
msgstr ""

#: ../../library/turtle.rst:2730
msgid "simple alignment, randomization"
msgstr ""

#: ../../library/turtle.rst:2733
msgid "tree"
msgstr ""

#: ../../library/turtle.rst:2733
msgid "a (graphical) breadth first tree (using generators)"
msgstr ""

#: ../../library/turtle.rst:2736
msgid "two_canvases"
msgstr "two_canvases"

#: ../../library/turtle.rst:2736
msgid "simple design"
msgstr ""

#: ../../library/turtle.rst:2736
msgid "turtles on two canvases"
msgstr ""

#: ../../library/turtle.rst:2739
msgid "yinyang"
msgstr ""

#: ../../library/turtle.rst:2739
msgid "another elementary example"
msgstr ""

#: ../../library/turtle.rst:2742
msgid "Have fun!"
msgstr ""

#: ../../library/turtle.rst:2746
msgid "Changes since Python 2.6"
msgstr ""

#: ../../library/turtle.rst:2748
msgid ""
"The methods :func:`Turtle.tracer <tracer>`, :func:`Turtle.window_width "
"<window_width>` and :func:`Turtle.window_height <window_height>` have been "
"eliminated. Methods with these names and functionality are now available "
"only as methods of :class:`Screen`. The functions derived from these remain "
"available. (In fact already in Python 2.6 these methods were merely "
"duplications of the corresponding :class:`TurtleScreen`/:class:`Screen` "
"methods.)"
msgstr ""

#: ../../library/turtle.rst:2756
msgid ""
"The method :func:`!Turtle.fill` has been eliminated. The behaviour of :func:"
"`begin_fill` and :func:`end_fill` have changed slightly: now every filling "
"process must be completed with an ``end_fill()`` call."
msgstr ""

#: ../../library/turtle.rst:2761
msgid ""
"A method :func:`Turtle.filling <filling>` has been added. It returns a "
"boolean value: ``True`` if a filling process is under way, ``False`` "
"otherwise. This behaviour corresponds to a ``fill()`` call without arguments "
"in Python 2.6."
msgstr ""

#: ../../library/turtle.rst:2767
msgid "Changes since Python 3.0"
msgstr ""

#: ../../library/turtle.rst:2769
msgid ""
"The :class:`Turtle` methods :func:`shearfactor`, :func:`shapetransform` and :"
"func:`get_shapepoly` have been added. Thus the full range of regular linear "
"transforms is now available for transforming turtle shapes. :func:"
"`tiltangle` has been enhanced in functionality: it now can be used to get or "
"set the tilt angle. :func:`settiltangle` has been deprecated."
msgstr ""

#: ../../library/turtle.rst:2776
msgid ""
"The :class:`Screen` method :func:`onkeypress` has been added as a complement "
"to :func:`onkey`. As the latter binds actions to the key release event, an "
"alias: :func:`onkeyrelease` was also added for it."
msgstr ""

#: ../../library/turtle.rst:2780
msgid ""
"The method :func:`Screen.mainloop <mainloop>` has been added, so there is no "
"longer a need to use the standalone :func:`mainloop` function when working "
"with :class:`Screen` and :class:`Turtle` objects."
msgstr ""

#: ../../library/turtle.rst:2784
msgid ""
"Two input methods have been added: :func:`Screen.textinput <textinput>` and :"
"func:`Screen.numinput <numinput>`. These pop up input dialogs and return "
"strings and numbers respectively."
msgstr ""

#: ../../library/turtle.rst:2788
msgid ""
"Two example scripts :file:`tdemo_nim.py` and :file:`tdemo_round_dance.py` "
"have been added to the :file:`Lib/turtledemo` directory."
msgstr ""

#~ msgid ""
#~ "Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an "
#~ "``import turtle``, give it the command ``turtle.forward(15)``, and it "
#~ "moves (on-screen!) 15 pixels in the direction it is facing, drawing a "
#~ "line as it moves.  Give it the command ``turtle.right(25)``, and it "
#~ "rotates in-place 25 degrees clockwise."
#~ msgstr ""
#~ "想像一下，一隻機器龜在 x-y 平面上從 (0, 0) 出發。在 ``import turtle`` 之"
#~ "後，給它命令 ``turtle.forward(15)`` ，然後它就會移動 (在螢幕上！) 15 個單"
#~ "位像素，方向是朝著其正面對的方向。給它命令 ``turtle.right(25)`` ，它就會在"
#~ "原地順時針旋轉 25 度。"

#~ msgid ""
#~ "By combining together these and similar commands, intricate shapes and "
#~ "pictures can easily be drawn."
#~ msgstr "藉由結合這些類似的命令，複雜的形狀和圖形可以輕易被畫出來。"
