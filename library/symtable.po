# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Matt Wang <mattwang44@gmail.com>, 2023
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-01 22:24+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/symtable.rst:2
msgid ":mod:`!symtable` --- Access to the compiler's symbol tables"
msgstr ":mod:`!symtable` --- 存取編譯器的符號表"

#: ../../library/symtable.rst:7
msgid "**Source code:** :source:`Lib/symtable.py`"
msgstr "**原始碼：**\\ :source:`Lib/symtable.py`"

#: ../../library/symtable.rst:15
msgid ""
"Symbol tables are generated by the compiler from AST just before bytecode is "
"generated.  The symbol table is responsible for calculating the scope of "
"every identifier in the code.  :mod:`symtable` provides an interface to "
"examine these tables."
msgstr ""
"符號表 (symbol table) 是在生成位元組碼 (bytecode) 之前由編譯器從 AST 生成的。"
"符號表負責計算程式碼中每個識別器 (identifier) 的範圍。:mod:`symtable` 提供了"
"一個介面來檢查這些表。"

#: ../../library/symtable.rst:22
msgid "Generating Symbol Tables"
msgstr "產生符號表"

#: ../../library/symtable.rst:26
msgid ""
"Return the toplevel :class:`SymbolTable` for the Python source *code*. "
"*filename* is the name of the file containing the code.  *compile_type* is "
"like the *mode* argument to :func:`compile`."
msgstr ""
"回傳 Python 原始 *code* 的頂層 :class:`SymbolTable`。*filename* 是包含程式碼"
"之檔案之名稱。*compile_type* 類似於 :func:`compile` 的 *mode* 引數。"

#: ../../library/symtable.rst:32
msgid "Examining Symbol Tables"
msgstr "檢查符號表"

#: ../../library/symtable.rst:36
msgid "A namespace table for a block.  The constructor is not public."
msgstr ""
"一個區塊 (block) 的命名空間表 (namespace table) 。建構函式 (constructor) 並不"
"公開。"

#: ../../library/symtable.rst:40
msgid ""
"Return the type of the symbol table.  Possible values are ``'class'``, "
"``'module'``, ``'function'``, ``'annotation'``, ``'TypeVar bound'``, ``'type "
"alias'``, and ``'type parameter'``. The latter four refer to different "
"flavors of :ref:`annotation scopes <annotation-scopes>`."
msgstr ""
"回傳符號表的種類。可能的值為 ``'class'``、``'module'``、``'function'``、"
"``'annotation'``、``'TypeVar bound'``、``'type alias'`` 和 ``'type "
"parameter'``。後四個是指不同的\\ :ref:`註釋範圍 (annotation scopes) "
"<annotation-scopes>`。"

#: ../../library/symtable.rst:45
msgid ""
"Added ``'annotation'``,  ``'TypeVar bound'``, ``'type alias'``, and ``'type "
"parameter'`` as possible return values."
msgstr ""
"新增了 ``'annotation'``、``'TypeVar bound'``、``'type alias'`` 和 ``'type "
"parameter'`` 作為可能的回傳值。"

#: ../../library/symtable.rst:51
msgid "Return the table's identifier."
msgstr "回傳表的識別器。"

#: ../../library/symtable.rst:55
msgid ""
"Return the table's name.  This is the name of the class if the table is for "
"a class, the name of the function if the table is for a function, or "
"``'top'`` if the table is global (:meth:`get_type` returns ``'module'``). "
"For type parameter scopes (which are used for generic classes, functions, "
"and type aliases), it is the name of the underlying class, function, or type "
"alias. For type alias scopes, it is the name of the type alias. For :class:"
"`~typing.TypeVar` bound scopes, it is the name of the ``TypeVar``."
msgstr ""
"回傳表的名稱。如果表用於類別，則這是類別的名稱；如果表用於函式，則這是函式的"
"名稱；如果表是全域的，則為 ``'top'`` （:meth:`get_type` 會回傳 "
"``'module'``）。對於型別參數作用域（用於泛型類別、函式和型別別名），它是底層"
"類別、函式或型別別名的名稱。對於型別別名作用域，它是型別別名的名稱。對於 :"
"class:`~typing.TypeVar` 綁定範圍，它會是 ``TypeVar`` 的名稱。"

#: ../../library/symtable.rst:65
msgid "Return the number of the first line in the block this table represents."
msgstr "回傳此表所代表的區塊中第一行的編號。"

#: ../../library/symtable.rst:69
msgid "Return ``True`` if the locals in this table can be optimized."
msgstr "如果可以最佳化該表中的區域變數，則回傳 ``True``。"

#: ../../library/symtable.rst:73
msgid "Return ``True`` if the block is a nested class or function."
msgstr "如果區塊是巢狀類別或函式，則回傳 ``True``。"

#: ../../library/symtable.rst:77
msgid ""
"Return ``True`` if the block has nested namespaces within it.  These can be "
"obtained with :meth:`get_children`."
msgstr ""
"如果區塊內有巢狀命名空間，則回傳 ``True``。這些可以通過 :meth:`get_children` "
"獲得。"

#: ../../library/symtable.rst:82
msgid ""
"Return a view object containing the names of symbols in the table. See the :"
"ref:`documentation of view objects <dict-views>`."
msgstr ""
"回傳包含表中符號之名稱的視圖物件 (view object)。請參閱\\ :ref:`視圖物件的文"
"件 <dict-views>`。"

#: ../../library/symtable.rst:87
msgid "Lookup *name* in the table and return a :class:`Symbol` instance."
msgstr "在表中查找 *name* 並回傳一個 :class:`Symbol` 實例。"

#: ../../library/symtable.rst:91
msgid "Return a list of :class:`Symbol` instances for names in the table."
msgstr "回傳表中名稱的 :class:`Symbol` 實例串列。"

#: ../../library/symtable.rst:95
msgid "Return a list of the nested symbol tables."
msgstr "回傳巢狀符號表的串列。"

#: ../../library/symtable.rst:100
msgid ""
"A namespace for a function or method.  This class inherits from :class:"
"`SymbolTable`."
msgstr "一個函式或方法的命名空間。該類別繼承自 :class:`SymbolTable`。"

#: ../../library/symtable.rst:105
msgid "Return a tuple containing names of parameters to this function."
msgstr "回傳一個包含此函式參數名稱的元組 (tuple)。"

#: ../../library/symtable.rst:109
msgid "Return a tuple containing names of locals in this function."
msgstr "回傳一個包含此函式中區域變數 (locals) 名稱的元組。"

#: ../../library/symtable.rst:113
msgid "Return a tuple containing names of globals in this function."
msgstr "回傳一個包含此函式中全域變數 (globals) 名稱的元組。"

#: ../../library/symtable.rst:117
msgid "Return a tuple containing names of nonlocals in this function."
msgstr "回傳一個包含此函式中非區域變數 (nonlocals) 名稱的元組。"

#: ../../library/symtable.rst:121
msgid "Return a tuple containing names of free variables in this function."
msgstr "回傳一個包含此函式中自由變數 (free variables) 名稱的元組。"

#: ../../library/symtable.rst:126
msgid "A namespace of a class.  This class inherits from :class:`SymbolTable`."
msgstr "一個類別的命名空間。該類別繼承自 :class:`SymbolTable`。"

#: ../../library/symtable.rst:130
msgid ""
"Return a tuple containing the names of method-like functions declared in the "
"class."
msgstr "回傳一個包含類別中聲明的類似方法之函式名稱的元組。"

#: ../../library/symtable.rst:133
msgid ""
"Here, the term 'method' designates *any* function defined in the class body "
"via :keyword:`def` or :keyword:`async def`."
msgstr ""

#: ../../library/symtable.rst:136
msgid ""
"Functions defined in a deeper scope (e.g., in an inner class) are not picked "
"up by :meth:`get_methods`."
msgstr ""

#: ../../library/symtable.rst:139
msgid "For example:"
msgstr "舉例來說："

#: ../../library/symtable.rst:161
msgid ""
"Although ``A().f()`` raises :exc:`TypeError` at runtime, ``A.f`` is still "
"considered as a method-like function."
msgstr ""

#: ../../library/symtable.rst:166
msgid ""
"An entry in a :class:`SymbolTable` corresponding to an identifier in the "
"source.  The constructor is not public."
msgstr ""
":class:`SymbolTable` 中的條目對應於來源中的識別器。建構函式不是公開的。"

#: ../../library/symtable.rst:171
msgid "Return the symbol's name."
msgstr "回傳符號的名稱。"

#: ../../library/symtable.rst:175
msgid "Return ``True`` if the symbol is used in its block."
msgstr "如果該符號在其區塊中使用，則回傳 ``True``。"

#: ../../library/symtable.rst:179
msgid "Return ``True`` if the symbol is created from an import statement."
msgstr "如果符號是從 import 陳述式建立的，則回傳 ``True``。"

#: ../../library/symtable.rst:183
msgid "Return ``True`` if the symbol is a parameter."
msgstr "如果符號是一個參數，則回傳 ``True``。"

#: ../../library/symtable.rst:187
msgid "Return ``True`` if the symbol is global."
msgstr "如果符號是全域的，則回傳 ``True``。"

#: ../../library/symtable.rst:191
msgid "Return ``True`` if the symbol is nonlocal."
msgstr "如果符號是非區域的，則回傳 ``True``。"

#: ../../library/symtable.rst:195
msgid ""
"Return ``True`` if the symbol is declared global with a global statement."
msgstr "如果使用全域陳述式將符號聲明為全域的，則回傳 ``True``。"

#: ../../library/symtable.rst:199
msgid "Return ``True`` if the symbol is local to its block."
msgstr "如果符號是其區塊的區域符號，則回傳 ``True``。"

#: ../../library/symtable.rst:203
msgid "Return ``True`` if the symbol is annotated."
msgstr "如果符號有被註釋，則回傳 ``True``。"

#: ../../library/symtable.rst:209
msgid ""
"Return ``True`` if the symbol is referenced in its block, but not assigned "
"to."
msgstr ""
"如果該符號在其區塊中被參照 (referenced) 但未被賦值 (assigned)，則回傳 "
"``True``。"

#: ../../library/symtable.rst:214
msgid "Return ``True`` if the symbol is assigned to in its block."
msgstr "如果該符號被賦值到其區塊中，則回傳 ``True``。"

#: ../../library/symtable.rst:218
msgid "Return ``True`` if name binding introduces new namespace."
msgstr "如果名稱綁定引入 (introduce) 新的命名空間，則回傳 ``True``。"

#: ../../library/symtable.rst:220
msgid ""
"If the name is used as the target of a function or class statement, this "
"will be true."
msgstr "如果名稱用作函式或類別陳述式的目標，則這將會是 true。"

#: ../../library/symtable.rst:223
msgid "For example::"
msgstr "舉例來說： ::"

#: ../../library/symtable.rst:225
msgid ""
">>> table = symtable.symtable(\"def some_func(): pass\", \"string\", "
"\"exec\")\n"
">>> table.lookup(\"some_func\").is_namespace()\n"
"True"
msgstr ""
">>> table = symtable.symtable(\"def some_func(): pass\", \"string\", "
"\"exec\")\n"
">>> table.lookup(\"some_func\").is_namespace()\n"
"True"

#: ../../library/symtable.rst:229
msgid ""
"Note that a single name can be bound to multiple objects.  If the result is "
"``True``, the name may also be bound to other objects, like an int or list, "
"that does not introduce a new namespace."
msgstr ""
"請注意，單個名稱可以綁定到多個物件。如果結果為 ``True``，則該名稱也可能被綁定"
"到其他物件，例如 int 或 list，而不會引入新的命名空間。"

#: ../../library/symtable.rst:235
msgid "Return a list of namespaces bound to this name."
msgstr "回傳綁定到該名稱的命名空間的串列。"

#: ../../library/symtable.rst:239
msgid ""
"Return the namespace bound to this name. If more than one or no namespace is "
"bound to this name, a :exc:`ValueError` is raised."
msgstr ""
"回傳綁定到該名稱的命名空間。如果該名稱綁定了多個命名空間或沒有命名空間，則會"
"引發 :exc:`ValueError`。"
