# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-29 15:05+0000\n"
"PO-Revision-Date: 2018-05-23 14:42+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ":mod:`datetime` --- 日期與時間的基本型別"

#: ../../library/datetime.rst:11
msgid "**Source code:** :source:`Lib/datetime.py`"
msgstr "**原始碼：**\\ :source:`Lib/datetime.py`"

#: ../../library/datetime.rst:17
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times."
msgstr ""

#: ../../library/datetime.rst:19
msgid ""
"While date and time arithmetic is supported, the focus of the implementation "
"is on efficient attribute extraction for output formatting and manipulation."
msgstr ""

#: ../../library/datetime.rst:24
msgid "Skip to :ref:`the format codes <format-codes>`."
msgstr ""

#: ../../library/datetime.rst:29
msgid "Module :mod:`calendar`"
msgstr ":mod:`calendar` 模組"

#: ../../library/datetime.rst:29
msgid "General calendar related functions."
msgstr ""

#: ../../library/datetime.rst:32
msgid "Module :mod:`time`"
msgstr ":mod:`time` 模組"

#: ../../library/datetime.rst:32
msgid "Time access and conversions."
msgstr ""

#: ../../library/datetime.rst:35
msgid "Module :mod:`zoneinfo`"
msgstr ":mod:`zoneinfo` 模組"

#: ../../library/datetime.rst:35
msgid "Concrete time zones representing the IANA time zone database."
msgstr ""

#: ../../library/datetime.rst:37
msgid "Package `dateutil <https://dateutil.readthedocs.io/en/stable/>`_"
msgstr ""

#: ../../library/datetime.rst:38
msgid "Third-party library with expanded time zone and parsing support."
msgstr ""

#: ../../library/datetime.rst:43
msgid "Aware and Naive Objects"
msgstr ""

#: ../../library/datetime.rst:45
msgid ""
"Date and time objects may be categorized as \"aware\" or \"naive\" depending "
"on whether or not they include timezone information."
msgstr ""

#: ../../library/datetime.rst:48
msgid ""
"With sufficient knowledge of applicable algorithmic and political time "
"adjustments, such as time zone and daylight saving time information, an "
"**aware** object can locate itself relative to other aware objects. An aware "
"object represents a specific moment in time that is not open to "
"interpretation. [#]_"
msgstr ""

#: ../../library/datetime.rst:54
msgid ""
"A **naive** object does not contain enough information to unambiguously "
"locate itself relative to other date/time objects. Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other timezone is purely up to the program, just like it is up to the "
"program whether a particular number represents metres, miles, or mass. Naive "
"objects are easy to understand and to work with, at the cost of ignoring "
"some aspects of reality."
msgstr ""

#: ../../library/datetime.rst:61
msgid ""
"For applications requiring aware objects, :class:`.datetime` and :class:`."
"time` objects have an optional time zone information attribute, :attr:`!"
"tzinfo`, that can be set to an instance of a subclass of the abstract :class:"
"`tzinfo` class. These :class:`tzinfo` objects capture information about the "
"offset from UTC time, the time zone name, and whether daylight saving time "
"is in effect."
msgstr ""

#: ../../library/datetime.rst:67
msgid ""
"Only one concrete :class:`tzinfo` class, the :class:`timezone` class, is "
"supplied by the :mod:`datetime` module. The :class:`timezone` class can "
"represent simple timezones with fixed offsets from UTC, such as UTC itself "
"or North American EST and EDT timezones. Supporting timezones at deeper "
"levels of detail is up to the application. The rules for time adjustment "
"across the world are more political than rational, change frequently, and "
"there is no standard suitable for every application aside from UTC."
msgstr ""

#: ../../library/datetime.rst:76
msgid "Constants"
msgstr "常數"

#: ../../library/datetime.rst:78
msgid "The :mod:`datetime` module exports the following constants:"
msgstr ":mod:`datetime` 模組匯出以下常數："

#: ../../library/datetime.rst:82
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""

#: ../../library/datetime.rst:88
msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""

#: ../../library/datetime.rst:93
msgid "Alias for the UTC timezone singleton :attr:`datetime.timezone.utc`."
msgstr ""

#: ../../library/datetime.rst:98
msgid "Available Types"
msgstr ""

#: ../../library/datetime.rst:103
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""

#: ../../library/datetime.rst:111
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds.  (There is no notion of \"leap "
"seconds\" here.) Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :"
"attr:`microsecond`, and :attr:`.tzinfo`."
msgstr ""

#: ../../library/datetime.rst:120
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""

#: ../../library/datetime.rst:128
msgid ""
"A duration expressing the difference between two :class:`date`, :class:`."
"time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""

#: ../../library/datetime.rst:135
msgid ""
"An abstract base class for time zone information objects. These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""

#: ../../library/datetime.rst:143
msgid ""
"A class that implements the :class:`tzinfo` abstract base class as a fixed "
"offset from the UTC."
msgstr ""

#: ../../library/datetime.rst:148 ../../library/datetime.rst:166
msgid "Objects of these types are immutable."
msgstr ""

#: ../../library/datetime.rst:150
msgid "Subclass relationships::"
msgstr ""

#: ../../library/datetime.rst:161
msgid "Common Properties"
msgstr ""

#: ../../library/datetime.rst:163
msgid ""
"The :class:`date`, :class:`.datetime`, :class:`.time`, and :class:`timezone` "
"types share these common features:"
msgstr ""

#: ../../library/datetime.rst:167
msgid ""
"Objects of these types are :term:`hashable`, meaning that they can be used "
"as dictionary keys."
msgstr ""

#: ../../library/datetime.rst:169
msgid ""
"Objects of these types support efficient pickling via the :mod:`pickle` "
"module."
msgstr ""

#: ../../library/datetime.rst:172
msgid "Determining if an Object is Aware or Naive"
msgstr ""

#: ../../library/datetime.rst:174
msgid "Objects of the :class:`date` type are always naive."
msgstr ""

#: ../../library/datetime.rst:176
msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be aware or naive."
msgstr ""

#: ../../library/datetime.rst:178
msgid "A :class:`.datetime` object *d* is aware if both of the following hold:"
msgstr ""

#: ../../library/datetime.rst:180
msgid "``d.tzinfo`` is not ``None``"
msgstr "``d.tzinfo`` 不是 ``None``"

#: ../../library/datetime.rst:181
msgid "``d.tzinfo.utcoffset(d)`` does not return ``None``"
msgstr "``d.tzinfo.utcoffset(d)`` 不會回傳 ``None``"

#: ../../library/datetime.rst:183
msgid "Otherwise, *d* is naive."
msgstr ""

#: ../../library/datetime.rst:185
msgid "A :class:`.time` object *t* is aware if both of the following hold:"
msgstr ""

#: ../../library/datetime.rst:187
msgid "``t.tzinfo`` is not ``None``"
msgstr "``t.tzinfo`` 不是 ``None``"

#: ../../library/datetime.rst:188
msgid "``t.tzinfo.utcoffset(None)`` does not return ``None``."
msgstr "``t.tzinfo.utcoffset(None)`` 沒有回傳 ``None``\\ 。"

#: ../../library/datetime.rst:190
msgid "Otherwise, *t* is naive."
msgstr ""

#: ../../library/datetime.rst:192
msgid ""
"The distinction between aware and naive doesn't apply to :class:`timedelta` "
"objects."
msgstr ""

#: ../../library/datetime.rst:198
msgid ":class:`timedelta` Objects"
msgstr ":class:`timedelta` 物件"

#: ../../library/datetime.rst:200
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ""

#: ../../library/datetime.rst:205
msgid ""
"All arguments are optional and default to ``0``. Arguments may be integers "
"or floats, and may be positive or negative."
msgstr ""

#: ../../library/datetime.rst:208
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally. Arguments "
"are converted to those units:"
msgstr ""

#: ../../library/datetime.rst:211
msgid "A millisecond is converted to 1000 microseconds."
msgstr "一毫秒會被轉換為 1000 微秒。"

#: ../../library/datetime.rst:212
msgid "A minute is converted to 60 seconds."
msgstr "一分鐘會被轉換為 60 秒。"

#: ../../library/datetime.rst:213
msgid "An hour is converted to 3600 seconds."
msgstr "一小時會被轉換為 3600 秒。"

#: ../../library/datetime.rst:214
msgid "A week is converted to 7 days."
msgstr "一週會被轉換為 7 天。"

#: ../../library/datetime.rst:216
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""

#: ../../library/datetime.rst:219
msgid "``0 <= microseconds < 1000000``"
msgstr "``0 <= microseconds < 1000000``"

#: ../../library/datetime.rst:220
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr ""

#: ../../library/datetime.rst:221
msgid "``-999999999 <= days <= 999999999``"
msgstr "``-999999999 <= days <= 999999999``"

#: ../../library/datetime.rst:223
msgid ""
"The following example illustrates how any arguments besides *days*, "
"*seconds* and *microseconds* are \"merged\" and normalized into those three "
"resulting attributes::"
msgstr ""

#: ../../library/datetime.rst:241
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond using round-half-to-even "
"tiebreaker. If no argument is a float, the conversion and normalization "
"processes are exact (no information is lost)."
msgstr ""

#: ../../library/datetime.rst:248
msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""

#: ../../library/datetime.rst:251
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example::"
msgstr ""

#: ../../library/datetime.rst:260 ../../library/datetime.rst:556
#: ../../library/datetime.rst:1061 ../../library/datetime.rst:1680
#: ../../library/datetime.rst:2282
msgid "Class attributes:"
msgstr "類別屬性："

#: ../../library/datetime.rst:264
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""

#: ../../library/datetime.rst:269
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""

#: ../../library/datetime.rst:275
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../../library/datetime.rst:278
msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. "
"``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""

#: ../../library/datetime.rst:281 ../../library/datetime.rst:574
#: ../../library/datetime.rst:1081 ../../library/datetime.rst:1700
msgid "Instance attributes (read-only):"
msgstr ""

#: ../../library/datetime.rst:284
msgid "Attribute"
msgstr "屬性"

#: ../../library/datetime.rst:284
msgid "Value"
msgstr ""

#: ../../library/datetime.rst:286
msgid "``days``"
msgstr "``days``"

#: ../../library/datetime.rst:286
msgid "Between -999999999 and 999999999 inclusive"
msgstr ""

#: ../../library/datetime.rst:288
msgid "``seconds``"
msgstr "``seconds``"

#: ../../library/datetime.rst:288
msgid "Between 0 and 86399 inclusive"
msgstr "在 0 到 86399 （含）之間"

#: ../../library/datetime.rst:290
msgid "``microseconds``"
msgstr "``microseconds``"

#: ../../library/datetime.rst:290
msgid "Between 0 and 999999 inclusive"
msgstr "在 0 到 999999 （含）之間"

#: ../../library/datetime.rst:293 ../../library/datetime.rst:591
#: ../../library/datetime.rst:1134
msgid "Supported operations:"
msgstr ""

#: ../../library/datetime.rst:298 ../../library/datetime.rst:594
#: ../../library/datetime.rst:1137
msgid "Operation"
msgstr ""

#: ../../library/datetime.rst:298 ../../library/datetime.rst:594
#: ../../library/datetime.rst:1137
msgid "Result"
msgstr ""

#: ../../library/datetime.rst:300
msgid "``t1 = t2 + t3``"
msgstr "``t1 = t2 + t3``"

#: ../../library/datetime.rst:300
msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are "
"true. (1)"
msgstr ""

#: ../../library/datetime.rst:303
msgid "``t1 = t2 - t3``"
msgstr "``t1 = t2 - t3``"

#: ../../library/datetime.rst:303
msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* "
"+ *t3* are true. (1)(6)"
msgstr ""

#: ../../library/datetime.rst:307
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr "``t1 = t2 * i or t1 = i * t2``"

#: ../../library/datetime.rst:307
msgid ""
"Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, "
"provided ``i != 0``."
msgstr ""

#: ../../library/datetime.rst:311
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr ""

#: ../../library/datetime.rst:314
msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr "``t1 = t2 * f or t1 = f * t2``"

#: ../../library/datetime.rst:314
msgid ""
"Delta multiplied by a float. The result is rounded to the nearest multiple "
"of timedelta.resolution using round-half-to-even."
msgstr ""

#: ../../library/datetime.rst:318
msgid "``f = t2 / t3``"
msgstr "``f = t2 / t3``"

#: ../../library/datetime.rst:318
msgid ""
"Division (3) of overall duration *t2* by interval unit *t3*. Returns a :"
"class:`float` object."
msgstr ""

#: ../../library/datetime.rst:322
msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr "``t1 = t2 / f or t1 = t2 / i``"

#: ../../library/datetime.rst:322
msgid ""
"Delta divided by a float or an int. The result is rounded to the nearest "
"multiple of timedelta.resolution using round-half-to-even."
msgstr ""

#: ../../library/datetime.rst:326
msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr "``t1 = t2 // i`` or ``t1 = t2 // t3``"

#: ../../library/datetime.rst:326
msgid ""
"The floor is computed and the remainder (if any) is thrown away. In the "
"second case, an integer is returned. (3)"
msgstr ""

#: ../../library/datetime.rst:330
msgid "``t1 = t2 % t3``"
msgstr "``t1 = t2 % t3``"

#: ../../library/datetime.rst:330
msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr ""

#: ../../library/datetime.rst:333
msgid "``q, r = divmod(t1, t2)``"
msgstr "``q, r = divmod(t1, t2)``"

#: ../../library/datetime.rst:333
msgid ""
"Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 % "
"t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""

#: ../../library/datetime.rst:338
msgid "``+t1``"
msgstr "``+t1``"

#: ../../library/datetime.rst:338
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr ""

#: ../../library/datetime.rst:341
msgid "``-t1``"
msgstr "``-t1``"

#: ../../library/datetime.rst:341
msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""

#: ../../library/datetime.rst:346
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: ../../library/datetime.rst:346
msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. "
"(2)"
msgstr ""

#: ../../library/datetime.rst:349
msgid "``str(t)``"
msgstr "``str(t)``"

#: ../../library/datetime.rst:349
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""

#: ../../library/datetime.rst:353
msgid "``repr(t)``"
msgstr "``repr(t)``"

#: ../../library/datetime.rst:353
msgid ""
"Returns a string representation of the :class:`timedelta` object as a "
"constructor call with canonical attribute values."
msgstr ""

#: ../../library/datetime.rst:359 ../../library/datetime.rst:608
#: ../../library/datetime.rst:2505
msgid "Notes:"
msgstr "註解："

#: ../../library/datetime.rst:362
msgid "This is exact but may overflow."
msgstr "這是精確的，但可能會溢位。"

#: ../../library/datetime.rst:365
msgid "This is exact and cannot overflow."
msgstr "這是精確的，且不會溢位。"

#: ../../library/datetime.rst:368
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr ""

#: ../../library/datetime.rst:371
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""

#: ../../library/datetime.rst:374
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation. This leads to somewhat unusual "
"results for negative timedeltas. For example::"
msgstr ""

#: ../../library/datetime.rst:384
msgid ""
"The expression ``t2 - t3`` will always be equal to the expression ``t2 + (-"
"t3)`` except when t3 is equal to ``timedelta.max``; in that case the former "
"will produce a result while the latter will overflow."
msgstr ""

#: ../../library/datetime.rst:388
msgid ""
"In addition to the operations listed above, :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:`."
"datetime` objects (see below)."
msgstr ""

#: ../../library/datetime.rst:392
msgid ""
"Floor division and true division of a :class:`timedelta` object by another :"
"class:`timedelta` object are now supported, as are remainder operations and "
"the :func:`divmod` function. True division and multiplication of a :class:"
"`timedelta` object by a :class:`float` object are now supported."
msgstr ""

#: ../../library/datetime.rst:399
msgid ""
"Comparisons of :class:`timedelta` objects are supported, with some caveats."
msgstr ""

#: ../../library/datetime.rst:401
msgid ""
"The comparisons ``==`` or ``!=`` *always* return a :class:`bool`, no matter "
"the type of the compared object::"
msgstr ""

#: ../../library/datetime.rst:412
msgid ""
"For all other comparisons (such as ``<`` and ``>``), when a :class:"
"`timedelta` object is compared to an object of a different type, :exc:"
"`TypeError` is raised::"
msgstr ""

#: ../../library/datetime.rst:423
msgid ""
"In Boolean contexts, a :class:`timedelta` object is considered to be true if "
"and only if it isn't equal to ``timedelta(0)``."
msgstr ""

#: ../../library/datetime.rst:426 ../../library/datetime.rst:637
#: ../../library/datetime.rst:1208 ../../library/datetime.rst:1808
msgid "Instance methods:"
msgstr "實例方法："

#: ../../library/datetime.rst:430
msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``td / timedelta(seconds=1)``. For interval units other than seconds, use "
"the division form directly (e.g. ``td / timedelta(microseconds=1)``)."
msgstr ""

#: ../../library/datetime.rst:434
msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr ""

#: ../../library/datetime.rst:440
msgid "Examples of usage: :class:`timedelta`"
msgstr "用法範例：\\ :class:`timedelta`"

#: ../../library/datetime.rst:442
msgid "An additional example of normalization::"
msgstr ""

#: ../../library/datetime.rst:454
msgid "Examples of :class:`timedelta` arithmetic::"
msgstr ""

#: ../../library/datetime.rst:473
msgid ":class:`date` Objects"
msgstr ":class:`date` 物件"

#: ../../library/datetime.rst:475
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions."
msgstr ""

#: ../../library/datetime.rst:479
msgid ""
"January 1 of year 1 is called day number 1, January 2 of year 1 is called "
"day number 2, and so on. [#]_"
msgstr ""

#: ../../library/datetime.rst:484
msgid ""
"All arguments are required. Arguments must be integers, in the following "
"ranges:"
msgstr ""

#: ../../library/datetime.rst:487
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr "``MINYEAR <= year <= MAXYEAR``"

#: ../../library/datetime.rst:488
msgid "``1 <= month <= 12``"
msgstr "``1 <= month <= 12``"

#: ../../library/datetime.rst:489
msgid "``1 <= day <= number of days in the given month and year``"
msgstr ""

#: ../../library/datetime.rst:491 ../../library/datetime.rst:851
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""

#: ../../library/datetime.rst:494 ../../library/datetime.rst:856
msgid "Other constructors, all class methods:"
msgstr ""

#: ../../library/datetime.rst:498
msgid "Return the current local date."
msgstr "回傳目前的本地日期。"

#: ../../library/datetime.rst:500
msgid "This is equivalent to ``date.fromtimestamp(time.time())``."
msgstr "這等同於 ``date.fromtimestamp(time.time())``。"

#: ../../library/datetime.rst:504
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`."
msgstr ""

#: ../../library/datetime.rst:507
msgid ""
"This may raise :exc:`OverflowError`, if the timestamp is out of the range of "
"values supported by the platform C :c:func:`localtime` function, and :exc:"
"`OSError` on :c:func:`localtime` failure. It's common for this to be "
"restricted to years from 1970 through 2038. Note that on non-POSIX systems "
"that include leap seconds in their notion of a timestamp, leap seconds are "
"ignored by :meth:`fromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:514
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`localtime` failure."
msgstr ""

#: ../../library/datetime.rst:523
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1."
msgstr ""

#: ../../library/datetime.rst:526
msgid ""
":exc:`ValueError` is raised unless ``1 <= ordinal <= date.max.toordinal()``. "
"For any date *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

#: ../../library/datetime.rst:533
msgid ""
"Return a :class:`date` corresponding to a *date_string* given in any valid "
"ISO 8601 format, except ordinal dates (e.g. ``YYYY-DDD``)::"
msgstr ""

#: ../../library/datetime.rst:545
msgid "Previously, this method only supported the format ``YYYY-MM-DD``."
msgstr ""

#: ../../library/datetime.rst:550
msgid ""
"Return a :class:`date` corresponding to the ISO calendar date specified by "
"year, week and day. This is the inverse of the function :meth:`date."
"isocalendar`."
msgstr ""

#: ../../library/datetime.rst:560
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr ""

#: ../../library/datetime.rst:565
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr ""

#: ../../library/datetime.rst:570
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr ""

#: ../../library/datetime.rst:578 ../../library/datetime.rst:1085
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../../library/datetime.rst:583 ../../library/datetime.rst:1090
msgid "Between 1 and 12 inclusive."
msgstr "在 1 到 12 （含）之間。"

#: ../../library/datetime.rst:588 ../../library/datetime.rst:1095
msgid "Between 1 and the number of days in the given month of the given year."
msgstr ""

#: ../../library/datetime.rst:596
msgid "``date2 = date1 + timedelta``"
msgstr "``date2 = date1 + timedelta``"

#: ../../library/datetime.rst:596
msgid "*date2* will be ``timedelta.days`` days after *date1*. (1)"
msgstr ""

#: ../../library/datetime.rst:599
msgid "``date2 = date1 - timedelta``"
msgstr "``date2 = date1 - timedelta``"

#: ../../library/datetime.rst:599
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr ""

#: ../../library/datetime.rst:602
msgid "``timedelta = date1 - date2``"
msgstr "``timedelta = date1 - date2``"

#: ../../library/datetime.rst:602 ../../library/datetime.rst:1143
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/datetime.rst:604
msgid "``date1 < date2``"
msgstr "``date1 < date2``"

#: ../../library/datetime.rst:604
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr ""

#: ../../library/datetime.rst:611
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``. Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

#: ../../library/datetime.rst:618
msgid "``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr "``timedelta.seconds`` 和 ``timedelta.microseconds`` 被忽略。"

#: ../../library/datetime.rst:621
msgid ""
"This is exact, and cannot overflow. timedelta.seconds and timedelta."
"microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

#: ../../library/datetime.rst:625
msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2."
"toordinal()``. Date comparison raises :exc:`TypeError` if the other "
"comparand isn't also a :class:`date` object. However, ``NotImplemented`` is "
"returned instead if the other comparand has a :meth:`timetuple` attribute. "
"This hook gives other kinds of date objects a chance at implementing mixed-"
"type comparison. If not, when a :class:`date` object is compared to an "
"object of a different type, :exc:`TypeError` is raised unless the comparison "
"is ``==`` or ``!=``. The latter cases return :const:`False` or :const:"
"`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:635
msgid ""
"In Boolean contexts, all :class:`date` objects are considered to be true."
msgstr ""

#: ../../library/datetime.rst:641
msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified."
msgstr ""

#: ../../library/datetime.rst:644 ../../library/datetime.rst:1851
msgid "Example::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../library/datetime.rst:654 ../../library/datetime.rst:1321
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`."
msgstr ""
"回傳一個 :class:`time.struct_time`，如同 :func:`time.localtime` 所回傳。"

#: ../../library/datetime.rst:656
msgid "The hours, minutes and seconds are 0, and the DST flag is -1."
msgstr ""

#: ../../library/datetime.rst:658 ../../library/datetime.rst:1323
msgid "``d.timetuple()`` is equivalent to::"
msgstr ""
"``d.timetuple()`` 等價於：\n"
"\n"
"::"

#: ../../library/datetime.rst:662
msgid ""
"where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the "
"day number within the current year starting with ``1`` for January 1st."
msgstr ""

#: ../../library/datetime.rst:668
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1. For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

#: ../../library/datetime.rst:675
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""

#: ../../library/datetime.rst:682
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""

#: ../../library/datetime.rst:689
msgid ""
"Return a :term:`named tuple` object with three components: ``year``, "
"``week`` and ``weekday``."
msgstr ""

#: ../../library/datetime.rst:692
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. [#]_"
msgstr ""

#: ../../library/datetime.rst:694
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday. The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""

#: ../../library/datetime.rst:699
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004::"
msgstr ""

#: ../../library/datetime.rst:708
msgid "Result changed from a tuple to a :term:`named tuple`."
msgstr ""

#: ../../library/datetime.rst:713
msgid ""
"Return a string representing the date in ISO 8601 format, ``YYYY-MM-DD``::"
msgstr ""

#: ../../library/datetime.rst:721
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""

#: ../../library/datetime.rst:726
msgid "Return a string representing the date::"
msgstr ""

#: ../../library/datetime.rst:732 ../../library/datetime.rst:1507
msgid "``d.ctime()`` is equivalent to::"
msgstr ""
"``d.ctime()`` 等價於：\n"
"\n"
"::"

#: ../../library/datetime.rst:736
msgid ""
"on platforms where the native C :c:func:`ctime` function (which :func:`time."
"ctime` invokes, but which :meth:`date.ctime` does not invoke) conforms to "
"the C standard."
msgstr ""

#: ../../library/datetime.rst:743
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. See also :ref:`strftime-strptime-behavior` and :meth:`date."
"isoformat`."
msgstr ""

#: ../../library/datetime.rst:750
msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`. See also :ref:`strftime-"
"strptime-behavior` and :meth:`date.isoformat`."
msgstr ""

#: ../../library/datetime.rst:756
msgid "Examples of Usage: :class:`date`"
msgstr "用法範例：\\ :class:`date`"

#: ../../library/datetime.rst:758
msgid "Example of counting days to an event::"
msgstr ""

#: ../../library/datetime.rst:776
msgid "More examples of working with :class:`date`:"
msgstr "更多 :class:`date` 的用法範例："

#: ../../library/datetime.rst:825
msgid ":class:`.datetime` Objects"
msgstr ":class:`.datetime` 物件"

#: ../../library/datetime.rst:827
msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object."
msgstr ""

#: ../../library/datetime.rst:830
msgid ""
"Like a :class:`date` object, :class:`.datetime` assumes the current "
"Gregorian calendar extended in both directions; like a :class:`.time` "
"object, :class:`.datetime` assumes there are exactly 3600\\*24 seconds in "
"every day."
msgstr ""

#: ../../library/datetime.rst:834
msgid "Constructor:"
msgstr ""

#: ../../library/datetime.rst:838
msgid ""
"The *year*, *month* and *day* arguments are required. *tzinfo* may be "
"``None``, or an instance of a :class:`tzinfo` subclass. The remaining "
"arguments must be integers in the following ranges:"
msgstr ""

#: ../../library/datetime.rst:842
msgid "``MINYEAR <= year <= MAXYEAR``,"
msgstr "``MINYEAR <= year <= MAXYEAR``,"

#: ../../library/datetime.rst:843
msgid "``1 <= month <= 12``,"
msgstr "``1 <= month <= 12``,"

#: ../../library/datetime.rst:844
msgid "``1 <= day <= number of days in the given month and year``,"
msgstr ""

#: ../../library/datetime.rst:845 ../../library/datetime.rst:1671
msgid "``0 <= hour < 24``,"
msgstr "``0 <= hour < 24``,"

#: ../../library/datetime.rst:846 ../../library/datetime.rst:1672
msgid "``0 <= minute < 60``,"
msgstr "``0 <= minute < 60``,"

#: ../../library/datetime.rst:847 ../../library/datetime.rst:1673
msgid "``0 <= second < 60``,"
msgstr "``0 <= second < 60``,"

#: ../../library/datetime.rst:848 ../../library/datetime.rst:1674
msgid "``0 <= microsecond < 1000000``,"
msgstr "``0 <= microsecond < 1000000``,"

#: ../../library/datetime.rst:849 ../../library/datetime.rst:1675
msgid "``fold in [0, 1]``."
msgstr ""

#: ../../library/datetime.rst:853 ../../library/datetime.rst:1242
#: ../../library/datetime.rst:1818
msgid "Added the ``fold`` argument."
msgstr "新增 ``fold`` 引數。"

#: ../../library/datetime.rst:860
msgid "Return the current local datetime, with :attr:`.tzinfo` ``None``."
msgstr ""

#: ../../library/datetime.rst:862
msgid "Equivalent to::"
msgstr ""
"等價於：\n"
"\n"
"::"

#: ../../library/datetime.rst:866
msgid "See also :meth:`now`, :meth:`fromtimestamp`."
msgstr "也請見 :meth:`now`\\ 、\\ :meth:`fromtimestamp`\\ 。"

#: ../../library/datetime.rst:868
msgid ""
"This method is functionally equivalent to :meth:`now`, but without a ``tz`` "
"parameter."
msgstr ""

#: ../../library/datetime.rst:873
msgid "Return the current local date and time."
msgstr ""

#: ../../library/datetime.rst:875
msgid ""
"If optional argument *tz* is ``None`` or not specified, this is like :meth:"
"`today`, but, if possible, supplies more precision than can be gotten from "
"going through a :func:`time.time` timestamp (for example, this may be "
"possible on platforms supplying the C :c:func:`gettimeofday` function)."
msgstr ""

#: ../../library/datetime.rst:881
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the current date and time are converted to *tz*’s time zone."
msgstr ""

#: ../../library/datetime.rst:884
msgid "This function is preferred over :meth:`today` and :meth:`utcnow`."
msgstr ""

#: ../../library/datetime.rst:889
msgid "Return the current UTC date and time, with :attr:`.tzinfo` ``None``."
msgstr ""

#: ../../library/datetime.rst:891
msgid ""
"This is like :meth:`now`, but returns the current UTC date and time, as a "
"naive :class:`.datetime` object. An aware current UTC datetime can be "
"obtained by calling ``datetime.now(timezone.utc)``. See also :meth:`now`."
msgstr ""

#: ../../library/datetime.rst:897
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC. As such, the recommended way to create an object representing the "
"current time in UTC is by calling ``datetime.now(timezone.utc)``."
msgstr ""

#: ../../library/datetime.rst:905
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""

#: ../../library/datetime.rst:910
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the timestamp is converted to *tz*’s time zone."
msgstr ""

#: ../../library/datetime.rst:913
msgid ""
":meth:`fromtimestamp` may raise :exc:`OverflowError`, if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or :"
"c:func:`gmtime` failure. It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`.datetime` objects. This method is "
"preferred over :meth:`utcfromtimestamp`."
msgstr ""

#: ../../library/datetime.rst:924
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions. Raise :exc:`OSError` instead of :exc:"
"`ValueError` on :c:func:`localtime` or :c:func:`gmtime` failure."
msgstr ""

#: ../../library/datetime.rst:931
msgid ":meth:`fromtimestamp` may return instances with :attr:`.fold` set to 1."
msgstr ""

#: ../../library/datetime.rst:936
msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, "
"with :attr:`.tzinfo` ``None``.  (The resulting object is naive.)"
msgstr ""

#: ../../library/datetime.rst:939
msgid ""
"This may raise :exc:`OverflowError`, if the timestamp is out of the range of "
"values supported by the platform C :c:func:`gmtime` function, and :exc:"
"`OSError` on :c:func:`gmtime` failure. It's common for this to be restricted "
"to years in 1970 through 2038."
msgstr ""

#: ../../library/datetime.rst:944
msgid "To get an aware :class:`.datetime` object, call :meth:`fromtimestamp`::"
msgstr ""

#: ../../library/datetime.rst:948
msgid ""
"On the POSIX compliant platforms, it is equivalent to the following "
"expression::"
msgstr ""

#: ../../library/datetime.rst:953
msgid ""
"except the latter formula always supports the full years range: between :"
"const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../../library/datetime.rst:958
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC. As such, the recommended way to create an object representing a "
"specific timestamp in UTC is by calling ``datetime.fromtimestamp(timestamp, "
"tz=timezone.utc)``."
msgstr ""

#: ../../library/datetime.rst:964
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`gmtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`gmtime` failure."
msgstr ""

#: ../../library/datetime.rst:973
msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``. The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` "
"is ``None``."
msgstr ""

#: ../../library/datetime.rst:981
msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components are equal to the "
"given :class:`.time` object's. If the *tzinfo* argument is provided, its "
"value is used to set the :attr:`.tzinfo` attribute of the result, otherwise "
"the :attr:`~.time.tzinfo` attribute of the *time* argument is used."
msgstr ""

#: ../../library/datetime.rst:988
msgid ""
"For any :class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d."
"time(), d.tzinfo)``. If date is a :class:`.datetime` object, its time "
"components and :attr:`.tzinfo` attributes are ignored."
msgstr ""

#: ../../library/datetime.rst:993
msgid "Added the *tzinfo* argument."
msgstr "新增 *tzinfo* 引數。"

#: ../../library/datetime.rst:999
msgid ""
"Return a :class:`.datetime` corresponding to a *date_string* in any valid "
"ISO 8601 format, with the following exceptions:"
msgstr ""

#: ../../library/datetime.rst:1002 ../../library/datetime.rst:1774
msgid "Time zone offsets may have fractional seconds."
msgstr ""

#: ../../library/datetime.rst:1003
msgid "The ``T`` separator may be replaced by any single unicode character."
msgstr ""

#: ../../library/datetime.rst:1004
msgid "Ordinal dates are not currently supported."
msgstr ""

#: ../../library/datetime.rst:1005 ../../library/datetime.rst:1779
msgid "Fractional hours and minutes are not supported."
msgstr ""

#: ../../library/datetime.rst:1007 ../../library/datetime.rst:1436
#: ../../library/datetime.rst:1781
msgid "Examples::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../library/datetime.rst:1031
msgid ""
"Previously, this method only supported formats that could be emitted by :"
"meth:`date.isoformat()` or :meth:`datetime.isoformat()`."
msgstr ""

#: ../../library/datetime.rst:1038
msgid ""
"Return a :class:`.datetime` corresponding to the ISO calendar date specified "
"by year, week and day. The non-date components of the datetime are populated "
"with their normal default values. This is the inverse of the function :meth:"
"`datetime.isocalendar`."
msgstr ""

#: ../../library/datetime.rst:1047
msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according "
"to *format*."
msgstr ""

#: ../../library/datetime.rst:1050
msgid ""
"If *format* does not contain microseconds or timezone information, this is "
"equivalent to::"
msgstr ""

#: ../../library/datetime.rst:1054
msgid ""
":exc:`ValueError` is raised if the date_string and format can't be parsed "
"by :func:`time.strptime` or if it returns a value which isn't a time tuple.  "
"See also :ref:`strftime-strptime-behavior` and :meth:`datetime."
"fromisoformat`."
msgstr ""

#: ../../library/datetime.rst:1065
msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:1071
msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:1077
msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../../library/datetime.rst:1100 ../../library/datetime.rst:1704
msgid "In ``range(24)``."
msgstr ""

#: ../../library/datetime.rst:1105 ../../library/datetime.rst:1110
#: ../../library/datetime.rst:1709 ../../library/datetime.rst:1714
msgid "In ``range(60)``."
msgstr ""

#: ../../library/datetime.rst:1115 ../../library/datetime.rst:1719
msgid "In ``range(1000000)``."
msgstr ""

#: ../../library/datetime.rst:1120
msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""

#: ../../library/datetime.rst:1126 ../../library/datetime.rst:1730
msgid ""
"In ``[0, 1]``. Used to disambiguate wall times during a repeated interval. "
"(A repeated interval occurs when clocks are rolled back at the end of "
"daylight saving time or when the UTC offset for the current zone is "
"decreased for political reasons.) The value 0 (1) represents the earlier "
"(later) of the two moments with the same wall time representation."
msgstr ""

#: ../../library/datetime.rst:1139
msgid "``datetime2 = datetime1 + timedelta``"
msgstr "``datetime2 = datetime1 + timedelta``"

#: ../../library/datetime.rst:1139 ../../library/datetime.rst:2340
#: ../../library/datetime.rst:2345 ../../library/datetime.rst:2357
#: ../../library/datetime.rst:2362 ../../library/datetime.rst:2422
#: ../../library/datetime.rst:2427 ../../library/datetime.rst:2431
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/datetime.rst:1141
msgid "``datetime2 = datetime1 - timedelta``"
msgstr "``datetime2 = datetime1 - timedelta``"

#: ../../library/datetime.rst:1141 ../../library/datetime.rst:2373
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/datetime.rst:1143
msgid "``timedelta = datetime1 - datetime2``"
msgstr "``timedelta = datetime1 - datetime2``"

#: ../../library/datetime.rst:1145
msgid "``datetime1 < datetime2``"
msgstr "``datetime1 < datetime2``"

#: ../../library/datetime.rst:1145
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr ""

#: ../../library/datetime.rst:1150
msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0. "
"The result has the same :attr:`~.datetime.tzinfo` attribute as the input "
"datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` "
"is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger "
"than :const:`MAXYEAR`. Note that no time zone adjustments are done even if "
"the input is an aware object."
msgstr ""

#: ../../library/datetime.rst:1159
msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`~.datetime.tzinfo` attribute as the "
"input datetime, and no time zone adjustments are done even if the input is "
"aware."
msgstr ""

#: ../../library/datetime.rst:1164
msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware. If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""

#: ../../library/datetime.rst:1168
msgid ""
"If both are naive, or both are aware and have the same :attr:`~.datetime."
"tzinfo` attribute, the :attr:`~.datetime.tzinfo` attributes are ignored, and "
"the result is a :class:`timedelta` object *t* such that ``datetime2 + t == "
"datetime1``. No time zone adjustments are done in this case."
msgstr ""

#: ../../library/datetime.rst:1173
msgid ""
"If both are aware and have different :attr:`~.datetime.tzinfo` attributes, "
"``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes "
"first. The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""

#: ../../library/datetime.rst:1179
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr ""

#: ../../library/datetime.rst:1182
msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is raised "
"if an order comparison is attempted. For equality comparisons, naive "
"instances are never equal to aware instances."
msgstr ""

#: ../../library/datetime.rst:1186
msgid ""
"If both comparands are aware, and have the same :attr:`~.datetime.tzinfo` "
"attribute, the common :attr:`~.datetime.tzinfo` attribute is ignored and the "
"base datetimes are compared. If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparands are first "
"adjusted by subtracting their UTC offsets (obtained from ``self."
"utcoffset()``)."
msgstr ""

#: ../../library/datetime.rst:1192
msgid ""
"Equality comparisons between aware and naive :class:`.datetime` instances "
"don't raise :exc:`TypeError`."
msgstr ""

#: ../../library/datetime.rst:1198
msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`.datetime` object. "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute. This hook gives other kinds of date objects a "
"chance at implementing mixed-type comparison. If not, when a :class:`."
"datetime` object is compared to an object of a different type, :exc:"
"`TypeError` is raised unless the comparison is ``==`` or ``!=``. The latter "
"cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../library/datetime.rst:1212
msgid "Return :class:`date` object with same year, month and day."
msgstr ""

#: ../../library/datetime.rst:1217
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond and "
"fold. :attr:`.tzinfo` is ``None``. See also method :meth:`timetz`."
msgstr ""

#: ../../library/datetime.rst:1220 ../../library/datetime.rst:1229
msgid "The fold value is copied to the returned :class:`.time` object."
msgstr ""

#: ../../library/datetime.rst:1226
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"fold, and tzinfo attributes. See also method :meth:`time`."
msgstr ""

#: ../../library/datetime.rst:1237
msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified. Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""

#: ../../library/datetime.rst:1248
msgid ""
"Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""

#: ../../library/datetime.rst:1252
msgid ""
"If provided, *tz* must be an instance of a :class:`tzinfo` subclass, and "
"its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``. If "
"*self* is naive, it is presumed to represent time in the system timezone."
msgstr ""

#: ../../library/datetime.rst:1256
msgid ""
"If called without arguments (or with ``tz=None``) the system local timezone "
"is assumed for the target timezone. The ``.tzinfo`` attribute of the "
"converted datetime instance will be set to an instance of :class:`timezone` "
"with the zone name and offset obtained from the OS."
msgstr ""

#: ../../library/datetime.rst:1261
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in the timezone *tz*, representing the same UTC time as *self*:  after "
"``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will have the same "
"date and time data as ``dt - dt.utcoffset()``."
msgstr ""

#: ../../library/datetime.rst:1267
msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``. If "
"you merely want to remove the time zone object from an aware datetime *dt* "
"without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""

#: ../../library/datetime.rst:1272
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""

#: ../../library/datetime.rst:1284
msgid "*tz* now can be omitted."
msgstr ""

#: ../../library/datetime.rst:1287
msgid ""
"The :meth:`astimezone` method can now be called on naive instances that are "
"presumed to represent system local time."
msgstr ""

#: ../../library/datetime.rst:1294
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1298 ../../library/datetime.rst:1891
#: ../../library/datetime.rst:1997 ../../library/datetime.rst:2242
#: ../../library/datetime.rst:2254 ../../library/datetime.rst:2558
msgid "The UTC offset is not restricted to a whole number of minutes."
msgstr ""

#: ../../library/datetime.rst:1304
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None`` "
"or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1308 ../../library/datetime.rst:1901
#: ../../library/datetime.rst:2051
msgid "The DST offset is not restricted to a whole number of minutes."
msgstr ""

#: ../../library/datetime.rst:1314
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""

#: ../../library/datetime.rst:1329
msgid ""
"where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the "
"day number within the current year starting with ``1`` for January 1st. The :"
"attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:"
"`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :"
"attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""

#: ../../library/datetime.rst:1340
msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what "
"``d.dst()`` returns. DST is never in effect for a UTC time."
msgstr ""

#: ../../library/datetime.rst:1344
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned. :attr:`tm_isdst` is forced to 0. Note that an :exc:`OverflowError` "
"may be raised if *d*.year was ``MINYEAR`` or ``MAXYEAR`` and UTC adjustment "
"spills over a year boundary."
msgstr ""

#: ../../library/datetime.rst:1353
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC; as a result, using :meth:`datetime.utctimetuple` may give misleading "
"results. If you have a naive ``datetime`` representing UTC, use ``datetime."
"replace(tzinfo=timezone.utc)`` to make it aware, at which point you can use :"
"meth:`.datetime.timetuple`."
msgstr ""

#: ../../library/datetime.rst:1362
msgid ""
"Return the proleptic Gregorian ordinal of the date. The same as ``self."
"date().toordinal()``."
msgstr ""

#: ../../library/datetime.rst:1367
msgid ""
"Return POSIX timestamp corresponding to the :class:`.datetime` instance. The "
"return value is a :class:`float` similar to that returned by :func:`time."
"time`."
msgstr ""

#: ../../library/datetime.rst:1371
msgid ""
"Naive :class:`.datetime` instances are assumed to represent local time and "
"this method relies on the platform C :c:func:`mktime` function to perform "
"the conversion. Since :class:`.datetime` supports wider range of values "
"than :c:func:`mktime` on many platforms, this method may raise :exc:"
"`OverflowError` for times far in the past or far in the future."
msgstr ""

#: ../../library/datetime.rst:1378
msgid ""
"For aware :class:`.datetime` instances, the return value is computed as::"
msgstr ""

#: ../../library/datetime.rst:1385
msgid ""
"The :meth:`timestamp` method uses the :attr:`.fold` attribute to "
"disambiguate the times during a repeated interval."
msgstr ""

#: ../../library/datetime.rst:1391
msgid ""
"There is no method to obtain the POSIX timestamp directly from a naive :"
"class:`.datetime` instance representing UTC time. If your application uses "
"this convention and your system timezone is not set to UTC, you can obtain "
"the POSIX timestamp by supplying ``tzinfo=timezone.utc``::"
msgstr ""

#: ../../library/datetime.rst:1399
msgid "or by calculating the timestamp directly::"
msgstr ""

#: ../../library/datetime.rst:1405
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""

#: ../../library/datetime.rst:1411
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""

#: ../../library/datetime.rst:1418
msgid ""
"Return a :term:`named tuple` with three components: ``year``, ``week`` and "
"``weekday``. The same as ``self.date().isocalendar()``."
msgstr ""

#: ../../library/datetime.rst:1424
msgid "Return a string representing the date and time in ISO 8601 format:"
msgstr ""

#: ../../library/datetime.rst:1426
msgid "``YYYY-MM-DDTHH:MM:SS.ffffff``, if :attr:`microsecond` is not 0"
msgstr "``YYYY-MM-DDTHH:MM:SS.ffffff``，如果 :attr:`microsecond` 不是 0"

#: ../../library/datetime.rst:1427
msgid "``YYYY-MM-DDTHH:MM:SS``, if :attr:`microsecond` is 0"
msgstr "``YYYY-MM-DDTHH:MM:SS``，如果 :attr:`microsecond` 是 0"

#: ../../library/datetime.rst:1429
msgid ""
"If :meth:`utcoffset` does not return ``None``, a string is appended, giving "
"the UTC offset:"
msgstr ""
"如果 :meth:`utcoffset` 没有回傳 ``None``，則會附加一个字串，給出 UTC 偏移："

#: ../../library/datetime.rst:1432
msgid ""
"``YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``, if :attr:`microsecond` "
"is not 0"
msgstr ""
"``YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``，如果 :attr:`microsecond` "
"不是 0"

#: ../../library/datetime.rst:1434
msgid ""
"``YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]``,  if :attr:`microsecond` is 0"
msgstr ""
"``YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]``，如果 :attr:`microsecond` 是 0"

#: ../../library/datetime.rst:1444
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result. For example::"
msgstr ""

#: ../../library/datetime.rst:1458 ../../library/datetime.rst:1831
msgid ""
"The optional argument *timespec* specifies the number of additional "
"components of the time to include (the default is ``'auto'``). It can be one "
"of the following:"
msgstr ""

#: ../../library/datetime.rst:1462 ../../library/datetime.rst:1835
msgid ""
"``'auto'``: Same as ``'seconds'`` if :attr:`microsecond` is 0, same as "
"``'microseconds'`` otherwise."
msgstr ""

#: ../../library/datetime.rst:1464 ../../library/datetime.rst:1837
msgid "``'hours'``: Include the :attr:`hour` in the two-digit ``HH`` format."
msgstr ""

#: ../../library/datetime.rst:1465 ../../library/datetime.rst:1838
msgid ""
"``'minutes'``: Include :attr:`hour` and :attr:`minute` in ``HH:MM`` format."
msgstr ""

#: ../../library/datetime.rst:1466 ../../library/datetime.rst:1839
msgid ""
"``'seconds'``: Include :attr:`hour`, :attr:`minute`, and :attr:`second` in "
"``HH:MM:SS`` format."
msgstr ""

#: ../../library/datetime.rst:1468 ../../library/datetime.rst:1841
msgid ""
"``'milliseconds'``: Include full time, but truncate fractional second part "
"to milliseconds. ``HH:MM:SS.sss`` format."
msgstr ""

#: ../../library/datetime.rst:1470 ../../library/datetime.rst:1843
msgid "``'microseconds'``: Include full time in ``HH:MM:SS.ffffff`` format."
msgstr ""

#: ../../library/datetime.rst:1474 ../../library/datetime.rst:1847
msgid "Excluded time components are truncated, not rounded."
msgstr ""

#: ../../library/datetime.rst:1476
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument::"
msgstr ""

#: ../../library/datetime.rst:1486 ../../library/datetime.rst:1862
msgid "Added the *timespec* argument."
msgstr "新增 *timespec* 引數。"

#: ../../library/datetime.rst:1492
msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""

#: ../../library/datetime.rst:1498
msgid "Return a string representing the date and time::"
msgstr ""

#: ../../library/datetime.rst:1504
msgid ""
"The output string will *not* include time zone information, regardless of "
"whether the input is aware or naive."
msgstr ""

#: ../../library/datetime.rst:1511
msgid ""
"on platforms where the native C :c:func:`ctime` function (which :func:`time."
"ctime` invokes, but which :meth:`datetime.ctime` does not invoke) conforms "
"to the C standard."
msgstr ""

#: ../../library/datetime.rst:1518
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string. See also :ref:`strftime-strptime-behavior` and :meth:"
"`datetime.isoformat`."
msgstr ""

#: ../../library/datetime.rst:1525
msgid ""
"Same as :meth:`.datetime.strftime`. This makes it possible to specify a "
"format string for a :class:`.datetime` object in :ref:`formatted string "
"literals <f-strings>` and when using :meth:`str.format`. See also :ref:"
"`strftime-strptime-behavior` and :meth:`datetime.isoformat`."
msgstr ""

#: ../../library/datetime.rst:1532
msgid "Examples of Usage: :class:`.datetime`"
msgstr ""

#: ../../library/datetime.rst:1534
msgid "Examples of working with :class:`~datetime.datetime` objects:"
msgstr ""

#: ../../library/datetime.rst:1587
msgid ""
"The example below defines a :class:`tzinfo` subclass capturing time zone "
"information for Kabul, Afghanistan, which used +4 UTC until 1945 and then "
"+4:30 UTC thereafter::"
msgstr ""

#: ../../library/datetime.rst:1634
msgid "Usage of ``KabulTz`` from above::"
msgstr ""

#: ../../library/datetime.rst:1660
msgid ":class:`.time` Objects"
msgstr ":class:`.time` 物件"

#: ../../library/datetime.rst:1662
msgid ""
"A :class:`time` object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

#: ../../library/datetime.rst:1667
msgid ""
"All arguments are optional. *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass. The remaining arguments must be integers in the "
"following ranges:"
msgstr ""

#: ../../library/datetime.rst:1677
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised. "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

#: ../../library/datetime.rst:1685
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr ""

#: ../../library/datetime.rst:1690
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""

#: ../../library/datetime.rst:1695
msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:`."
"time` objects is not supported."
msgstr ""

#: ../../library/datetime.rst:1724
msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr ""

#: ../../library/datetime.rst:1738
msgid ""
":class:`.time` objects support comparison of :class:`.time` to :class:`."
"time`, where *a* is considered less than *b* when *a* precedes *b* in time. "
"If one comparand is naive and the other is aware, :exc:`TypeError` is raised "
"if an order comparison is attempted. For equality comparisons, naive "
"instances are never equal to aware instances."
msgstr ""

#: ../../library/datetime.rst:1744
msgid ""
"If both comparands are aware, and have the same :attr:`~time.tzinfo` "
"attribute, the common :attr:`~time.tzinfo` attribute is ignored and the base "
"times are compared. If both comparands are aware and have different :attr:"
"`~time.tzinfo` attributes, the comparands are first adjusted by subtracting "
"their UTC offsets (obtained from ``self.utcoffset()``). In order to stop "
"mixed-type comparisons from falling back to the default comparison by object "
"address, when a :class:`.time` object is compared to an object of a "
"different type, :exc:`TypeError` is raised unless the comparison is ``==`` "
"or ``!=``. The latter cases return :const:`False` or :const:`True`, "
"respectively."
msgstr ""

#: ../../library/datetime.rst:1754
msgid ""
"Equality comparisons between aware and naive :class:`~datetime.time` "
"instances don't raise :exc:`TypeError`."
msgstr ""

#: ../../library/datetime.rst:1758
msgid ""
"In Boolean contexts, a :class:`.time` object is always considered to be true."
msgstr ""

#: ../../library/datetime.rst:1760
msgid ""
"Before Python 3.5, a :class:`.time` object was considered to be false if it "
"represented midnight in UTC. This behavior was considered obscure and error-"
"prone and has been removed in Python 3.5. See :issue:`13936` for full "
"details."
msgstr ""

#: ../../library/datetime.rst:1767
msgid "Other constructor:"
msgstr ""

#: ../../library/datetime.rst:1771
msgid ""
"Return a :class:`.time` corresponding to a *time_string* in any valid ISO "
"8601 format, with the following exceptions:"
msgstr ""

#: ../../library/datetime.rst:1775
msgid ""
"The leading ``T``, normally required in cases where there may be ambiguity "
"between a date and a time, is not required."
msgstr ""

#: ../../library/datetime.rst:1777
msgid ""
"Fractional seconds may have any number of digits (anything beyond 6 will be "
"truncated)."
msgstr ""

#: ../../library/datetime.rst:1803
msgid ""
"Previously, this method only supported formats that could be emitted by :"
"meth:`time.isoformat()`."
msgstr ""

#: ../../library/datetime.rst:1813
msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified. Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""

#: ../../library/datetime.rst:1824
msgid "Return a string representing the time in ISO 8601 format, one of:"
msgstr ""

#: ../../library/datetime.rst:1826
msgid "``HH:MM:SS.ffffff``, if :attr:`microsecond` is not 0"
msgstr ""

#: ../../library/datetime.rst:1827
msgid "``HH:MM:SS``, if :attr:`microsecond` is 0"
msgstr ""

#: ../../library/datetime.rst:1828
msgid ""
"``HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``, if :meth:`utcoffset` does not "
"return ``None``"
msgstr ""

#: ../../library/datetime.rst:1829
msgid ""
"``HH:MM:SS+HH:MM[:SS[.ffffff]]``, if :attr:`microsecond` is 0 and :meth:"
"`utcoffset` does not return ``None``"
msgstr ""

#: ../../library/datetime.rst:1849
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument."
msgstr ""

#: ../../library/datetime.rst:1868
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""

#: ../../library/datetime.rst:1873
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string.  See also :ref:`strftime-strptime-behavior` and :meth:`time."
"isoformat`."
msgstr ""

#: ../../library/datetime.rst:1879
msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`. See also :ref:`strftime-"
"strptime-behavior` and :meth:`time.isoformat`."
msgstr ""

#: ../../library/datetime.rst:1887
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1897
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

#: ../../library/datetime.rst:1906
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""

#: ../../library/datetime.rst:1911
msgid "Examples of Usage: :class:`.time`"
msgstr "用法範例：\\ :class:`.time`"

#: ../../library/datetime.rst:1913
msgid "Examples of working with a :class:`.time` object::"
msgstr ""

#: ../../library/datetime.rst:1944
msgid ":class:`tzinfo` Objects"
msgstr ":class:`tzinfo` 物件"

#: ../../library/datetime.rst:1948
msgid ""
"This is an abstract base class, meaning that this class should not be "
"instantiated directly.  Define a subclass of :class:`tzinfo` to capture "
"information about a particular time zone."
msgstr ""

#: ../../library/datetime.rst:1952
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the :class:"
"`tzinfo` object supports methods revealing offset of local time from UTC, "
"the name of the time zone, and DST offset, all relative to a date or time "
"object passed to them."
msgstr ""

#: ../../library/datetime.rst:1958
msgid ""
"You need to derive a concrete subclass, and (at least) supply "
"implementations of the standard :class:`tzinfo` methods needed by the :class:"
"`.datetime` methods you use. The :mod:`datetime` module provides :class:"
"`timezone`, a simple concrete subclass of :class:`tzinfo` which can "
"represent timezones with fixed offset from UTC such as UTC itself or North "
"American EST and EDT."
msgstr ""

#: ../../library/datetime.rst:1965
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`__init__` method that can be called with no arguments, otherwise it "
"can be pickled but possibly not unpickled again. This is a technical "
"requirement that may be relaxed in the future."
msgstr ""

#: ../../library/datetime.rst:1970
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods. Exactly which methods are needed depends on the uses made of aware :"
"mod:`datetime` objects. If in doubt, simply implement all of them."
msgstr ""

#: ../../library/datetime.rst:1977
msgid ""
"Return offset of local time from UTC, as a :class:`timedelta` object that is "
"positive east of UTC. If local time is west of UTC, this should be negative."
msgstr ""

#: ../../library/datetime.rst:1980
msgid ""
"This represents the *total* offset from UTC; for example, if a :class:"
"`tzinfo` object represents both time zone and DST adjustments, :meth:"
"`utcoffset` should return their sum. If the UTC offset isn't known, return "
"``None``. Else the value returned must be a :class:`timedelta` object "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)`` (the "
"magnitude of the offset must be less than one day). Most implementations of :"
"meth:`utcoffset` will probably look like one of these two::"
msgstr ""

#: ../../library/datetime.rst:1991
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""

#: ../../library/datetime.rst:1994
msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:2003
msgid ""
"Return the daylight saving time (DST) adjustment, as a :class:`timedelta` "
"object or ``None`` if DST information isn't known."
msgstr ""

#: ../../library/datetime.rst:2007
msgid ""
"Return ``timedelta(0)`` if DST is not in effect. If DST is in effect, return "
"the offset as a :class:`timedelta` object (see :meth:`utcoffset` for "
"details). Note that DST offset, if applicable, has already been added to the "
"UTC offset returned by :meth:`utcoffset`, so there's no need to consult :"
"meth:`dst` unless you're interested in obtaining DST info separately. For "
"example, :meth:`datetime.timetuple` calls its :attr:`~.datetime.tzinfo` "
"attribute's :meth:`dst` method to determine how the :attr:`tm_isdst` flag "
"should be set, and :meth:`tzinfo.fromutc` calls :meth:`dst` to account for "
"DST changes when crossing time zones."
msgstr ""

#: ../../library/datetime.rst:2017
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""

#: ../../library/datetime.rst:2020
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr "``tz.utcoffset(dt) - tz.dst(dt)``"

#: ../../library/datetime.rst:2022
msgid ""
"must return the same result for every :class:`.datetime` *dt* with ``dt."
"tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location. The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it. If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` "
"regardless."
msgstr ""

#: ../../library/datetime.rst:2031
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""

#: ../../library/datetime.rst:2037
msgid "or::"
msgstr ""
"或是：\n"
"\n"
"::"

#: ../../library/datetime.rst:2049
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:2057
msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:"
"`datetime` module, and there's no requirement that it mean anything in "
"particular. For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies. Return ``None`` "
"if a string name isn't known. Note that this is a method rather than a fixed "
"string primarily because some :class:`tzinfo` subclasses will wish to return "
"different names depending on the specific value of *dt* passed, especially "
"if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

#: ../../library/datetime.rst:2067
msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../library/datetime.rst:2070
msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names. A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument. A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:`."
"datetime`."
msgstr ""

#: ../../library/datetime.rst:2076
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response. For example, returning ``None`` is appropriate if the class wishes "
"to say that time objects don't participate in the :class:`tzinfo` protocols. "
"It may be more useful for ``utcoffset(None)`` to return the standard UTC "
"offset, as there is no other convention for discovering the standard offset."
msgstr ""

#: ../../library/datetime.rst:2082
msgid ""
"When a :class:`.datetime` object is passed in response to a :class:`."
"datetime` method, ``dt.tzinfo`` is the same object as *self*. :class:"
"`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` "
"methods directly. The intent is that the :class:`tzinfo` methods interpret "
"*dt* as being in local time, and not need worry about objects in other "
"timezones."
msgstr ""

#: ../../library/datetime.rst:2088
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""

#: ../../library/datetime.rst:2093
msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation. When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time data are to be viewed as expressing a UTC time. The purpose "
"of :meth:`fromutc` is to adjust the date and time data, returning an "
"equivalent datetime in *self*'s local time."
msgstr ""

#: ../../library/datetime.rst:2099
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems. It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years. An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`astimezone` and :meth:`fromutc` may not produce the result you want if the "
"result is one of the hours straddling the moment the standard offset changes."
msgstr ""

#: ../../library/datetime.rst:2110
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""

#: ../../library/datetime.rst:2128
msgid ""
"In the following :download:`tzinfo_examples.py <../includes/tzinfo_examples."
"py>` file there are some examples of :class:`tzinfo` classes:"
msgstr ""

#: ../../library/datetime.rst:2134
msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points. For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

#: ../../library/datetime.rst:2148
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00. A wall time of the form 2:MM doesn't really make sense on that day, "
"so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on the "
"day DST begins. For example, at the Spring forward transition of 2016, we "
"get::"
msgstr ""

#: ../../library/datetime.rst:2167
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time. In Eastern, that's times of the form 5:MM UTC on "
"the day daylight time ends. The local wall clock leaps from 1:59 (daylight "
"time) back to 1:00 (standard time) again. Local times of the form 1:MM are "
"ambiguous. :meth:`astimezone` mimics the local clock's behavior by mapping "
"two adjacent UTC hours into the same local hour then. In the Eastern "
"example, UTC times of the form 5:MM and 6:MM both map to 1:MM when converted "
"to Eastern, but earlier times have the :attr:`~datetime.fold` attribute set "
"to 0 and the later times have it set to 1. For example, at the Fall back "
"transition of 2016, we get::"
msgstr ""

#: ../../library/datetime.rst:2189
msgid ""
"Note that the :class:`.datetime` instances that differ only by the value of "
"the :attr:`~datetime.fold` attribute are considered equal in comparisons."
msgstr ""

#: ../../library/datetime.rst:2192
msgid ""
"Applications that can't bear wall-time ambiguities should explicitly check "
"the value of the :attr:`~datetime.fold` attribute or avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using :class:"
"`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such as a "
"class representing only EST (fixed offset -5 hours), or only EDT (fixed "
"offset -4 hours))."
msgstr ""

#: ../../library/datetime.rst:2206
msgid ":mod:`zoneinfo`"
msgstr ":mod:`zoneinfo`"

#: ../../library/datetime.rst:2201
msgid ""
"The :mod:`datetime` module has a basic :class:`timezone` class (for handling "
"arbitrary fixed offsets from UTC) and its :attr:`timezone.utc` attribute (a "
"UTC timezone instance)."
msgstr ""

#: ../../library/datetime.rst:2205
msgid ""
"``zoneinfo`` brings the *IANA timezone database* (also known as the Olson "
"database) to Python, and its usage is recommended."
msgstr ""

#: ../../library/datetime.rst:2212
msgid "`IANA timezone database <https://www.iana.org/time-zones>`_"
msgstr "`IANA 時區資料庫 <https://www.iana.org/time-zones>`_"

#: ../../library/datetime.rst:2209
msgid ""
"The Time Zone Database (often called tz, tzdata or zoneinfo) contains code "
"and data that represent the history of local time for many representative "
"locations around the globe. It is updated periodically to reflect changes "
"made by political bodies to time zone boundaries, UTC offsets, and daylight-"
"saving rules."
msgstr ""

#: ../../library/datetime.rst:2219
msgid ":class:`timezone` Objects"
msgstr ":class:`timezone` 物件"

#: ../../library/datetime.rst:2221
msgid ""
"The :class:`timezone` class is a subclass of :class:`tzinfo`, each instance "
"of which represents a timezone defined by a fixed offset from UTC."
msgstr ""

#: ../../library/datetime.rst:2225
msgid ""
"Objects of this class cannot be used to represent timezone information in "
"the locations where different offsets are used in different days of the year "
"or where historical changes have been made to civil time."
msgstr ""

#: ../../library/datetime.rst:2232
msgid ""
"The *offset* argument must be specified as a :class:`timedelta` object "
"representing the difference between the local time and UTC. It must be "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)``, "
"otherwise :exc:`ValueError` is raised."
msgstr ""

#: ../../library/datetime.rst:2237
msgid ""
"The *name* argument is optional. If specified it must be a string that will "
"be used as the value returned by the :meth:`datetime.tzname` method."
msgstr ""

#: ../../library/datetime.rst:2248 ../../library/datetime.rst:2259
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed."
msgstr ""

#: ../../library/datetime.rst:2251
msgid ""
"The *dt* argument is ignored. The return value is a :class:`timedelta` "
"instance equal to the difference between the local time and UTC."
msgstr ""

#: ../../library/datetime.rst:2262
msgid ""
"If *name* is not provided in the constructor, the name returned by "
"``tzname(dt)`` is generated from the value of the ``offset`` as follows. If "
"*offset* is ``timedelta(0)``, the name is \"UTC\", otherwise it is a string "
"in the format ``UTC±HH:MM``, where ± is the sign of ``offset``, HH and MM "
"are two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""

#: ../../library/datetime.rst:2268
msgid ""
"Name generated from ``offset=timedelta(0)`` is now plain ``'UTC'``, not "
"``'UTC+00:00'``."
msgstr ""

#: ../../library/datetime.rst:2275
msgid "Always returns ``None``."
msgstr ""

#: ../../library/datetime.rst:2279
msgid ""
"Return ``dt + offset``. The *dt* argument must be an aware :class:`."
"datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""

#: ../../library/datetime.rst:2286
msgid "The UTC timezone, ``timezone(timedelta(0))``."
msgstr ""

#: ../../library/datetime.rst:2295
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ":meth:`strftime` 與 :meth:`strptime` 的行為"

#: ../../library/datetime.rst:2297
msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string."
msgstr ""

#: ../../library/datetime.rst:2301
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:`."
"datetime` object from a string representing a date and time and a "
"corresponding format string."
msgstr ""

#: ../../library/datetime.rst:2305
msgid ""
"The table below provides a high-level comparison of :meth:`strftime` versus :"
"meth:`strptime`:"
msgstr ""

#: ../../library/datetime.rst:2309
msgid "``strftime``"
msgstr "``strftime``"

#: ../../library/datetime.rst:2309
msgid "``strptime``"
msgstr "``strptime``"

#: ../../library/datetime.rst:2311
msgid "Usage"
msgstr "用法"

#: ../../library/datetime.rst:2311
msgid "Convert object to a string according to a given format"
msgstr ""

#: ../../library/datetime.rst:2311
msgid ""
"Parse a string into a :class:`.datetime` object given a corresponding format"
msgstr ""

#: ../../library/datetime.rst:2313
msgid "Type of method"
msgstr ""

#: ../../library/datetime.rst:2313
msgid "Instance method"
msgstr "實例方法"

#: ../../library/datetime.rst:2313
msgid "Class method"
msgstr "類別方法"

#: ../../library/datetime.rst:2315
msgid "Method of"
msgstr ""

#: ../../library/datetime.rst:2315
msgid ":class:`date`; :class:`.datetime`; :class:`.time`"
msgstr ""

#: ../../library/datetime.rst:2315
msgid ":class:`.datetime`"
msgstr ":class:`.datetime`"

#: ../../library/datetime.rst:2317
msgid "Signature"
msgstr ""

#: ../../library/datetime.rst:2317
msgid "``strftime(format)``"
msgstr "``strftime(format)``"

#: ../../library/datetime.rst:2317
msgid "``strptime(date_string, format)``"
msgstr "``strptime(date_string, format)``"

#: ../../library/datetime.rst:2324
msgid ":meth:`strftime` and :meth:`strptime` Format Codes"
msgstr ""

#: ../../library/datetime.rst:2326
msgid ""
"These methods accept format codes that can be used to parse and format "
"dates::"
msgstr ""

#: ../../library/datetime.rst:2334
msgid ""
"The following is a list of all the format codes that the 1989 C standard "
"requires, and these work on all platforms with a standard C implementation."
msgstr ""

#: ../../library/datetime.rst:2338 ../../library/datetime.rst:2441
msgid "Directive"
msgstr ""

#: ../../library/datetime.rst:2338 ../../library/datetime.rst:2441
msgid "Meaning"
msgstr ""

#: ../../library/datetime.rst:2338 ../../library/datetime.rst:2441
msgid "Example"
msgstr "範例"

#: ../../library/datetime.rst:2338 ../../library/datetime.rst:2441
msgid "Notes"
msgstr "註解"

#: ../../library/datetime.rst:2340
msgid "``%a``"
msgstr "``%a``"

#: ../../library/datetime.rst:2340
msgid "Weekday as locale's abbreviated name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2345
msgid "``%A``"
msgstr "``%A``"

#: ../../library/datetime.rst:2345
msgid "Weekday as locale's full name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2350
msgid "``%w``"
msgstr "``%w``"

#: ../../library/datetime.rst:2350
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""

#: ../../library/datetime.rst:2350
msgid "0, 1, ..., 6"
msgstr "0, 1, ..., 6"

#: ../../library/datetime.rst:2354
msgid "``%d``"
msgstr "``%d``"

#: ../../library/datetime.rst:2354
msgid "Day of the month as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2354
msgid "01, 02, ..., 31"
msgstr "01, 02, ..., 31"

#: ../../library/datetime.rst:2354 ../../library/datetime.rst:2367
#: ../../library/datetime.rst:2370 ../../library/datetime.rst:2376
#: ../../library/datetime.rst:2379 ../../library/datetime.rst:2385
#: ../../library/datetime.rst:2403
msgid "\\(9)"
msgstr "\\(9)"

#: ../../library/datetime.rst:2357
msgid "``%b``"
msgstr "``%b``"

#: ../../library/datetime.rst:2357
msgid "Month as locale's abbreviated name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2362
msgid "``%B``"
msgstr "``%B``"

#: ../../library/datetime.rst:2362
msgid "Month as locale's full name."
msgstr ""

#: ../../library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2367
msgid "``%m``"
msgstr "``%m``"

#: ../../library/datetime.rst:2367
msgid "Month as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2367 ../../library/datetime.rst:2379
msgid "01, 02, ..., 12"
msgstr "01, 02, ..., 12"

#: ../../library/datetime.rst:2370
msgid "``%y``"
msgstr "``%y``"

#: ../../library/datetime.rst:2370
msgid "Year without century as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2370
msgid "00, 01, ..., 99"
msgstr "00, 01, ..., 99"

#: ../../library/datetime.rst:2373
msgid "``%Y``"
msgstr "``%Y``"

#: ../../library/datetime.rst:2373
msgid "Year with century as a decimal number."
msgstr ""

#: ../../library/datetime.rst:2373 ../../library/datetime.rst:2443
msgid "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"
msgstr "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"

#: ../../library/datetime.rst:2376
msgid "``%H``"
msgstr "``%H``"

#: ../../library/datetime.rst:2376
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2376
msgid "00, 01, ..., 23"
msgstr "00, 01, ..., 23"

#: ../../library/datetime.rst:2379
msgid "``%I``"
msgstr "``%I``"

#: ../../library/datetime.rst:2379
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2382
msgid "``%p``"
msgstr "``%p``"

#: ../../library/datetime.rst:2382
msgid "Locale's equivalent of either AM or PM."
msgstr ""

#: ../../library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr "AM, PM (en_US);"

#: ../../library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr "am, pm (de_DE)"

#: ../../library/datetime.rst:2382
msgid "\\(1), \\(3)"
msgstr "\\(1), \\(3)"

#: ../../library/datetime.rst:2385
msgid "``%M``"
msgstr "``%M``"

#: ../../library/datetime.rst:2385
msgid "Minute as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2385 ../../library/datetime.rst:2388
msgid "00, 01, ..., 59"
msgstr "00, 01, ..., 59"

#: ../../library/datetime.rst:2388
msgid "``%S``"
msgstr "``%S``"

#: ../../library/datetime.rst:2388
msgid "Second as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2388
msgid "\\(4), \\(9)"
msgstr "\\(4), \\(9)"

#: ../../library/datetime.rst:2391
msgid "``%f``"
msgstr "``%f``"

#: ../../library/datetime.rst:2391
msgid "Microsecond as a decimal number, zero-padded to 6 digits."
msgstr ""

#: ../../library/datetime.rst:2391
msgid "000000, 000001, ..., 999999"
msgstr "000000, 000001, ..., 999999"

#: ../../library/datetime.rst:2391
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/datetime.rst:2395 ../../library/datetime.rst:2556
msgid "``%z``"
msgstr "``%z``"

#: ../../library/datetime.rst:2395
msgid ""
"UTC offset in the form ``±HHMM[SS[.ffffff]]`` (empty string if the object is "
"naive)."
msgstr ""

#: ../../library/datetime.rst:2395
msgid "(empty), +0000, -0400, +1030, +063415, -030712.345216"
msgstr ""

#: ../../library/datetime.rst:2395 ../../library/datetime.rst:2400
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/datetime.rst:2400 ../../library/datetime.rst:2580
msgid "``%Z``"
msgstr "``%Z``"

#: ../../library/datetime.rst:2400
msgid "Time zone name (empty string if the object is naive)."
msgstr ""

#: ../../library/datetime.rst:2400
msgid "(empty), UTC, GMT"
msgstr ""

#: ../../library/datetime.rst:2403
msgid "``%j``"
msgstr "``%j``"

#: ../../library/datetime.rst:2403
msgid "Day of the year as a zero-padded decimal number."
msgstr ""

#: ../../library/datetime.rst:2403
msgid "001, 002, ..., 366"
msgstr "001, 002, ..., 366"

#: ../../library/datetime.rst:2406
msgid "``%U``"
msgstr "``%U``"

#: ../../library/datetime.rst:2406
msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero-"
"padded decimal number. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""

#: ../../library/datetime.rst:2406 ../../library/datetime.rst:2414
msgid "00, 01, ..., 53"
msgstr "00, 01, ..., 53"

#: ../../library/datetime.rst:2406 ../../library/datetime.rst:2414
msgid "\\(7), \\(9)"
msgstr "\\(7), \\(9)"

#: ../../library/datetime.rst:2414
msgid "``%W``"
msgstr "``%W``"

#: ../../library/datetime.rst:2414
msgid ""
"Week number of the year (Monday as the first day of the week) as a zero-"
"padded decimal number. All days in a new year preceding the first Monday are "
"considered to be in week 0."
msgstr ""

#: ../../library/datetime.rst:2422
msgid "``%c``"
msgstr "``%c``"

#: ../../library/datetime.rst:2422
msgid "Locale's appropriate date and time representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2427
msgid "``%x``"
msgstr "``%x``"

#: ../../library/datetime.rst:2427
msgid "Locale's appropriate date representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2431
msgid "``%X``"
msgstr "``%X``"

#: ../../library/datetime.rst:2431
msgid "Locale's appropriate time representation."
msgstr ""

#: ../../library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr ""

#: ../../library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr ""

#: ../../library/datetime.rst:2434
msgid "``%%``"
msgstr "``%%``"

#: ../../library/datetime.rst:2434
msgid "A literal ``'%'`` character."
msgstr ""

#: ../../library/datetime.rst:2434
msgid "%"
msgstr "%"

#: ../../library/datetime.rst:2437
msgid ""
"Several additional directives not required by the C89 standard are included "
"for convenience. These parameters all correspond to ISO 8601 date values."
msgstr ""

#: ../../library/datetime.rst:2443
msgid "``%G``"
msgstr "``%G``"

#: ../../library/datetime.rst:2443
msgid ""
"ISO 8601 year with century representing the year that contains the greater "
"part of the ISO week (``%V``)."
msgstr ""

#: ../../library/datetime.rst:2443
msgid "\\(8)"
msgstr "\\(8)"

#: ../../library/datetime.rst:2448
msgid "``%u``"
msgstr "``%u``"

#: ../../library/datetime.rst:2448
msgid "ISO 8601 weekday as a decimal number where 1 is Monday."
msgstr ""

#: ../../library/datetime.rst:2448
msgid "1, 2, ..., 7"
msgstr "1, 2, ..., 7"

#: ../../library/datetime.rst:2451
msgid "``%V``"
msgstr "``%V``"

#: ../../library/datetime.rst:2451
msgid ""
"ISO 8601 week as a decimal number with Monday as the first day of the week. "
"Week 01 is the week containing Jan 4."
msgstr ""

#: ../../library/datetime.rst:2451
msgid "01, 02, ..., 53"
msgstr "01, 02, ..., 53"

#: ../../library/datetime.rst:2451
msgid "\\(8), \\(9)"
msgstr "\\(8), \\(9)"

#: ../../library/datetime.rst:2458
msgid ""
"These may not be available on all platforms when used with the :meth:"
"`strftime` method. The ISO 8601 year and ISO 8601 week directives are not "
"interchangeable with the year and week number directives above. Calling :"
"meth:`strptime` with incomplete or ambiguous ISO 8601 directives will raise "
"a :exc:`ValueError`."
msgstr ""

#: ../../library/datetime.rst:2463
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common. To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` "
"documentation. There are also differences between platforms in handling of "
"unsupported format specifiers."
msgstr ""

#: ../../library/datetime.rst:2469
msgid "``%G``, ``%u`` and ``%V`` were added."
msgstr "新增 ``%G``\\ 、\\ ``%u`` 與 ``%V``\\ 。"

#: ../../library/datetime.rst:2473
msgid "Technical Detail"
msgstr ""

#: ../../library/datetime.rst:2475
msgid ""
"Broadly speaking, ``d.strftime(fmt)`` acts like the :mod:`time` module's "
"``time.strftime(fmt, d.timetuple())`` although not all objects support a :"
"meth:`timetuple` method."
msgstr ""

#: ../../library/datetime.rst:2479
msgid ""
"For the :meth:`datetime.strptime` class method, the default value is "
"``1900-01-01T00:00:00.000``: any components not specified in the format "
"string will be pulled from the default value. [#]_"
msgstr ""

#: ../../library/datetime.rst:2483
msgid "Using ``datetime.strptime(date_string, format)`` is equivalent to::"
msgstr ""

#: ../../library/datetime.rst:2487
msgid ""
"except when the format includes sub-second components or timezone offset "
"information, which are supported in ``datetime.strptime`` but are discarded "
"by ``time.strptime``."
msgstr ""

#: ../../library/datetime.rst:2491
msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should "
"not be used, as :class:`time` objects have no such values. If they're used "
"anyway, ``1900`` is substituted for the year, and ``1`` for the month and "
"day."
msgstr ""

#: ../../library/datetime.rst:2495
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values. If they're used anyway, ``0`` is substituted for them."
msgstr ""

#: ../../library/datetime.rst:2499
msgid ""
"For the same reason, handling of format strings containing Unicode code "
"points that can't be represented in the charset of the current locale is "
"also platform-dependent. On some platforms such code points are preserved "
"intact in the output, while on others ``strftime`` may raise :exc:"
"`UnicodeError` or return an empty string instead."
msgstr ""

#: ../../library/datetime.rst:2508
msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain non-ASCII characters."
msgstr ""

#: ../../library/datetime.rst:2514
msgid ""
"The :meth:`strptime` method can parse years in the full [1, 9999] range, but "
"years < 1000 must be zero-filled to 4-digit width."
msgstr ""

#: ../../library/datetime.rst:2517
msgid ""
"In previous versions, :meth:`strftime` method was restricted to years >= "
"1900."
msgstr ""

#: ../../library/datetime.rst:2521
msgid ""
"In version 3.2, :meth:`strftime` method was restricted to years >= 1000."
msgstr ""

#: ../../library/datetime.rst:2526
msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""

#: ../../library/datetime.rst:2530
msgid ""
"Unlike the :mod:`time` module, the :mod:`datetime` module does not support "
"leap seconds."
msgstr ""

#: ../../library/datetime.rst:2534
msgid ""
"When used with the :meth:`strptime` method, the ``%f`` directive accepts "
"from one to six digits and zero pads on the right. ``%f`` is an extension to "
"the set of format characters in the C standard (but implemented separately "
"in datetime objects, and therefore always available)."
msgstr ""

#: ../../library/datetime.rst:2541
msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty "
"strings."
msgstr ""

#: ../../library/datetime.rst:2544
msgid "For an aware object:"
msgstr ""

#: ../../library/datetime.rst:2547
msgid ""
":meth:`utcoffset` is transformed into a string of the form ``±HHMM[SS[."
"ffffff]]``, where ``HH`` is a 2-digit string giving the number of UTC offset "
"hours, ``MM`` is a 2-digit string giving the number of UTC offset minutes, "
"``SS`` is a 2-digit string giving the number of UTC offset seconds and "
"``ffffff`` is a 6-digit string giving the number of UTC offset microseconds. "
"The ``ffffff`` part is omitted when the offset is a whole number of seconds "
"and both the ``ffffff`` and the ``SS`` part is omitted when the offset is a "
"whole number of minutes. For example, if :meth:`utcoffset` returns "
"``timedelta(hours=-3, minutes=-30)``, ``%z`` is replaced with the string "
"``'-0330'``."
msgstr ""

#: ../../library/datetime.rst:2561
msgid ""
"When the ``%z`` directive is provided to the  :meth:`strptime` method, the "
"UTC offsets can have a colon as a separator between hours, minutes and "
"seconds. For example, ``'+01:00:00'`` will be parsed as an offset of one "
"hour. In addition, providing ``'Z'`` is identical to ``'+00:00'``."
msgstr ""

#: ../../library/datetime.rst:2569
msgid ""
"In :meth:`strftime`, ``%Z`` is replaced by an empty string if :meth:`tzname` "
"returns ``None``; otherwise ``%Z`` is replaced by the returned value, which "
"must be a string."
msgstr ""

#: ../../library/datetime.rst:2573
msgid ":meth:`strptime` only accepts certain values for ``%Z``:"
msgstr ""

#: ../../library/datetime.rst:2575
msgid "any value in ``time.tzname`` for your machine's locale"
msgstr ""

#: ../../library/datetime.rst:2576
msgid "the hard-coded values ``UTC`` and ``GMT``"
msgstr ""

#: ../../library/datetime.rst:2578
msgid ""
"So someone living in Japan may have ``JST``, ``UTC``, and ``GMT`` as valid "
"values, but probably not ``EST``. It will raise ``ValueError`` for invalid "
"values."
msgstr ""

#: ../../library/datetime.rst:2582
msgid ""
"When the ``%z`` directive is provided to the :meth:`strptime` method, an "
"aware :class:`.datetime` object will be produced. The ``tzinfo`` of the "
"result will be set to a :class:`timezone` instance."
msgstr ""

#: ../../library/datetime.rst:2588
msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the calendar year (``%Y``) are "
"specified."
msgstr ""

#: ../../library/datetime.rst:2593
msgid ""
"Similar to ``%U`` and ``%W``, ``%V`` is only used in calculations when the "
"day of the week and the ISO year (``%G``) are specified in a :meth:"
"`strptime` format string. Also note that ``%G`` and ``%Y`` are not "
"interchangeable."
msgstr ""

#: ../../library/datetime.rst:2599
msgid ""
"When used with the :meth:`strptime` method, the leading zero is optional "
"for  formats ``%d``, ``%m``, ``%H``, ``%I``, ``%M``, ``%S``, ``%j``, ``%U``, "
"``%W``, and ``%V``. Format ``%y`` does require a leading zero."
msgstr ""

#: ../../library/datetime.rst:2604
msgid "Footnotes"
msgstr "註解"

#: ../../library/datetime.rst:2605
msgid "If, that is, we ignore the effects of Relativity"
msgstr ""

#: ../../library/datetime.rst:2607
msgid ""
"This matches the definition of the \"proleptic Gregorian\" calendar in "
"Dershowitz and Reingold's book *Calendrical Calculations*, where it's the "
"base calendar for all computations. See the book for algorithms for "
"converting between proleptic Gregorian ordinals and many other calendar "
"systems."
msgstr ""

#: ../../library/datetime.rst:2613
msgid ""
"See R. H. van Gent's `guide to the mathematics of the ISO 8601 calendar "
"<https://web.archive.org/web/20220531051136/https://webspace.science.uu.nl/"
"~gent0113/calendar/isocalendar.htm>`_ for a good explanation."
msgstr ""

#: ../../library/datetime.rst:2617
msgid ""
"Passing ``datetime.strptime('Feb 29', '%b %d')`` will fail since ``1900`` is "
"not a leap year."
msgstr ""

#: ../../library/datetime.rst:2289
msgid "% (percent)"
msgstr "% （百分號）"

#: ../../library/datetime.rst:2289
msgid "datetime format"
msgstr "datetime format（日期時間格式）"
