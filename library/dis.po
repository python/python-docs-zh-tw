# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# splasky Chang <henrychung860326@gmail.com>, 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 00:03+0000\n"
"PO-Revision-Date: 2018-07-27 16:55+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 2.1.1\n"

#: ../../library/dis.rst:2
msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ":mod:`dis` --- Python bytecode的反組譯器"

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**原始碼：**\\ :source:`Lib/dis.py`"

#: ../../library/dis.rst:17
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and "
"the interpreter."
msgstr ""
":mod:`dis` 模組支援反組譯分析 CPython :term:`bytecode`。CPython bytecode 作為"
"輸入的模組被定義於 :file:`Include/opcode.h` 並且被編譯器和直譯器所使用。"

#: ../../library/dis.rst:24
msgid ""
"Bytecode is an implementation detail of the CPython interpreter.  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""

#: ../../library/dis.rst:29
msgid ""
"Use 2 bytes for each instruction. Previously the number of bytes varied by "
"instruction."
msgstr ""

#: ../../library/dis.rst:33
msgid ""
"The argument of jump, exception handling and loop instructions is now the "
"instruction offset rather than the byte offset."
msgstr ""

#: ../../library/dis.rst:37
msgid ""
"Some instructions are accompanied by one or more inline cache entries, which "
"take the form of :opcode:`CACHE` instructions. These instructions are hidden "
"by default, but can be shown by passing ``show_caches=True`` to any :mod:"
"`dis` utility. Furthermore, the interpreter now adapts the bytecode to "
"specialize it for different runtime conditions. The adaptive bytecode can be "
"shown by passing ``adaptive=True``."
msgstr ""

#: ../../library/dis.rst:46
msgid "Example: Given the function :func:`!myfunc`::"
msgstr ""

#: ../../library/dis.rst:51
msgid ""
"the following command can be used to display the disassembly of :func:`!"
"myfunc`:"
msgstr ""

#: ../../library/dis.rst:64
msgid "(The \"2\" is a line number)."
msgstr ""

#: ../../library/dis.rst:69
msgid "Command-line interface"
msgstr ""

#: ../../library/dis.rst:71
msgid "The :mod:`dis` module can be invoked as a script from the command line:"
msgstr ""

#: ../../library/dis.rst:77
msgid "The following options are accepted:"
msgstr ""

#: ../../library/dis.rst:83
msgid "Display usage and exit."
msgstr ""

#: ../../library/dis.rst:85
msgid ""
"If :file:`infile` is specified, its disassembled code will be written to "
"stdout. Otherwise, disassembly is performed on compiled source code recieved "
"from stdin."
msgstr ""

#: ../../library/dis.rst:89
msgid "Bytecode analysis"
msgstr ""

#: ../../library/dis.rst:93
msgid ""
"The bytecode analysis API allows pieces of Python code to be wrapped in a :"
"class:`Bytecode` object that provides easy access to details of the compiled "
"code."
msgstr ""

#: ../../library/dis.rst:100
msgid ""
"Analyse the bytecode corresponding to a function, generator, asynchronous "
"generator, coroutine, method, string of source code, or a code object (as "
"returned by :func:`compile`)."
msgstr ""

#: ../../library/dis.rst:104
msgid ""
"This is a convenience wrapper around many of the functions listed below, "
"most notably :func:`get_instructions`, as iterating over a :class:`Bytecode` "
"instance yields the bytecode operations as :class:`Instruction` instances."
msgstr ""

#: ../../library/dis.rst:108 ../../library/dis.rst:296
msgid ""
"If *first_line* is not ``None``, it indicates the line number that should be "
"reported for the first source line in the disassembled code.  Otherwise, the "
"source line information (if any) is taken directly from the disassembled "
"code object."
msgstr ""

#: ../../library/dis.rst:113
msgid ""
"If *current_offset* is not ``None``, it refers to an instruction offset in "
"the disassembled code. Setting this means :meth:`.dis` will display a "
"\"current instruction\" marker against the specified opcode."
msgstr ""

#: ../../library/dis.rst:117
msgid ""
"If *show_caches* is ``True``, :meth:`.dis` will display inline cache entries "
"used by the interpreter to specialize the bytecode."
msgstr ""

#: ../../library/dis.rst:120
msgid ""
"If *adaptive* is ``True``, :meth:`.dis` will display specialized bytecode "
"that may be different from the original bytecode."
msgstr ""

#: ../../library/dis.rst:125
msgid ""
"Construct a :class:`Bytecode` instance from the given traceback, setting "
"*current_offset* to the instruction responsible for the exception."
msgstr ""

#: ../../library/dis.rst:130
msgid "The compiled code object."
msgstr ""

#: ../../library/dis.rst:134
msgid "The first source line of the code object (if available)"
msgstr ""

#: ../../library/dis.rst:138
msgid ""
"Return a formatted view of the bytecode operations (the same as printed by :"
"func:`dis.dis`, but returned as a multi-line string)."
msgstr ""

#: ../../library/dis.rst:143
msgid ""
"Return a formatted multi-line string with detailed information about the "
"code object, like :func:`code_info`."
msgstr ""

#: ../../library/dis.rst:146 ../../library/dis.rst:186
#: ../../library/dis.rst:238
msgid "This can now handle coroutine and asynchronous generator objects."
msgstr ""

#: ../../library/dis.rst:149 ../../library/dis.rst:241
#: ../../library/dis.rst:257 ../../library/dis.rst:284
#: ../../library/dis.rst:305
msgid "Added the *show_caches* and *adaptive* parameters."
msgstr "新增 *show_caches* 與 *adaptive* 參數。"

#: ../../library/dis.rst:152
msgid "Example:"
msgstr "範例："

#: ../../library/dis.rst:168
msgid "Analysis functions"
msgstr ""

#: ../../library/dis.rst:170
msgid ""
"The :mod:`dis` module also defines the following analysis functions that "
"convert the input directly to the desired output. They can be useful if only "
"a single operation is being performed, so the intermediate analysis object "
"isn't useful:"
msgstr ""

#: ../../library/dis.rst:176
msgid ""
"Return a formatted multi-line string with detailed code object information "
"for the supplied function, generator, asynchronous generator, coroutine, "
"method, source code string or code object."
msgstr ""

#: ../../library/dis.rst:180
msgid ""
"Note that the exact contents of code info strings are highly implementation "
"dependent and they may change arbitrarily across Python VMs or Python "
"releases."
msgstr ""

#: ../../library/dis.rst:192
msgid ""
"Print detailed code object information for the supplied function, method, "
"source code string or code object to *file* (or ``sys.stdout`` if *file* is "
"not specified)."
msgstr ""

#: ../../library/dis.rst:196
msgid ""
"This is a convenient shorthand for ``print(code_info(x), file=file)``, "
"intended for interactive exploration at the interpreter prompt."
msgstr ""

#: ../../library/dis.rst:201 ../../library/dis.rst:232
#: ../../library/dis.rst:254 ../../library/dis.rst:281
msgid "Added *file* parameter."
msgstr "新增 *file* 參數。"

#: ../../library/dis.rst:207
msgid ""
"Disassemble the *x* object.  *x* can denote either a module, a class, a "
"method, a function, a generator, an asynchronous generator, a coroutine, a "
"code object, a string of source code or a byte sequence of raw bytecode. For "
"a module, it disassembles all functions. For a class, it disassembles all "
"methods (including class and static methods). For a code object or sequence "
"of raw bytecode, it prints one line per bytecode instruction. It also "
"recursively disassembles nested code objects. These can include generator "
"expressions, nested functions, the bodies of nested classes, and the code "
"objects used for :ref:`annotation scopes <annotation-scopes>`. Strings are "
"first compiled to code objects with the :func:`compile` built-in function "
"before being disassembled.  If no object is provided, this function "
"disassembles the last traceback."
msgstr ""

#: ../../library/dis.rst:220 ../../library/dis.rst:251
#: ../../library/dis.rst:278
msgid ""
"The disassembly is written as text to the supplied *file* argument if "
"provided and to ``sys.stdout`` otherwise."
msgstr ""

#: ../../library/dis.rst:223
msgid ""
"The maximal depth of recursion is limited by *depth* unless it is ``None``. "
"``depth=0`` means no recursion."
msgstr ""

#: ../../library/dis.rst:226
msgid ""
"If *show_caches* is ``True``, this function will display inline cache "
"entries used by the interpreter to specialize the bytecode."
msgstr ""

#: ../../library/dis.rst:229
msgid ""
"If *adaptive* is ``True``, this function will display specialized bytecode "
"that may be different from the original bytecode."
msgstr ""

#: ../../library/dis.rst:235
msgid "Implemented recursive disassembling and added *depth* parameter."
msgstr ""

#: ../../library/dis.rst:247
msgid ""
"Disassemble the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr ""

#: ../../library/dis.rst:264
msgid ""
"Disassemble a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr ""

#: ../../library/dis.rst:267
msgid "the line number, for the first instruction of each line"
msgstr ""

#: ../../library/dis.rst:268
msgid "the current instruction, indicated as ``-->``,"
msgstr ""

#: ../../library/dis.rst:269
msgid "a labelled instruction, indicated with ``>>``,"
msgstr ""

#: ../../library/dis.rst:270
msgid "the address of the instruction,"
msgstr ""

#: ../../library/dis.rst:271
msgid "the operation code name,"
msgstr ""

#: ../../library/dis.rst:272
msgid "operation parameters, and"
msgstr ""

#: ../../library/dis.rst:273
msgid "interpretation of the parameters in parentheses."
msgstr ""

#: ../../library/dis.rst:275
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr ""

#: ../../library/dis.rst:290
msgid ""
"Return an iterator over the instructions in the supplied function, method, "
"source code string or code object."
msgstr ""

#: ../../library/dis.rst:293
msgid ""
"The iterator generates a series of :class:`Instruction` named tuples giving "
"the details of each operation in the supplied code."
msgstr ""

#: ../../library/dis.rst:301
msgid ""
"The *show_caches* and *adaptive* parameters work as they do in :func:`dis`."
msgstr ""

#: ../../library/dis.rst:311
msgid ""
"This generator function uses the ``co_lines`` method of the code object "
"*code* to find the offsets which are starts of lines in the source code.  "
"They are generated as ``(offset, lineno)`` pairs."
msgstr ""

#: ../../library/dis.rst:315
msgid "Line numbers can be decreasing. Before, they were always increasing."
msgstr ""

#: ../../library/dis.rst:318
msgid ""
"The :pep:`626` ``co_lines`` method is used instead of the ``co_firstlineno`` "
"and ``co_lnotab`` attributes of the code object."
msgstr ""

#: ../../library/dis.rst:325
msgid ""
"Detect all offsets in the raw compiled bytecode string *code* which are jump "
"targets, and return a list of these offsets."
msgstr ""

#: ../../library/dis.rst:331
msgid "Compute the stack effect of *opcode* with argument *oparg*."
msgstr ""

#: ../../library/dis.rst:333
msgid ""
"If the code has a jump target and *jump* is ``True``, :func:`~stack_effect` "
"will return the stack effect of jumping.  If *jump* is ``False``, it will "
"return the stack effect of not jumping. And if *jump* is ``None`` (default), "
"it will return the maximal stack effect of both cases."
msgstr ""

#: ../../library/dis.rst:340
msgid "Added *jump* parameter."
msgstr "新增 *jump* 參數。"

#: ../../library/dis.rst:347
msgid "Python Bytecode Instructions"
msgstr ""

#: ../../library/dis.rst:349
msgid ""
"The :func:`get_instructions` function and :class:`Bytecode` class provide "
"details of bytecode instructions as :class:`Instruction` instances:"
msgstr ""

#: ../../library/dis.rst:354
msgid "Details for a bytecode operation"
msgstr ""

#: ../../library/dis.rst:358
msgid ""
"numeric code for operation, corresponding to the opcode values listed below "
"and the bytecode values in the :ref:`opcode_collections`."
msgstr ""

#: ../../library/dis.rst:364
msgid "human readable name for operation"
msgstr ""

#: ../../library/dis.rst:369
msgid "numeric argument to operation (if any), otherwise ``None``"
msgstr ""

#: ../../library/dis.rst:374
msgid "resolved arg value (if any), otherwise ``None``"
msgstr ""

#: ../../library/dis.rst:379
msgid ""
"human readable description of operation argument (if any), otherwise an "
"empty string."
msgstr ""

#: ../../library/dis.rst:385
msgid "start index of operation within bytecode sequence"
msgstr ""

#: ../../library/dis.rst:390
msgid "line started by this opcode (if any), otherwise ``None``"
msgstr ""

#: ../../library/dis.rst:395
msgid "``True`` if other code jumps to here, otherwise ``False``"
msgstr ""

#: ../../library/dis.rst:400
msgid ""
":class:`dis.Positions` object holding the start and end locations that are "
"covered by this instruction."
msgstr ""

#: ../../library/dis.rst:407
msgid "Field ``positions`` is added."
msgstr ""

#: ../../library/dis.rst:412
msgid ""
"In case the information is not available, some fields might be ``None``."
msgstr ""

#: ../../library/dis.rst:422
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr ""

#: ../../library/dis.rst:425
msgid "**General instructions**"
msgstr ""

#: ../../library/dis.rst:427
msgid ""
"In the following, We will refer to the interpreter stack as ``STACK`` and "
"describe operations on it as if it was a Python list. The top of the stack "
"corresponds to ``STACK[-1]`` in this language."
msgstr ""

#: ../../library/dis.rst:433
msgid ""
"Do nothing code.  Used as a placeholder by the bytecode optimizer, and to "
"generate line tracing events."
msgstr ""

#: ../../library/dis.rst:439
msgid "Removes the top-of-stack item::"
msgstr ""

#: ../../library/dis.rst:446
msgid ""
"Removes the top two values from the stack. Equivalent to ``POP_TOP``; "
"``POP_TOP``. Used to clean up at the end of loops, hence the name."
msgstr ""

#: ../../library/dis.rst:455
msgid ""
"Push the i-th item to the top of the stack without removing it from its "
"original location::"
msgstr ""

#: ../../library/dis.rst:466
msgid "Swap the top of the stack with the i-th element::"
msgstr ""

#: ../../library/dis.rst:475
msgid ""
"Rather than being an actual instruction, this opcode is used to mark extra "
"space for the interpreter to cache useful data directly in the bytecode "
"itself. It is automatically hidden by all ``dis`` utilities, but can be "
"viewed with ``show_caches=True``."
msgstr ""

#: ../../library/dis.rst:480
msgid ""
"Logically, this space is part of the preceding instruction. Many opcodes "
"expect to be followed by an exact number of caches, and will instruct the "
"interpreter to skip over them at runtime."
msgstr ""

#: ../../library/dis.rst:484
msgid ""
"Populated caches can look like arbitrary instructions, so great care should "
"be taken when reading or modifying raw, adaptive bytecode containing "
"quickened data."
msgstr ""

#: ../../library/dis.rst:491
msgid "**Unary operations**"
msgstr ""

#: ../../library/dis.rst:493
msgid ""
"Unary operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr ""

#: ../../library/dis.rst:499
msgid "Implements ``STACK[-1] = -STACK[-1]``."
msgstr ""

#: ../../library/dis.rst:504
msgid "Implements ``STACK[-1] = not STACK[-1]``."
msgstr ""

#: ../../library/dis.rst:509
msgid "Implements ``STACK[-1] = ~STACK[-1]``."
msgstr ""

#: ../../library/dis.rst:514
msgid "Implements ``STACK[-1] = iter(STACK[-1])``."
msgstr ""

#: ../../library/dis.rst:519
msgid ""
"If ``STACK[-1]`` is a :term:`generator iterator` or :term:`coroutine` object "
"it is left as is.  Otherwise, implements ``STACK[-1] = iter(STACK[-1])``."
msgstr ""

#: ../../library/dis.rst:525
msgid "**Binary and in-place operations**"
msgstr ""

#: ../../library/dis.rst:527
msgid ""
"Binary operations remove the top two items from the stack (``STACK[-1]`` and "
"``STACK[-2]``). They perform the operation, then put the result back on the "
"stack."
msgstr ""

#: ../../library/dis.rst:530
msgid ""
"In-place operations are like binary operations, but the operation is done in-"
"place when ``STACK[-2]`` supports it, and the resulting ``STACK[-1]`` may be "
"(but does not have to be) the original ``STACK[-2]``."
msgstr ""

#: ../../library/dis.rst:537
msgid ""
"Implements the binary and in-place operators (depending on the value of "
"*op*)::"
msgstr ""

#: ../../library/dis.rst:549 ../../library/dis.rst:558
#: ../../library/dis.rst:568 ../../library/dis.rst:576
#: ../../library/dis.rst:588 ../../library/dis.rst:676
#: ../../library/dis.rst:686 ../../library/dis.rst:696
#: ../../library/dis.rst:916 ../../library/dis.rst:927
#: ../../library/dis.rst:1027 ../../library/dis.rst:1039
#: ../../library/dis.rst:1051
msgid "Implements::"
msgstr ""

#: ../../library/dis.rst:599
msgid "**Coroutine opcodes**"
msgstr ""

#: ../../library/dis.rst:603
msgid ""
"Implements ``STACK[-1] = get_awaitable(STACK[-1])``, where "
"``get_awaitable(o)`` returns ``o`` if ``o`` is a coroutine object or a "
"generator object with the :data:`~inspect.CO_ITERABLE_COROUTINE` flag, or "
"resolves ``o.__await__``."
msgstr ""

#: ../../library/dis.rst:608
msgid ""
"If the ``where`` operand is nonzero, it indicates where the instruction "
"occurs:"
msgstr ""

#: ../../library/dis.rst:611
msgid "``1``: After a call to ``__aenter__``"
msgstr ""

#: ../../library/dis.rst:612
msgid "``2``: After a call to ``__aexit__``"
msgstr ""

#: ../../library/dis.rst:616
msgid "Previously, this instruction did not have an oparg."
msgstr ""

#: ../../library/dis.rst:622
msgid "Implements ``STACK[-1] = STACK[-1].__aiter__()``."
msgstr ""

#: ../../library/dis.rst:625
msgid "Returning awaitable objects from ``__aiter__`` is no longer supported."
msgstr ""

#: ../../library/dis.rst:632
msgid ""
"Implement ``STACK.append(get_awaitable(STACK[-1].__anext__()))`` to the "
"stack. See ``GET_AWAITABLE`` for details about ``get_awaitable``."
msgstr ""

#: ../../library/dis.rst:640
msgid ""
"Terminates an :keyword:`async for` loop.  Handles an exception raised when "
"awaiting a next item. The stack contains the async iterable in ``STACK[-2]`` "
"and the raised exception in ``STACK[-1]``. Both are popped. If the exception "
"is not :exc:`StopAsyncIteration`, it is re-raised."
msgstr ""

#: ../../library/dis.rst:647 ../../library/dis.rst:752
#: ../../library/dis.rst:763
msgid ""
"Exception representation on the stack now consist of one, not three, items."
msgstr ""

#: ../../library/dis.rst:653
msgid ""
"Handles an exception raised during a :meth:`~generator.throw` or :meth:"
"`~generator.close` call through the current frame.  If ``STACK[-1]`` is an "
"instance of :exc:`StopIteration`, pop three values from the stack and push "
"its ``value`` member.  Otherwise, re-raise ``STACK[-1]``."
msgstr ""

#: ../../library/dis.rst:663
msgid ""
"Resolves ``__aenter__`` and ``__aexit__`` from ``STACK[-1]``. Pushes "
"``__aexit__`` and result of ``__aenter__()`` to the stack::"
msgstr ""

#: ../../library/dis.rst:672
msgid "**Miscellaneous opcodes**"
msgstr ""

#: ../../library/dis.rst:681
msgid "Used to implement set comprehensions."
msgstr ""

#: ../../library/dis.rst:691
msgid "Used to implement list comprehensions."
msgstr ""

#: ../../library/dis.rst:702
msgid "Used to implement dict comprehensions."
msgstr ""

#: ../../library/dis.rst:705
msgid ""
"Map value is ``STACK[-1]`` and map key is ``STACK[-2]``. Before, those were "
"reversed."
msgstr ""

#: ../../library/dis.rst:709
msgid ""
"For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and :opcode:"
"`MAP_ADD` instructions, while the added value or key/value pair is popped "
"off, the container object remains on the stack so that it is available for "
"further iterations of the loop."
msgstr ""

#: ../../library/dis.rst:717
msgid "Returns with ``STACK[-1]`` to the caller of the function."
msgstr ""

#: ../../library/dis.rst:722
msgid "Returns with ``co_consts[consti]`` to the caller of the function."
msgstr ""

#: ../../library/dis.rst:729
msgid "Yields ``STACK.pop()`` from a :term:`generator`."
msgstr ""

#: ../../library/dis.rst:731
msgid "oparg set to be the stack depth."
msgstr ""

#: ../../library/dis.rst:734
msgid ""
"oparg set to be the exception block depth, for efficient closing of "
"generators."
msgstr ""

#: ../../library/dis.rst:740
msgid ""
"Checks whether ``__annotations__`` is defined in ``locals()``, if not it is "
"set up to an empty ``dict``. This opcode is only emitted if a class or "
"module body contains :term:`variable annotations <variable annotation>` "
"statically."
msgstr ""

#: ../../library/dis.rst:750
msgid ""
"Pops a value from the stack, which is used to restore the exception state."
msgstr ""

#: ../../library/dis.rst:757
msgid ""
"Re-raises the exception currently on top of the stack. If oparg is non-zero, "
"pops an additional value from the stack which is used to set ``f_lasti`` of "
"the current frame."
msgstr ""

#: ../../library/dis.rst:768
msgid ""
"Pops a value from the stack. Pushes the current exception to the top of the "
"stack. Pushes the value originally popped back to the stack. Used in "
"exception handlers."
msgstr ""

#: ../../library/dis.rst:776
msgid ""
"Performs exception matching for ``except``. Tests whether the ``STACK[-2]`` "
"is an exception matching ``STACK[-1]``. Pops ``STACK[-1]`` and pushes the "
"boolean result of the test."
msgstr ""

#: ../../library/dis.rst:784
msgid ""
"Performs exception matching for ``except*``. Applies ``split(STACK[-1])`` on "
"the exception group representing ``STACK[-2]``."
msgstr ""

#: ../../library/dis.rst:787
msgid ""
"In case of a match, pops two items from the stack and pushes the non-"
"matching subgroup (``None`` in case of full match) followed by the matching "
"subgroup. When there is no match, pops one item (the match type) and pushes "
"``None``."
msgstr ""

#: ../../library/dis.rst:796
msgid ""
"Calls the function in position 4 on the stack with arguments (type, val, tb) "
"representing the exception at the top of the stack. Used to implement the "
"call ``context_manager.__exit__(*exc_info())`` when an exception has "
"occurred in a :keyword:`with` statement."
msgstr ""

#: ../../library/dis.rst:803
msgid ""
"The ``__exit__`` function is in position 4 of the stack rather than 7. "
"Exception representation on the stack now consist of one, not three, items."
msgstr ""

#: ../../library/dis.rst:810
msgid ""
"Pushes :exc:`AssertionError` onto the stack.  Used by the :keyword:`assert` "
"statement."
msgstr ""

#: ../../library/dis.rst:818
msgid ""
"Pushes :func:`!builtins.__build_class__` onto the stack.  It is later called "
"to construct a class."
msgstr ""

#: ../../library/dis.rst:824
msgid ""
"This opcode performs several operations before a with block starts.  First, "
"it loads :meth:`~object.__exit__` from the context manager and pushes it "
"onto the stack for later use by :opcode:`WITH_EXCEPT_START`.  Then, :meth:"
"`~object.__enter__` is called. Finally, the result of calling the "
"``__enter__()`` method is pushed onto the stack."
msgstr ""

#: ../../library/dis.rst:835
msgid "Perform ``STACK.append(len(STACK[-1]))``."
msgstr ""

#: ../../library/dis.rst:842
msgid ""
"If ``STACK[-1]`` is an instance of :class:`collections.abc.Mapping` (or, "
"more technically: if it has the :c:macro:`Py_TPFLAGS_MAPPING` flag set in "
"its :c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""

#: ../../library/dis.rst:852
msgid ""
"If ``STACK[-1]`` is an instance of :class:`collections.abc.Sequence` and is "
"*not* an instance of :class:`str`/:class:`bytes`/:class:`bytearray` (or, "
"more technically: if it has the :c:macro:`Py_TPFLAGS_SEQUENCE` flag set in "
"its :c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""

#: ../../library/dis.rst:862
msgid ""
"``STACK[-1]`` is a tuple of mapping keys, and ``STACK[-2]`` is the match "
"subject. If ``STACK[-2]`` contains all of the keys in ``STACK[-1]``, push a :"
"class:`tuple` containing the corresponding values. Otherwise, push ``None``."
msgstr ""

#: ../../library/dis.rst:868 ../../library/dis.rst:1489
msgid ""
"Previously, this instruction also pushed a boolean value indicating success "
"(``True``) or failure (``False``)."
msgstr ""

#: ../../library/dis.rst:875
msgid ""
"Implements ``name = STACK.pop()``. *namei* is the index of *name* in the "
"attribute :attr:`!co_names` of the :ref:`code object <code-objects>`. The "
"compiler tries to use :opcode:`STORE_FAST` or :opcode:`STORE_GLOBAL` if "
"possible."
msgstr ""

#: ../../library/dis.rst:882
msgid ""
"Implements ``del name``, where *namei* is the index into :attr:`!co_names` "
"attribute of the :ref:`code object <code-objects>`."
msgstr ""

#: ../../library/dis.rst:888
msgid ""
"Unpacks ``STACK[-1]`` into *count* individual values, which are put onto the "
"stack right-to-left. Require there to be exactly *count* values.::"
msgstr ""

#: ../../library/dis.rst:897
msgid ""
"Implements assignment with a starred target: Unpacks an iterable in "
"``STACK[-1]`` into individual values, where the total number of values can "
"be smaller than the number of items in the iterable: one of the new values "
"will be a list of all leftover items."
msgstr ""

#: ../../library/dis.rst:902
msgid "The number of values before and after the list value is limited to 255."
msgstr ""

#: ../../library/dis.rst:904
msgid ""
"The number of values before the list value is encoded in the argument of the "
"opcode. The number of values after the list if any is encoded using an "
"``EXTENDED_ARG``. As a consequence, the argument can be seen as a two bytes "
"values where the low byte of *counts* is the number of values before the "
"list value, the high byte of *counts* the number of values after it."
msgstr ""

#: ../../library/dis.rst:910
msgid ""
"The extracted values are put onto the stack right-to-left, i.e. ``a, *b, c = "
"d`` will be stored after execution as ``STACK.extend((a, b, c))``."
msgstr ""

#: ../../library/dis.rst:922
msgid ""
"where *namei* is the index of name in :attr:`!co_names` of the :ref:`code "
"object <code-objects>`."
msgstr ""

#: ../../library/dis.rst:932
msgid ""
"where *namei* is the index of name into :attr:`!co_names` of the :ref:`code "
"object <code-objects>`."
msgstr ""

#: ../../library/dis.rst:938
msgid "Works as :opcode:`STORE_NAME`, but stores the name as a global."
msgstr ""

#: ../../library/dis.rst:943
msgid "Works as :opcode:`DELETE_NAME`, but deletes a global name."
msgstr ""

#: ../../library/dis.rst:948
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:953
msgid ""
"Pushes the value associated with ``co_names[namei]`` onto the stack. The "
"name is looked up within the locals, then the globals, then the builtins."
msgstr ""

#: ../../library/dis.rst:959
msgid ""
"Pushes a reference to the locals dictionary onto the stack.  This is used to "
"prepare namespace dictionaries for :opcode:`LOAD_FROM_DICT_OR_DEREF` and :"
"opcode:`LOAD_FROM_DICT_OR_GLOBALS`."
msgstr ""

#: ../../library/dis.rst:968
msgid ""
"Pops a mapping off the stack and looks up the value for ``co_names[namei]``. "
"If the name is not found there, looks it up in the globals and then the "
"builtins, similar to :opcode:`LOAD_GLOBAL`. This is used for loading global "
"variables in :ref:`annotation scopes <annotation-scopes>` within class "
"bodies."
msgstr ""

#: ../../library/dis.rst:979
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack.::"
msgstr ""

#: ../../library/dis.rst:989
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a list."
msgstr ""

#: ../../library/dis.rst:994
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a set."
msgstr ""

#: ../../library/dis.rst:999
msgid ""
"Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items so "
"that the dictionary holds *count* entries: ``{..., STACK[-4]: STACK[-3], "
"STACK[-2]: STACK[-1]}``."
msgstr ""

#: ../../library/dis.rst:1003
msgid ""
"The dictionary is created from stack items instead of creating an empty "
"dictionary pre-sized to hold *count* items."
msgstr ""

#: ../../library/dis.rst:1010
msgid ""
"The version of :opcode:`BUILD_MAP` specialized for constant keys. Pops the "
"top element on the stack which contains a tuple of keys, then starting from "
"``STACK[-2]``, pops *count* values to form values in the built dictionary."
msgstr ""

#: ../../library/dis.rst:1019
msgid ""
"Concatenates *count* strings from the stack and pushes the resulting string "
"onto the stack."
msgstr ""

#: ../../library/dis.rst:1032
msgid "Used to build lists."
msgstr ""

#: ../../library/dis.rst:1044
msgid "Used to build sets."
msgstr ""

#: ../../library/dis.rst:1056
msgid "Used to build dicts."
msgstr ""

#: ../../library/dis.rst:1063
msgid "Like :opcode:`DICT_UPDATE` but raises an exception for duplicate keys."
msgstr ""

#: ../../library/dis.rst:1070
msgid ""
"If the low bit of ``namei`` is not set, this replaces ``STACK[-1]`` with "
"``getattr(STACK[-1], co_names[namei>>1])``."
msgstr ""

#: ../../library/dis.rst:1073
msgid ""
"If the low bit of ``namei`` is set, this will attempt to load a method named "
"``co_names[namei>>1]`` from the ``STACK[-1]`` object. ``STACK[-1]`` is "
"popped. This bytecode distinguishes two cases: if ``STACK[-1]`` has a method "
"with the correct name, the bytecode pushes the unbound method and "
"``STACK[-1]``. ``STACK[-1]`` will be used as the first argument (``self``) "
"by :opcode:`CALL` when calling the unbound method. Otherwise, ``NULL`` and "
"the object returned by the attribute lookup are pushed."
msgstr ""

#: ../../library/dis.rst:1081
msgid ""
"If the low bit of ``namei`` is set, then a ``NULL`` or ``self`` is pushed to "
"the stack before the attribute or unbound method respectively."
msgstr ""

#: ../../library/dis.rst:1088
msgid ""
"This opcode implements :func:`super` (e.g. ``super().method()`` and "
"``super().attr``). It works the same as :opcode:`LOAD_ATTR`, except that "
"``namei`` is shifted left by 2 bits instead of 1, and instead of expecting a "
"single receiver on the stack, it expects three objects (from top of stack "
"down): ``self`` (the first argument to the current method), ``cls`` (the "
"class within which the current method was defined), and the global ``super``."
msgstr ""

#: ../../library/dis.rst:1095
msgid ""
"The low bit of ``namei`` signals to attempt a method load, as with :opcode:"
"`LOAD_ATTR`."
msgstr ""

#: ../../library/dis.rst:1098
msgid ""
"The second-low bit of ``namei``, if set, means that this was a two-argument "
"call to :func:`super` (unset means zero-argument)."
msgstr ""

#: ../../library/dis.rst:1106
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname]``."
msgstr ""

#: ../../library/dis.rst:1112
msgid "Performs ``is`` comparison, or ``is not`` if ``invert`` is 1."
msgstr ""

#: ../../library/dis.rst:1119
msgid "Performs ``in`` comparison, or ``not in`` if ``invert`` is 1."
msgstr ""

#: ../../library/dis.rst:1126
msgid ""
"Imports the module ``co_names[namei]``.  ``STACK[-1]`` and ``STACK[-2]`` are "
"popped and provide the *fromlist* and *level* arguments of :func:"
"`__import__`. The module object is pushed onto the stack.  The current "
"namespace is not affected: for a proper import statement, a subsequent :"
"opcode:`STORE_FAST` instruction modifies the namespace."
msgstr ""

#: ../../library/dis.rst:1134
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in "
"``STACK[-1]``. The resulting object is pushed onto the stack, to be "
"subsequently stored by a :opcode:`STORE_FAST` instruction."
msgstr ""

#: ../../library/dis.rst:1141
msgid "Increments bytecode counter by *delta*."
msgstr ""

#: ../../library/dis.rst:1146
msgid "Decrements bytecode counter by *delta*. Checks for interrupts."
msgstr ""

#: ../../library/dis.rst:1153
msgid "Decrements bytecode counter by *delta*. Does not check for interrupts."
msgstr ""

#: ../../library/dis.rst:1160
msgid ""
"If ``STACK[-1]`` is true, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr ""

#: ../../library/dis.rst:1163 ../../library/dis.rst:1176
msgid ""
"The oparg is now a relative delta rather than an absolute target. This "
"opcode is a pseudo-instruction, replaced in final bytecode by the directed "
"versions (forward/backward)."
msgstr ""

#: ../../library/dis.rst:1168 ../../library/dis.rst:1181
#: ../../library/dis.rst:1194 ../../library/dis.rst:1208
msgid "This is no longer a pseudo-instruction."
msgstr ""

#: ../../library/dis.rst:1173
msgid ""
"If ``STACK[-1]`` is false, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr ""

#: ../../library/dis.rst:1186
msgid ""
"If ``STACK[-1]`` is not ``None``, increments the bytecode counter by "
"*delta*. ``STACK[-1]`` is popped."
msgstr ""

#: ../../library/dis.rst:1189 ../../library/dis.rst:1203
msgid ""
"This opcode is a pseudo-instruction, replaced in final bytecode by the "
"directed versions (forward/backward)."
msgstr ""

#: ../../library/dis.rst:1200
msgid ""
"If ``STACK[-1]`` is ``None``, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr ""

#: ../../library/dis.rst:1213
msgid ""
"``STACK[-1]`` is an :term:`iterator`.  Call its :meth:`~iterator.__next__` "
"method. If this yields a new value, push it on the stack (leaving the "
"iterator below it).  If the iterator indicates it is exhausted then the byte "
"code counter is incremented by *delta*."
msgstr ""

#: ../../library/dis.rst:1218
msgid "Up until 3.11 the iterator was popped when it was exhausted."
msgstr ""

#: ../../library/dis.rst:1223
msgid "Loads the global named ``co_names[namei>>1]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:1225
msgid ""
"If the low bit of ``namei`` is set, then a ``NULL`` is pushed to the stack "
"before the global variable."
msgstr ""

#: ../../library/dis.rst:1231
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:1233
msgid ""
"This opcode is now only used in situations where the local variable is "
"guaranteed to be initialized. It cannot raise :exc:`UnboundLocalError`."
msgstr ""

#: ../../library/dis.rst:1239
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack, "
"raising an :exc:`UnboundLocalError` if the local variable has not been "
"initialized."
msgstr ""

#: ../../library/dis.rst:1247
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack (or "
"pushes ``NULL`` onto the stack if the local variable has not been "
"initialized) and sets ``co_varnames[var_num]`` to ``NULL``."
msgstr ""

#: ../../library/dis.rst:1255
msgid "Stores ``STACK.pop()`` into the local ``co_varnames[var_num]``."
msgstr ""

#: ../../library/dis.rst:1260
msgid "Deletes local ``co_varnames[var_num]``."
msgstr ""

#: ../../library/dis.rst:1265
msgid ""
"Creates a new cell in slot ``i``.  If that slot is nonempty then that value "
"is stored into the new cell."
msgstr ""

#: ../../library/dis.rst:1273
msgid ""
"Pushes a reference to the cell contained in slot ``i`` of the \"fast "
"locals\" storage.  The name of the variable is ``co_fastlocalnames[i]``."
msgstr ""

#: ../../library/dis.rst:1276
msgid ""
"Note that ``LOAD_CLOSURE`` is effectively an alias for ``LOAD_FAST``. It "
"exists to keep bytecode a little more readable."
msgstr ""

#: ../../library/dis.rst:1279 ../../library/dis.rst:1288
#: ../../library/dis.rst:1310 ../../library/dis.rst:1321
msgid "``i`` is no longer offset by the length of ``co_varnames``."
msgstr ""

#: ../../library/dis.rst:1285
msgid ""
"Loads the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr ""

#: ../../library/dis.rst:1294
msgid ""
"Pops a mapping off the stack and looks up the name associated with slot "
"``i`` of the \"fast locals\" storage in this mapping. If the name is not "
"found there, loads it from the cell contained in slot ``i``, similar to :"
"opcode:`LOAD_DEREF`. This is used for loading free variables in class bodies "
"(which previously used :opcode:`!LOAD_CLASSDEREF`) and in :ref:`annotation "
"scopes <annotation-scopes>` within class bodies."
msgstr ""

#: ../../library/dis.rst:1307
msgid ""
"Stores ``STACK.pop()`` into the cell contained in slot ``i`` of the \"fast "
"locals\" storage."
msgstr ""

#: ../../library/dis.rst:1316
msgid ""
"Empties the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Used by the :keyword:`del` statement."
msgstr ""

#: ../../library/dis.rst:1327
msgid ""
"Copies the ``n`` free variables from the closure into the frame. Removes the "
"need for special code on the caller's side when calling closures."
msgstr ""

#: ../../library/dis.rst:1336
msgid ""
"Raises an exception using one of the 3 forms of the ``raise`` statement, "
"depending on the value of *argc*:"
msgstr ""

#: ../../library/dis.rst:1339
msgid "0: ``raise`` (re-raise previous exception)"
msgstr ""

#: ../../library/dis.rst:1340
msgid ""
"1: ``raise STACK[-1]`` (raise exception instance or type at ``STACK[-1]``)"
msgstr ""

#: ../../library/dis.rst:1341
msgid ""
"2: ``raise STACK[-2] from STACK[-1]`` (raise exception instance or type at "
"``STACK[-2]`` with ``__cause__`` set to ``STACK[-1]``)"
msgstr ""

#: ../../library/dis.rst:1347
msgid ""
"Calls a callable object with the number of arguments specified by ``argc``, "
"including the named arguments specified by the preceding :opcode:`KW_NAMES`, "
"if any. On the stack are (in ascending order), either:"
msgstr ""

#: ../../library/dis.rst:1352
msgid "NULL"
msgstr ""

#: ../../library/dis.rst:1353 ../../library/dis.rst:1359
msgid "The callable"
msgstr ""

#: ../../library/dis.rst:1354
msgid "The positional arguments"
msgstr ""

#: ../../library/dis.rst:1355 ../../library/dis.rst:1362
msgid "The named arguments"
msgstr ""

#: ../../library/dis.rst:1357
msgid "or:"
msgstr "或："

#: ../../library/dis.rst:1360
msgid "``self``"
msgstr "``self``"

#: ../../library/dis.rst:1361
msgid "The remaining positional arguments"
msgstr ""

#: ../../library/dis.rst:1364
msgid ""
"``argc`` is the total of the positional and named arguments, excluding "
"``self`` when a ``NULL`` is not present."
msgstr ""

#: ../../library/dis.rst:1367
msgid ""
"``CALL`` pops all arguments and the callable object off the stack, calls the "
"callable object with those arguments, and pushes the return value returned "
"by the callable object."
msgstr ""

#: ../../library/dis.rst:1376
msgid ""
"Calls a callable object with variable set of positional and keyword "
"arguments.  If the lowest bit of *flags* is set, the top of the stack "
"contains a mapping object containing additional keyword arguments. Before "
"the callable is called, the mapping object and iterable object are each "
"\"unpacked\" and their contents passed in as keyword and positional "
"arguments respectively. ``CALL_FUNCTION_EX`` pops all arguments and the "
"callable object off the stack, calls the callable object with those "
"arguments, and pushes the return value returned by the callable object."
msgstr ""

#: ../../library/dis.rst:1391
msgid ""
"Pushes a ``NULL`` to the stack. Used in the call sequence to match the "
"``NULL`` pushed by :opcode:`LOAD_METHOD` for non-method calls."
msgstr ""

#: ../../library/dis.rst:1400
msgid ""
"Prefixes :opcode:`CALL`. Stores a reference to ``co_consts[consti]`` into an "
"internal variable for use by :opcode:`CALL`. ``co_consts[consti]`` must be a "
"tuple of strings."
msgstr ""

#: ../../library/dis.rst:1409
msgid ""
"Pushes a new function object on the stack.  From bottom to top, the consumed "
"stack must consist of values if the argument carries a specified flag value"
msgstr ""

#: ../../library/dis.rst:1412
msgid ""
"``0x01`` a tuple of default values for positional-only and positional-or-"
"keyword parameters in positional order"
msgstr ""

#: ../../library/dis.rst:1414
msgid "``0x02`` a dictionary of keyword-only parameters' default values"
msgstr ""

#: ../../library/dis.rst:1415
msgid "``0x04`` a tuple of strings containing parameters' annotations"
msgstr ""

#: ../../library/dis.rst:1416
msgid "``0x08`` a tuple containing cells for free variables, making a closure"
msgstr ""

#: ../../library/dis.rst:1417
msgid "the code associated with the function (at ``STACK[-1]``)"
msgstr ""

#: ../../library/dis.rst:1419
msgid "Flag value ``0x04`` is a tuple of strings instead of dictionary"
msgstr ""

#: ../../library/dis.rst:1422
msgid "Qualified name at ``STACK[-1]`` was removed."
msgstr ""

#: ../../library/dis.rst:1430
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"implements::"
msgstr ""

#: ../../library/dis.rst:1436
msgid "if it is 3, implements::"
msgstr ""

#: ../../library/dis.rst:1443
msgid "See the :func:`slice` built-in function for more information."
msgstr ""

#: ../../library/dis.rst:1448
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"one byte. *ext* holds an additional byte which act as higher bits in the "
"argument. For each opcode, at most three prefixal ``EXTENDED_ARG`` are "
"allowed, forming an argument from two-byte to four-byte."
msgstr ""

#: ../../library/dis.rst:1456
msgid ""
"Used for implementing formatted literal strings (f-strings).  Pops an "
"optional *fmt_spec* from the stack, then a required *value*. *flags* is "
"interpreted as follows:"
msgstr ""

#: ../../library/dis.rst:1460
msgid "``(flags & 0x03) == 0x00``: *value* is formatted as-is."
msgstr ""

#: ../../library/dis.rst:1461
msgid ""
"``(flags & 0x03) == 0x01``: call :func:`str` on *value* before formatting it."
msgstr ""

#: ../../library/dis.rst:1463
msgid ""
"``(flags & 0x03) == 0x02``: call :func:`repr` on *value* before formatting "
"it."
msgstr ""

#: ../../library/dis.rst:1465
msgid ""
"``(flags & 0x03) == 0x03``: call :func:`ascii` on *value* before formatting "
"it."
msgstr ""

#: ../../library/dis.rst:1467
msgid ""
"``(flags & 0x04) == 0x04``: pop *fmt_spec* from the stack and use it, else "
"use an empty *fmt_spec*."
msgstr ""

#: ../../library/dis.rst:1470
msgid ""
"Formatting is performed using :c:func:`PyObject_Format`.  The result is "
"pushed on the stack."
msgstr ""

#: ../../library/dis.rst:1478
msgid ""
"``STACK[-1]`` is a tuple of keyword attribute names, ``STACK[-2]`` is the "
"class being matched against, and ``STACK[-3]`` is the match subject.  "
"*count* is the number of positional sub-patterns."
msgstr ""

#: ../../library/dis.rst:1482
msgid ""
"Pop ``STACK[-1]``, ``STACK[-2]``, and ``STACK[-3]``. If ``STACK[-3]`` is an "
"instance of ``STACK[-2]`` and has the positional and keyword attributes "
"required by *count* and ``STACK[-1]``, push a tuple of extracted attributes. "
"Otherwise, push ``None``."
msgstr ""

#: ../../library/dis.rst:1496
msgid "A no-op. Performs internal tracing, debugging and optimization checks."
msgstr ""

#: ../../library/dis.rst:1498
msgid "The ``where`` operand marks where the ``RESUME`` occurs:"
msgstr ""

#: ../../library/dis.rst:1500
msgid ""
"``0`` The start of a function, which is neither a generator, coroutine nor "
"an async generator"
msgstr ""

#: ../../library/dis.rst:1502
msgid "``1`` After a ``yield`` expression"
msgstr ""

#: ../../library/dis.rst:1503
msgid "``2`` After a ``yield from`` expression"
msgstr ""

#: ../../library/dis.rst:1504
msgid "``3`` After an ``await`` expression"
msgstr ""

#: ../../library/dis.rst:1511
msgid ""
"Create a generator, coroutine, or async generator from the current frame. "
"Used as first opcode of in code object for the above mentioned callables. "
"Clear the current frame and return the newly created generator."
msgstr ""

#: ../../library/dis.rst:1520
msgid ""
"Equivalent to ``STACK[-1] = STACK[-2].send(STACK[-1])``. Used in ``yield "
"from`` and ``await`` statements."
msgstr ""

#: ../../library/dis.rst:1523
msgid ""
"If the call raises :exc:`StopIteration`, pop both items, push the "
"exception's ``value`` attribute, and increment the bytecode counter by "
"*delta*."
msgstr ""

#: ../../library/dis.rst:1532
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes in the range [0,255] which don't use their argument and those that "
"do (``< HAVE_ARGUMENT`` and ``>= HAVE_ARGUMENT``, respectively)."
msgstr ""

#: ../../library/dis.rst:1536
msgid ""
"If your application uses pseudo instructions, use the :data:`hasarg` "
"collection instead."
msgstr ""

#: ../../library/dis.rst:1539
msgid ""
"Now every instruction has an argument, but opcodes ``< HAVE_ARGUMENT`` "
"ignore it. Before, only opcodes ``>= HAVE_ARGUMENT`` had an argument."
msgstr ""

#: ../../library/dis.rst:1543
msgid ""
"Pseudo instructions were added to the :mod:`dis` module, and for them it is "
"not true that comparison with ``HAVE_ARGUMENT`` indicates whether they use "
"their arg."
msgstr ""

#: ../../library/dis.rst:1551
msgid ""
"Calls an intrinsic function with one argument. Passes ``STACK[-1]`` as the "
"argument and sets ``STACK[-1]`` to the result. Used to implement "
"functionality that is necessary but not performance critical."
msgstr ""

#: ../../library/dis.rst:1555 ../../library/dis.rst:1605
msgid "The operand determines which intrinsic function is called:"
msgstr ""

#: ../../library/dis.rst:1558 ../../library/dis.rst:1608
msgid "Operand"
msgstr ""

#: ../../library/dis.rst:1558 ../../library/dis.rst:1608
msgid "Description"
msgstr ""

#: ../../library/dis.rst:1560
msgid "``INTRINSIC_1_INVALID``"
msgstr "``INTRINSIC_1_INVALID``"

#: ../../library/dis.rst:1560 ../../library/dis.rst:1610
msgid "Not valid"
msgstr ""

#: ../../library/dis.rst:1562
msgid "``INTRINSIC_PRINT``"
msgstr "``INTRINSIC_PRINT``"

#: ../../library/dis.rst:1562
msgid "Prints the argument to standard out. Used in the REPL."
msgstr ""

#: ../../library/dis.rst:1565
msgid "``INTRINSIC_IMPORT_STAR``"
msgstr "``INTRINSIC_IMPORT_STAR``"

#: ../../library/dis.rst:1565
msgid "Performs ``import *`` for the named module."
msgstr ""

#: ../../library/dis.rst:1568
msgid "``INTRINSIC_STOPITERATION_ERROR``"
msgstr "``INTRINSIC_STOPITERATION_ERROR``"

#: ../../library/dis.rst:1568
msgid "Extracts the return value from a ``StopIteration`` exception."
msgstr ""

#: ../../library/dis.rst:1571
msgid "``INTRINSIC_ASYNC_GEN_WRAP``"
msgstr "``INTRINSIC_ASYNC_GEN_WRAP``"

#: ../../library/dis.rst:1571
msgid "Wraps an aync generator value"
msgstr ""

#: ../../library/dis.rst:1573
msgid "``INTRINSIC_UNARY_POSITIVE``"
msgstr "``INTRINSIC_UNARY_POSITIVE``"

#: ../../library/dis.rst:1573
msgid "Performs the unary ``+`` operation"
msgstr ""

#: ../../library/dis.rst:1576
msgid "``INTRINSIC_LIST_TO_TUPLE``"
msgstr "``INTRINSIC_LIST_TO_TUPLE``"

#: ../../library/dis.rst:1576
msgid "Converts a list to a tuple"
msgstr ""

#: ../../library/dis.rst:1578
msgid "``INTRINSIC_TYPEVAR``"
msgstr "``INTRINSIC_TYPEVAR``"

#: ../../library/dis.rst:1578
msgid "Creates a :class:`typing.TypeVar`"
msgstr ""

#: ../../library/dis.rst:1580
msgid "``INTRINSIC_PARAMSPEC``"
msgstr "``INTRINSIC_PARAMSPEC``"

#: ../../library/dis.rst:1580
msgid "Creates a :class:`typing.ParamSpec`"
msgstr ""

#: ../../library/dis.rst:1583
msgid "``INTRINSIC_TYPEVARTUPLE``"
msgstr "``INTRINSIC_TYPEVARTUPLE``"

#: ../../library/dis.rst:1583
msgid "Creates a :class:`typing.TypeVarTuple`"
msgstr ""

#: ../../library/dis.rst:1586
msgid "``INTRINSIC_SUBSCRIPT_GENERIC``"
msgstr "``INTRINSIC_SUBSCRIPT_GENERIC``"

#: ../../library/dis.rst:1586
msgid "Returns :class:`typing.Generic` subscripted with the argument"
msgstr ""

#: ../../library/dis.rst:1589
msgid "``INTRINSIC_TYPEALIAS``"
msgstr "``INTRINSIC_TYPEALIAS``"

#: ../../library/dis.rst:1589
msgid ""
"Creates a :class:`typing.TypeAliasType`; used in the :keyword:`type` "
"statement. The argument is a tuple of the type alias's name, type "
"parameters, and value."
msgstr ""

#: ../../library/dis.rst:1601
msgid ""
"Calls an intrinsic function with two arguments. Passes ``STACK[-2]``, "
"``STACK[-1]`` as the arguments and sets ``STACK[-1]`` to the result. Used to "
"implement functionality that is necessary but not performance critical."
msgstr ""

#: ../../library/dis.rst:1610
msgid "``INTRINSIC_2_INVALID``"
msgstr "``INTRINSIC_2_INVALID``"

#: ../../library/dis.rst:1612
msgid "``INTRINSIC_PREP_RERAISE_STAR``"
msgstr "``INTRINSIC_PREP_RERAISE_STAR``"

#: ../../library/dis.rst:1612
msgid "Calculates the :exc:`ExceptionGroup` to raise from a ``try-except*``."
msgstr ""

#: ../../library/dis.rst:1616
msgid "``INTRINSIC_TYPEVAR_WITH_BOUND``"
msgstr "``INTRINSIC_TYPEVAR_WITH_BOUND``"

#: ../../library/dis.rst:1616
msgid "Creates a :class:`typing.TypeVar` with a bound."
msgstr ""

#: ../../library/dis.rst:1619
msgid "``INTRINSIC_TYPEVAR_WITH_CONSTRAINTS``"
msgstr "``INTRINSIC_TYPEVAR_WITH_CONSTRAINTS``"

#: ../../library/dis.rst:1619
msgid "Creates a :class:`typing.TypeVar` with constraints."
msgstr ""

#: ../../library/dis.rst:1623
msgid "``INTRINSIC_SET_FUNCTION_TYPE_PARAMS``"
msgstr "``INTRINSIC_SET_FUNCTION_TYPE_PARAMS``"

#: ../../library/dis.rst:1623
msgid "Sets the ``__type_params__`` attribute of a function."
msgstr ""

#: ../../library/dis.rst:1630
msgid "**Pseudo-instructions**"
msgstr ""

#: ../../library/dis.rst:1632
msgid ""
"These opcodes do not appear in Python bytecode. They are used by the "
"compiler but are replaced by real opcodes or removed before bytecode is "
"generated."
msgstr ""

#: ../../library/dis.rst:1637
msgid ""
"Set up an exception handler for the following code block. If an exception "
"occurs, the value stack level is restored to its current state and control "
"is transferred to the exception handler at ``target``."
msgstr ""

#: ../../library/dis.rst:1644
msgid ""
"Like ``SETUP_FINALLY``, but in case of an exception also pushes the last "
"instruction (``lasti``) to the stack so that ``RERAISE`` can restore it. If "
"an exception occurs, the value stack level and the last instruction on the "
"frame are restored to their current state, and control is transferred to the "
"exception handler at ``target``."
msgstr ""

#: ../../library/dis.rst:1653
msgid ""
"Like ``SETUP_CLEANUP``, but in case of an exception one more item is popped "
"from the stack before control is transferred to the exception handler at "
"``target``."
msgstr ""

#: ../../library/dis.rst:1657
msgid ""
"This variant is used in :keyword:`with` and :keyword:`async with` "
"constructs, which push the return value of the context manager's :meth:"
"`~object.__enter__` or :meth:`~object.__aenter__` to the stack."
msgstr ""

#: ../../library/dis.rst:1664
msgid ""
"Marks the end of the code block associated with the last ``SETUP_FINALLY``, "
"``SETUP_CLEANUP`` or ``SETUP_WITH``."
msgstr ""

#: ../../library/dis.rst:1670
msgid ""
"Undirected relative jump instructions which are replaced by their directed "
"(forward/backward) counterparts by the assembler."
msgstr ""

#: ../../library/dis.rst:1675
msgid ""
"Optimized unbound method lookup. Emitted as a ``LOAD_ATTR`` opcode with a "
"flag set in the arg."
msgstr ""

#: ../../library/dis.rst:1682
msgid "Opcode collections"
msgstr ""

#: ../../library/dis.rst:1684
msgid ""
"These collections are provided for automatic introspection of bytecode "
"instructions:"
msgstr ""

#: ../../library/dis.rst:1687
msgid ""
"The collections now contain pseudo instructions as well. These are opcodes "
"with values ``>= MIN_PSEUDO_OPCODE``."
msgstr ""

#: ../../library/dis.rst:1693
msgid "Sequence of operation names, indexable using the bytecode."
msgstr ""

#: ../../library/dis.rst:1698
msgid "Dictionary mapping operation names to bytecodes."
msgstr ""

#: ../../library/dis.rst:1703
msgid "Sequence of all compare operation names."
msgstr ""

#: ../../library/dis.rst:1708
msgid "Sequence of bytecodes that use their argument."
msgstr ""

#: ../../library/dis.rst:1715
msgid "Sequence of bytecodes that access a constant."
msgstr ""

#: ../../library/dis.rst:1720
msgid ""
"Sequence of bytecodes that access a free variable. 'free' in this context "
"refers to names in the current scope that are referenced by inner scopes or "
"names in outer scopes that are referenced from this scope.  It does *not* "
"include references to global or builtin scopes."
msgstr ""

#: ../../library/dis.rst:1728
msgid "Sequence of bytecodes that access an attribute by name."
msgstr ""

#: ../../library/dis.rst:1733
msgid "Sequence of bytecodes that have a relative jump target."
msgstr ""

#: ../../library/dis.rst:1738
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr ""

#: ../../library/dis.rst:1743
msgid "Sequence of bytecodes that access a local variable."
msgstr ""

#: ../../library/dis.rst:1748
msgid "Sequence of bytecodes of Boolean operations."
msgstr ""

#: ../../library/dis.rst:1752
msgid "Sequence of bytecodes that set an exception handler."
msgstr ""

#: ../../library/dis.rst:1428
msgid "built-in function"
msgstr "built-in function（內建函式）"

#: ../../library/dis.rst:1428
msgid "slice"
msgstr "slice（切片）"
