# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-13 00:11+0000\n"
"PO-Revision-Date: 2018-05-23 14:41+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ""

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr ""

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr ""

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is hashable or whether it is a mapping."
msgstr ""

#: ../../library/collections.abc.rst:31
msgid "Collections Abstract Base Classes"
msgstr ""

#: ../../library/collections.abc.rst:33
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr ""

#: ../../library/collections.abc.rst:38
msgid "ABC"
msgstr ""

#: ../../library/collections.abc.rst:38
msgid "Inherits from"
msgstr ""

#: ../../library/collections.abc.rst:38
msgid "Abstract Methods"
msgstr ""

#: ../../library/collections.abc.rst:38
msgid "Mixin Methods"
msgstr ""

#: ../../library/collections.abc.rst:40
msgid ":class:`Container`"
msgstr ""

#: ../../library/collections.abc.rst:40
msgid "``__contains__``"
msgstr ""

#: ../../library/collections.abc.rst:41
msgid ":class:`Hashable`"
msgstr ""

#: ../../library/collections.abc.rst:41
msgid "``__hash__``"
msgstr ""

#: ../../library/collections.abc.rst:42 ../../library/collections.abc.rst:43
#: ../../library/collections.abc.rst:44
msgid ":class:`Iterable`"
msgstr ""

#: ../../library/collections.abc.rst:42 ../../library/collections.abc.rst:43
msgid "``__iter__``"
msgstr ""

#: ../../library/collections.abc.rst:43 ../../library/collections.abc.rst:45
msgid ":class:`Iterator`"
msgstr ""

#: ../../library/collections.abc.rst:43
msgid "``__next__``"
msgstr ""

#: ../../library/collections.abc.rst:44
msgid ":class:`Reversible`"
msgstr ""

#: ../../library/collections.abc.rst:44
msgid "``__reversed__``"
msgstr ""

#: ../../library/collections.abc.rst:45
msgid ":class:`Generator`"
msgstr ""

#: ../../library/collections.abc.rst:45 ../../library/collections.abc.rst:93
msgid "``send``, ``throw``"
msgstr ""

#: ../../library/collections.abc.rst:45
msgid "``close``, ``__iter__``, ``__next__``"
msgstr ""

#: ../../library/collections.abc.rst:46 ../../library/collections.abc.rst:85
msgid ":class:`Sized`"
msgstr ""

#: ../../library/collections.abc.rst:46 ../../library/collections.abc.rst:85
msgid "``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:47
msgid ":class:`Callable`"
msgstr ""

#: ../../library/collections.abc.rst:47
msgid "``__call__``"
msgstr ""

#: ../../library/collections.abc.rst:48 ../../library/collections.abc.rst:64
#: ../../library/collections.abc.rst:74
msgid ":class:`Collection`"
msgstr ""

#: ../../library/collections.abc.rst:48
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ""

#: ../../library/collections.abc.rst:48 ../../library/collections.abc.rst:64
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:52 ../../library/collections.abc.rst:55
#: ../../library/collections.abc.rst:61
msgid ":class:`Sequence`"
msgstr ""

#: ../../library/collections.abc.rst:52
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ""

#: ../../library/collections.abc.rst:52 ../../library/collections.abc.rst:61
msgid "``__getitem__``, ``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:52
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""

#: ../../library/collections.abc.rst:55
msgid ":class:`MutableSequence`"
msgstr ""

#: ../../library/collections.abc.rst:55
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""

#: ../../library/collections.abc.rst:55
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"
msgstr ""

#: ../../library/collections.abc.rst:61
msgid ":class:`ByteString`"
msgstr ""

#: ../../library/collections.abc.rst:61
msgid "Inherited :class:`Sequence` methods"
msgstr ""

#: ../../library/collections.abc.rst:64 ../../library/collections.abc.rst:68
msgid ":class:`Set`"
msgstr ""

#: ../../library/collections.abc.rst:64
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""

#: ../../library/collections.abc.rst:68
msgid ":class:`MutableSet`"
msgstr ""

#: ../../library/collections.abc.rst:68
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr ""

#: ../../library/collections.abc.rst:68
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""

#: ../../library/collections.abc.rst:74 ../../library/collections.abc.rst:78
msgid ":class:`Mapping`"
msgstr ""

#: ../../library/collections.abc.rst:74
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:74
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""

#: ../../library/collections.abc.rst:78
msgid ":class:`MutableMapping`"
msgstr ""

#: ../../library/collections.abc.rst:78
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:78
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""

#: ../../library/collections.abc.rst:85
msgid ":class:`MappingView`"
msgstr ""

#: ../../library/collections.abc.rst:86
msgid ":class:`ItemsView`"
msgstr ""

#: ../../library/collections.abc.rst:86 ../../library/collections.abc.rst:88
msgid ":class:`MappingView`, :class:`Set`"
msgstr ""

#: ../../library/collections.abc.rst:86 ../../library/collections.abc.rst:88
#: ../../library/collections.abc.rst:90
msgid "``__contains__``, ``__iter__``"
msgstr ""

#: ../../library/collections.abc.rst:88
msgid ":class:`KeysView`"
msgstr ""

#: ../../library/collections.abc.rst:90
msgid ":class:`ValuesView`"
msgstr ""

#: ../../library/collections.abc.rst:90
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ""

#: ../../library/collections.abc.rst:92 ../../library/collections.abc.rst:93
msgid ":class:`Awaitable`"
msgstr ""

#: ../../library/collections.abc.rst:92
msgid "``__await__``"
msgstr ""

#: ../../library/collections.abc.rst:93
msgid ":class:`Coroutine`"
msgstr ""

#: ../../library/collections.abc.rst:93
msgid "``close``"
msgstr ""

#: ../../library/collections.abc.rst:94 ../../library/collections.abc.rst:95
msgid ":class:`AsyncIterable`"
msgstr ""

#: ../../library/collections.abc.rst:94 ../../library/collections.abc.rst:95
msgid "``__aiter__``"
msgstr ""

#: ../../library/collections.abc.rst:95 ../../library/collections.abc.rst:96
msgid ":class:`AsyncIterator`"
msgstr ""

#: ../../library/collections.abc.rst:95
msgid "``__anext__``"
msgstr ""

#: ../../library/collections.abc.rst:96
msgid ":class:`AsyncGenerator`"
msgstr ""

#: ../../library/collections.abc.rst:96
msgid "``asend``, ``athrow``"
msgstr ""

#: ../../library/collections.abc.rst:96
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr ""

#: ../../library/collections.abc.rst:102
msgid "ABC for classes that provide the :meth:`__contains__` method."
msgstr ""

#: ../../library/collections.abc.rst:106
msgid "ABC for classes that provide the :meth:`__hash__` method."
msgstr ""

#: ../../library/collections.abc.rst:110
msgid "ABC for classes that provide the :meth:`__len__` method."
msgstr ""

#: ../../library/collections.abc.rst:114
msgid "ABC for classes that provide the :meth:`__call__` method."
msgstr ""

#: ../../library/collections.abc.rst:118
msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr ""

#: ../../library/collections.abc.rst:120
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method. The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""

#: ../../library/collections.abc.rst:128
msgid "ABC for sized iterable container classes."
msgstr ""

#: ../../library/collections.abc.rst:134
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""

#: ../../library/collections.abc.rst:140
msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` method."
msgstr ""

#: ../../library/collections.abc.rst:147
msgid ""
"ABC for generator classes that implement the protocol defined in :pep:`342` "
"that extends iterators with the :meth:`~generator.send`, :meth:`~generator."
"throw` and :meth:`~generator.close` methods. See also the definition of :"
"term:`generator`."
msgstr ""

#: ../../library/collections.abc.rst:158
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""

#: ../../library/collections.abc.rst:160
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`, :"
"meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if :meth:`__getitem__` "
"is implemented with constant access speed, the mixin methods will have "
"linear performance; however, if the underlying method is linear (as it would "
"be with a linked list), the mixins will have quadratic performance and will "
"likely need to be overridden."
msgstr ""

#: ../../library/collections.abc.rst:169
msgid "The index() method added support for *stop* and *start* arguments."
msgstr ""

#: ../../library/collections.abc.rst:176
msgid "ABCs for read-only and mutable sets."
msgstr ""

#: ../../library/collections.abc.rst:181
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr ""

#: ../../library/collections.abc.rst:188
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""

#: ../../library/collections.abc.rst:192
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""

#: ../../library/collections.abc.rst:196
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""

#: ../../library/collections.abc.rst:200
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even "
"though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:210
msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`__await__`.  All :class:`Coroutine` instances are "
"also instances of :class:`Awaitable`.  See also the definition of :term:"
"`coroutine`."
msgstr ""

#: ../../library/collections.abc.rst:218
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even "
"though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:228
msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the definition "
"of :term:`asynchronous iterable`."
msgstr ""

#: ../../library/collections.abc.rst:235
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""

#: ../../library/collections.abc.rst:242
msgid ""
"ABC for asynchronous generator classes that implement the protocol defined "
"in :pep:`525` and :pep:`492`."
msgstr ""

#: ../../library/collections.abc.rst:248
msgid ""
"These ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""

#: ../../library/collections.abc.rst:255
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :"
"meth:`__len__`. The ABC supplies the remaining methods such as :meth:"
"`__and__` and :meth:`isdisjoint`::"
msgstr ""

#: ../../library/collections.abc.rst:284
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""

#: ../../library/collections.abc.rst:287
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called :meth:"
"`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :"
"class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""

#: ../../library/collections.abc.rst:298
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""

#: ../../library/collections.abc.rst:303
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are hashable or immutable.  To add set hashability using mixins, "
"inherit from both :meth:`Set` and :meth:`Hashable`, then define ``__hash__ = "
"Set._hash``."
msgstr ""

#: ../../library/collections.abc.rst:311
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""

#: ../../library/collections.abc.rst:314
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
