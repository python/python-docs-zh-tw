# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-12 00:03+0000\n"
"PO-Revision-Date: 2024-05-22 20:58+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.4.4\n"

#: ../../library/weakref.rst:4
msgid ":mod:`weakref` --- Weak references"
msgstr ":mod:`weakref` --- 弱參照"

#: ../../library/weakref.rst:14
msgid "**Source code:** :source:`Lib/weakref.py`"
msgstr "**原始碼：**\\ :source:`Lib/weakref.py`"

#: ../../library/weakref.rst:18
msgid ""
"The :mod:`weakref` module allows the Python programmer to create :dfn:`weak "
"references` to objects."
msgstr ":mod:`weakref` 模組允許 Python 程式設計師建立對物件的 :dfn:`弱參照`。"

#: ../../library/weakref.rst:24
msgid ""
"In the following, the term :dfn:`referent` means the object which is "
"referred to by a weak reference."
msgstr ""
"在以下文章中，術語 :dfn:`參照目標 (referent)` 表示被弱參照所參考的物件。"

#: ../../library/weakref.rst:27
msgid ""
"A weak reference to an object is not enough to keep the object alive: when "
"the only remaining references to a referent are weak references, :term:"
"`garbage collection` is free to destroy the referent and reuse its memory "
"for something else.  However, until the object is actually destroyed the "
"weak reference may return the object even if there are no strong references "
"to it."
msgstr ""
"對物件的弱參照不足以使物件保持存在：當對參照目標的唯一剩下的參照是弱參照時，:"
"term:`garbage collection` 可以自由地銷毀參照目標並將其記憶體重新用於其他用"
"途。然而，在物件被確實銷毀之前，即使沒有對該物件的強參照 (strong reference)，"
"弱參照也可能會回傳該物件。"

#: ../../library/weakref.rst:33
msgid ""
"A primary use for weak references is to implement caches or mappings holding "
"large objects, where it's desired that a large object not be kept alive "
"solely because it appears in a cache or mapping."
msgstr ""
"弱參照的主要用途是實作保存大型物件的快取或對映，其不希望大型物件僅僅因為它出"
"現在快取或對映中而保持存在。"

#: ../../library/weakref.rst:37
msgid ""
"For example, if you have a number of large binary image objects, you may "
"wish to associate a name with each.  If you used a Python dictionary to map "
"names to images, or images to names, the image objects would remain alive "
"just because they appeared as values or keys in the dictionaries.  The :"
"class:`WeakKeyDictionary` and :class:`WeakValueDictionary` classes supplied "
"by the :mod:`weakref` module are an alternative, using weak references to "
"construct mappings that don't keep objects alive solely because they appear "
"in the mapping objects.  If, for example, an image object is a value in a :"
"class:`WeakValueDictionary`, then when the last remaining references to that "
"image object are the weak references held by weak mappings, garbage "
"collection can reclaim the object, and its corresponding entries in weak "
"mappings are simply deleted."
msgstr ""
"例如，如果你有許多大型的二進位影像物件，你可能會想要為每個物件關聯 "
"(associate) 一個名稱。如果你使用 Python 字典將名稱對映到影像，或將影像對映到"
"名稱，則影像物件將保持存活，僅因為它們在字典中作為值 (value) 或鍵 (key) 出"
"現。:mod:`weakref` 模組提供的 :class:`WeakKeyDictionary` 和 :class:"
"`WeakValueDictionary` 類別是另一種選擇，它們使用弱參照來建構對映，這些對映不"
"會僅因為物件出現在對映物件中而使物件保持存活。例如，如果一個影像物件是 :"
"class:`WeakValueDictionary` 中的一個值，那麼當對該影像物件最後的參照是弱對映 "
"(weak mapping) 所持有的弱參照時，垃圾回收 (garbage collection) 可以回收該物"
"件，且其對應的條目在弱對映中會被完全地刪除。"

#: ../../library/weakref.rst:50
msgid ""
":class:`WeakKeyDictionary` and :class:`WeakValueDictionary` use weak "
"references in their implementation, setting up callback functions on the "
"weak references that notify the weak dictionaries when a key or value has "
"been reclaimed by garbage collection.  :class:`WeakSet` implements the :"
"class:`set` interface, but keeps weak references to its elements, just like "
"a :class:`WeakKeyDictionary` does."
msgstr ""
":class:`WeakKeyDictionary` 和 :class:`WeakValueDictionary` 在其實作中使用弱參"
"照，在弱參照上設定回呼函式，此弱參照在垃圾回收取回鍵或值時通知弱字典。:class:"
"`WeakSet` 實作了 :class:`set` 介面，但保留對其元素的弱參照，就像 :class:"
"`WeakKeyDictionary` 一樣。"

#: ../../library/weakref.rst:57
msgid ""
":class:`finalize` provides a straight forward way to register a cleanup "
"function to be called when an object is garbage collected. This is simpler "
"to use than setting up a callback function on a raw weak reference, since "
"the module automatically ensures that the finalizer remains alive until the "
"object is collected."
msgstr ""
":class:`finalize` 提供了一種直接的方法來註冊在物件被垃圾回收時呼叫的清理函"
"式。這比在原始弱參照上設定回呼函式更容易使用，因為模組在物件被回收前會自動確"
"保最終化器 (finalizer) 保持存活。"

#: ../../library/weakref.rst:63
msgid ""
"Most programs should find that using one of these weak container types or :"
"class:`finalize` is all they need -- it's not usually necessary to create "
"your own weak references directly.  The low-level machinery is exposed by "
"the :mod:`weakref` module for the benefit of advanced uses."
msgstr ""
"大多數程式應該發現使用這些弱容器種類之一或 :class:`finalize` 就足夠了—通常不"
"需要直接建立自己的弱參照。低層級的機制由 :mod:`weakref` 模組公開，以利於進階"
"用途。"

#: ../../library/weakref.rst:68
msgid ""
"Not all objects can be weakly referenced. Objects which support weak "
"references include class instances, functions written in Python (but not in "
"C), instance methods, sets, frozensets, some :term:`file objects <file "
"object>`, :term:`generators <generator>`, type objects, sockets, arrays, "
"deques, regular expression pattern objects, and code objects."
msgstr ""
"並非所有物件都可以被弱參照。支援弱參照的物件包括類別實例、用 Python （但不是"
"C）編寫的函式、實例方法、集合、凍結集合 (frozenset)、一些\\ :term:`檔案物件 "
"<file object>`、:term:`產生器 <generator>`、類型物件、socket、陣列、雙向佇"
"列、正規表示式模式物件和程式碼物件。"

#: ../../library/weakref.rst:74
msgid "Added support for thread.lock, threading.Lock, and code objects."
msgstr "新增了對 thread.lock、threading.Lock 和程式碼物件的支援。"

#: ../../library/weakref.rst:77
msgid ""
"Several built-in types such as :class:`list` and :class:`dict` do not "
"directly support weak references but can add support through subclassing::"
msgstr ""
"一些內建型別，例如 :class:`list` 和 :class:`dict` 不直接支援弱參照，但可以透"
"過子類別化來支援： ::"

#: ../../library/weakref.rst:87
msgid ""
"Other built-in types such as :class:`tuple` and :class:`int` do not support "
"weak references even when subclassed."
msgstr ""
"其他內建型別，例如 :class:`tuple` 和 :class:`int` 即使在子類別化時也不支援弱"
"參照。"

#: ../../library/weakref.rst:90
msgid ""
"Extension types can easily be made to support weak references; see :ref:"
"`weakref-support`."
msgstr ""
"擴充型別 (extension type) 可以輕易地支援弱參照；請參閱 :ref:`weakref-"
"support`。"

#: ../../library/weakref.rst:93
msgid ""
"When ``__slots__`` are defined for a given type, weak reference support is "
"disabled unless a ``'__weakref__'`` string is also present in the sequence "
"of strings in the ``__slots__`` declaration. See :ref:`__slots__ "
"documentation <slots>` for details."
msgstr ""
"當為給定的型別定義 ``__slots__`` 時，弱參照支援將被停用，除非 "
"``'__weakref__'`` 字串也存在於 ``__slots__`` 宣告的字串序列中。詳情請參閱 :"
"ref:`__slots__ 文件 <slots>`。"

#: ../../library/weakref.rst:100
msgid ""
"Return a weak reference to *object*.  The original object can be retrieved "
"by calling the reference object if the referent is still alive; if the "
"referent is no longer alive, calling the reference object will cause :const:"
"`None` to be returned.  If *callback* is provided and not :const:`None`, and "
"the returned weakref object is still alive, the callback will be called when "
"the object is about to be finalized; the weak reference object will be "
"passed as the only parameter to the callback; the referent will no longer be "
"available."
msgstr ""
"回傳對 *object* 的弱參照。如果參照目標仍存活，則可以透過呼叫參照物件來取回原"
"始物件；如果參照目標已不存活，呼叫參照物件將導致 :const:`None` 被回傳。如果 "
"*callback* 被提供而非 :const:`None`，且回傳的弱參照物件仍存活，那麼當物件即將"
"被最終化 (finalize) 時，回呼將被呼叫；弱參照物件將作為唯一的參數傳遞給回呼；"
"參照物件將不再可用。"

#: ../../library/weakref.rst:108
msgid ""
"It is allowable for many weak references to be constructed for the same "
"object. Callbacks registered for each weak reference will be called from the "
"most recently registered callback to the oldest registered callback."
msgstr ""
"為同一個物件建構多個弱參照是可行的。為每個弱參照註冊的回呼將按照最新到最舊註"
"冊的回呼順序來被呼叫。"

#: ../../library/weakref.rst:112
msgid ""
"Exceptions raised by the callback will be noted on the standard error "
"output, but cannot be propagated; they are handled in exactly the same way "
"as exceptions raised from an object's :meth:`~object.__del__` method."
msgstr ""
"回呼引發的例外將在標準錯誤輸出中被註明，但無法被傳播；它們的處理方式與物件"
"的 :meth:`~object.__del__` 方法引發的例外完全相同。"

#: ../../library/weakref.rst:116
msgid ""
"Weak references are :term:`hashable` if the *object* is hashable.  They will "
"maintain their hash value even after the *object* was deleted.  If :func:"
"`hash` is called the first time only after the *object* was deleted, the "
"call will raise :exc:`TypeError`."
msgstr ""
"如果 *object* 是\\ :term:`可雜湊的 <hashable>`，那麼弱參照就是可雜湊的。即使"
"在 *object* 被刪除後，它們仍將保留其雜湊值。如果僅在 *object* 刪除後才第一次"
"呼叫 :func:`hash`，則該呼叫將引發 :exc:`TypeError`。"

#: ../../library/weakref.rst:121
msgid ""
"Weak references support tests for equality, but not ordering.  If the "
"referents are still alive, two references have the same equality "
"relationship as their referents (regardless of the *callback*).  If either "
"referent has been deleted, the references are equal only if the reference "
"objects are the same object."
msgstr ""
"弱參照支援相等性的測試，但不支援排序。如果參照目標仍存活，則兩個參照與其參照"
"目標具有相同的相等關係（無論 *callback* 如何）。如果任一參照目標已被刪除，則"
"僅當參照物件是同一物件時，參照才相等。"

#: ../../library/weakref.rst:126
msgid "This is a subclassable type rather than a factory function."
msgstr "這是一個可子類別化的型別，而不是一個工廠函式。"

#: ../../library/weakref.rst:130
msgid ""
"This read-only attribute returns the callback currently associated to the "
"weakref.  If there is no callback or if the referent of the weakref is no "
"longer alive then this attribute will have value ``None``."
msgstr ""
"此唯讀屬性回傳目前與弱參照關聯的回呼。如果沒有回呼或弱參照的參照目標已不存"
"活，那麼該屬性的值為 ``None``。"

#: ../../library/weakref.rst:134
msgid "Added the :attr:`__callback__` attribute."
msgstr "新增 :attr:`__callback__` 屬性。"

#: ../../library/weakref.rst:140
msgid ""
"Return a proxy to *object* which uses a weak reference.  This supports use "
"of the proxy in most contexts instead of requiring the explicit "
"dereferencing used with weak reference objects.  The returned object will "
"have a type of either ``ProxyType`` or ``CallableProxyType``, depending on "
"whether *object* is callable.  Proxy objects are not :term:`hashable` "
"regardless of the referent; this avoids a number of problems related to "
"their fundamentally mutable nature, and prevents their use as dictionary "
"keys.  *callback* is the same as the parameter of the same name to the :func:"
"`ref` function."
msgstr ""
"回傳一個使用弱參照的 *object* 的代理 (proxy)。這支援在大多數情境中使用代理，"
"而不需要對弱參照物件明確地取消參照。回傳的物件將具有 ``ProxyType`` 或 "
"``CallableProxyType`` 型別，具體取決於 *object* 是否為可呼叫物件。無論參照目"
"標如何，代理物件都不是 :term:`hashable`；這避免了與其基本可變物件本質相關的許"
"多問題，並阻止它們作為字典的鍵被使用。*callback* 與 :func:`ref` 函式的同名參"
"數是相同的。"

#: ../../library/weakref.rst:149
msgid ""
"Accessing an attribute of the proxy object after the referent is garbage "
"collected raises :exc:`ReferenceError`."
msgstr "在參照目標被垃圾回收後存取代理物件的屬性會引發 :exc:`ReferenceError`。"

#: ../../library/weakref.rst:152
msgid ""
"Extended the operator support on proxy objects to include the matrix "
"multiplication operators ``@`` and ``@=``."
msgstr "提供對代理物件的運算子支援，以包括矩陣乘法運算子 ``@`` 和 ``@=``。"

#: ../../library/weakref.rst:159
msgid ""
"Return the number of weak references and proxies which refer to *object*."
msgstr "回傳參照 *object* 的弱參照和代理的數量。"

#: ../../library/weakref.rst:164
msgid ""
"Return a list of all weak reference and proxy objects which refer to "
"*object*."
msgstr "回傳參照 *object* 的所有弱參照和代理物件的一個串列。"

#: ../../library/weakref.rst:169
msgid ""
"Mapping class that references keys weakly.  Entries in the dictionary will "
"be discarded when there is no longer a strong reference to the key.  This "
"can be used to associate additional data with an object owned by other parts "
"of an application without adding attributes to those objects.  This can be "
"especially useful with objects that override attribute accesses."
msgstr ""
"弱參照鍵的對映類別。當不再有對鍵的強參照時，字典中的條目將被丟棄。這可用於將"
"附加資料與應用程式其他部分擁有的物件相關聯，而無需向這些物件新增屬性。這對於"
"覆蓋屬性存取的物件特別有用。"

#: ../../library/weakref.rst:175
msgid ""
"Note that when a key with equal value to an existing key (but not equal "
"identity) is inserted into the dictionary, it replaces the value but does "
"not replace the existing key. Due to this, when the reference to the "
"original key is deleted, it also deletes the entry in the dictionary::"
msgstr ""
"請注意，當將與現有鍵具有相同值的鍵（但識別性不相等）插入字典時，它會替換該"
"值，但不會替換現有鍵。因此，當刪除對原始鍵的參照時，它也會刪除字典中的條"
"目： ::"

#: ../../library/weakref.rst:188
msgid "A workaround would be to remove the key prior to reassignment::"
msgstr "一個變通的解法是在重新賦值 (reassignment) 之前刪除鍵： ::"

#: ../../library/weakref.rst:199 ../../library/weakref.rst:220
msgid ""
"Added support for ``|`` and ``|=`` operators, as specified in :pep:`584`."
msgstr "新增對 ``|`` 和 ``|=`` 運算子的支持，如 :pep:`584` 中所說明。"

#: ../../library/weakref.rst:202
msgid ""
":class:`WeakKeyDictionary` objects have an additional method that exposes "
"the internal references directly.  The references are not guaranteed to be "
"\"live\" at the time they are used, so the result of calling the references "
"needs to be checked before being used.  This can be used to avoid creating "
"references that will cause the garbage collector to keep the keys around "
"longer than needed."
msgstr ""
":class:`WeakKeyDictionary` 物件有一個直接公開內部參照的附加方法。參照在被使用"
"時不保證是 \"存活的\"，因此在使用之前需要檢查呼叫參照的結果。這可以用來防止建"
"立會導致垃圾回收器保留鍵的時間超過其所需時間的參照。"

#: ../../library/weakref.rst:212
msgid "Return an iterable of the weak references to the keys."
msgstr "回傳對鍵的弱參照的可疊代物件。"

#: ../../library/weakref.rst:217
msgid ""
"Mapping class that references values weakly.  Entries in the dictionary will "
"be discarded when no strong reference to the value exists any more."
msgstr "弱參照值的對映類別。當不再存在對值的強參照時，字典中的條目將被丟棄。"

#: ../../library/weakref.rst:223
msgid ""
":class:`WeakValueDictionary` objects have an additional method that has the "
"same issues as the :meth:`WeakKeyDictionary.keyrefs` method."
msgstr ""
":class:`WeakValueDictionary` 物件有一個附加方法，它與 :meth:"
"`WeakKeyDictionary.keyrefs` 方法有相同的問題。"

#: ../../library/weakref.rst:229
msgid "Return an iterable of the weak references to the values."
msgstr "回傳對值的弱參照的可疊代物件。"

#: ../../library/weakref.rst:234
msgid ""
"Set class that keeps weak references to its elements.  An element will be "
"discarded when no strong reference to it exists any more."
msgstr ""
"保留對其元素的弱參照的集合類別。當不再存在對某個元素的強參照時，該元素將被丟"
"棄。"

#: ../../library/weakref.rst:240
msgid ""
"A custom :class:`ref` subclass which simulates a weak reference to a bound "
"method (i.e., a method defined on a class and looked up on an instance). "
"Since a bound method is ephemeral, a standard weak reference cannot keep "
"hold of it.  :class:`WeakMethod` has special code to recreate the bound "
"method until either the object or the original function dies::"
msgstr ""
"一個特製的 :class:`ref` 子類別，其模擬對繫結方法 (bound method) （即在類別上"
"定義並在實例上查找的方法）的弱參照。由於繫結方法是短暫存在的，因此標準弱參照"
"無法保留它。:class:`WeakMethod` 有特殊的程式碼來重新建立繫結方法，直到物件或"
"原始函式死亡： ::"

#: ../../library/weakref.rst:264
msgid ""
"*callback* is the same as the parameter of the same name to the :func:`ref` "
"function."
msgstr "*callback* 與 :func:`ref` 函式的同名參數是相同的。"

#: ../../library/weakref.rst:270
msgid ""
"Return a callable finalizer object which will be called when *obj* is "
"garbage collected. Unlike an ordinary weak reference, a finalizer will "
"always survive until the reference object is collected, greatly simplifying "
"lifecycle management."
msgstr ""
"回傳可呼叫的最終化器物件，此物件在 *obj* 被垃圾回收時會被呼叫。與一般的弱參照"
"不同，最終化器將始終存在，直到參照物件被回收為止，從而大大簡化了生命週期管"
"理。"

#: ../../library/weakref.rst:275
msgid ""
"A finalizer is considered *alive* until it is called (either explicitly or "
"at garbage collection), and after that it is *dead*.  Calling a live "
"finalizer returns the result of evaluating ``func(*arg, **kwargs)``, whereas "
"calling a dead finalizer returns :const:`None`."
msgstr ""
"最終化器在被呼叫（明確呼叫或在垃圾回收時）之前被視為\\ *存活*，之後它就會\\ *"
"死亡*。呼叫存活的最終化器會回傳 ``func(*arg, **kwargs)`` 的計算結果，而呼叫死"
"亡的最終化器會回傳 :const:`None`。"

#: ../../library/weakref.rst:280
msgid ""
"Exceptions raised by finalizer callbacks during garbage collection will be "
"shown on the standard error output, but cannot be propagated.  They are "
"handled in the same way as exceptions raised from an object's :meth:`~object."
"__del__` method or a weak reference's callback."
msgstr ""
"垃圾回收期間最終化器回呼引發的例外會在標準錯誤輸出中顯示，但無法傳播。它們的"
"處理方式與從物件的 :meth:`~object.__del__` 方法或弱參照的回呼引發的例外相同。"

#: ../../library/weakref.rst:286
msgid ""
"When the program exits, each remaining live finalizer is called unless its :"
"attr:`atexit` attribute has been set to false.  They are called in reverse "
"order of creation."
msgstr ""
"當程式結束時，除非該最終化器的 :attr:`atexit` 屬性已被設定為 false，否則每個"
"存活的最終化器會被呼叫。它們以與建立相反的順序被呼叫。"

#: ../../library/weakref.rst:290
msgid ""
"A finalizer will never invoke its callback during the later part of the :"
"term:`interpreter shutdown` when module globals are liable to have been "
"replaced by :const:`None`."
msgstr ""
"當模組的 globals 可能被 :const:`None` 取代時，最終化器永遠不會在 :term:"
"`interpreter shutdown` 的後期調用（invoke）其回呼。"

#: ../../library/weakref.rst:296
msgid ""
"If *self* is alive then mark it as dead and return the result of calling "
"``func(*args, **kwargs)``.  If *self* is dead then return :const:`None`."
msgstr ""
"如果 *self* 仍存活，則將其標記為死亡並回傳呼叫 ``func(*args, **kwargs)`` 的結"
"果。如果 *self* 已死亡，則回傳 :const:`None`。"

#: ../../library/weakref.rst:302
msgid ""
"If *self* is alive then mark it as dead and return the tuple ``(obj, func, "
"args, kwargs)``.  If *self* is dead then return :const:`None`."
msgstr ""
"如果 *self* 仍存活，則將其標記為死亡並回傳元組 ``(obj, func, args, "
"kwargs)``。如果 *self* 已死亡，則回傳 :const:`None`。"

#: ../../library/weakref.rst:308
msgid ""
"If *self* is alive then return the tuple ``(obj, func, args, kwargs)``.  If "
"*self* is dead then return :const:`None`."
msgstr ""
"如果 *self* 仍存活，則回傳元組 ``(obj, func, args, kwargs)``。如果 *self* 已"
"死亡，則回傳 :const:`None`。"

#: ../../library/weakref.rst:313
msgid "Property which is true if the finalizer is alive, false otherwise."
msgstr "如果最終化器仍存活，則屬性為 true，否則為 false。"

#: ../../library/weakref.rst:317
msgid ""
"A writable boolean property which by default is true.  When the program "
"exits, it calls all remaining live finalizers for which :attr:`.atexit` is "
"true.  They are called in reverse order of creation."
msgstr ""
"一個可寫的布林屬性，預設為 true。當程式結束時，它會呼叫 :attr:`.atexit` 為 "
"true 的所有剩餘且仍存活的最終化器。它們以與建立相反的順序被呼叫。"

#: ../../library/weakref.rst:324
msgid ""
"It is important to ensure that *func*, *args* and *kwargs* do not own any "
"references to *obj*, either directly or indirectly, since otherwise *obj* "
"will never be garbage collected.  In particular, *func* should not be a "
"bound method of *obj*."
msgstr ""
"確保 *func*、*args* 和 *kwargs* 不直接或間接擁有對 *obj* 的任何參照非常重要，"
"否則 *obj* 將永遠不會被垃圾回收。尤其 *func* 不應該是 *obj* 的繫結方法。"

#: ../../library/weakref.rst:334
msgid "The type object for weak references objects."
msgstr "弱參照物件的型別物件。"

#: ../../library/weakref.rst:339
msgid "The type object for proxies of objects which are not callable."
msgstr "非可呼叫物件的代理的型別物件。"

#: ../../library/weakref.rst:344
msgid "The type object for proxies of callable objects."
msgstr "可呼叫物件的代理的型別物件。"

#: ../../library/weakref.rst:349
msgid ""
"Sequence containing all the type objects for proxies.  This can make it "
"simpler to test if an object is a proxy without being dependent on naming "
"both proxy types."
msgstr ""
"包含代理的所有型別物件的序列。這可以讓測試物件是否為代理變得更簡單，而無需依"
"賴命名兩種代理型別。"

#: ../../library/weakref.rst:356
msgid ":pep:`205` - Weak References"
msgstr ":pep:`205` - 弱參照"

#: ../../library/weakref.rst:357
msgid ""
"The proposal and rationale for this feature, including links to earlier "
"implementations and information about similar features in other languages."
msgstr "此功能的提案和理由，包括早期實作的連結以及其他語言中類似功能的資訊。"

#: ../../library/weakref.rst:364
msgid "Weak Reference Objects"
msgstr "弱參照物件"

#: ../../library/weakref.rst:366
msgid ""
"Weak reference objects have no methods and no attributes besides :attr:`ref."
"__callback__`. A weak reference object allows the referent to be obtained, "
"if it still exists, by calling it:"
msgstr ""
"弱參照物件除了 :attr:`ref.__callback__` 之外沒有任何方法和屬性。弱參照物件允"
"許透過呼叫來獲取參照目標（如果它仍然存在）："

#: ../../library/weakref.rst:380
msgid ""
"If the referent no longer exists, calling the reference object returns :"
"const:`None`:"
msgstr "如果參照目標不再存活，則呼叫參照物件將回傳 :const:`None`："

#: ../../library/weakref.rst:387
msgid ""
"Testing that a weak reference object is still live should be done using the "
"expression ``ref() is not None``.  Normally, application code that needs to "
"use a reference object should follow this pattern::"
msgstr ""
"應該使用運算式 ``ref() is not None`` 來測試弱參照物件是否仍然存活。需要使用參"
"照物件的應用程式程式碼通常應遵循以下模式： ::"

#: ../../library/weakref.rst:400
msgid ""
"Using a separate test for \"liveness\" creates race conditions in threaded "
"applications; another thread can cause a weak reference to become "
"invalidated before the weak reference is called; the idiom shown above is "
"safe in threaded applications as well as single-threaded applications."
msgstr ""
"使用對「活性 (liveness)」的單獨測試會在執行緒應用程式中建立競爭條件 (race "
"condition)；另一個執行緒可能在弱參照被呼叫之前讓該弱參照失效；上方顯示的慣用"
"作法在執行緒應用程式和單執行緒應用程式中都是安全的。"

#: ../../library/weakref.rst:405
msgid ""
"Specialized versions of :class:`ref` objects can be created through "
"subclassing. This is used in the implementation of the :class:"
"`WeakValueDictionary` to reduce the memory overhead for each entry in the "
"mapping.  This may be most useful to associate additional information with a "
"reference, but could also be used to insert additional processing on calls "
"to retrieve the referent."
msgstr ""
"可以透過子類別化來建立 :class:`ref` 物件的特殊版本。這在 :class:"
"`WeakValueDictionary` 的實作中被使用，以減少對映中每個條目的記憶體開銷。這對"
"於將附加資訊與參照相關聯最有用，但也可用於在呼叫上插入附加處理以檢索參照目"
"標。"

#: ../../library/weakref.rst:411
msgid ""
"This example shows how a subclass of :class:`ref` can be used to store "
"additional information about an object and affect the value that's returned "
"when the referent is accessed::"
msgstr ""
"這個範例展示如何使用 :class:`ref` 的子類別來儲存有關物件的附加資訊並影響存取"
"參照目標時回傳的值： ::"

#: ../../library/weakref.rst:438
msgid "Example"
msgstr "範例"

#: ../../library/weakref.rst:440
msgid ""
"This simple example shows how an application can use object IDs to retrieve "
"objects that it has seen before.  The IDs of the objects can then be used in "
"other data structures without forcing the objects to remain alive, but the "
"objects can still be retrieved by ID if they do."
msgstr ""
"這個簡單的範例展示了應用程式如何使用物件 ID 來檢索它以前見過​​的物件。物件的 "
"ID 之後可以在其他資料結構中使用，而不必強制物件保持存活，但如果這樣做，仍然可"
"以透過 ID 檢索物件。"

#: ../../library/weakref.rst:465
msgid "Finalizer Objects"
msgstr "最終化器物件"

#: ../../library/weakref.rst:467
msgid ""
"The main benefit of using :class:`finalize` is that it makes it simple to "
"register a callback without needing to preserve the returned finalizer "
"object.  For instance"
msgstr ""
"使用 :class:`finalize` 的最大優點是可以輕鬆註冊回呼，而無需保留回傳的最終化器"
"物件。例如"

#: ../../library/weakref.rst:481
msgid ""
"The finalizer can be called directly as well.  However the finalizer will "
"invoke the callback at most once."
msgstr "最終化器也可以直接被呼叫。然而，最終化器最多會調用回呼一次。"

#: ../../library/weakref.rst:497
msgid ""
"You can unregister a finalizer using its :meth:`~finalize.detach` method.  "
"This kills the finalizer and returns the arguments passed to the constructor "
"when it was created."
msgstr ""
"你可以使用最終化器的 :meth:`~finalize.detach` 方法來取消註冊最終化器。這會殺"
"死最終化器並回傳建立建構函式時傳遞給建構函式的引數。"

#: ../../library/weakref.rst:511
msgid ""
"Unless you set the :attr:`~finalize.atexit` attribute to :const:`False`, a "
"finalizer will be called when the program exits if it is still alive.  For "
"instance"
msgstr ""
"除非你將 :attr:`~finalize.atexit` 屬性設為 :const:`False`，否則當程式結束時，"
"最終化器將會被呼叫如果其仍然存在。例如"

#: ../../library/weakref.rst:526
msgid "Comparing finalizers with :meth:`~object.__del__` methods"
msgstr "最終化器與 :meth:`~object.__del__` 方法的比較"

#: ../../library/weakref.rst:528
msgid ""
"Suppose we want to create a class whose instances represent temporary "
"directories.  The directories should be deleted with their contents when the "
"first of the following events occurs:"
msgstr ""
"假設我們要建立一個類別，其實例代表臨時目錄。當以下任一事件發生時，應刪除目錄"
"及其內容："

#: ../../library/weakref.rst:532
msgid "the object is garbage collected,"
msgstr "該物件被垃圾回收，"

#: ../../library/weakref.rst:533
msgid "the object's :meth:`!remove` method is called, or"
msgstr "該物件的 :meth:`!remove` 方法被呼叫，或者"

#: ../../library/weakref.rst:534
msgid "the program exits."
msgstr "程式結束。"

#: ../../library/weakref.rst:536
msgid ""
"We might try to implement the class using a :meth:`~object.__del__` method "
"as follows::"
msgstr ""
"我們可以用以下的方式來嘗試使用 :meth:`~object.__del__` 方法實作該類別： ::"

#: ../../library/weakref.rst:555
msgid ""
"Starting with Python 3.4, :meth:`~object.__del__` methods no longer prevent "
"reference cycles from being garbage collected, and module globals are no "
"longer forced to :const:`None` during :term:`interpreter shutdown`. So this "
"code should work without any issues on CPython."
msgstr ""
"從 Python 3.4 開始，:meth:`~object.__del__` 方法不再阻止參照循環 (reference "
"cycle) 被垃圾回收，並且在 :term:`interpreter shutdown` 期間不再強制將模組的 "
"globals 設為 :const:`None`。所以這段程式碼在 CPython 上應該可以正常運作。"

#: ../../library/weakref.rst:560
msgid ""
"However, handling of :meth:`~object.__del__` methods is notoriously "
"implementation specific, since it depends on internal details of the "
"interpreter's garbage collector implementation."
msgstr ""
"然而，眾所周知，對 :meth:`~object.__del__` 方法的處理是特地實作的，因為它依賴"
"於直譯器的垃圾回收器實作的內部細節。"

#: ../../library/weakref.rst:564
msgid ""
"A more robust alternative can be to define a finalizer which only references "
"the specific functions and objects that it needs, rather than having access "
"to the full state of the object::"
msgstr ""
"更耐用的替代方案可以是定義一個最終化器，其僅參照需要的特定函式和物件，而不是"
"存取物件的完整狀態： ::"

#: ../../library/weakref.rst:580
msgid ""
"Defined like this, our finalizer only receives a reference to the details it "
"needs to clean up the directory appropriately. If the object never gets "
"garbage collected the finalizer will still be called at exit."
msgstr ""
"定義如下，我們的最終化器僅接收對適當清理目錄所需的詳細資訊的參照。如果物件從"
"未被垃圾回收，則最終化器仍將在結束時被呼叫。"

#: ../../library/weakref.rst:584
msgid ""
"The other advantage of weakref based finalizers is that they can be used to "
"register finalizers for classes where the definition is controlled by a "
"third party, such as running code when a module is unloaded::"
msgstr ""
"基於 weakref 的最終化器的另一個優點是它們可用於為定義由第三方控制的類別註冊最"
"終化器，例如在卸載模組時執行程式碼： ::"

#: ../../library/weakref.rst:596
msgid ""
"If you create a finalizer object in a daemonic thread just as the program "
"exits then there is the possibility that the finalizer does not get called "
"at exit.  However, in a daemonic thread :func:`atexit.register`, ``try: ... "
"finally: ...`` and ``with: ...`` do not guarantee that cleanup occurs either."
msgstr ""
"如果在程式結束時在常駐的 (daemonic) 執行緒中建立最終化器物件，則最終化器有可"
"能在結束時不會被呼叫。然而，在常駐的執行緒中 :func:`atexit.register`、"
"``try: ... finally: ...`` 和 ``with: ...`` 也不保證清理會發生。"

#~ msgid ""
#~ "Added support for ``|`` and ``|=`` operators, specified in :pep:`584`."
#~ msgstr "新增 :pep:`584` 所述對於 ``|`` 與 ``|=`` 運算子的支援。"
