# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Matt Wang <mattwang44@gmail.com>, 2023
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-26 00:03+0000\n"
"PO-Revision-Date: 2023-12-11 00:03+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/multiprocessing.shared_memory.rst:2
msgid ""
":mod:`multiprocessing.shared_memory` --- Shared memory for direct access "
"across processes"
msgstr ""
":mod:`multiprocessing.shared_memory` --- 對於共享記憶體的跨行程直接存取"

#: ../../library/multiprocessing.shared_memory.rst:7
msgid "**Source code:** :source:`Lib/multiprocessing/shared_memory.py`"
msgstr "**原始碼：**\\ :source:`Lib/multiprocessing/shared_memory.py`"

#: ../../library/multiprocessing.shared_memory.rst:18
msgid ""
"This module provides a class, :class:`SharedMemory`, for the allocation and "
"management of shared memory to be accessed by one or more processes on a "
"multicore or symmetric multiprocessor (SMP) machine.  To assist with the "
"life-cycle management of shared memory especially across distinct processes, "
"a :class:`~multiprocessing.managers.BaseManager` subclass, :class:"
"`SharedMemoryManager`, is also provided in the ``multiprocessing.managers`` "
"module."
msgstr ""
"該模組提供了一個 :class:`SharedMemory` 類別，用於分配和管理被多核心或對稱多處"
"理器 (symmetric multiprocessor, SMP) 機器上的一個或多個行程存取的共享記憶體。"
"為了協助共享記憶體的生命週期管理，特別是跨不同行程的管理，``multiprocessing."
"managers`` 模組中還提供了一個 :class:`~multiprocessing.managers.BaseManager` "
"子類別 :class:`SharedMemoryManager`。"

#: ../../library/multiprocessing.shared_memory.rst:26
msgid ""
"In this module, shared memory refers to \"System V style\" shared memory "
"blocks (though is not necessarily implemented explicitly as such) and does "
"not refer to \"distributed shared memory\".  This style of shared memory "
"permits distinct processes to potentially read and write to a common (or "
"shared) region of volatile memory.  Processes are conventionally limited to "
"only have access to their own process memory space but shared memory permits "
"the sharing of data between processes, avoiding the need to instead send "
"messages between processes containing that data.  Sharing data directly via "
"memory can provide significant performance benefits compared to sharing data "
"via disk or socket or other communications requiring the serialization/"
"deserialization and copying of data."
msgstr ""
"在此模組中，共享記憶體是指「System V 風格」的共享記憶體區塊（儘管不一定如此明"
"確實作），而不是指「分散式共享記憶體 (distributed shared memory)」。這種型別"
"的共享記憶體允許不同的行程潛在地讀取和寫入揮發性記憶體 (volatile memory) 的公"
"開（或共享）區域。通常行程只能存取自己的行程記憶體空間，但共享記憶體允許在行"
"程之間共享資料，從而避免需要跨行程傳遞資料的情境。與透過硬碟或 "
"socket 或其他需要序列化/還原序列化 (serialization/deserialization) 和複製資料"
"的通訊方式以共享資料相比，直接透過記憶體共享資料可以提供顯著的性能優勢。"

#: ../../library/multiprocessing.shared_memory.rst:41
msgid ""
"Creates a new shared memory block or attaches to an existing shared memory "
"block.  Each shared memory block is assigned a unique name. In this way, one "
"process can create a shared memory block with a particular name and a "
"different process can attach to that same shared memory block using that "
"same name."
msgstr ""
"建立新的共享記憶體區塊或附加到現有的共享記憶體區塊。每個共享記憶體區塊都被分"
"配了一個唯一的名稱。透過這種方式，一個行程可以建立具有特定名稱的共享記憶體區"
"塊，而不同的行程可以使用該相同名稱附加到同一共享記憶體區塊。"

#: ../../library/multiprocessing.shared_memory.rst:47
msgid ""
"As a resource for sharing data across processes, shared memory blocks may "
"outlive the original process that created them.  When one process no longer "
"needs access to a shared memory block that might still be needed by other "
"processes, the :meth:`close()` method should be called. When a shared memory "
"block is no longer needed by any process, the :meth:`unlink()` method should "
"be called to ensure proper cleanup."
msgstr ""
"作為跨行程共享資料的資源，共享記憶體區塊的壽命可能比建立它們的原始行程還要"
"長。當一個行程不再需要存取但其他行程可能仍需要的共享記憶體區塊時，應該呼叫 :"
"meth:`close()` 方法。當任何行程不再需要共享記憶體區塊時，應呼叫 :meth:"
"`unlink()` 方法以確保正確清理。"

#: ../../library/multiprocessing.shared_memory.rst:54
msgid ""
"*name* is the unique name for the requested shared memory, specified as a "
"string.  When creating a new shared memory block, if ``None`` (the default) "
"is supplied for the name, a novel name will be generated."
msgstr ""
"*name* 是所請求的共享記憶體的唯一名稱，指定為字串。建立新的共享記憶體區塊時，"
"如果名稱提供為 ``None``\\ （預設值），則會生成一個新的名稱。"

#: ../../library/multiprocessing.shared_memory.rst:58
msgid ""
"*create* controls whether a new shared memory block is created (``True``) or "
"an existing shared memory block is attached (``False``)."
msgstr ""
"*create* 控制是否建立新的共享記憶體區塊 (``True``) 或附加現有的共享記憶體區"
"塊 (``False``)。"

#: ../../library/multiprocessing.shared_memory.rst:61
msgid ""
"*size* specifies the requested number of bytes when creating a new shared "
"memory block.  Because some platforms choose to allocate chunks of memory "
"based upon that platform's memory page size, the exact size of the shared "
"memory block may be larger or equal to the size requested.  When attaching "
"to an existing shared memory block, the ``size`` parameter is ignored."
msgstr ""
"*size* 指定了建立新共享記憶體區塊時請求的位元組數。由於某些平台會根據該平台的"
"記憶體頁 (memory page) 大小來選擇分配記憶體區塊，因此共享記憶體區塊的確切大小"
"可能大於或等於請求的大小。當附加到現有共享記憶體區塊時，``size`` 參數將被忽"
"略。"

#: ../../library/multiprocessing.shared_memory.rst:69
msgid ""
"Closes access to the shared memory from this instance.  In order to ensure "
"proper cleanup of resources, all instances should call ``close()`` once the "
"instance is no longer needed.  Note that calling ``close()`` does not cause "
"the shared memory block itself to be destroyed."
msgstr ""
"關閉從此實例對共享記憶體的存取。為了確保正確清理資源，一旦實例不再被需要，所"
"有實例都應該呼叫 ``close()``。請注意，呼叫 ``close()`` 不會使得共享記憶體區塊"
"本身被銷毀。"

#: ../../library/multiprocessing.shared_memory.rst:77
msgid ""
"Requests that the underlying shared memory block be destroyed.  In order to "
"ensure proper cleanup of resources, ``unlink()`` should be called once (and "
"only once) across all processes which have need for the shared memory "
"block.  After requesting its destruction, a shared memory block may or may "
"not be immediately destroyed and this behavior may differ across platforms.  "
"Attempts to access data inside the shared memory block after ``unlink()`` "
"has been called may result in memory access errors.  Note: the last process "
"relinquishing its hold on a shared memory block may call ``unlink()`` and :"
"meth:`close()` in either order."
msgstr ""
"請求銷毀底層共享記憶體區塊。為了確保正確清理資源，應該在需要共享記憶體區塊的"
"所有行程中呼叫一次（且僅一次）\\ ``unlink()``。請求銷毀後，共享記憶體區塊可能"
"會也可能不會立即銷毀，此行為可能因平台而異。呼叫 ``unlink()`` 後嘗試存取共享"
"記憶體區塊內的資料可能會導致記憶體存取錯誤。注意：最後一個放棄持有某共享記憶"
"體區塊的行程可以按任意順序呼叫 ``unlink()`` 和 :meth:`close()`。"

#: ../../library/multiprocessing.shared_memory.rst:90
msgid "A memoryview of contents of the shared memory block."
msgstr "共享記憶體區塊內容的記憶體視圖 (memoryview)。"

#: ../../library/multiprocessing.shared_memory.rst:94
msgid "Read-only access to the unique name of the shared memory block."
msgstr "對共享記憶體區塊之唯一名稱的唯讀存取。"

#: ../../library/multiprocessing.shared_memory.rst:98
msgid "Read-only access to size in bytes of the shared memory block."
msgstr "對共享記憶體區塊大小（以位元組為單位）的唯讀存取。"

#: ../../library/multiprocessing.shared_memory.rst:101
msgid ""
"The following example demonstrates low-level use of :class:`SharedMemory` "
"instances::"
msgstr "以下範例示範了 :class:`SharedMemory` 實例的低階使用方式： ::"

#: ../../library/multiprocessing.shared_memory.rst:127
msgid ""
"The following example demonstrates a practical use of the :class:"
"`SharedMemory` class with `NumPy arrays <https://numpy.org/>`_, accessing "
"the same ``numpy.ndarray`` from two distinct Python shells:"
msgstr ""
"以下範例示範了 :class:`SharedMemory` 類別與 `NumPy 陣列 <https://numpy.org/"
">`_\\ 的實際用法：從兩個不同的 Python shell 存取相同的 ``numpy.ndarray``："

#: ../../library/multiprocessing.shared_memory.rst:181
msgid ""
"A subclass of :class:`~multiprocessing.managers.BaseManager` which can be "
"used for the management of shared memory blocks across processes."
msgstr ""
":class:`~multiprocessing.managers.BaseManager` 的子類別，可用於跨行程管理共享"
"記憶體區塊。"

#: ../../library/multiprocessing.shared_memory.rst:184
msgid ""
"A call to :meth:`~multiprocessing.managers.BaseManager.start` on a :class:"
"`SharedMemoryManager` instance causes a new process to be started. This new "
"process's sole purpose is to manage the life cycle of all shared memory "
"blocks created through it.  To trigger the release of all shared memory "
"blocks managed by that process, call :meth:`~multiprocessing.managers."
"BaseManager.shutdown()` on the instance. This triggers a :meth:`SharedMemory."
"unlink()` call on all of the :class:`SharedMemory` objects managed by that "
"process and then stops the process itself.  By creating ``SharedMemory`` "
"instances through a ``SharedMemoryManager``, we avoid the need to manually "
"track and trigger the freeing of shared memory resources."
msgstr ""
"在 :class:`SharedMemoryManager` 實例上呼叫 :meth:`~multiprocessing.managers."
"BaseManager.start` 會啟動一個新行程。這個新行程的唯一目的是管理那些透過它建立"
"出的所有共享記憶體區塊的生命週期。要觸發釋放該行程管理的所有共享記憶體區塊，"
"請在實例上呼叫 :meth:`~multiprocessing.managers.BaseManager.shutdown()`，這會"
"觸發對該行程管理的所有 :class:`SharedMemory` 物件的 :meth:`SharedMemory."
"unlink()` 呼叫，然後再停止這個行程。透過 ``SharedMemoryManager`` 建立 "
"``SharedMemory`` 實例，我們無需手動追蹤和觸發共享記憶體資源的釋放。"

#: ../../library/multiprocessing.shared_memory.rst:196
msgid ""
"This class provides methods for creating and returning :class:`SharedMemory` "
"instances and for creating a list-like object (:class:`ShareableList`) "
"backed by shared memory."
msgstr ""
"此類別提供了用於建立和回傳 :class:`SharedMemory` 實例以及建立由共享記憶體支援"
"的類串列物件 (:class:`ShareableList`) 的方法。"

#: ../../library/multiprocessing.shared_memory.rst:200
msgid ""
"Refer to :class:`multiprocessing.managers.BaseManager` for a description of "
"the inherited *address* and *authkey* optional input arguments and how they "
"may be used to connect to an existing ``SharedMemoryManager`` service from "
"other processes."
msgstr ""
"請參閱 :class:`multiprocessing.managers.BaseManager` 了解繼承的 *address* 和 "
"*authkey* 可選輸入引數的描述以及如何使用它們從其他行程連接到現有的 "
"``SharedMemoryManager`` 服務。"

#: ../../library/multiprocessing.shared_memory.rst:207
msgid ""
"Create and return a new :class:`SharedMemory` object with the specified "
"``size`` in bytes."
msgstr ""
"建立並回傳一個新的 :class:`SharedMemory` 物件，該物件具有指定的 ``size``\\ "
"（以位元組為單位）。"

#: ../../library/multiprocessing.shared_memory.rst:212
msgid ""
"Create and return a new :class:`ShareableList` object, initialized by the "
"values from the input ``sequence``."
msgstr ""
"建立並回傳一個新的 :class:`ShareableList` 物件，該物件由輸入 ``sequence`` 中"
"的值初始化。"

#: ../../library/multiprocessing.shared_memory.rst:216
msgid ""
"The following example demonstrates the basic mechanisms of a :class:"
"`SharedMemoryManager`:"
msgstr "以下範例示範了 :class:`SharedMemoryManager` 的基本作用機制："

#: ../../library/multiprocessing.shared_memory.rst:234
msgid ""
"The following example depicts a potentially more convenient pattern for "
"using :class:`SharedMemoryManager` objects via the :keyword:`with` statement "
"to ensure that all shared memory blocks are released after they are no "
"longer needed:"
msgstr ""
"以下範例描述了一種可能更方便的模式，即透過 :keyword:`with` 陳述式使用 :class:"
"`SharedMemoryManager` 物件，以確保所有共享記憶體區塊不再被需要後都被釋放："

#: ../../library/multiprocessing.shared_memory.rst:253
msgid ""
"When using a :class:`SharedMemoryManager` in a :keyword:`with` statement, "
"the shared memory blocks created using that manager are all released when "
"the :keyword:`with` statement's code block finishes execution."
msgstr ""
"在 :keyword:`with` 陳述式中使用 :class:`SharedMemoryManager` 時，當 :keyword:"
"`with` 陳述式的程式碼區塊執行完畢時，使用該管理器建立的共享記憶體區塊都會被釋"
"放。"

#: ../../library/multiprocessing.shared_memory.rst:260
msgid ""
"Provides a mutable list-like object where all values stored within are "
"stored in a shared memory block.  This constrains storable values to only "
"the ``int`` (signed 64-bit), ``float``, ``bool``, ``str`` (less than 10M "
"bytes each when encoded as utf-8), ``bytes`` (less than 10M bytes each), and "
"``None`` built-in data types.  It also notably differs from the built-in "
"``list`` type in that these lists can not change their overall length (i.e. "
"no append, insert, etc.) and do not support the dynamic creation of new :"
"class:`ShareableList` instances via slicing."
msgstr ""
"提供一個類似串列的可變物件，其中有被儲存的所有值都儲存在共享記憶體區塊中。這"
"限制了可存儲的值只能夠是內建資料型別 ``int``\\ （帶符號的 64 位元 (signed 64-"
"bit)）、``float``、``bool``、``str``\\ （編碼為 utf-8 時個別小於 10M 位元"
"組）、``bytes``\\ （個別小於 10M 位元組）和 ``None``。它還與內建的 ``list`` "
"型別有顯著不同，因為這些串列不能更改其總長度（即不能追加 (append)、插入等），"
"並且不支援透過切片動態建立新的 :class:`ShareableList` 實例。"

#: ../../library/multiprocessing.shared_memory.rst:270
msgid ""
"*sequence* is used in populating a new ``ShareableList`` full of values. Set "
"to ``None`` to instead attach to an already existing ``ShareableList`` by "
"its unique shared memory name."
msgstr ""
"*sequence* 用於填充 (populate) 一個充滿值的新 ``ShareableList``。設定為 "
"``None`` 以透過其唯一的共享記憶體名稱來附加到已經存在的 ``ShareableList``。"

#: ../../library/multiprocessing.shared_memory.rst:274
msgid ""
"*name* is the unique name for the requested shared memory, as described in "
"the definition for :class:`SharedMemory`.  When attaching to an existing "
"``ShareableList``, specify its shared memory block's unique name while "
"leaving ``sequence`` set to ``None``."
msgstr ""
"如 :class:`SharedMemory` 的定義中所述，*name* 是被請求之共享記憶體的唯一名"
"稱。當附加到現有的 ``ShareableList`` 時，指定其共享記憶體區塊的唯一名稱，同時"
"將 ``sequence`` 設定為 ``None``。"

#: ../../library/multiprocessing.shared_memory.rst:281
msgid ""
"A known issue exists for :class:`bytes` and :class:`str` values. If they end "
"with ``\\x00`` nul bytes or characters, those may be *silently stripped* "
"when fetching them by index from the :class:`ShareableList`. This ``."
"rstrip(b'\\x00')`` behavior is considered a bug and may go away in the "
"future. See :gh:`106939`."
msgstr ""
":class:`bytes` 和 :class:`str` 值存在一個已知問題。如果它們以 ``\\x00`` nul "
"位元組或字元結尾，那麼當透過索引從 :class:`ShareableList` 中獲取它們時，這些"
"位元組或字元可能會被\\ *默默地剝離 (silently stripped)*。這種 ``."
"rstrip(b'\\x00')`` 行為被認為是一個錯誤，將來可能會消失。請參閱 :gh:"
"`106939`。"

#: ../../library/multiprocessing.shared_memory.rst:287
msgid ""
"For applications where rstripping of trailing nulls is a problem, work "
"around it by always unconditionally appending an extra non-0 byte to the end "
"of such values when storing and unconditionally removing it when fetching:"
msgstr ""
"對於去除尾隨空值 (rstripping of trailing nulls) 會出問題的應用程式，變通解法 "
"(workaround) 是始終無條件地在儲存時於此類值的末尾追加一個額外非 0 位元組，並"
"在獲取時也無條件地刪除它："

#: ../../library/multiprocessing.shared_memory.rst:310
msgid "Returns the number of occurrences of ``value``."
msgstr "回傳 ``value`` 出現的次數。"

#: ../../library/multiprocessing.shared_memory.rst:314
msgid ""
"Returns first index position of ``value``.  Raises :exc:`ValueError` if "
"``value`` is not present."
msgstr ""
"回傳 ``value`` 的第一個索引位置。如果 ``value`` 不存在，則引發 :exc:"
"`ValueError`。"

#: ../../library/multiprocessing.shared_memory.rst:319
msgid ""
"Read-only attribute containing the :mod:`struct` packing format used by all "
"currently stored values."
msgstr "唯讀屬性，包含所有目前有儲存的值所使用的 :mod:`struct` 打包格式。"

#: ../../library/multiprocessing.shared_memory.rst:324
msgid "The :class:`SharedMemory` instance where the values are stored."
msgstr "儲存值的 :class:`SharedMemory` 實例。"

#: ../../library/multiprocessing.shared_memory.rst:327
msgid ""
"The following example demonstrates basic use of a :class:`ShareableList` "
"instance:"
msgstr "以下範例示範了 :class:`ShareableList` 實例的基本用法："

#: ../../library/multiprocessing.shared_memory.rst:360
msgid ""
"The following example depicts how one, two, or many processes may access the "
"same :class:`ShareableList` by supplying the name of the shared memory block "
"behind it:"
msgstr ""
"以下範例描述了一個、兩個或多個行程如何透過提供後面的共享記憶體區塊名稱來存取"
"同一個 :class:`ShareableList`："

#: ../../library/multiprocessing.shared_memory.rst:375
msgid ""
"The following examples demonstrates that ``ShareableList`` (and underlying "
"``SharedMemory``) objects can be pickled and unpickled if needed. Note, that "
"it will still be the same shared object. This happens, because the "
"deserialized object has the same unique name and is just attached to an "
"existing object with the same name (if the object is still alive):"
msgstr ""
"以下範例示範了如果需要，可以對 ``ShareableList``\\ （和底層 "
"``SharedMemory``\\ ）物件進行 pickle 和 unpickle。請注意，它仍然是相同的共享"
"物件。發生這種情況是因為反序列化的物件具有相同的唯一名稱，並且只是附加到具有"
"相同名稱的現有物件（如果該物件仍然存在）："

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "Shared Memory"
msgstr "Shared Memory（共享記憶體）"

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "POSIX Shared Memory"
msgstr "POSIX Shared Memory（POSIX 共享記憶體）"

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "Named Shared Memory"
msgstr "Named Shared Memory（附名共享記憶體）"
