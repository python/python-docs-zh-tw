# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Adrian Liaw <adrianliaw2000@gmail.com>, 2018
# Matt Wang <mattwag44@gmail.com>, 2023
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-24 00:03+0000\n"
"PO-Revision-Date: 2018-05-23 16:07+0000\n"
"Last-Translator: Matt Wang <mattwag44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pickletools.rst:2
msgid ":mod:`pickletools` --- Tools for pickle developers"
msgstr ":mod:`pickletools` --- pickle 開發者的工具"

#: ../../library/pickletools.rst:8
msgid "**Source code:** :source:`Lib/pickletools.py`"
msgstr "**原始碼：**\\ :source:`Lib/pickletools.py`"

#: ../../library/pickletools.rst:13
msgid ""
"This module contains various constants relating to the intimate details of "
"the :mod:`pickle` module, some lengthy comments about the implementation, "
"and a few useful functions for analyzing pickled data.  The contents of this "
"module are useful for Python core developers who are working on the :mod:"
"`pickle`; ordinary users of the :mod:`pickle` module probably won't find "
"the :mod:`pickletools` module relevant."
msgstr ""
"該模組包含與 :mod:`pickle` 模組的詳細資訊相關的各種常數、一些有關實作的冗長註"
"釋以及一些用於分析已 pickle 資料的有用函式。該模組的內容對於有 :mod:`pickle` "
"相關工作的 Python 核心開發人員很有用；:mod:`pickle` 模組的一般使用者可能不會"
"發現 :mod:`pickletools` 模組。"

#: ../../library/pickletools.rst:23
msgid "Command line usage"
msgstr "命令列用法"

#: ../../library/pickletools.rst:27
msgid ""
"When invoked from the command line, ``python -m pickletools`` will "
"disassemble the contents of one or more pickle files.  Note that if you want "
"to see the Python object stored in the pickle rather than the details of "
"pickle format, you may want to use ``-m pickle`` instead. However, when the "
"pickle file that you want to examine comes from an untrusted source, ``-m "
"pickletools`` is a safer option because it does not execute pickle bytecode."
msgstr ""
"當從命令列呼叫時，``python -m pickletools`` 將拆解 (disassemble) 一個或多個 "
"pickle 檔案的內容。請注意，如果你想查看儲存在 pickle 中的 Python 物件而不是 "
"pickle 格式的詳細資訊，你可能需要使用 ``-m pickle``。但是，當你要檢查的 "
"pickle 檔案來自不受信任的來源時，``-m pickletools`` 是一個更安全的選項，因為"
"它不執行 pickle 位元組碼。"

#: ../../library/pickletools.rst:35
msgid "For example, with a tuple ``(1, 2)`` pickled in file ``x.pickle``:"
msgstr "例如，pickle 於檔案 ``x.pickle`` 中的元組 ``(1, 2)``："

#: ../../library/pickletools.rst:52
msgid "Command line options"
msgstr "命令列選項"

#: ../../library/pickletools.rst:58
msgid "Annotate each line with a short opcode description."
msgstr "用簡短的操作碼 (opcode) 描述註釋每一行。"

#: ../../library/pickletools.rst:62
msgid "Name of a file where the output should be written."
msgstr "應將輸出結果寫入之檔案的名稱。"

#: ../../library/pickletools.rst:66
msgid "The number of blanks by which to indent a new MARK level."
msgstr "新 MARK 級別縮進的空格數。"

#: ../../library/pickletools.rst:70
msgid ""
"When multiple objects are disassembled, preserve memo between disassemblies."
msgstr "當拆解多個物件時，會在拆解間保留備忘錄。"

#: ../../library/pickletools.rst:75
msgid ""
"When more than one pickle file are specified, print given preamble before "
"each disassembly."
msgstr ""
"當指定多個 pickle 檔案時，會在每次拆解之前印出給定的一段序言 (preamble)。"

#: ../../library/pickletools.rst:81
msgid "Programmatic Interface"
msgstr "程式化介面"

#: ../../library/pickletools.rst:86
msgid ""
"Outputs a symbolic disassembly of the pickle to the file-like object *out*, "
"defaulting to ``sys.stdout``.  *pickle* can be a string or a file-like "
"object.  *memo* can be a Python dictionary that will be used as the pickle's "
"memo; it can be used to perform disassemblies across multiple pickles "
"created by the same pickler. Successive levels, indicated by ``MARK`` "
"opcodes in the stream, are indented by *indentlevel* spaces.  If a nonzero "
"value is given to *annotate*, each opcode in the output is annotated with a "
"short description.  The value of *annotate* is used as a hint for the column "
"where annotation should start."
msgstr ""
"將 pickle 的符號拆解 (symbolic disassembly) 輸出到類檔案物件 *out*，預設為 "
"``sys.stdout``。*pickle* 可以是字串或類檔案物件。*memo* 可以是一個 Python 字"
"典，將用作 pickle 的備忘錄；它可用於對同一 pickler 建立的多個 pickle 執行拆"
"解。串流中由 ``MARK`` 操作碼指示的連續級別由 *indentlevel* 空格縮進。如果為 "
"*annotate* 指定非零值，則輸出中的每個操作碼都會用簡短的描述進行註釋。"
"*annotate* 的值用作為註釋之起始行提示。"

#: ../../library/pickletools.rst:97
msgid "Added the *annotate* parameter."
msgstr "新增 *annotate* 參數。"

#: ../../library/pickletools.rst:102
msgid ""
"Provides an :term:`iterator` over all of the opcodes in a pickle, returning "
"a sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an instance of "
"an :class:`OpcodeInfo` class; *arg* is the decoded value, as a Python "
"object, of the opcode's argument; *pos* is the position at which this opcode "
"is located. *pickle* can be a string or a file-like object."
msgstr ""
"提供 pickle 中所有操作碼的一個 :term:`iterator`，回傳形式為 ``(opcode, arg, "
"pos)`` 三元組序列。*opcode* 是 :class:`OpcodeInfo` 類別的實例；*arg* 是操作碼"
"引數的解碼值（作為 Python 物件）；*pos* 是該操作碼所在的位置。*pickle* 可以是"
"字串或類檔案物件。"

#: ../../library/pickletools.rst:110
msgid ""
"Returns a new equivalent pickle string after eliminating unused ``PUT`` "
"opcodes. The optimized pickle is shorter, takes less transmission time, "
"requires less storage space, and unpickles more efficiently."
msgstr ""
"消除未使用的 ``PUT`` 操作碼後回傳一個新的等效 pickle 字串。最佳化後的 pickle "
"更短、傳輸時間更少、需要更小的儲存空間，且 unpickle 效率也更高。"
