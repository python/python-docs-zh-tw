# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-17 17:39+0800\n"
"PO-Revision-Date: 2018-05-23 14:42+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/csv.rst:2
msgid ":mod:`csv` --- CSV File Reading and Writing"
msgstr ":mod:`csv` --- CSV 檔案讀取及寫入"

#: ../../library/csv.rst:9
msgid "**Source code:** :source:`Lib/csv.py`"
msgstr "**原始碼：**\\ :source:`Lib/csv.py`"

#: ../../library/csv.rst:17
msgid ""
"The so-called CSV (Comma Separated Values) format is the most common import "
"and export format for spreadsheets and databases.  CSV format was used for "
"many years prior to attempts to describe the format in a standardized way "
"in :rfc:`4180`.  The lack of a well-defined standard means that subtle "
"differences often exist in the data produced and consumed by different "
"applications.  These differences can make it annoying to process CSV files "
"from multiple sources. Still, while the delimiters and quoting characters "
"vary, the overall format is similar enough that it is possible to write a "
"single module which can efficiently manipulate such data, hiding the details "
"of reading and writing the data from the programmer."
msgstr ""
"所謂的 CSV (Comma Separated Values) 檔案格式是試算表及資料庫中最常見的"
"匯入、匯出檔案格式。在嘗試以 :rfc:`4180` 中的標準化方式來描述格式之前，"
"CSV 格式已經使用了許多年。由於缺少一個完善定義的標準，意味著各個不同的"
"應用程式會在資料產生及銷毀時有微妙的差別。這些不同之處使得從不同資料來源"
"處理 CSV 檔案時會非常擾人。儘管如此，雖然分隔符號和引號字元有所不同，整體的"
"格式非常相似，可以寫個單一模組來高效率的操作這樣的資料，讓程式設計師可以隱藏"
"讀取及寫入資料的細節。"

#: ../../library/csv.rst:28
msgid ""
"The :mod:`csv` module implements classes to read and write tabular data in "
"CSV format.  It allows programmers to say, \"write this data in the format "
"preferred by Excel,\" or \"read data from this file which was generated by "
"Excel,\" without knowing the precise details of the CSV format used by "
"Excel.  Programmers can also describe the CSV formats understood by other "
"applications or define their own special-purpose CSV formats."
msgstr ""
":mod:`csv` 模組實作透過 class 去讀取、寫入 CSV 格式的表格資料。"
"它讓程式設計師可以說出：「以 Excel 為首選並寫入該種格式的資料」或是"
"「從 Excel 產生的檔案來讀取資料」，且無需知道這是 Excel 所使用的 "
"CSV 格式等精確的細節。程式設計師也可以描述其他應用程式所理解的 CSV 格式"
"或他們自行定義具有特殊意義的 CSV 格式。"

#: ../../library/csv.rst:35
msgid ""
"The :mod:`csv` module's :class:`reader` and :class:`writer` objects read and "
"write sequences.  Programmers can also read and write data in dictionary "
"form using the :class:`DictReader` and :class:`DictWriter` classes."
msgstr ""
":mod:`csv` 模組的 :class:`reader` 及 :class:`writer` 物件可以讀取"
"及寫入序列。程式設計師也可以透過 :class:`DictReader` 及 :class:`DictWriter`"
" class（類別）使用 dictionary （字典）讀取及寫入資料。"

#: ../../library/csv.rst:41
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - CSV 檔案 API"

#: ../../library/csv.rst:42
msgid "The Python Enhancement Proposal which proposed this addition to Python."
msgstr "Python Enhancement Proposal (PEP) 所提出的 Python 附加功能。"

#: ../../library/csv.rst:48
msgid "Module Contents"
msgstr "模組內容"

#: ../../library/csv.rst:50
msgid "The :mod:`csv` module defines the following functions:"
msgstr ":mod:`csv` 模組定義了以下函式："

#: ../../library/csv.rst:58
msgid ""
"Return a reader object which will iterate over lines in the given *csvfile*. "
"*csvfile* can be any object which supports the :term:`iterator` protocol and "
"returns a string each time its :meth:`!__next__` method is called --- :term:"
"`file objects <file object>` and list objects are both suitable.   If "
"*csvfile* is a file object, it should be opened with ``newline=''``. [1]_  "
"An optional *dialect* parameter can be given which is used to define a set "
"of parameters specific to a particular CSV dialect.  It may be an instance "
"of a subclass of the :class:`Dialect` class or one of the strings returned "
"by the :func:`list_dialects` function.  The other optional *fmtparams* "
"keyword arguments can be given to override individual formatting parameters "
"in the current dialect.  For full details about the dialect and formatting "
"parameters, see section :ref:`csv-fmt-params`."
msgstr ""
"回傳一個讀取器物件 (reader object) 並在指定的 *csvfile* 中逐行疊代 (iterate)，"
"*csvfile* 可以成為任何物件並支援 :term:`iterator` 協定，每次呼叫 "
":meth:`!__next__` method（方法）時皆會回傳一個字串，"
":term:`檔案物件 (file object) <file object>` 及串列物件 (list object) "
"皆適用。如果 *csvfile* 是個檔案物件，則需開啟時使用 ``newline=''``。"
" [1]_ *dialect* 為一個可選填的參數，可以用為特定的 CSV dialect（方言）"
" 定義一組參數。它可能為 :class:`Dialect` 的一個子類別 (subclass) 的實例"
"或是由 :func:`list_dialects` 函式回傳的多個字串中的其中之一。"
"另一個可選填的關鍵字引數 *fmtparams* 可以在這個 dialect 中 override（覆寫）"
"獨立的格式化參數 (formatting parameter)。關於 dialect 及格式化參數的完整"
"說明，請見段落 :ref:`csv-fmt-params`。"


#: ../../library/csv.rst:71
msgid ""
"Each row read from the csv file is returned as a list of strings.  No "
"automatic data type conversion is performed unless the ``QUOTE_NONNUMERIC`` "
"format option is specified (in which case unquoted fields are transformed "
"into floats)."
msgstr ""

#: ../../library/csv.rst:75 ../../library/csv.rst:105 ../../library/csv.rst:178
#: ../../library/csv.rst:216
msgid "A short usage example::"
msgstr ""
"一個簡短的用法範例： ::"

#: ../../library/csv.rst:88
msgid ""
"Return a writer object responsible for converting the user's data into "
"delimited strings on the given file-like object.  *csvfile* can be any "
"object with a :func:`write` method.  If *csvfile* is a file object, it "
"should be opened with ``newline=''`` [1]_.  An optional *dialect* parameter "
"can be given which is used to define a set of parameters specific to a "
"particular CSV dialect.  It may be an instance of a subclass of the :class:"
"`Dialect` class or one of the strings returned by the :func:`list_dialects` "
"function.  The other optional *fmtparams* keyword arguments can be given to "
"override individual formatting parameters in the current dialect.  For full "
"details about dialects and formatting parameters, see the :ref:`csv-fmt-"
"params` section. To make it as easy as possible to interface with modules "
"which implement the DB API, the value :const:`None` is written as the empty "
"string.  While this isn't a reversible transformation, it makes it easier to "
"dump SQL NULL data values to CSV files without preprocessing the data "
"returned from a ``cursor.fetch*`` call. All other non-string data are "
"stringified with :func:`str` before being written."
msgstr ""

#: ../../library/csv.rst:117
msgid ""
"Associate *dialect* with *name*.  *name* must be a string. The dialect can "
"be specified either by passing a sub-class of :class:`Dialect`, or by "
"*fmtparams* keyword arguments, or both, with keyword arguments overriding "
"parameters of the dialect. For full details about dialects and formatting "
"parameters, see section :ref:`csv-fmt-params`."
msgstr ""

#: ../../library/csv.rst:126
msgid ""
"Delete the dialect associated with *name* from the dialect registry.  An :"
"exc:`Error` is raised if *name* is not a registered dialect name."
msgstr ""

#: ../../library/csv.rst:132
msgid ""
"Return the dialect associated with *name*.  An :exc:`Error` is raised if "
"*name* is not a registered dialect name.  This function returns an "
"immutable :class:`Dialect`."
msgstr ""

#: ../../library/csv.rst:138
msgid "Return the names of all registered dialects."
msgstr ""

#: ../../library/csv.rst:143
msgid ""
"Returns the current maximum field size allowed by the parser. If *new_limit* "
"is given, this becomes the new limit."
msgstr ""

#: ../../library/csv.rst:147
msgid "The :mod:`csv` module defines the following classes:"
msgstr ""

#: ../../library/csv.rst:152
msgid ""
"Create an object that operates like a regular reader but maps the "
"information in each row to a :class:`dict` whose keys are given by the "
"optional *fieldnames* parameter."
msgstr ""

#: ../../library/csv.rst:156
msgid ""
"The *fieldnames* parameter is a :term:`sequence`.  If *fieldnames* is "
"omitted, the values in the first row of file *f* will be used as the "
"fieldnames.  Regardless of how the fieldnames are determined, the dictionary "
"preserves their original ordering."
msgstr ""

#: ../../library/csv.rst:161
msgid ""
"If a row has more fields than fieldnames, the remaining data is put in a "
"list and stored with the fieldname specified by *restkey* (which defaults to "
"``None``).  If a non-blank row has fewer fields than fieldnames, the missing "
"values are filled-in with the value of *restval* (which defaults to "
"``None``)."
msgstr ""

#: ../../library/csv.rst:167
msgid ""
"All other optional or keyword arguments are passed to the underlying :class:"
"`reader` instance."
msgstr ""

#: ../../library/csv.rst:170 ../../library/csv.rst:214
msgid ""
"If the argument passed to *fieldnames* is an iterator, it will be coerced to "
"a :class:`list`."
msgstr ""

#: ../../library/csv.rst:172
msgid "Returned rows are now of type :class:`OrderedDict`."
msgstr ""

#: ../../library/csv.rst:175
msgid "Returned rows are now of type :class:`dict`."
msgstr ""

#: ../../library/csv.rst:196
msgid ""
"Create an object which operates like a regular writer but maps dictionaries "
"onto output rows.  The *fieldnames* parameter is a :mod:`sequence "
"<collections.abc>` of keys that identify the order in which values in the "
"dictionary passed to the :meth:`writerow` method are written to file *f*.  "
"The optional *restval* parameter specifies the value to be written if the "
"dictionary is missing a key in *fieldnames*.  If the dictionary passed to "
"the :meth:`writerow` method contains a key not found in *fieldnames*, the "
"optional *extrasaction* parameter indicates what action to take. If it is "
"set to ``'raise'``, the default value, a :exc:`ValueError` is raised. If it "
"is set to ``'ignore'``, extra values in the dictionary are ignored. Any "
"other optional or keyword arguments are passed to the underlying :class:"
"`writer` instance."
msgstr ""

#: ../../library/csv.rst:211
msgid ""
"Note that unlike the :class:`DictReader` class, the *fieldnames* parameter "
"of the :class:`DictWriter` class is not optional."
msgstr ""

#: ../../library/csv.rst:232
msgid ""
"The :class:`Dialect` class is a container class whose attributes contain "
"information for how to handle doublequotes, whitespace, delimiters, etc. Due "
"to the lack of a strict CSV specification, different applications produce "
"subtly different CSV data.  :class:`Dialect` instances define how :class:"
"`reader` and :class:`writer` instances behave."
msgstr ""

#: ../../library/csv.rst:238
msgid ""
"All available :class:`Dialect` names are returned by :func:`list_dialects`, "
"and they can be registered with specific :class:`reader` and :class:`writer` "
"classes through their initializer (``__init__``) functions like this::"
msgstr ""

#: ../../library/csv.rst:251
msgid ""
"The :class:`excel` class defines the usual properties of an Excel-generated "
"CSV file.  It is registered with the dialect name ``'excel'``."
msgstr ""

#: ../../library/csv.rst:257
msgid ""
"The :class:`excel_tab` class defines the usual properties of an Excel-"
"generated TAB-delimited file.  It is registered with the dialect name "
"``'excel-tab'``."
msgstr ""

#: ../../library/csv.rst:263
msgid ""
"The :class:`unix_dialect` class defines the usual properties of a CSV file "
"generated on UNIX systems, i.e. using ``'\\n'`` as line terminator and "
"quoting all fields.  It is registered with the dialect name ``'unix'``."
msgstr ""

#: ../../library/csv.rst:272
msgid "The :class:`Sniffer` class is used to deduce the format of a CSV file."
msgstr ""

#: ../../library/csv.rst:274
msgid "The :class:`Sniffer` class provides two methods:"
msgstr ""

#: ../../library/csv.rst:278
msgid ""
"Analyze the given *sample* and return a :class:`Dialect` subclass reflecting "
"the parameters found.  If the optional *delimiters* parameter is given, it "
"is interpreted as a string containing possible valid delimiter characters."
msgstr ""

#: ../../library/csv.rst:286
msgid ""
"Analyze the sample text (presumed to be in CSV format) and return :const:"
"`True` if the first row appears to be a series of column headers. Inspecting "
"each column, one of two key criteria will be considered to estimate if the "
"sample contains a header:"
msgstr ""

#: ../../library/csv.rst:291
msgid "the second through n-th rows contain numeric values"
msgstr ""

#: ../../library/csv.rst:292
msgid ""
"the second through n-th rows contain strings where at least one value's "
"length differs from that of the putative header of that column."
msgstr ""

#: ../../library/csv.rst:295
msgid ""
"Twenty rows after the first row are sampled; if more than half of columns + "
"rows meet the criteria, :const:`True` is returned."
msgstr ""

#: ../../library/csv.rst:300
msgid ""
"This method is a rough heuristic and may produce both false positives and "
"negatives."
msgstr ""

#: ../../library/csv.rst:303
msgid "An example for :class:`Sniffer` use::"
msgstr ""

#: ../../library/csv.rst:312
msgid "The :mod:`csv` module defines the following constants:"
msgstr ""

#: ../../library/csv.rst:316
msgid "Instructs :class:`writer` objects to quote all fields."
msgstr ""

#: ../../library/csv.rst:321
msgid ""
"Instructs :class:`writer` objects to only quote those fields which contain "
"special characters such as *delimiter*, *quotechar* or any of the characters "
"in *lineterminator*."
msgstr ""

#: ../../library/csv.rst:328
msgid "Instructs :class:`writer` objects to quote all non-numeric fields."
msgstr ""

#: ../../library/csv.rst:330
msgid ""
"Instructs :class:`reader` objects to convert all non-quoted fields to type "
"*float*."
msgstr ""

#: ../../library/csv.rst:335
msgid ""
"Instructs :class:`writer` objects to never quote fields.  When the current "
"*delimiter* occurs in output data it is preceded by the current *escapechar* "
"character.  If *escapechar* is not set, the writer will raise :exc:`Error` "
"if any characters that require escaping are encountered."
msgstr ""

#: ../../library/csv.rst:340
msgid ""
"Instructs :class:`reader` objects to perform no special processing of quote "
"characters."
msgstr ""

#: ../../library/csv.rst:344
msgid ""
"Instructs :class:`writer` objects to quote all fields which are not "
"``None``.  This is similar to :data:`QUOTE_ALL`, except that if a field "
"value is ``None`` an empty (unquoted) string is written."
msgstr ""

#: ../../library/csv.rst:348
msgid ""
"Instructs :class:`reader` objects to interpret an empty (unquoted) field as "
"None and to otherwise behave as :data:`QUOTE_ALL`."
msgstr ""

#: ../../library/csv.rst:353
msgid ""
"Instructs :class:`writer` objects to always place quotes around fields which "
"are strings.  This is similar to :data:`QUOTE_NONNUMERIC`, except that if a "
"field value is ``None`` an empty (unquoted) string is written."
msgstr ""

#: ../../library/csv.rst:357
msgid ""
"Instructs :class:`reader` objects to interpret an empty (unquoted) string as "
"``None`` and to otherwise behave as :data:`QUOTE_NONNUMERIC`."
msgstr ""

#: ../../library/csv.rst:360
msgid "The :mod:`csv` module defines the following exception:"
msgstr ""

#: ../../library/csv.rst:365
msgid "Raised by any of the functions when an error is detected."
msgstr ""

#: ../../library/csv.rst:370
msgid "Dialects and Formatting Parameters"
msgstr ""

#: ../../library/csv.rst:372
msgid ""
"To make it easier to specify the format of input and output records, "
"specific formatting parameters are grouped together into dialects.  A "
"dialect is a subclass of the :class:`Dialect` class having a set of specific "
"methods and a single :meth:`validate` method.  When creating :class:`reader` "
"or :class:`writer` objects, the programmer can specify a string or a "
"subclass of the :class:`Dialect` class as the dialect parameter.  In "
"addition to, or instead of, the *dialect* parameter, the programmer can also "
"specify individual formatting parameters, which have the same names as the "
"attributes defined below for the :class:`Dialect` class."
msgstr ""

#: ../../library/csv.rst:382
msgid "Dialects support the following attributes:"
msgstr ""

#: ../../library/csv.rst:387
msgid ""
"A one-character string used to separate fields.  It defaults to ``','``."
msgstr ""

#: ../../library/csv.rst:392
msgid ""
"Controls how instances of *quotechar* appearing inside a field should "
"themselves be quoted.  When :const:`True`, the character is doubled. When :"
"const:`False`, the *escapechar* is used as a prefix to the *quotechar*.  It "
"defaults to :const:`True`."
msgstr ""

#: ../../library/csv.rst:397
msgid ""
"On output, if *doublequote* is :const:`False` and no *escapechar* is set, :"
"exc:`Error` is raised if a *quotechar* is found in a field."
msgstr ""

#: ../../library/csv.rst:403
msgid ""
"A one-character string used by the writer to escape the *delimiter* if "
"*quoting* is set to :const:`QUOTE_NONE` and the *quotechar* if *doublequote* "
"is :const:`False`. On reading, the *escapechar* removes any special meaning "
"from the following character. It defaults to :const:`None`, which disables "
"escaping."
msgstr ""

#: ../../library/csv.rst:408
msgid "An empty *escapechar* is not allowed."
msgstr ""

#: ../../library/csv.rst:413
msgid ""
"The string used to terminate lines produced by the :class:`writer`. It "
"defaults to ``'\\r\\n'``."
msgstr ""

#: ../../library/csv.rst:418
msgid ""
"The :class:`reader` is hard-coded to recognise either ``'\\r'`` or ``'\\n'`` "
"as end-of-line, and ignores *lineterminator*. This behavior may change in "
"the future."
msgstr ""

#: ../../library/csv.rst:425
msgid ""
"A one-character string used to quote fields containing special characters, "
"such as the *delimiter* or *quotechar*, or which contain new-line "
"characters.  It defaults to ``'\"'``."
msgstr ""

#: ../../library/csv.rst:429
msgid "An empty *quotechar* is not allowed."
msgstr ""

#: ../../library/csv.rst:434
msgid ""
"Controls when quotes should be generated by the writer and recognised by the "
"reader.  It can take on any of the :const:`QUOTE_\\*` constants (see "
"section :ref:`csv-contents`) and defaults to :const:`QUOTE_MINIMAL`."
msgstr ""

#: ../../library/csv.rst:441
msgid ""
"When :const:`True`, spaces immediately following the *delimiter* are "
"ignored. The default is :const:`False`."
msgstr ""

#: ../../library/csv.rst:447
msgid ""
"When ``True``, raise exception :exc:`Error` on bad CSV input. The default is "
"``False``."
msgstr ""

#: ../../library/csv.rst:451
msgid "Reader Objects"
msgstr ""

#: ../../library/csv.rst:453
msgid ""
"Reader objects (:class:`DictReader` instances and objects returned by the :"
"func:`reader` function) have the following public methods:"
msgstr ""

#: ../../library/csv.rst:458
msgid ""
"Return the next row of the reader's iterable object as a list (if the object "
"was returned from :func:`reader`) or a dict (if it is a :class:`DictReader` "
"instance), parsed according to the current :class:`Dialect`.  Usually you "
"should call this as ``next(reader)``."
msgstr ""

#: ../../library/csv.rst:464
msgid "Reader objects have the following public attributes:"
msgstr ""

#: ../../library/csv.rst:468
msgid "A read-only description of the dialect in use by the parser."
msgstr ""

#: ../../library/csv.rst:473
msgid ""
"The number of lines read from the source iterator. This is not the same as "
"the number of records returned, as records can span multiple lines."
msgstr ""

#: ../../library/csv.rst:477
msgid "DictReader objects have the following public attribute:"
msgstr ""

#: ../../library/csv.rst:481
msgid ""
"If not passed as a parameter when creating the object, this attribute is "
"initialized upon first access or when the first record is read from the file."
msgstr ""

#: ../../library/csv.rst:488
msgid "Writer Objects"
msgstr ""

#: ../../library/csv.rst:490
msgid ""
":class:`Writer` objects (:class:`DictWriter` instances and objects returned "
"by the :func:`writer` function) have the following public methods.  A *row* "
"must be an iterable of strings or numbers for :class:`Writer` objects and a "
"dictionary mapping fieldnames to strings or numbers (by passing them "
"through :func:`str` first) for :class:`DictWriter` objects.  Note that "
"complex numbers are written out surrounded by parens. This may cause some "
"problems for other programs which read CSV files (assuming they support "
"complex numbers at all)."
msgstr ""

#: ../../library/csv.rst:501
msgid ""
"Write the *row* parameter to the writer's file object, formatted according "
"to the current :class:`Dialect`. Return the return value of the call to the "
"*write* method of the underlying file object."
msgstr ""

#: ../../library/csv.rst:505
msgid "Added support of arbitrary iterables."
msgstr ""

#: ../../library/csv.rst:510
msgid ""
"Write all elements in *rows* (an iterable of *row* objects as described "
"above) to the writer's file object, formatted according to the current "
"dialect."
msgstr ""

#: ../../library/csv.rst:514
msgid "Writer objects have the following public attribute:"
msgstr ""

#: ../../library/csv.rst:519
msgid "A read-only description of the dialect in use by the writer."
msgstr ""

#: ../../library/csv.rst:522
msgid "DictWriter objects have the following public method:"
msgstr ""

#: ../../library/csv.rst:527
msgid ""
"Write a row with the field names (as specified in the constructor) to the "
"writer's file object, formatted according to the current dialect. Return the "
"return value of the :meth:`csvwriter.writerow` call used internally."
msgstr ""

#: ../../library/csv.rst:532
msgid ""
":meth:`writeheader` now also returns the value returned by the :meth:"
"`csvwriter.writerow` method it uses internally."
msgstr ""

#: ../../library/csv.rst:540
msgid "Examples"
msgstr "範例"

#: ../../library/csv.rst:542
msgid "The simplest example of reading a CSV file::"
msgstr ""

#: ../../library/csv.rst:550
msgid "Reading a file with an alternate format::"
msgstr ""

#: ../../library/csv.rst:558
msgid "The corresponding simplest possible writing example is::"
msgstr ""

#: ../../library/csv.rst:565
msgid ""
"Since :func:`open` is used to open a CSV file for reading, the file will by "
"default be decoded into unicode using the system default encoding (see :func:"
"`locale.getencoding`).  To decode a file using a different encoding, use the "
"``encoding`` argument of open::"
msgstr ""

#: ../../library/csv.rst:576
msgid ""
"The same applies to writing in something other than the system default "
"encoding: specify the encoding argument when opening the output file."
msgstr ""

#: ../../library/csv.rst:579
msgid "Registering a new dialect::"
msgstr ""

#: ../../library/csv.rst:586
msgid ""
"A slightly more advanced use of the reader --- catching and reporting "
"errors::"
msgstr ""

#: ../../library/csv.rst:598
msgid ""
"And while the module doesn't directly support parsing strings, it can easily "
"be done::"
msgstr ""

#: ../../library/csv.rst:607
msgid "Footnotes"
msgstr "註解"

#: ../../library/csv.rst:608
msgid ""
"If ``newline=''`` is not specified, newlines embedded inside quoted fields "
"will not be interpreted correctly, and on platforms that use ``\\r\\n`` "
"linendings on write an extra ``\\r`` will be added.  It should always be "
"safe to specify ``newline=''``, since the csv module does its own (:term:"
"`universal <universal newlines>`) newline handling."
msgstr ""

#: ../../library/csv.rst:11
msgid "csv"
msgstr "csv"

#: ../../library/csv.rst:11
msgid "data"
msgstr "data（資料）"

#: ../../library/csv.rst:11
msgid "tabular"
msgstr "tabular（表格）"

#: ../../library/csv.rst:53
msgid "universal newlines"
msgstr "universal newlines"

#: ../../library/csv.rst:53
msgid "csv.reader function"
msgstr "csv.reader 函式"
