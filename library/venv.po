# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 00:13+0000\n"
"PO-Revision-Date: 2023-07-09 15:09+0800\n"
"Last-Translator: Po-Chuan Chen <present90308@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.3.2\n"

#: ../../library/venv.rst:2
msgid ":mod:`!venv` --- Creation of virtual environments"
msgstr ":mod:`!venv` --- 建立虛擬環境"

#: ../../library/venv.rst:12
msgid "**Source code:** :source:`Lib/venv/`"
msgstr "**原始碼：**\\ :source:`Lib/venv/`"

#: ../../library/venv.rst:21
msgid ""
"The :mod:`!venv` module supports creating lightweight \"virtual "
"environments\", each with their own independent set of Python packages "
"installed in their :mod:`site` directories. A virtual environment is created "
"on top of an existing Python installation, known as the virtual "
"environment's \"base\" Python, and may optionally be isolated from the "
"packages in the base environment, so only those explicitly installed in the "
"virtual environment are available."
msgstr ""

#: ../../library/venv.rst:29
msgid ""
"When used from within a virtual environment, common installation tools such "
"as :pypi:`pip` will install Python packages into a virtual environment "
"without needing to be told to do so explicitly."
msgstr ""

#: ../../library/venv.rst:33
msgid "A virtual environment is (amongst other things):"
msgstr ""

#: ../../library/venv.rst:35
msgid ""
"Used to contain a specific Python interpreter and software libraries and "
"binaries which are needed to support a project (library or application). "
"These are by default isolated from software in other virtual environments "
"and Python interpreters and libraries installed in the operating system."
msgstr ""

#: ../../library/venv.rst:40
msgid ""
"Contained in a directory, conventionally named ``.venv`` or ``venv`` in the "
"project directory, or under a container directory for lots of virtual "
"environments, such as ``~/.virtualenvs``."
msgstr ""

#: ../../library/venv.rst:44
msgid "Not checked into source control systems such as Git."
msgstr ""

#: ../../library/venv.rst:46
msgid ""
"Considered as disposable -- it should be simple to delete and recreate it "
"from scratch. You don't place any project code in the environment."
msgstr ""

#: ../../library/venv.rst:49
msgid ""
"Not considered as movable or copyable -- you just recreate the same "
"environment in the target location."
msgstr ""

#: ../../library/venv.rst:52
msgid "See :pep:`405` for more background on Python virtual environments."
msgstr "更多關於 Python 虛擬環境的背景資訊請見 :pep:`405`。"

#: ../../library/venv.rst:56
msgid ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/guides/installing-using-pip-and-virtual-"
"environments/#create-and-use-virtual-environments>`__"
msgstr ""

#: ../../includes/wasm-mobile-notavail.rst:3
msgid "Availability"
msgstr ""

#: ../../includes/wasm-mobile-notavail.rst:5
msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""
"此模組在\\ :ref:`行動平台 <mobile-availability>`\\ 或\\ :ref:`WebAssembly 平"
"台 <wasm-availability>`\\ 上不支援。"

#: ../../library/venv.rst:62
msgid "Creating virtual environments"
msgstr "建立虛擬環境"

#: ../../library/venv.rst:64
msgid ""
":ref:`Virtual environments <venv-def>` are created by executing the ``venv`` "
"module:"
msgstr ":ref:`虛擬環境 <venv-def>`\\ 是透過執行 ``venv`` 模組來建立："

#: ../../library/venv.rst:67
msgid "python -m venv /path/to/new/virtual/environment"
msgstr "python -m venv /path/to/new/virtual/environment"

#: ../../library/venv.rst:71
msgid ""
"This creates the target directory (including parent directories as needed) "
"and places a :file:`pyvenv.cfg` file in it with a ``home`` key pointing to "
"the Python installation from which the command was run. It also creates a :"
"file:`bin` (or :file:`Scripts` on Windows) subdirectory containing a copy or "
"symlink of the Python executable (as appropriate for the platform or "
"arguments used at environment creation time). It also creates a :file:`lib/"
"pythonX.Y/site-packages` subdirectory (on Windows, this is :file:`Lib\\site-"
"packages`). If an existing directory is specified, it will be re-used."
msgstr ""
"執行此命令會建立目標目錄（同時也會建立任何還不存在的父目錄）並在目錄中放置一"
"個名為 :file:`pyvenv.cfg` 的檔案，其中包含一個指向執行該命令的 Python 安裝路"
"徑的 ``home`` 鍵。它同時會建立一個 :file:`bin` （在 Windows 上為 :file:"
"`Scripts`）子目錄，其中包含一個 Python 二進位檔案的副本/符號連結（根據建立環"
"境時使用的平台或引數而定）。此外，它還會建立一個 :file:`lib/pythonX.Y/site-"
"packages` 子目錄（在 Windows 上為 :file:`Lib\\site-packages`）。如果指定的目"
"錄已存在，則將重新使用該目錄。"

#: ../../library/venv.rst:81
msgid ""
"The use of ``venv`` is now recommended for creating virtual environments."
msgstr "目前建議使用 ``venv`` 來建立虛擬環境。"

#: ../../library/venv.rst:84
msgid ""
":program:`pyvenv` was the recommended tool for creating virtual environments "
"for Python 3.3 and 3.4, and replaced in 3.5 by executing ``venv`` directly."
msgstr ""
":program:`pyvenv` 是在 Python 3.3 和 3.4 中建立虛擬環境的推薦工具，但在 "
"Python 3.5 中已被直接執行 ``venv`` 所取代。"

#: ../../library/venv.rst:90
msgid "On Windows, invoke the ``venv`` command as follows:"
msgstr "在 Windows 上，執行以下命令以使用 ``venv``："

#: ../../library/venv.rst:92
msgid "PS> python -m venv C:\\path\\to\\new\\virtual\\environment"
msgstr "PS> python -m venv C:\\path\\to\\new\\virtual\\environment"

#: ../../library/venv.rst:96
msgid "The command, if run with ``-h``, will show the available options::"
msgstr "如果使用 ``-h`` 選項執行該命令，將會顯示可用的選項："

#: ../../library/venv.rst:98
msgid ""
"usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n"
"            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n"
"            [--without-scm-ignore-files]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Creates virtual Python environments in one or more target directories.\n"
"\n"
"positional arguments:\n"
"  ENV_DIR               A directory to create the environment in.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --system-site-packages\n"
"                        Give the virtual environment access to the system\n"
"                        site-packages dir.\n"
"  --symlinks            Try to use symlinks rather than copies, when\n"
"                        symlinks are not the default for the platform.\n"
"  --copies              Try to use copies rather than symlinks, even when\n"
"                        symlinks are the default for the platform.\n"
"  --clear               Delete the contents of the environment directory\n"
"                        if it already exists, before environment creation.\n"
"  --upgrade             Upgrade the environment directory to use this\n"
"                        version of Python, assuming Python has been\n"
"                        upgraded in-place.\n"
"  --without-pip         Skips installing or upgrading pip in the virtual\n"
"                        environment (pip is bootstrapped by default)\n"
"  --prompt PROMPT       Provides an alternative prompt prefix for this\n"
"                        environment.\n"
"  --upgrade-deps        Upgrade core dependencies (pip) to the latest\n"
"                        version in PyPI\n"
"  --without-scm-ignore-files\n"
"                        Skips adding SCM ignore files to the environment\n"
"                        directory (Git is supported by default).\n"
"\n"
"Once an environment has been created, you may wish to activate it, e.g. by\n"
"sourcing an activate script in its bin directory."
msgstr ""
"usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n"
"            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n"
"            [--without-scm-ignore-files]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Creates virtual Python environments in one or more target directories.\n"
"\n"
"positional arguments:\n"
"  ENV_DIR               A directory to create the environment in.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --system-site-packages\n"
"                        Give the virtual environment access to the system\n"
"                        site-packages dir.\n"
"  --symlinks            Try to use symlinks rather than copies, when\n"
"                        symlinks are not the default for the platform.\n"
"  --copies              Try to use copies rather than symlinks, even when\n"
"                        symlinks are the default for the platform.\n"
"  --clear               Delete the contents of the environment directory\n"
"                        if it already exists, before environment creation.\n"
"  --upgrade             Upgrade the environment directory to use this\n"
"                        version of Python, assuming Python has been\n"
"                        upgraded in-place.\n"
"  --without-pip         Skips installing or upgrading pip in the virtual\n"
"                        environment (pip is bootstrapped by default)\n"
"  --prompt PROMPT       Provides an alternative prompt prefix for this\n"
"                        environment.\n"
"  --upgrade-deps        Upgrade core dependencies (pip) to the latest\n"
"                        version in PyPI\n"
"  --without-scm-ignore-files\n"
"                        Skips adding SCM ignore files to the environment\n"
"                        directory (Git is supported by default).\n"
"\n"
"Once an environment has been created, you may wish to activate it, e.g. by\n"
"sourcing an activate script in its bin directory."

#: ../../library/venv.rst:136
msgid ""
"Installs pip by default, added the ``--without-pip``  and ``--copies`` "
"options."
msgstr "預設會安裝 pip，並新增了 ``--without-pip`` 和 ``--copies`` 選項"

#: ../../library/venv.rst:140
msgid ""
"In earlier versions, if the target directory already existed, an error was "
"raised, unless the ``--clear`` or ``--upgrade`` option was provided."
msgstr ""
"在較早的版本中，如果目標目錄已存在，除非提供了 ``--clear`` 或 ``--upgrade`` "
"選項，否則會引發錯誤。"

#: ../../library/venv.rst:144
msgid ""
"Add ``--upgrade-deps`` option to upgrade pip + setuptools to the latest on "
"PyPI."
msgstr ""
"新增 ``--upgrade-deps`` 選項以將 pip 和 setuptools 升級至 PyPI 上的最新版本"

#: ../../library/venv.rst:149
msgid "``setuptools`` is no longer a core venv dependency."
msgstr ""

#: ../../library/venv.rst:153
msgid "Added the ``--without-scm-ignore-files`` option."
msgstr "新增 ``--without-scm-ignore-files`` 選項"

#: ../../library/venv.rst:154
msgid "``venv`` now creates a :file:`.gitignore` file for Git by default."
msgstr ""

#: ../../library/venv.rst:158
msgid ""
"While symlinks are supported on Windows, they are not recommended. Of "
"particular note is that double-clicking ``python.exe`` in File Explorer will "
"resolve the symlink eagerly and ignore the virtual environment."
msgstr ""
"雖然在 Windows 上支援符號連結，但並不建議使用。特別需要注意的是，在檔案總管中"
"按兩下 ``python.exe`` 會急切地解析符號連結並忽略虛擬環境。"

#: ../../library/venv.rst:163
msgid ""
"On Microsoft Windows, it may be required to enable the ``Activate.ps1`` "
"script by setting the execution policy for the user. You can do this by "
"issuing the following PowerShell command:"
msgstr ""
"在 Microsoft Windows 上，可能需要通過設置使用者的執行策略來啟用 ``Activate."
"ps1`` 腳本。你可以發出以下 PowerShell 命令來執行此操作："

#: ../../library/venv.rst:167
msgid ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"
msgstr ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"

#: ../../library/venv.rst:171
msgid ""
"See `About Execution Policies <https://go.microsoft.com/fwlink/?"
"LinkID=135170>`_ for more information."
msgstr ""
"有關更多資訊，請參閱\\ `關於執行策略 <https://go.microsoft.com/fwlink/?"
"LinkID=135170>`_。"

#: ../../library/venv.rst:175
msgid ""
"The created :file:`pyvenv.cfg` file also includes the ``include-system-site-"
"packages`` key, set to ``true`` if ``venv`` is run with the ``--system-site-"
"packages`` option, ``false`` otherwise."
msgstr ""
"被建立的 :file:`pyvenv.cfg` 檔案還包括了 ``include-system-site-packages`` 的"
"鍵，如果使用 ``venv`` 執行時帶有 ``--system-site-packages`` 選項，則設置為 "
"``true``，否則設置為 ``false``。"

#: ../../library/venv.rst:179
msgid ""
"Unless the ``--without-pip`` option is given, :mod:`ensurepip` will be "
"invoked to bootstrap ``pip`` into the virtual environment."
msgstr ""
"除非 ``--without-pip`` 選項被提供，否則將調用 :mod:`ensurepip` 來啟動 "
"``pip`` 到虛擬環境中。"

#: ../../library/venv.rst:182
msgid ""
"Multiple paths can be given to ``venv``, in which case an identical virtual "
"environment will be created, according to the given options, at each "
"provided path."
msgstr ""
"可以向 ``venv`` 提供多個路徑，這樣每個提供的路徑都將根據給定的選項建立一個相"
"同的虛擬環境。"

#: ../../library/venv.rst:189
msgid "How venvs work"
msgstr "虛擬環境如何運作"

#: ../../library/venv.rst:191
msgid ""
"When a Python interpreter is running from a virtual environment, :data:`sys."
"prefix` and :data:`sys.exec_prefix` point to the directories of the virtual "
"environment, whereas :data:`sys.base_prefix` and :data:`sys."
"base_exec_prefix` point to those of the base Python used to create the "
"environment. It is sufficient to check ``sys.prefix != sys.base_prefix`` to "
"determine if the current interpreter is running from a virtual environment."
msgstr ""
"當 Python 直譯器跑在虛擬環境時，:data:`sys.prefix` 和 :data:`sys."
"exec_prefix` 會指向虛擬環境的目錄，而 :data:`sys.base_prefix` 和 :data:`sys."
"base_exec_prefix` 會指向建立虛擬環境的基礎 Python 的目錄。檢查 ``sys.prefix !"
"= sys.base_prefix`` 就可以確定目前的直譯器是否跑在虛擬環境中。"

#: ../../library/venv.rst:200
msgid ""
"A virtual environment may be \"activated\" using a script in its binary "
"directory (``bin`` on POSIX; ``Scripts`` on Windows). This will prepend that "
"directory to your :envvar:`PATH`, so that running :program:`python` will "
"invoke the environment's Python interpreter and you can run installed "
"scripts without having to use their full path. The invocation of the "
"activation script is platform-specific (:samp:`{<venv>}` must be replaced by "
"the path to the directory containing the virtual environment):"
msgstr ""
"虛擬環境可以透過位於二進位檔案目錄中的腳本「啟用」（在 POSIX 上為 ``bin``；"
"在 Windows 上為 ``Scripts``）這會將該目錄加入到你的 :envvar:`PATH`，當你運"
"行 :program:`python` 時就會調用該環境的直譯器並且執行已安裝的腳本，而不需要使"
"用完整的路徑。啟動腳本的方式因平台而異（:samp:`{<venv>}` 需要替換成包含虛擬環"
"境的目錄路徑）"

#: ../../library/venv.rst:210
msgid "Platform"
msgstr "平台"

#: ../../library/venv.rst:210
msgid "Shell"
msgstr "Shell"

#: ../../library/venv.rst:210
msgid "Command to activate virtual environment"
msgstr "啟動虛擬環境的指令"

#: ../../library/venv.rst:212
msgid "POSIX"
msgstr "POSIX"

#: ../../library/venv.rst:212
msgid "bash/zsh"
msgstr "bash/zsh"

#: ../../library/venv.rst:212
msgid ":samp:`$ source {<venv>}/bin/activate`"
msgstr ":samp:`$ source {<venv>}/bin/activate`"

#: ../../library/venv.rst:214
msgid "fish"
msgstr "fish"

#: ../../library/venv.rst:214
msgid ":samp:`$ source {<venv>}/bin/activate.fish`"
msgstr ":samp:`$ source {<venv>}/bin/activate.fish`"

#: ../../library/venv.rst:216
msgid "csh/tcsh"
msgstr "csh/tcsh"

#: ../../library/venv.rst:216
msgid ":samp:`$ source {<venv>}/bin/activate.csh`"
msgstr ":samp:`$ source {<venv>}/bin/activate.csh`"

#: ../../library/venv.rst:218
msgid "pwsh"
msgstr "pwsh"

#: ../../library/venv.rst:218
msgid ":samp:`$ {<venv>}/bin/Activate.ps1`"
msgstr ":samp:`$ {<venv>}/bin/Activate.ps1`"

#: ../../library/venv.rst:220
msgid "Windows"
msgstr "Windows"

#: ../../library/venv.rst:220
msgid "cmd.exe"
msgstr "cmd.exe"

#: ../../library/venv.rst:220
msgid ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"
msgstr ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"

#: ../../library/venv.rst:222
msgid "PowerShell"
msgstr "PowerShell"

#: ../../library/venv.rst:222
msgid ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"
msgstr ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"

#: ../../library/venv.rst:225
msgid ":program:`fish` and :program:`csh` activation scripts."
msgstr ":program:`fish` 和 :program:`csh` 啟動腳本。"

#: ../../library/venv.rst:228
msgid ""
"PowerShell activation scripts installed under POSIX for PowerShell Core "
"support."
msgstr "PowerShell 的啟動腳本安裝在 POSIX 上支援 PowerShell Core。"

#: ../../library/venv.rst:232
msgid ""
"You don't specifically *need* to activate a virtual environment, as you can "
"just specify the full path to that environment's Python interpreter when "
"invoking Python. Furthermore, all scripts installed in the environment "
"should be runnable without activating it."
msgstr ""
"你不用特別開啟虛擬環境，你可以在調用 Python 時指定該環境下 Python 直譯器的完"
"整路徑。此外，所有安裝在環境裡的腳本都應該都可以在未啟用虛擬環境的情況下運"
"行。"

#: ../../library/venv.rst:238
msgid ""
"In order to achieve this, scripts installed into virtual environments have a "
"\"shebang\" line which points to the environment's Python interpreter, :samp:"
"`#!/{<path-to-venv>}/bin/python`. This means that the script will run with "
"that interpreter regardless of the value of :envvar:`PATH`. On Windows, "
"\"shebang\" line processing is supported if you have the :ref:`launcher` "
"installed. Thus, double-clicking an installed script in a Windows Explorer "
"window should run it with the correct interpreter without the environment "
"needing to be activated or on the :envvar:`PATH`."
msgstr ""
"為了實現這一點，安裝在虛擬環境中的腳本會有一個 \"shebang\" 列，此列指向該環境"
"的 Python 直譯器 :samp:`#!/{<path-to-venv>}/bin/python`。這代表無論 :envvar:"
"`PATH` 的值為何，該腳本都會在直譯器上運行。在 Windows 上，如果你安裝了 :ref:"
"`launcher`，則支援 \"shebang\" 列處理。因此，在 Windows 檔案總管（Windows "
"Explorer）中雙擊已安裝的腳本，應該可以在沒有啟用環境或將其加入 :envvar:"
"`PATH` 的情況下正確地運行。"

#: ../../library/venv.rst:247
msgid ""
"When a virtual environment has been activated, the :envvar:`!VIRTUAL_ENV` "
"environment variable is set to the path of the environment. Since explicitly "
"activating a virtual environment is not required to use it, :envvar:`!"
"VIRTUAL_ENV` cannot be relied upon to determine whether a virtual "
"environment is being used."
msgstr ""
"當虛擬環境被啟用時，:envvar:`!VIRTUAL_ENV` 環境變數會被設置為該環境的路徑。由"
"於不需要明確啟用虛擬環境才能使用它。因此，無法依賴 :envvar:`!VIRTUAL_ENV` 來"
"判斷是否正在使用虛擬環境。"

#: ../../library/venv.rst:253
msgid ""
"Because scripts installed in environments should not expect the environment "
"to be activated, their shebang lines contain the absolute paths to their "
"environment's interpreters. Because of this, environments are inherently non-"
"portable, in the general case. You should always have a simple means of "
"recreating an environment (for example, if you have a requirements file "
"``requirements.txt``, you can invoke ``pip install -r requirements.txt`` "
"using the environment's ``pip`` to install all of the packages needed by the "
"environment). If for any reason you need to move the environment to a new "
"location, you should recreate it at the desired location and delete the one "
"at the old location. If you move an environment because you moved a parent "
"directory of it, you should recreate the environment in its new location. "
"Otherwise, software installed into the environment may not work as expected."
msgstr ""
"因為安裝在環境中的腳本不應該預期該環境已經被啟動，所以它們的 shebang 列會包含"
"環境直譯器的絕對路徑。因此，在一般情況下，環境本質上是不可攜帶的。你應該使用"
"一個簡單的方法來重新建立一個環境（例如：如果你有一個名為 ``requirements."
"txt`` 的需求檔案，你可以使用環境的 ``pip install -r requirements.txt`` 來安裝"
"環境所需的所有套件）。如果出於某種原因，你需要將環境移至新位置，你應該在所需"
"位置重新建立它，並刪除舊位置的環境。如果你移動環境是因為移動了其父目錄，你應"
"該在新位置重新建立環境。否則，安裝在該環境中的軟體可能無法正常運作。"

#: ../../library/venv.rst:267
msgid ""
"You can deactivate a virtual environment by typing ``deactivate`` in your "
"shell. The exact mechanism is platform-specific and is an internal "
"implementation detail (typically, a script or shell function will be used)."
msgstr ""
"你可以在 shell 輸入 ``deactivate`` 來關閉虛擬環境。具體的使用方式因平台而異，"
"是內部實作的細節（通常會使用腳本或是 shell 函式）"

#: ../../library/venv.rst:275
msgid "API"
msgstr "API"

#: ../../library/venv.rst:279
msgid ""
"The high-level method described above makes use of a simple API which "
"provides mechanisms for third-party virtual environment creators to "
"customize environment creation according to their needs, the :class:"
"`EnvBuilder` class."
msgstr ""
"上述提到的高階 method（方法）透過簡單的 API 使用， 為第三方虛擬環境建立者提供"
"可以依據他們需求來建立環境的客製化機制： :class:`EnvBuilder` class。"

#: ../../library/venv.rst:288
msgid ""
"The :class:`EnvBuilder` class accepts the following keyword arguments on "
"instantiation:"
msgstr "進行實例化時，class :class:`EnvBuilder` 接受下列的關鍵字引數："

#: ../../library/venv.rst:291
msgid ""
"*system_site_packages* -- a boolean value indicating that the system Python "
"site-packages should be available to the environment (defaults to ``False``)."
msgstr ""
"*system_site_packages* -- 為一個 boolean （布林值），並表明系統的 Python "
"site-packages 是否可以在環境中可用（預設為 ``False`` ）。"

#: ../../library/venv.rst:294
msgid ""
"*clear* -- a boolean value which, if true, will delete the contents of any "
"existing target directory, before creating the environment."
msgstr ""
"*clear* -- 為一個 boolean，如果為 true，則在建立環境之前，刪除目標目錄內所有"
"存在的內容。"

#: ../../library/venv.rst:297
msgid ""
"*symlinks* -- a boolean value indicating whether to attempt to symlink the "
"Python binary rather than copying."
msgstr ""
"*symlinks* --  為一個 boolean，並表明是否嘗試與 Python 二進位檔案建立符號連結"
"而不是複製該檔案。"

#: ../../library/venv.rst:300
msgid ""
"*upgrade* -- a boolean value which, if true, will upgrade an existing "
"environment with the running Python - for use when that Python has been "
"upgraded in-place (defaults to ``False``)."
msgstr ""
"*upgrade* -- 為一個 boolean，若為 true，則會在執行 Python 時為現有的環境進行"
"升級。目的是讓 Python 可以升級到位（預設為 ``False``）。"

#: ../../library/venv.rst:304
msgid ""
"*with_pip* -- a boolean value which, if true, ensures pip is installed in "
"the virtual environment. This uses :mod:`ensurepip` with the ``--default-"
"pip`` option."
msgstr ""
"*with_pip* -- 為一個 boolean，若為 true，則確保 pip 有安裝至虛擬環境之中。當"
"有 ``--default-pip`` 的選項時，會使用 :mod:`ensurepip`。"

#: ../../library/venv.rst:308
msgid ""
"*prompt* -- a string to be used after virtual environment is activated "
"(defaults to ``None`` which means directory name of the environment would be "
"used). If the special string ``\".\"`` is provided, the basename of the "
"current directory is used as the prompt."
msgstr ""
"*prompt* -- 為一個 String（字串），該字串會在虛擬環境啟動時被使用。（預設為 "
"``None``，代表該環境的目錄名稱會被使用）倘若出現特殊字串 ``\".\"`` ，則當前目"
"錄的 basename 會做為提示路徑使用。"

#: ../../library/venv.rst:313
msgid "*upgrade_deps* -- Update the base venv modules to the latest on PyPI"
msgstr "*upgrade_deps* -- 更新基礎 venv 模組至 PyPI 的最新版本"

#: ../../library/venv.rst:315
msgid ""
"*scm_ignore_files* -- Create ignore files based for the specified source "
"control managers (SCM) in the iterable. Support is defined by having a "
"method named ``create_{scm}_ignore_file``. The only value supported by "
"default is ``\"git\"`` via :meth:`create_git_ignore_file`."
msgstr ""

#: ../../library/venv.rst:321
msgid "Added the ``with_pip`` parameter"
msgstr "新增 ``with_pip`` 參數"

#: ../../library/venv.rst:324
msgid "Added the ``prompt`` parameter"
msgstr "新增 ``prompt`` 參數"

#: ../../library/venv.rst:327
msgid "Added the ``upgrade_deps`` parameter"
msgstr "新增 ``upgrade_deps`` 參數"

#: ../../library/venv.rst:330
msgid "Added the ``scm_ignore_files`` parameter"
msgstr "新增 ``scm_ignore_files`` 參數"

#: ../../library/venv.rst:333
msgid ":class:`EnvBuilder` may be used as a base class."
msgstr ":class:`EnvBuilder` 可以被用作為基底類別。"

#: ../../library/venv.rst:337
msgid ""
"Create a virtual environment by specifying the target directory (absolute or "
"relative to the current directory) which is to contain the virtual "
"environment.  The ``create`` method will either create the environment in "
"the specified directory, or raise an appropriate exception."
msgstr ""
"透過指定將會容納虛擬環境的目標目錄來建立一個虛擬環境（絕對路徑或相對路徑到該"
"目錄），也就是在該目錄中容納虛擬環境。``create`` method 將會在指定的目錄下建"
"立環境，或是觸發適當的例外。"

#: ../../library/venv.rst:343
msgid ""
"The ``create`` method of the :class:`EnvBuilder` class illustrates the hooks "
"available for subclass customization::"
msgstr ""
":class:`EnvBuilder` class 的 ``create`` method 會闡述可用的 Hooks 以客製化 "
"subclass （子類別）::"

#: ../../library/venv.rst:346
msgid ""
"def create(self, env_dir):\n"
"    \"\"\"\n"
"    Create a virtualized Python environment in a directory.\n"
"    env_dir is the target directory to create an environment in.\n"
"    \"\"\"\n"
"    env_dir = os.path.abspath(env_dir)\n"
"    context = self.ensure_directories(env_dir)\n"
"    self.create_configuration(context)\n"
"    self.setup_python(context)\n"
"    self.setup_scripts(context)\n"
"    self.post_setup(context)"
msgstr ""

#: ../../library/venv.rst:358
msgid ""
"Each of the methods :meth:`ensure_directories`, :meth:"
"`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts` and :"
"meth:`post_setup` can be overridden."
msgstr ""
"每個 methods :meth:`ensure_directories`、:meth:`create_configuration`、:meth:"
"`setup_python`、:meth:`setup_scripts` 及 :meth:`post_setup` 都可以被覆寫。"

#: ../../library/venv.rst:364
msgid ""
"Creates the environment directory and all necessary subdirectories that "
"don't already exist, and returns a context object.  This context object is "
"just a holder for attributes (such as paths) for use by the other methods.  "
"If the :class:`EnvBuilder` is created with the arg ``clear=True``, contents "
"of the environment directory will be cleared and then all necessary "
"subdirectories will be recreated."
msgstr ""
"建立還不存在的環境目錄及必要的子目錄，並回傳一個情境物件（context object）。"
"這個情境物件只是一個屬性 (例如：路徑) 的所有者，可被其他 method 使用。如果 :"
"class:`EnvBuilder` 已被建立且帶有 ``clear=True`` 的引數，該環境目錄下的內容將"
"被清空，以及所有必要的子目錄將被重新建立。"

#: ../../library/venv.rst:371
msgid ""
"The returned context object is a :class:`types.SimpleNamespace` with the "
"following attributes:"
msgstr ""
"回傳的情境物件（context object）其型別會是 :class:`types.SimpleNamespace`，並"
"包含以下屬性："

#: ../../library/venv.rst:374
msgid ""
"``env_dir`` - The location of the virtual environment. Used for "
"``__VENV_DIR__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:377
msgid ""
"``env_name`` - The name of the virtual environment. Used for "
"``__VENV_NAME__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:380
msgid ""
"``prompt`` - The prompt to be used by the activation scripts. Used for "
"``__VENV_PROMPT__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:383
msgid ""
"``executable`` - The underlying Python executable used by the virtual "
"environment. This takes into account the case where a virtual environment is "
"created from another virtual environment."
msgstr ""

#: ../../library/venv.rst:387
msgid "``inc_path`` - The include path for the virtual environment."
msgstr ""

#: ../../library/venv.rst:389
msgid "``lib_path`` - The purelib path for the virtual environment."
msgstr ""

#: ../../library/venv.rst:391
msgid "``bin_path`` - The script path for the virtual environment."
msgstr "``bin_path`` - 虛擬環境的腳本路徑。"

#: ../../library/venv.rst:393
msgid ""
"``bin_name`` - The name of the script path relative to the virtual "
"environment location. Used for ``__VENV_BIN_NAME__`` in activation scripts "
"(see :meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:397
msgid ""
"``env_exe`` - The name of the Python interpreter in the virtual environment. "
"Used for ``__VENV_PYTHON__`` in activation scripts (see :meth:"
"`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:401
msgid ""
"``env_exec_cmd`` - The name of the Python interpreter, taking into account "
"filesystem redirections. This can be used to run Python in the virtual "
"environment."
msgstr ""

#: ../../library/venv.rst:406
msgid ""
"The *venv* :ref:`sysconfig installation scheme <installation_paths>` is used "
"to construct the paths of the created directories."
msgstr ""

#: ../../library/venv.rst:411
msgid ""
"The attribute ``lib_path`` was added to the context, and the context object "
"was documented."
msgstr ""

#: ../../library/venv.rst:417
msgid "Creates the ``pyvenv.cfg`` configuration file in the environment."
msgstr "在環境中建立 ``pyvenv.cfg`` 設定檔。"

#: ../../library/venv.rst:421
msgid ""
"Creates a copy or symlink to the Python executable in the environment. On "
"POSIX systems, if a specific executable ``python3.x`` was used, symlinks to "
"``python`` and ``python3`` will be created pointing to that executable, "
"unless files with those names already exist."
msgstr ""

#: ../../library/venv.rst:428
msgid ""
"Installs activation scripts appropriate to the platform into the virtual "
"environment."
msgstr ""

#: ../../library/venv.rst:433
msgid ""
"Upgrades the core venv dependency packages (currently :pypi:`pip`) in the "
"environment. This is done by shelling out to the ``pip`` executable in the "
"environment."
msgstr ""

#: ../../library/venv.rst:440
msgid ":pypi:`setuptools` is no longer a core venv dependency."
msgstr ":pypi:`setuptools` 不再是核心 venv 的依賴。"

#: ../../library/venv.rst:444
msgid ""
"A placeholder method which can be overridden in third party implementations "
"to pre-install packages in the virtual environment or perform other post-"
"creation steps."
msgstr ""

#: ../../library/venv.rst:450
msgid ""
"This method can be called from :meth:`setup_scripts` or :meth:`post_setup` "
"in subclasses to assist in installing custom scripts into the virtual "
"environment."
msgstr ""

#: ../../library/venv.rst:454
msgid ""
"*path* is the path to a directory that should contain subdirectories "
"``common``, ``posix``, ``nt``; each containing scripts destined for the "
"``bin`` directory in the environment.  The contents of ``common`` and the "
"directory corresponding to :data:`os.name` are copied after some text "
"replacement of placeholders:"
msgstr ""

#: ../../library/venv.rst:460
msgid ""
"``__VENV_DIR__`` is replaced with the absolute path of the environment "
"directory."
msgstr ""

#: ../../library/venv.rst:463
msgid ""
"``__VENV_NAME__`` is replaced with the environment name (final path segment "
"of environment directory)."
msgstr ""

#: ../../library/venv.rst:466
msgid ""
"``__VENV_PROMPT__`` is replaced with the prompt (the environment name "
"surrounded by parentheses and with a following space)"
msgstr ""

#: ../../library/venv.rst:469
msgid ""
"``__VENV_BIN_NAME__`` is replaced with the name of the bin directory (either "
"``bin`` or ``Scripts``)."
msgstr ""

#: ../../library/venv.rst:472
msgid ""
"``__VENV_PYTHON__`` is replaced with the absolute path of the environment's "
"executable."
msgstr ""

#: ../../library/venv.rst:475
msgid ""
"The directories are allowed to exist (for when an existing environment is "
"being upgraded)."
msgstr ""

#: ../../library/venv.rst:480
msgid ""
"Creates a ``.gitignore`` file within the virtual environment that causes the "
"entire directory to be ignored by the Git source control manager."
msgstr ""

#: ../../library/venv.rst:485
msgid ""
"Windows now uses redirector scripts for ``python[w].exe`` instead of copying "
"the actual binaries. In 3.7.2 only :meth:`setup_python` does nothing unless "
"running from a build in the source tree."
msgstr ""

#: ../../library/venv.rst:490
msgid ""
"Windows copies the redirector scripts as part of :meth:`setup_python` "
"instead of :meth:`setup_scripts`. This was not the case in 3.7.2. When using "
"symlinks, the original executables will be linked."
msgstr ""

#: ../../library/venv.rst:495
msgid "There is also a module-level convenience function:"
msgstr ""

#: ../../library/venv.rst:501
msgid ""
"Create an :class:`EnvBuilder` with the given keyword arguments, and call "
"its :meth:`~EnvBuilder.create` method with the *env_dir* argument."
msgstr ""

#: ../../library/venv.rst:506
msgid "Added the *with_pip* parameter"
msgstr "新增 *with_pip* 參數"

#: ../../library/venv.rst:509
msgid "Added the *prompt* parameter"
msgstr "新增 *prompt* 參數"

#: ../../library/venv.rst:512
msgid "Added the *upgrade_deps* parameter"
msgstr "新增 *upgrade_deps* 參數"

#: ../../library/venv.rst:515
msgid "Added the *scm_ignore_files* parameter"
msgstr "新增 *scm_ignore_files*  參數"

#: ../../library/venv.rst:519
msgid "An example of extending ``EnvBuilder``"
msgstr "一個擴展 ``EnvBuilder`` 的範例"

#: ../../library/venv.rst:521
msgid ""
"The following script shows how to extend :class:`EnvBuilder` by implementing "
"a subclass which installs setuptools and pip into a created virtual "
"environment::"
msgstr ""

#: ../../library/venv.rst:524
msgid ""
"import os\n"
"import os.path\n"
"from subprocess import Popen, PIPE\n"
"import sys\n"
"from threading import Thread\n"
"from urllib.parse import urlparse\n"
"from urllib.request import urlretrieve\n"
"import venv\n"
"\n"
"class ExtendedEnvBuilder(venv.EnvBuilder):\n"
"    \"\"\"\n"
"    This builder installs setuptools and pip so that you can pip or\n"
"    easy_install other packages into the created virtual environment.\n"
"\n"
"    :param nodist: If true, setuptools and pip are not installed into the\n"
"                   created virtual environment.\n"
"    :param nopip: If true, pip is not installed into the created\n"
"                  virtual environment.\n"
"    :param progress: If setuptools or pip are installed, the progress of "
"the\n"
"                     installation can be monitored by passing a progress\n"
"                     callable. If specified, it is called with two\n"
"                     arguments: a string indicating some progress, and a\n"
"                     context indicating where the string is coming from.\n"
"                     The context argument can have one of three values:\n"
"                     'main', indicating that it is called from virtualize()\n"
"                     itself, and 'stdout' and 'stderr', which are obtained\n"
"                     by reading lines from the output streams of a "
"subprocess\n"
"                     which is used to install the app.\n"
"\n"
"                     If a callable is not specified, default progress\n"
"                     information is output to sys.stderr.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, *args, **kwargs):\n"
"        self.nodist = kwargs.pop('nodist', False)\n"
"        self.nopip = kwargs.pop('nopip', False)\n"
"        self.progress = kwargs.pop('progress', None)\n"
"        self.verbose = kwargs.pop('verbose', False)\n"
"        super().__init__(*args, **kwargs)\n"
"\n"
"    def post_setup(self, context):\n"
"        \"\"\"\n"
"        Set up any packages which need to be pre-installed into the\n"
"        virtual environment being created.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        os.environ['VIRTUAL_ENV'] = context.env_dir\n"
"        if not self.nodist:\n"
"            self.install_setuptools(context)\n"
"        # Can't install pip without setuptools\n"
"        if not self.nopip and not self.nodist:\n"
"            self.install_pip(context)\n"
"\n"
"    def reader(self, stream, context):\n"
"        \"\"\"\n"
"        Read lines from a subprocess' output stream and either pass to a "
"progress\n"
"        callable (if specified) or write progress information to sys."
"stderr.\n"
"        \"\"\"\n"
"        progress = self.progress\n"
"        while True:\n"
"            s = stream.readline()\n"
"            if not s:\n"
"                break\n"
"            if progress is not None:\n"
"                progress(s, context)\n"
"            else:\n"
"                if not self.verbose:\n"
"                    sys.stderr.write('.')\n"
"                else:\n"
"                    sys.stderr.write(s.decode('utf-8'))\n"
"                sys.stderr.flush()\n"
"        stream.close()\n"
"\n"
"    def install_script(self, context, name, url):\n"
"        _, _, path, _, _, _ = urlparse(url)\n"
"        fn = os.path.split(path)[-1]\n"
"        binpath = context.bin_path\n"
"        distpath = os.path.join(binpath, fn)\n"
"        # Download script into the virtual environment's binaries folder\n"
"        urlretrieve(url, distpath)\n"
"        progress = self.progress\n"
"        if self.verbose:\n"
"            term = '\\n'\n"
"        else:\n"
"            term = ''\n"
"        if progress is not None:\n"
"            progress('Installing %s ...%s' % (name, term), 'main')\n"
"        else:\n"
"            sys.stderr.write('Installing %s ...%s' % (name, term))\n"
"            sys.stderr.flush()\n"
"        # Install in the virtual environment\n"
"        args = [context.env_exe, fn]\n"
"        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)\n"
"        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))\n"
"        t1.start()\n"
"        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))\n"
"        t2.start()\n"
"        p.wait()\n"
"        t1.join()\n"
"        t2.join()\n"
"        if progress is not None:\n"
"            progress('done.', 'main')\n"
"        else:\n"
"            sys.stderr.write('done.\\n')\n"
"        # Clean up - no longer needed\n"
"        os.unlink(distpath)\n"
"\n"
"    def install_setuptools(self, context):\n"
"        \"\"\"\n"
"        Install setuptools in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = \"https://bootstrap.pypa.io/ez_setup.py\"\n"
"        self.install_script(context, 'setuptools', url)\n"
"        # clear up the setuptools archive which gets downloaded\n"
"        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar."
"gz')\n"
"        files = filter(pred, os.listdir(context.bin_path))\n"
"        for f in files:\n"
"            f = os.path.join(context.bin_path, f)\n"
"            os.unlink(f)\n"
"\n"
"    def install_pip(self, context):\n"
"        \"\"\"\n"
"        Install pip in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = 'https://bootstrap.pypa.io/get-pip.py'\n"
"        self.install_script(context, 'pip', url)\n"
"\n"
"\n"
"def main(args=None):\n"
"    import argparse\n"
"\n"
"    parser = argparse.ArgumentParser(prog=__name__,\n"
"                                     description='Creates virtual Python '\n"
"                                                 'environments in one or '\n"
"                                                 'more target '\n"
"                                                 'directories.')\n"
"    parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',\n"
"                        help='A directory in which to create the '\n"
"                             'virtual environment.')\n"
"    parser.add_argument('--no-setuptools', default=False,\n"
"                        action='store_true', dest='nodist',\n"
"                        help=\"Don't install setuptools or pip in the \"\n"
"                             \"virtual environment.\")\n"
"    parser.add_argument('--no-pip', default=False,\n"
"                        action='store_true', dest='nopip',\n"
"                        help=\"Don't install pip in the virtual \"\n"
"                             \"environment.\")\n"
"    parser.add_argument('--system-site-packages', default=False,\n"
"                        action='store_true', dest='system_site',\n"
"                        help='Give the virtual environment access to the '\n"
"                             'system site-packages dir.')\n"
"    if os.name == 'nt':\n"
"        use_symlinks = False\n"
"    else:\n"
"        use_symlinks = True\n"
"    parser.add_argument('--symlinks', default=use_symlinks,\n"
"                        action='store_true', dest='symlinks',\n"
"                        help='Try to use symlinks rather than copies, '\n"
"                             'when symlinks are not the default for '\n"
"                             'the platform.')\n"
"    parser.add_argument('--clear', default=False, action='store_true',\n"
"                        dest='clear', help='Delete the contents of the '\n"
"                                           'virtual environment '\n"
"                                           'directory if it already '\n"
"                                           'exists, before virtual '\n"
"                                           'environment creation.')\n"
"    parser.add_argument('--upgrade', default=False, action='store_true',\n"
"                        dest='upgrade', help='Upgrade the virtual '\n"
"                                             'environment directory to '\n"
"                                             'use this version of '\n"
"                                             'Python, assuming Python '\n"
"                                             'has been upgraded '\n"
"                                             'in-place.')\n"
"    parser.add_argument('--verbose', default=False, action='store_true',\n"
"                        dest='verbose', help='Display the output '\n"
"                                             'from the scripts which '\n"
"                                             'install setuptools and pip.')\n"
"    options = parser.parse_args(args)\n"
"    if options.upgrade and options.clear:\n"
"        raise ValueError('you cannot supply --upgrade and --clear "
"together.')\n"
"    builder = ExtendedEnvBuilder(system_site_packages=options.system_site,\n"
"                                   clear=options.clear,\n"
"                                   symlinks=options.symlinks,\n"
"                                   upgrade=options.upgrade,\n"
"                                   nodist=options.nodist,\n"
"                                   nopip=options.nopip,\n"
"                                   verbose=options.verbose)\n"
"    for d in options.dirs:\n"
"        builder.create(d)\n"
"\n"
"if __name__ == '__main__':\n"
"    rc = 1\n"
"    try:\n"
"        main()\n"
"        rc = 0\n"
"    except Exception as e:\n"
"        print('Error: %s' % e, file=sys.stderr)\n"
"    sys.exit(rc)"
msgstr ""

#: ../../library/venv.rst:732
msgid ""
"This script is also available for download `online <https://gist.github.com/"
"vsajip/4673395>`_."
msgstr ""

#: ../../library/venv.rst:14
msgid "Environments"
msgstr "Environments （環境）"

#: ../../library/venv.rst:14
msgid "virtual"
msgstr "virtual （虛擬）"
