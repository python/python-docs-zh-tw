# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Matt Wang <mattwang44@gmail.com>, 2023
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-01 22:24+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "複數物件"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"從 C API 來看，Python 的複數物件被實作為兩種不同的型別：一種是公開給 Python "
"程式的 Python 物件，另一種是表示實際複數值的 C 結構。API 提供了與兩者一起作用"
"的函式。"

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "作為 C 結構的複數"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"請注意，接受這些結構作為參數並將它們作為結果回傳的函式是\\ *按值 (by value)* "
"執行的，而不是透過指標取消參照 (dereference) 它們。這在整個 API 中都是一致"
"的。"

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate."
msgstr ""
"相對於 Python 複數物件之數值部分的 C 結構。大多數處理複數物件的函式根據需求會"
"使用這種型別的結構作為輸入或輸出值。"

#: ../../c-api/complex.rst:33
msgid "The structure is defined as::"
msgstr "該結構被定義為： ::"

#: ../../c-api/complex.rst:35
msgid ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"
msgstr ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"

#: ../../c-api/complex.rst:43
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "以 C 的 :c:type:`Py_complex` 表示形式來回傳兩個複數之和。"

#: ../../c-api/complex.rst:49
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr "以 C 的 :c:type:`Py_complex` 表示形式來回傳兩個複數間的差。"

#: ../../c-api/complex.rst:55
msgid ""
"Return the negation of the complex number *num*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"以 C 的 :c:type:`Py_complex` 表示形式來回傳複數 *num* 的相反數 (negation)。"

#: ../../c-api/complex.rst:61
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "以 C 的 :c:type:`Py_complex` 表示形式來回傳兩個複數的乘積。"

#: ../../c-api/complex.rst:67
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "以 C 的 :c:type:`Py_complex` 表示形式來回傳兩個複數的商。"

#: ../../c-api/complex.rst:70
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:macro:`!EDOM`."
msgstr ""
"如果 *divisor* 為 null，則此方法會回傳零並將 :c:data:`errno` 設定為 :c:macro:"
"`!EDOM`。"

#: ../../c-api/complex.rst:76
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"以 C 的 :c:type:`Py_complex` 表示形式來回傳 *num* 的 *exp* 次方的結果。"

#: ../../c-api/complex.rst:79
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""
"如果 *num* 為 null 且 *exp* 不是正實數，則此方法會回傳零並將 :c:data:`errno` "
"設定為 :c:macro:`!EDOM`。"

#: ../../c-api/complex.rst:84
msgid "Complex Numbers as Python Objects"
msgstr "作為 Python 物件的複數"

#: ../../c-api/complex.rst:89
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr "這個 :c:type:`PyObject` 的子型別代表一個 Python 複數物件。"

#: ../../c-api/complex.rst:94
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"這個 :c:type:`PyTypeObject` 的實例代表 Python 複數型別。它與 Python 層中的 :"
"class:`complex` 是同一個物件。"

#: ../../c-api/complex.rst:100
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"如果其引數是一個 :c:type:`PyComplexObject` 或者是 :c:type:`PyComplexObject` "
"的子型別，則會回傳 true。這個函式不會失敗。"

#: ../../c-api/complex.rst:106
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"如果其引數是一個 :c:type:`PyComplexObject`，但不是 :c:type:`PyComplexObject` "
"的子型別，則會回傳 true。這個函式不會失敗。"

#: ../../c-api/complex.rst:112
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value. Return ``NULL`` with an exception set on error."
msgstr ""
"從 C 的 :c:type:`Py_complex` 值建立一個新的 Python 複數物件。在錯誤時回傳 "
"``NULL`` 並設定例外。"

#: ../../c-api/complex.rst:118
msgid ""
"Return a new :c:type:`PyComplexObject` object from *real* and *imag*. Return "
"``NULL`` with an exception set on error."
msgstr ""
"從 *real* 和 *imag* 回傳一個新的 :c:type:`PyComplexObject` 物件。在錯誤時回"
"傳 ``NULL`` 並設定例外。"

#: ../../c-api/complex.rst:124
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr "以 C 的 :c:expr:`double` 形式回傳 *op* 的實部。"

#: ../../c-api/complex.rst:126
msgid ""
"Upon failure, this method returns ``-1.0`` with an exception set, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"失敗時，此方法回傳 ``-1.0`` 並設定例外，因此應該呼叫 :c:func:"
"`PyErr_Occurred` 來檢查錯誤。"

#: ../../c-api/complex.rst:132
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr "將 *op* 的虛部作為 C 的 :c:expr:`double` 回傳。"

#: ../../c-api/complex.rst:137
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "回傳複數 *op* 的 :c:type:`Py_complex` 值。"

#: ../../c-api/complex.rst:139
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to :meth:`~object.__float__`.  If :meth:`!__float__` is not "
"defined then it falls back to :meth:`~object.__index__`."
msgstr ""
"如果 *op* 不是 Python 複數物件，但有一個 :meth:`~object.__complex__` 方法，則"
"首先會呼叫該方法將 *op* 轉換為 Python 複數物件。如果 :meth:`!__complex__` 並"
"未定義，那麼它會回退到 :meth:`~object.__float__`。如果 :meth:`!__float__` 未"
"定義，則它將繼續回退為 :meth:`~object.__index__`。"

#: ../../c-api/complex.rst:145
msgid ""
"Upon failure, this method returns :c:type:`Py_complex` with :c:member:"
"`~Py_complex.real` set to ``-1.0`` and with an exception set, so one should "
"call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"失敗時，此方法回傳 :c:type:`Py_complex` 並將 :c:member:`~Py_complex.real` 設"
"為 ``-1.0``，並設定例外，因此應該呼叫 :c:func:`PyErr_Occurred` 來檢查錯誤。"

#: ../../c-api/complex.rst:149
msgid "Use :meth:`~object.__index__` if available."
msgstr "如果可用則使用 :meth:`~object.__index__`。"

#: ../../c-api/complex.rst:8
msgid "object"
msgstr "object（物件）"

#: ../../c-api/complex.rst:8
msgid "complex number"
msgstr "complex number（複數）"
