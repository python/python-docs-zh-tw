# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-23 07:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../c-api/monitoring.rst:6
msgid "Monitoring C API"
msgstr ""

#: ../../c-api/monitoring.rst:8
msgid "Added in version 3.13."
msgstr ""

#: ../../c-api/monitoring.rst:10
msgid ""
"An extension may need to interact with the event monitoring system. "
"Subscribing to events and registering callbacks can be done via the Python "
"API exposed in :mod:`sys.monitoring`."
msgstr ""

#: ../../c-api/monitoring.rst:15
msgid "Generating Execution Events"
msgstr ""

#: ../../c-api/monitoring.rst:17
msgid ""
"The functions below make it possible for an extension to fire monitoring "
"events as it emulates the execution of Python code. Each of these functions "
"accepts a ``PyMonitoringState`` struct which contains concise information "
"about the activation state of events, as well as the event arguments, which "
"include a ``PyObject*`` representing the code object, the instruction offset "
"and sometimes additional, event-specific arguments (see :mod:`sys."
"monitoring` for details about the signatures of the different event "
"callbacks). The ``codelike`` argument should be an instance of :class:`types."
"CodeType` or of a type that emulates it."
msgstr ""

#: ../../c-api/monitoring.rst:27
msgid ""
"The VM disables tracing when firing an event, so there is no need for user "
"code to do that."
msgstr ""

#: ../../c-api/monitoring.rst:30
msgid ""
"Monitoring functions should not be called with an exception set, except "
"those listed below as working with the current exception."
msgstr ""

#: ../../c-api/monitoring.rst:35
msgid ""
"Representation of the state of an event type. It is allocated by the user "
"while its contents are maintained by the monitoring API functions described "
"below."
msgstr ""

#: ../../c-api/monitoring.rst:39
msgid ""
"All of the functions below return 0 on success and -1 (with an exception "
"set) on error."
msgstr ""

#: ../../c-api/monitoring.rst:41
msgid "See :mod:`sys.monitoring` for descriptions of the events."
msgstr ""

#: ../../c-api/monitoring.rst:45
msgid "Fire a ``PY_START`` event."
msgstr ""

#: ../../c-api/monitoring.rst:50
msgid "Fire a ``PY_RESUME`` event."
msgstr ""

#: ../../c-api/monitoring.rst:55
msgid "Fire a ``PY_RETURN`` event."
msgstr ""

#: ../../c-api/monitoring.rst:60
msgid "Fire a ``PY_YIELD`` event."
msgstr ""

#: ../../c-api/monitoring.rst:65
msgid "Fire a ``CALL`` event."
msgstr ""

#: ../../c-api/monitoring.rst:70
msgid "Fire a ``LINE`` event."
msgstr ""

#: ../../c-api/monitoring.rst:75
msgid "Fire a ``JUMP`` event."
msgstr ""

#: ../../c-api/monitoring.rst:80
msgid "Fire a ``BRANCH`` event."
msgstr ""

#: ../../c-api/monitoring.rst:85
msgid "Fire a ``C_RETURN`` event."
msgstr ""

#: ../../c-api/monitoring.rst:90
msgid ""
"Fire a ``PY_THROW`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""

#: ../../c-api/monitoring.rst:96
msgid ""
"Fire a ``RAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""

#: ../../c-api/monitoring.rst:102
msgid ""
"Fire a ``C_RAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""

#: ../../c-api/monitoring.rst:108
msgid ""
"Fire a ``RERAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""

#: ../../c-api/monitoring.rst:114
msgid ""
"Fire an ``EXCEPTION_HANDLED`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""

#: ../../c-api/monitoring.rst:120
msgid ""
"Fire a ``PY_UNWIND`` event with the current exception (as returned by :c:"
"func:`PyErr_GetRaisedException`)."
msgstr ""

#: ../../c-api/monitoring.rst:126
msgid ""
"Fire a ``STOP_ITERATION`` event. If ``value`` is an instance of :exc:"
"`StopIteration`, it is used. Otherwise, a new :exc:`StopIteration` instance "
"is created with ``value`` as its argument."
msgstr ""

#: ../../c-api/monitoring.rst:131
msgid "Managing the Monitoring State"
msgstr ""

#: ../../c-api/monitoring.rst:133
msgid ""
"Monitoring states can be managed with the help of monitoring scopes. A scope "
"would typically correspond to a python function."
msgstr ""
