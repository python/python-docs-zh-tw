# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Ching-Lung Chuang, 2015
# Leon H., 2017
# Matt Wang <mattwang44@gmail.com>, 2023
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-27 00:03+0000\n"
"PO-Revision-Date: 2023-12-11 18:26+0000\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/conversion.rst:6
msgid "String conversion and formatting"
msgstr "字串轉換與格式化"

#: ../../c-api/conversion.rst:8
msgid "Functions for number conversion and formatted string output."
msgstr "用於數字轉換和格式化字串輸出的函式。"

#: ../../c-api/conversion.rst:13
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the extra arguments. See the Unix man page :manpage:"
"`snprintf(3)`."
msgstr ""
"根據格式字串 *format* 和額外引數，輸出不超過 *size* 位元組給 *str*。請參閱 "
"Unix 手冊頁面 :manpage:`snprintf(3)`。"

#: ../../c-api/conversion.rst:19
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the variable argument list *va*. Unix man page :manpage:"
"`vsnprintf(3)`."
msgstr ""
"根據格式字串 *format* 和變數引數串列 *va*，輸出不超過 *size* 位元組給 *str*。"
"Unix 手冊頁面 :manpage:`vsnprintf(3)`。"

#: ../../c-api/conversion.rst:23
msgid ""
":c:func:`PyOS_snprintf` and :c:func:`PyOS_vsnprintf` wrap the Standard C "
"library functions :c:func:`snprintf` and :c:func:`vsnprintf`. Their purpose "
"is to guarantee consistent behavior in corner cases, which the Standard C "
"functions do not."
msgstr ""
":c:func:`PyOS_snprintf` 和 :c:func:`PyOS_vsnprintf` 包裝標準 C 函式庫函式 :c:"
"func:`snprintf` 和 :c:func:`vsnprintf`。它們的目的是確保邊角案例 (corner "
"case) 下的行為一致，而標準 C 函式則不然。"

#: ../../c-api/conversion.rst:28
msgid ""
"The wrappers ensure that ``str[size-1]`` is always ``'\\0'`` upon return. "
"They never write more than *size* bytes (including the trailing ``'\\0'``) "
"into str. Both functions require that ``str != NULL``, ``size > 0``, "
"``format != NULL`` and ``size < INT_MAX``. Note that this means there is no "
"equivalent to the C99 ``n = snprintf(NULL, 0, ...)`` which would determine "
"the necessary buffer size."
msgstr ""
"包裝器確保回傳時 ``str[size-1]`` 始終為 ``'\\0'``。他們永遠不會在 str 中寫入"
"超過 *size* 位元組（包括尾隨的 ``'\\0'``\\ ）。這兩個函式都要求 ``str != "
"NULL``、``size > 0``、``format != NULL`` 和 ``size < INT_MAX``。請注意，這表"
"示沒有與 C99 ``n = snprintf(NULL, 0, ...)`` 等效的函式來決定必要的緩衝區大"
"小。"

#: ../../c-api/conversion.rst:34
msgid ""
"The return value (*rv*) for these functions should be interpreted as follows:"
msgstr "這些函式的回傳值 (*rv*) 應如下被直譯："

#: ../../c-api/conversion.rst:36
msgid ""
"When ``0 <= rv < size``, the output conversion was successful and *rv* "
"characters were written to *str* (excluding the trailing ``'\\0'`` byte at "
"``str[rv]``)."
msgstr ""
"當 ``0 <= rv < size`` 時，輸出轉換成功，*rv* 字元被寫入 *str*\\ （不包括 "
"``str[rv]`` 處的尾隨 ``'\\0'`` 位元組）。"

#: ../../c-api/conversion.rst:40
msgid ""
"When ``rv >= size``, the output conversion was truncated and a buffer with "
"``rv + 1`` bytes would have been needed to succeed. ``str[size-1]`` is "
"``'\\0'`` in this case."
msgstr ""
"當 ``rv >= size`` 時，輸出轉換被截斷，並且需要具有 ``rv + 1`` 位元組的緩衝區"
"才能成功。在這種情況下，``str[size-1]`` 是 ``'\\0'``。"

#: ../../c-api/conversion.rst:44
msgid ""
"When ``rv < 0``, \"something bad happened.\" ``str[size-1]`` is ``'\\0'`` in "
"this case too, but the rest of *str* is undefined. The exact cause of the "
"error depends on the underlying platform."
msgstr ""
"當 ``rv < 0`` 時，代表「有不好的事情發生了」。在這種情況下，``str[size-1]`` "
"也是 ``'\\0'``，但 *str* 的其餘部分未定義。錯誤的確切原因取決於底層平台。"

#: ../../c-api/conversion.rst:49
msgid ""
"The following functions provide locale-independent string to number "
"conversions."
msgstr "以下函式提供與區域設定無關 (locale-independent) 的字串到數字的轉換。"

#: ../../c-api/conversion.rst:53
msgid ""
"Convert the initial part of the string in ``str`` to an :c:expr:`unsigned "
"long` value according to the given ``base``, which must be between ``2`` and "
"``36`` inclusive, or be the special value ``0``."
msgstr ""

#: ../../c-api/conversion.rst:57
msgid ""
"Leading white space and case of characters are ignored.  If ``base`` is zero "
"it looks for a leading ``0b``, ``0o`` or ``0x`` to tell which base.  If "
"these are absent it defaults to ``10``.  Base must be 0 or between 2 and 36 "
"(inclusive).  If ``ptr`` is non-``NULL`` it will contain a pointer to the "
"end of the scan."
msgstr ""

#: ../../c-api/conversion.rst:63
msgid ""
"If the converted value falls out of range of corresponding return type, "
"range error occurs (:c:data:`errno` is set to :c:macro:`!ERANGE`) and :c:"
"macro:`!ULONG_MAX` is returned.  If no conversion can be performed, ``0`` is "
"returned."
msgstr ""

#: ../../c-api/conversion.rst:68
msgid "See also the Unix man page :manpage:`strtoul(3)`."
msgstr "也請見 Unix 手冊頁面 :manpage:`strtoul(3)`。"

#: ../../c-api/conversion.rst:75
msgid ""
"Convert the initial part of the string in ``str`` to an :c:expr:`long` value "
"according to the given ``base``, which must be between ``2`` and ``36`` "
"inclusive, or be the special value ``0``."
msgstr ""

#: ../../c-api/conversion.rst:79
msgid ""
"Same as :c:func:`PyOS_strtoul`, but return a :c:expr:`long` value instead "
"and :c:macro:`LONG_MAX` on overflows."
msgstr ""

#: ../../c-api/conversion.rst:82
msgid "See also the Unix man page :manpage:`strtol(3)`."
msgstr "也請見 Unix 手冊頁面 :manpage:`strtol(3)`。"

#: ../../c-api/conversion.rst:89
msgid ""
"Convert a string ``s`` to a :c:expr:`double`, raising a Python exception on "
"failure.  The set of accepted strings corresponds to the set of strings "
"accepted by Python's :func:`float` constructor, except that ``s`` must not "
"have leading or trailing whitespace. The conversion is independent of the "
"current locale."
msgstr ""
"將字串 ``s`` 轉換為 :c:expr:`double`，失敗時引發 Python 例外。接受的字串集合"
"對應於 Python 的 :func:`float` 建構函式接受的字串集合，但 ``s`` 不得有前導或"
"尾隨的空格。轉換與目前區域設定無關。"

#: ../../c-api/conversion.rst:95
msgid ""
"If ``endptr`` is ``NULL``, convert the whole string.  Raise :exc:"
"`ValueError` and return ``-1.0`` if the string is not a valid representation "
"of a floating-point number."
msgstr ""
"如果 ``endptr`` 為 ``NULL``，則轉換整個字串。如果字串不是浮點數的有效表示，則"
"引發 :exc:`ValueError` 並回傳 ``-1.0``。"

#: ../../c-api/conversion.rst:99
msgid ""
"If endptr is not ``NULL``, convert as much of the string as possible and set "
"``*endptr`` to point to the first unconverted character.  If no initial "
"segment of the string is the valid representation of a floating-point "
"number, set ``*endptr`` to point to the beginning of the string, raise "
"ValueError, and return ``-1.0``."
msgstr ""
"如果 endptr 不是 ``NULL``，則盡可能轉換字串，並將 ``*endptr`` 設定為指向第一"
"個未轉換的字元。如果字串的初始片段都不是浮點數的有效表示，則設定 ``*endptr`` "
"指向字串的開頭，引發 ValueError 並回傳 ``-1.0``。"

#: ../../c-api/conversion.rst:106
msgid ""
"If ``s`` represents a value that is too large to store in a float (for "
"example, ``\"1e500\"`` is such a string on many platforms) then if "
"``overflow_exception`` is ``NULL`` return ``Py_HUGE_VAL`` (with an "
"appropriate sign) and don't set any exception.  Otherwise, "
"``overflow_exception`` must point to a Python exception object; raise that "
"exception and return ``-1.0``.  In both cases, set ``*endptr`` to point to "
"the first character after the converted value."
msgstr ""
"如果 ``s`` 表示的值太大而無法儲存在浮點數中（例如 ``\"1e500\"`` 在許多平台上"
"都是這樣的字串），如果 ``overflow_exception`` 為 ``NULL`` 則回傳 "
"``Py_HUGE_VAL``\\ （會帶有適當的符號）並且不設定任何例外。否則， "
"``overflow_exception`` 必須指向一個 Python 例外物件；引發該例外並回傳 "
"``-1.0``。在這兩種情況下，將 ``*endptr`` 設定為指向轉換後的值之後的第一個字"
"元。"

#: ../../c-api/conversion.rst:114
msgid ""
"If any other error occurs during the conversion (for example an out-of-"
"memory error), set the appropriate Python exception and return ``-1.0``."
msgstr ""
"如果轉換期間發生任何其他錯誤（例如記憶體不足的錯誤），請設定適當的 Python 例"
"外並回傳 ``-1.0``。"

#: ../../c-api/conversion.rst:123
msgid ""
"Convert a :c:expr:`double` *val* to a string using supplied *format_code*, "
"*precision*, and *flags*."
msgstr ""
"使用提供的 *format_code*、*precision* 和 *flags* 將 :c:expr:`double` *val* 轉"
"換為字串。"

#: ../../c-api/conversion.rst:126
msgid ""
"*format_code* must be one of ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, "
"``'G'`` or ``'r'``.  For ``'r'``, the supplied *precision* must be 0 and is "
"ignored.  The ``'r'`` format code specifies the standard :func:`repr` format."
msgstr ""
"*format_code* 必須是 ``'e'``、``'E'``、``'f'``、``'F'``、``'g'``、``'G'`` 或 "
"``'r'`` 其中之一。對於 ``'r'``，提供的 *precision* 必須為 0 並會被忽略。"
"``'r'`` 格式碼指定標準 :func:`repr` 格式。"

#: ../../c-api/conversion.rst:131
msgid ""
"*flags* can be zero or more of the values ``Py_DTSF_SIGN``, "
"``Py_DTSF_ADD_DOT_0``, or ``Py_DTSF_ALT``, or-ed together:"
msgstr ""
"*flags* 可以是零個或多個值 ``Py_DTSF_SIGN``、``Py_DTSF_ADD_DOT_0`` 或 "
"``Py_DTSF_ALT``，會被聯集在一起："

#: ../../c-api/conversion.rst:134
msgid ""
"``Py_DTSF_SIGN`` means to always precede the returned string with a sign "
"character, even if *val* is non-negative."
msgstr ""
"``Py_DTSF_SIGN`` 代表總是在回傳的字串前面加上符號字元，即使 *val* 非負數。"

#: ../../c-api/conversion.rst:137
msgid ""
"``Py_DTSF_ADD_DOT_0`` means to ensure that the returned string will not look "
"like an integer."
msgstr "``Py_DTSF_ADD_DOT_0`` 代表確保回傳的字串看起來不會像整數。"

#: ../../c-api/conversion.rst:140
msgid ""
"``Py_DTSF_ALT`` means to apply \"alternate\" formatting rules.  See the "
"documentation for the :c:func:`PyOS_snprintf` ``'#'`` specifier for details."
msgstr ""
"``Py_DTSF_ALT`` 代表要套用「備用的 (alternate)」格式化規則。有關詳細資訊，請"
"參閱 :c:func:`PyOS_snprintf` ``'#'`` 的文件。"

#: ../../c-api/conversion.rst:144
msgid ""
"If *ptype* is non-``NULL``, then the value it points to will be set to one "
"of ``Py_DTST_FINITE``, ``Py_DTST_INFINITE``, or ``Py_DTST_NAN``, signifying "
"that *val* is a finite number, an infinite number, or not a number, "
"respectively."
msgstr ""
"如果 *ptype* 是非 ``NULL``，那麼它指向的值將被設定為 ``Py_DTST_FINITE``、"
"``Py_DTST_INFINITE`` 或 ``Py_DTST_NAN`` 其中之一，分別代表 *val* 是有限數、無"
"限數或非數。"

#: ../../c-api/conversion.rst:148
msgid ""
"The return value is a pointer to *buffer* with the converted string or "
"``NULL`` if the conversion failed. The caller is responsible for freeing the "
"returned string by calling :c:func:`PyMem_Free`."
msgstr ""
"回傳值是指向 *buffer* 的指標，其中包含轉換後的字串，如果轉換失敗則回傳 "
"``NULL``。呼叫者負責透過呼叫 :c:func:`PyMem_Free` 來釋放回傳的字串。"

#: ../../c-api/conversion.rst:157
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`!strcmp` except that it ignores the case."
msgstr ""
"不區分大小寫的字串比較。函式的作用方式幾乎與 :c:func:`!strcmp` 相同，只是它忽"
"略大小寫。"

#: ../../c-api/conversion.rst:163
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`!strncmp` except that it ignores the case."
msgstr ""
"不區分大小寫的字串比較。函式的作用方式幾乎與 :c:func:`!strncmp` 相同，只是它"
"忽略大小寫。"
