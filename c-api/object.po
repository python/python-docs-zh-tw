# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-23 07:52+0800\n"
"PO-Revision-Date: 2018-05-23 14:32+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/object.rst:6
msgid "Object Protocol"
msgstr "物件協定"

#: ../../c-api/object.rst:11
msgid "Get a :term:`strong reference` to a constant."
msgstr ""

#: ../../c-api/object.rst:13
msgid "Set an exception and return ``NULL`` if *constant_id* is invalid."
msgstr ""

#: ../../c-api/object.rst:15
msgid "*constant_id* must be one of these constant identifiers:"
msgstr ""

#: ../../c-api/object.rst:20
msgid "Constant Identifier"
msgstr ""

#: ../../c-api/object.rst:20
msgid "Value"
msgstr ""

#: ../../c-api/object.rst:20
msgid "Returned object"
msgstr ""

#: ../../c-api/object.rst:22 ../../c-api/object.rst:27
msgid "``0``"
msgstr "``0``"

#: ../../c-api/object.rst:22
msgid ":py:data:`None`"
msgstr ":py:data:`None`"

#: ../../c-api/object.rst:23 ../../c-api/object.rst:28
msgid "``1``"
msgstr "``1``"

#: ../../c-api/object.rst:23
msgid ":py:data:`False`"
msgstr ":py:data:`False`"

#: ../../c-api/object.rst:24
msgid "``2``"
msgstr "``2``"

#: ../../c-api/object.rst:24
msgid ":py:data:`True`"
msgstr ":py:data:`True`"

#: ../../c-api/object.rst:25
msgid "``3``"
msgstr "``3``"

#: ../../c-api/object.rst:25
msgid ":py:data:`Ellipsis`"
msgstr ":py:data:`Ellipsis`"

#: ../../c-api/object.rst:26
msgid "``4``"
msgstr "``4``"

#: ../../c-api/object.rst:26
msgid ":py:data:`NotImplemented`"
msgstr ":py:data:`NotImplemented`"

#: ../../c-api/object.rst:27
msgid "``5``"
msgstr "``5``"

#: ../../c-api/object.rst:28
msgid "``6``"
msgstr "``6``"

#: ../../c-api/object.rst:29
msgid "``7``"
msgstr "``7``"

#: ../../c-api/object.rst:29
msgid "``''``"
msgstr "``''``"

#: ../../c-api/object.rst:30
msgid "``8``"
msgstr "``8``"

#: ../../c-api/object.rst:30
msgid "``b''``"
msgstr "``b''``"

#: ../../c-api/object.rst:31
msgid "``9``"
msgstr "``9``"

#: ../../c-api/object.rst:31
msgid "``()``"
msgstr "``()``"

#: ../../c-api/object.rst:34
msgid ""
"Numeric values are only given for projects which cannot use the constant "
"identifiers."
msgstr ""

#: ../../c-api/object.rst:42
msgid "In CPython, all of these constants are :term:`immortal`."
msgstr ""

#: ../../c-api/object.rst:47
msgid ""
"Similar to :c:func:`Py_GetConstant`, but return a :term:`borrowed reference`."
msgstr ""

#: ../../c-api/object.rst:50
msgid ""
"This function is primarily intended for backwards compatibility: using :c:"
"func:`Py_GetConstant` is recommended for new code."
msgstr ""

#: ../../c-api/object.rst:53
msgid ""
"The reference is borrowed from the interpreter, and is valid until the "
"interpreter finalization."
msgstr ""

#: ../../c-api/object.rst:61
msgid ""
"The ``NotImplemented`` singleton, used to signal that an operation is not "
"implemented for the given type combination."
msgstr ""

#: ../../c-api/object.rst:67
msgid ""
"Properly handle returning :c:data:`Py_NotImplemented` from within a C "
"function (that is, create a new :term:`strong reference` to :const:"
"`NotImplemented` and return it)."
msgstr ""

#: ../../c-api/object.rst:74
msgid ""
"Flag to be used with multiple functions that print the object (like :c:func:"
"`PyObject_Print` and :c:func:`PyFile_WriteObject`). If passed, these "
"function would use the :func:`str` of the object instead of the :func:`repr`."
msgstr ""

#: ../../c-api/object.rst:82
msgid ""
"Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags "
"argument is used to enable certain printing options.  The only option "
"currently supported is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of "
"the object is written instead of the :func:`repr`."
msgstr ""

#: ../../c-api/object.rst:90
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise. "
"This is equivalent to the Python expression ``hasattr(o, attr_name)``. On "
"failure, return ``-1``."
msgstr ""

#: ../../c-api/object.rst:99
msgid ""
"This is the same as :c:func:`PyObject_HasAttrWithError`, but *attr_name* is "
"specified as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than "
"a :c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/object.rst:108
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise. "
"This function always succeeds."
msgstr ""

#: ../../c-api/object.rst:113
msgid ""
"Exceptions that occur when this calls :meth:`~object.__getattr__` and :meth:"
"`~object.__getattribute__` methods are silently ignored. For proper error "
"handling, use :c:func:`PyObject_HasAttrWithError`, :c:func:"
"`PyObject_GetOptionalAttr` or :c:func:`PyObject_GetAttr` instead."
msgstr ""

#: ../../c-api/object.rst:121
msgid ""
"This is the same as :c:func:`PyObject_HasAttr`, but *attr_name* is specified "
"as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""

#: ../../c-api/object.rst:127
msgid ""
"Exceptions that occur when this calls :meth:`~object.__getattr__` and :meth:"
"`~object.__getattribute__` methods or while creating the temporary :class:"
"`str` object are silently ignored. For proper error handling, use :c:func:"
"`PyObject_HasAttrStringWithError`, :c:func:`PyObject_GetOptionalAttrString` "
"or :c:func:`PyObject_GetAttrString` instead."
msgstr ""

#: ../../c-api/object.rst:137
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``o.attr_name``."
msgstr ""

#: ../../c-api/object.rst:141
msgid ""
"If the missing attribute should not be treated as a failure, you can use :c:"
"func:`PyObject_GetOptionalAttr` instead."
msgstr ""

#: ../../c-api/object.rst:147
msgid ""
"This is the same as :c:func:`PyObject_GetAttr`, but *attr_name* is specified "
"as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""

#: ../../c-api/object.rst:151
msgid ""
"If the missing attribute should not be treated as a failure, you can use :c:"
"func:`PyObject_GetOptionalAttrString` instead."
msgstr ""

#: ../../c-api/object.rst:157
msgid ""
"Variant of :c:func:`PyObject_GetAttr` which doesn't raise :exc:"
"`AttributeError` if the attribute is not found."
msgstr ""

#: ../../c-api/object.rst:160
msgid ""
"If the attribute is found, return ``1`` and set *\\*result* to a new :term:"
"`strong reference` to the attribute. If the attribute is not found, return "
"``0`` and set *\\*result* to ``NULL``; the :exc:`AttributeError` is "
"silenced. If an error other than :exc:`AttributeError` is raised, return "
"``-1`` and set *\\*result* to ``NULL``."
msgstr ""

#: ../../c-api/object.rst:172
msgid ""
"This is the same as :c:func:`PyObject_GetOptionalAttr`, but *attr_name* is "
"specified as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than "
"a :c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/object.rst:180
msgid ""
"Generic attribute getter function that is meant to be put into a type "
"object's ``tp_getattro`` slot.  It looks for a descriptor in the dictionary "
"of classes in the object's MRO as well as an attribute in the object's :attr:"
"`~object.__dict__` (if present).  As outlined in :ref:`descriptors`, data "
"descriptors take preference over instance attributes, while non-data "
"descriptors don't.  Otherwise, an :exc:`AttributeError` is raised."
msgstr ""

#: ../../c-api/object.rst:190
msgid ""
"Set the value of the attribute named *attr_name*, for object *o*, to the "
"value *v*. Raise an exception and return ``-1`` on failure; return ``0`` on "
"success.  This is the equivalent of the Python statement ``o.attr_name = v``."
msgstr ""

#: ../../c-api/object.rst:195
msgid ""
"If *v* is ``NULL``, the attribute is deleted. This behaviour is deprecated "
"in favour of using :c:func:`PyObject_DelAttr`, but there are currently no "
"plans to remove it."
msgstr ""

#: ../../c-api/object.rst:202
msgid ""
"This is the same as :c:func:`PyObject_SetAttr`, but *attr_name* is specified "
"as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""

#: ../../c-api/object.rst:206
msgid ""
"If *v* is ``NULL``, the attribute is deleted, but this feature is deprecated "
"in favour of using :c:func:`PyObject_DelAttrString`."
msgstr ""

#: ../../c-api/object.rst:209
msgid ""
"The number of different attribute names passed to this function should be "
"kept small, usually by using a statically allocated string as *attr_name*. "
"For attribute names that aren't known at compile time, prefer calling :c:"
"func:`PyUnicode_FromString` and :c:func:`PyObject_SetAttr` directly. For "
"more details, see :c:func:`PyUnicode_InternFromString`, which may be used "
"internally to create a key object."
msgstr ""

#: ../../c-api/object.rst:219
msgid ""
"Generic attribute setter and deleter function that is meant to be put into a "
"type object's :c:member:`~PyTypeObject.tp_setattro` slot.  It looks for a "
"data descriptor in the dictionary of classes in the object's MRO, and if "
"found it takes preference over setting or deleting the attribute in the "
"instance dictionary. Otherwise, the attribute is set or deleted in the "
"object's :attr:`~object.__dict__` (if present). On success, ``0`` is "
"returned, otherwise an :exc:`AttributeError` is raised and ``-1`` is "
"returned."
msgstr ""

#: ../../c-api/object.rst:231
msgid ""
"Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``del o.attr_name``."
msgstr ""

#: ../../c-api/object.rst:237
msgid ""
"This is the same as :c:func:`PyObject_DelAttr`, but *attr_name* is specified "
"as a :c:expr:`const char*` UTF-8 encoded bytes string, rather than a :c:expr:"
"`PyObject*`."
msgstr ""

#: ../../c-api/object.rst:241
msgid ""
"The number of different attribute names passed to this function should be "
"kept small, usually by using a statically allocated string as *attr_name*. "
"For attribute names that aren't known at compile time, prefer calling :c:"
"func:`PyUnicode_FromString` and :c:func:`PyObject_DelAttr` directly. For "
"more details, see :c:func:`PyUnicode_InternFromString`, which may be used "
"internally to create a key object for lookup."
msgstr ""

#: ../../c-api/object.rst:252
msgid ""
"A generic implementation for the getter of a ``__dict__`` descriptor. It "
"creates the dictionary if necessary."
msgstr ""

#: ../../c-api/object.rst:255
msgid ""
"This function may also be called to get the :py:attr:`~object.__dict__` of "
"the object *o*. Pass ``NULL`` for *context* when calling it. Since this "
"function may need to allocate memory for the dictionary, it may be more "
"efficient to call :c:func:`PyObject_GetAttr` when accessing an attribute on "
"the object."
msgstr ""

#: ../../c-api/object.rst:261
msgid "On failure, returns ``NULL`` with an exception set."
msgstr "在失敗時，會回傳 ``NULL`` 並設定例外。"

#: ../../c-api/object.rst:268
msgid ""
"A generic implementation for the setter of a ``__dict__`` descriptor. This "
"implementation does not allow the dictionary to be deleted."
msgstr ""

#: ../../c-api/object.rst:276
msgid ""
"Return a pointer to :py:attr:`~object.__dict__` of the object *obj*. If "
"there is no ``__dict__``, return ``NULL`` without setting an exception."
msgstr ""

#: ../../c-api/object.rst:279
msgid ""
"This function may need to allocate memory for the dictionary, so it may be "
"more efficient to call :c:func:`PyObject_GetAttr` when accessing an "
"attribute on the object."
msgstr ""

#: ../../c-api/object.rst:286
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :c:macro:`Py_LT`, :c:macro:`Py_LE`, :c:macro:`Py_EQ`, :"
"c:macro:`Py_NE`, :c:macro:`Py_GT`, or :c:macro:`Py_GE`, corresponding to "
"``<``, ``<=``, ``==``, ``!=``, ``>``, or ``>=`` respectively. This is the "
"equivalent of the Python expression ``o1 op o2``, where ``op`` is the "
"operator corresponding to *opid*. Returns the value of the comparison on "
"success, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/object.rst:296
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"like :c:func:`PyObject_RichCompare`, but returns ``-1`` on error, ``0`` if "
"the result is false, ``1`` otherwise."
msgstr ""

#: ../../c-api/object.rst:301
msgid ""
"If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` "
"will always return ``1`` for :c:macro:`Py_EQ` and ``0`` for :c:macro:`Py_NE`."
msgstr ""

#: ../../c-api/object.rst:306
msgid ""
"Format *obj* using *format_spec*. This is equivalent to the Python "
"expression ``format(obj, format_spec)``."
msgstr ""

#: ../../c-api/object.rst:309
msgid ""
"*format_spec* may be ``NULL``. In this case the call is equivalent to "
"``format(obj)``. Returns the formatted string on success, ``NULL`` on "
"failure."
msgstr ""

#: ../../c-api/object.rst:317
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``repr(o)``.  Called by the :func:`repr` built-in "
"function."
msgstr ""

#: ../../c-api/object.rst:321 ../../c-api/object.rst:345
msgid ""
"This function now includes a debug assertion to help ensure that it does not "
"silently discard an active exception."
msgstr ""

#: ../../c-api/object.rst:329
msgid ""
"As :c:func:`PyObject_Repr`, compute a string representation of object *o*, "
"but escape the non-ASCII characters in the string returned by :c:func:"
"`PyObject_Repr` with ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a "
"string similar to that returned by :c:func:`PyObject_Repr` in Python 2. "
"Called by the :func:`ascii` built-in function."
msgstr ""

#: ../../c-api/object.rst:340
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``str(o)``.  Called by the :func:`str` built-in "
"function and, therefore, by the :func:`print` function."
msgstr ""

#: ../../c-api/object.rst:354
msgid ""
"Compute a bytes representation of object *o*.  ``NULL`` is returned on "
"failure and a bytes object on success.  This is equivalent to the Python "
"expression ``bytes(o)``, when *o* is not an integer.  Unlike ``bytes(o)``, a "
"TypeError is raised when *o* is an integer instead of a zero-initialized "
"bytes object."
msgstr ""

#: ../../c-api/object.rst:363
msgid ""
"Return ``1`` if the class *derived* is identical to or derived from the "
"class *cls*, otherwise return ``0``.  In case of an error, return ``-1``."
msgstr ""

#: ../../c-api/object.rst:366 ../../c-api/object.rst:385
msgid ""
"If *cls* is a tuple, the check will be done against every entry in *cls*. "
"The result will be ``1`` when at least one of the checks returns ``1``, "
"otherwise it will be ``0``."
msgstr ""

#: ../../c-api/object.rst:370
msgid ""
"If *cls* has a :meth:`~class.__subclasscheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*derived* is a subclass of *cls* if it is a direct or indirect subclass, i."
"e. contained in ``cls.__mro__``."
msgstr ""

#: ../../c-api/object.rst:375
msgid ""
"Normally only class objects, i.e. instances of :class:`type` or a derived "
"class, are considered classes.  However, objects can override this by having "
"a :attr:`~class.__bases__` attribute (which must be a tuple of base classes)."
msgstr ""

#: ../../c-api/object.rst:382
msgid ""
"Return ``1`` if *inst* is an instance of the class *cls* or a subclass of "
"*cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception."
msgstr ""

#: ../../c-api/object.rst:389
msgid ""
"If *cls* has a :meth:`~class.__instancecheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*inst* is an instance of *cls* if its class is a subclass of *cls*."
msgstr ""

#: ../../c-api/object.rst:393
msgid ""
"An instance *inst* can override what is considered its class by having a :"
"attr:`~instance.__class__` attribute."
msgstr ""

#: ../../c-api/object.rst:396
msgid ""
"An object *cls* can override if it is considered a class, and what its base "
"classes are, by having a :attr:`~class.__bases__` attribute (which must be a "
"tuple of base classes)."
msgstr ""

#: ../../c-api/object.rst:405
msgid ""
"Compute and return the hash value of an object *o*.  On failure, return "
"``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr ""

#: ../../c-api/object.rst:408
msgid ""
"The return type is now Py_hash_t.  This is a signed integer the same size "
"as :c:type:`Py_ssize_t`."
msgstr ""

#: ../../c-api/object.rst:415
msgid ""
"Set a :exc:`TypeError` indicating that ``type(o)`` is not :term:`hashable` "
"and return ``-1``. This function receives special treatment when stored in a "
"``tp_hash`` slot, allowing a type to explicitly indicate to the interpreter "
"that it is not hashable."
msgstr ""

#: ../../c-api/object.rst:423
msgid ""
"Returns ``1`` if the object *o* is considered to be true, and ``0`` "
"otherwise. This is equivalent to the Python expression ``not not o``.  On "
"failure, return ``-1``."
msgstr ""

#: ../../c-api/object.rst:430
msgid ""
"Returns ``0`` if the object *o* is considered to be true, and ``1`` "
"otherwise. This is equivalent to the Python expression ``not o``.  On "
"failure, return ``-1``."
msgstr ""

#: ../../c-api/object.rst:439
msgid ""
"When *o* is non-``NULL``, returns a type object corresponding to the object "
"type of object *o*. On failure, raises :exc:`SystemError` and returns "
"``NULL``.  This is equivalent to the Python expression ``type(o)``. This "
"function creates a new :term:`strong reference` to the return value. There's "
"really no reason to use this function instead of the :c:func:`Py_TYPE()` "
"function, which returns a pointer of type :c:expr:`PyTypeObject*`, except "
"when a new :term:`strong reference` is needed."
msgstr ""

#: ../../c-api/object.rst:451
msgid ""
"Return non-zero if the object *o* is of type *type* or a subtype of *type*, "
"and ``0`` otherwise.  Both parameters must be non-``NULL``."
msgstr ""

#: ../../c-api/object.rst:460
msgid ""
"Return the length of object *o*.  If the object *o* provides either the "
"sequence and mapping protocols, the sequence length is returned.  On error, "
"``-1`` is returned.  This is the equivalent to the Python expression "
"``len(o)``."
msgstr ""

#: ../../c-api/object.rst:467
msgid ""
"Return an estimated length for the object *o*. First try to return its "
"actual length, then an estimate using :meth:`~object.__length_hint__`, and "
"finally return the default value. On error return ``-1``. This is the "
"equivalent to the Python expression ``operator.length_hint(o, "
"defaultvalue)``."
msgstr ""

#: ../../c-api/object.rst:477
msgid ""
"Return element of *o* corresponding to the object *key* or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o[key]``."
msgstr ""

#: ../../c-api/object.rst:483
msgid ""
"Map the object *key* to the value *v*.  Raise an exception and return ``-1`` "
"on failure; return ``0`` on success.  This is the equivalent of the Python "
"statement ``o[key] = v``.  This function *does not* steal a reference to *v*."
msgstr ""

#: ../../c-api/object.rst:491
msgid ""
"Remove the mapping for the object *key* from the object *o*.  Return ``-1`` "
"on failure.  This is equivalent to the Python statement ``del o[key]``."
msgstr ""

#: ../../c-api/object.rst:497
msgid ""
"This is equivalent to the Python expression ``dir(o)``, returning a "
"(possibly empty) list of strings appropriate for the object argument, or "
"``NULL`` if there was an error.  If the argument is ``NULL``, this is like "
"the Python ``dir()``, returning the names of the current locals; in this "
"case, if no execution frame is active then ``NULL`` is returned but :c:func:"
"`PyErr_Occurred` will return false."
msgstr ""

#: ../../c-api/object.rst:506
msgid ""
"This is equivalent to the Python expression ``iter(o)``. It returns a new "
"iterator for the object argument, or the object  itself if the object is "
"already an iterator.  Raises :exc:`TypeError` and returns ``NULL`` if the "
"object cannot be iterated."
msgstr ""

#: ../../c-api/object.rst:514
msgid ""
"This is the equivalent to the Python expression ``aiter(o)``. Takes an :"
"class:`AsyncIterable` object and returns an :class:`AsyncIterator` for it. "
"This is typically a new iterator but if the argument is an :class:"
"`AsyncIterator`, this returns itself. Raises :exc:`TypeError` and returns "
"``NULL`` if the object cannot be iterated."
msgstr ""

#: ../../c-api/object.rst:524
msgid "Get a pointer to subclass-specific data reserved for *cls*."
msgstr ""

#: ../../c-api/object.rst:526
msgid ""
"The object *o* must be an instance of *cls*, and *cls* must have been "
"created using negative :c:member:`PyType_Spec.basicsize`. Python does not "
"check this."
msgstr ""

#: ../../c-api/object.rst:530
msgid "On error, set an exception and return ``NULL``."
msgstr ""

#: ../../c-api/object.rst:536
msgid ""
"Return the size of the instance memory space reserved for *cls*, i.e. the "
"size of the memory :c:func:`PyObject_GetTypeData` returns."
msgstr ""

#: ../../c-api/object.rst:539
msgid ""
"This may be larger than requested using :c:member:`-PyType_Spec.basicsize "
"<PyType_Spec.basicsize>`; it is safe to use this larger size (e.g. with :c:"
"func:`!memset`)."
msgstr ""

#: ../../c-api/object.rst:542
msgid ""
"The type *cls* **must** have been created using negative :c:member:"
"`PyType_Spec.basicsize`. Python does not check this."
msgstr ""

#: ../../c-api/object.rst:546
msgid "On error, set an exception and return a negative value."
msgstr ""

#: ../../c-api/object.rst:552
msgid ""
"Get a pointer to per-item data for a class with :c:macro:"
"`Py_TPFLAGS_ITEMS_AT_END`."
msgstr ""

#: ../../c-api/object.rst:555
msgid ""
"On error, set an exception and return ``NULL``. :py:exc:`TypeError` is "
"raised if *o* does not have :c:macro:`Py_TPFLAGS_ITEMS_AT_END` set."
msgstr ""

#: ../../c-api/object.rst:563
msgid "Visit the managed dictionary of *obj*."
msgstr ""

#: ../../c-api/object.rst:565 ../../c-api/object.rst:574
msgid ""
"This function must only be called in a traverse function of the type which "
"has the :c:macro:`Py_TPFLAGS_MANAGED_DICT` flag set."
msgstr ""

#: ../../c-api/object.rst:572
msgid "Clear the managed dictionary of *obj*."
msgstr ""

#: ../../c-api/object.rst:315 ../../c-api/object.rst:327
#: ../../c-api/object.rst:352 ../../c-api/object.rst:403
#: ../../c-api/object.rst:437 ../../c-api/object.rst:458
msgid "built-in function"
msgstr "bulit-in function（內建函式）"

#: ../../c-api/object.rst:315
msgid "repr"
msgstr "repr"

#: ../../c-api/object.rst:327
msgid "ascii"
msgstr "ascii"

#: ../../c-api/object.rst:335
msgid "string"
msgstr "string（字串）"

#: ../../c-api/object.rst:335
msgid "PyObject_Str (C function)"
msgstr "PyObject_Str（C 函式）"

#: ../../c-api/object.rst:352
msgid "bytes"
msgstr "bytes（位元組）"

#: ../../c-api/object.rst:403
msgid "hash"
msgstr "hash（雜湊）"

#: ../../c-api/object.rst:437
msgid "type"
msgstr "type（型別）"

#: ../../c-api/object.rst:458
msgid "len"
msgstr "len"
