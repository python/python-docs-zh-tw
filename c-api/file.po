# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Ching-Lung Chuang, 2015
# Liang-Bo Wang <me@liang2.tw>, 2015
# Matt Wang <mattwang44@gmail.com>, 2022
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-04 00:03+0000\n"
"PO-Revision-Date: 2023-04-24 20:38+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr "檔案物件 (File Objects)"

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:expr:`FILE*`) support "
"from the C standard library.  In Python 3, files and streams use the new :"
"mod:`io` module, which defines several layers over the low-level unbuffered "
"I/O of the operating system.  The functions described below are convenience "
"C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the :mod:"
"`io` APIs instead."
msgstr ""
"這些 API 是用於內建檔案物件的 Python 2 C API 的最小模擬 (minimal emulation)，"
"它過去依賴於 C 標準函式庫對於緩衝 I/O (:c:expr:`FILE*`) 的支援。在 Python 3 "
"中，檔案和串流使用新的 :mod:`io` 模組，它在操作系統的低階無緩衝 I/O 上定義了"
"多個層級。下面描述的函式是這些新 API 的便捷 C 包裝器，主要用於直譯器中的內部"
"錯誤報告；建議第三方程式碼改為存取 :mod:`io` API。"

#: ../../c-api/file.rst:22
#, fuzzy
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"``NULL`` to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return ``NULL`` on "
"failure. For a more comprehensive description of the arguments, please refer "
"to the :func:`io.open` function documentation."
msgstr ""
"從已打開檔案 *fd* 的檔案描述器建立一個 Python 檔案物件。引數 *name*、"
"*encoding*、*errors* 和 *newline* 可以為 ``NULL`` 以使用預設值； *buffering* "
"可以是 *-1* 以使用預設值。 *name* 被忽略並保留以實作向後相容性。失敗時回傳 "
"``NULL``。有關引數的更全面描述，請參閱 :func:`io.open` 函式文檔。"

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""
"由於 Python 串流有自己的緩衝層，將它們與操作系統層級檔案描述器混合使用會產生"
"各種問題（例如資料的排序不符合預期）。"

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr "忽略 *name* 屬性。"

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:expr:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's :meth:"
"`~io.IOBase.fileno` method is called if it exists; the method must return an "
"integer, which is returned as the file descriptor value.  Sets an exception "
"and returns ``-1`` on failure."
msgstr ""
"回傳與 *p* 關聯的檔案描述器作為 :c:expr:`int`。如果物件是整數，則回傳其值。如"
"果不是整數，則呼叫物件的 :meth:`~io.IOBase.fileno` 方法（如果存在）；該方法必"
"須回傳一個整數，它作為檔案描述器值回傳。設定例外並在失敗時回傳 ``-1``。"

#: ../../c-api/file.rst:52
#, fuzzy
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`~io.IOBase."
"readline` method.  If *n* is ``0``, exactly one line is read, regardless of "
"the length of the line.  If *n* is greater than ``0``, no more than *n* "
"bytes will be read from the file; a partial line can be returned.  In both "
"cases, an empty string is returned if the end of the file is reached "
"immediately.  If *n* is less than ``0``, however, one line is read "
"regardless of length, but :exc:`EOFError` is raised if the end of the file "
"is reached immediately."
msgstr ""
"相當於 ``p.readline([n])``，這個函式從物件 *p* 中讀取一行。 *p* 可以是檔案對"
"像或任何具有 :meth:`~io.IOBase.readline` 方法的物件。如果 *n* 為 ``0``，則只"
"讀取一行，而不管該行的長度。如果 *n* 大於 ``0``，則不會從檔案中讀取超過 *n* "
"個位元組；可以回傳部分行。在這兩種情況下，如果立即到達檔案末尾，則回傳一個空"
"字串。但是，如果 *n* 小於 ``0``，無論長度如何，都會讀取一行，但如果立即到達檔"
"案末尾，則會引發 :exc:`EOFError`。"

#: ../../c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its parameter "
"through the provided handler."
msgstr ""
"覆蓋 :func:`io.open_code` 的正常行為以透過提供的處理程式 (handler) 傳遞其參"
"數。"

#: ../../c-api/file.rst:68
msgid "The handler is a function of type:"
msgstr ""

#: ../../c-api/file.rst:72
#, fuzzy
msgid ""
"Equivalent of :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, "
"where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""
"處理程式是 :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)` 型別的函"
"式，其中 *path* 保證為 :c:type:`PyUnicodeObject`。"

#: ../../c-api/file.rst:76
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""
"*userData* 指標被傳遞到掛鉤函式 (hook function) 中。由於可能會從不同的執行環"
"境 (runtime) 呼叫掛鉤函式，因此該指標不應直接指向 Python 狀態。"

#: ../../c-api/file.rst:80
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or available "
"in ``sys.modules``."
msgstr ""
"由於此掛鉤函式是在導入期間有意使用的，因此請避免在其執行期間導入新模組，除非"
"它們已知有被凍結或在 ``sys.modules`` 中可用。"

#: ../../c-api/file.rst:84
#, fuzzy
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later calls "
"to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the function "
"returns -1 and sets an exception if the interpreter has been initialized."
msgstr ""
"一旦設定了一個掛鉤函式，它就不能被刪除或替換，以後呼叫 :c:func:"
"`PyFile_SetOpenCodeHook` 將失敗。失敗時，函式回傳 -1 並在直譯器已初始化時設定"
"例外。"

#: ../../c-api/file.rst:88
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr "在 :c:func:`Py_Initialize` 之前呼叫此函式是安全的。"

#: ../../c-api/file.rst:90
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr ""
"不帶引數地引發一個\\ :ref:`稽核事件 (auditing event) <auditing>` "
"``setopencodehook``。"

#: ../../c-api/file.rst:100
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of the object is "
"written instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"將物件 *obj* 寫入檔案物件 *p*。 *flags* 唯一支援的旗標是 :c:macro:"
"`Py_PRINT_RAW`；如果有給定，則寫入物件的 :func:`str` 而不是 :func:`repr`。在"
"成功回傳 ``0`` 或在失敗回傳 ``-1``；將設定適當的例外。"

#: ../../c-api/file.rst:108
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"寫入字串 *s* 到 檔案物件 *p*。當成功時回傳 0，而當失敗時回傳 -1，並會設定合適"
"的例外狀況。"

#: ../../c-api/file.rst:8
msgid "object"
msgstr "object（物件）"

#: ../../c-api/file.rst:8
msgid "file"
msgstr "file（檔案）"

#: ../../c-api/file.rst:50
msgid "EOFError (built-in exception)"
msgstr "EOFError（內建例外）"

#: ../../c-api/file.rst:98
msgid "Py_PRINT_RAW (C macro)"
msgstr "Py_PRINT_RAW（C 巨集）"
