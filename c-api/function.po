# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Ching-Lung Chuang, 2015
# Liang-Bo Wang <me@liang2.tw>, 2015
# Matt Wang <mattwang44@gmail.com>, 2022
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-13 00:03+0000\n"
"PO-Revision-Date: 2022-11-12 15:45+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2\n"

#: ../../c-api/function.rst:6
msgid "Function Objects"
msgstr "函式物件 (Function Objects)"

#: ../../c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr "這有一些特用於 Python 函式的函式。"

#: ../../c-api/function.rst:15
msgid "The C structure used for functions."
msgstr "用於函式的 C 結構。"

#: ../../c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as ``types."
"FunctionType``."
msgstr ""
"這是個 :c:type:`PyTypeObject` 的實例，且代表了 Python 函式型別，Python 程式設"
"計者可透過 ``types.FunctionType`` 使用它。"

#: ../../c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type :c:data:"
"`PyFunction_Type`). The parameter must not be ``NULL``.  This function "
"always succeeds."
msgstr ""
"如果 *o* 是個函式物件（擁有 :c:data:`PyFunction_Type` 的型別）則回傳 true。參"
"數必須不為 ``NULL``。此函式必能成功執行。"

#: ../../c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to the "
"function."
msgstr ""
"回傳一個與程式碼物件 *code* 相關聯的函式物件。*globals* 必須是一個帶有函式能"
"夠存取的全域變數的字典。"

#: ../../c-api/function.rst:37
msgid ""
"The function's docstring and name are retrieved from the code object. :attr:"
"`~function.__module__` is retrieved from *globals*. The argument defaults, "
"annotations and closure are set to ``NULL``. :attr:`~function.__qualname__` "
"is set to the same value as the code object's :attr:`~codeobject."
"co_qualname` field."
msgstr ""
"函式的文件字串 (docstring) 和名稱是從程式碼物件所取得，:attr:`~function."
"__module__` 是自 *globals* 所取得。引數預設值、標註 (annotation) 和閉包 "
"(closure) 被設為 ``NULL``，:attr:`~function.__qualname__` 被設為和程式碼物"
"件 :attr:`~codeobject.co_qualname` 欄位相同的值。"

#: ../../c-api/function.rst:46
msgid ""
"As :c:func:`PyFunction_New`, but also allows setting the function object's :"
"attr:`~function.__qualname__` attribute. *qualname* should be a unicode "
"object or ``NULL``; if ``NULL``, the :attr:`!__qualname__` attribute is set "
"to the same value as the code object's :attr:`~codeobject.co_qualname` field."
msgstr ""
"和 :c:func:`PyFunction_New` 相似，但也允許函式物件 :attr:`~function."
"__qualname__` 屬性的設定，*qualname* 應為一個 unicode 物件或是 ``NULL``；如"
"為 ``NULL``，:attr:`!__qualname__` 屬性會被設為與程式碼物件 :attr:"
"`~codeobject.co_qualname` 欄位相同的值。"

#: ../../c-api/function.rst:57
msgid "Return the code object associated with the function object *op*."
msgstr "回傳與程式碼物件相關的函式物件 *op*。"

#: ../../c-api/function.rst:62
msgid "Return the globals dictionary associated with the function object *op*."
msgstr "回傳與全域函式字典相關的函式物件 *op*。"

#: ../../c-api/function.rst:67
msgid ""
"Return a :term:`borrowed reference` to the :attr:`~function.__module__` "
"attribute of the :ref:`function object <user-defined-funcs>` *op*. It can be "
"*NULL*."
msgstr ""
"回傳一個\\ :ref:`函式物件 <user-defined-funcs>` *op* 之 :attr:`~function."
"__module__` 屬性的 :term:`borrowed reference`，它可以是 *NULL*。"

#: ../../c-api/function.rst:71
msgid ""
"This is normally a :class:`string <str>` containing the module name, but can "
"be set to any other object by Python code."
msgstr ""
"這通常是個包含模組名稱的\\ :class:`字串 <str>`，但可以被 Python 程式設為任何"
"其他物件。"

#: ../../c-api/function.rst:77
msgid ""
"Return the argument default values of the function object *op*. This can be "
"a tuple of arguments or ``NULL``."
msgstr ""
"回傳函式物件 *op* 的引數預設值，這可以是一個含有多個引數的 tuple（元組）或 "
"``NULL``。"

#: ../../c-api/function.rst:83
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be ``Py_None`` or a tuple."
msgstr ""
"設定函式物件 *op* 的引數預設值。*defaults* 必須是 ``Py_None`` 或一個 tuple。"

#: ../../c-api/function.rst:86 ../../c-api/function.rst:109
#: ../../c-api/function.rst:123
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr "引發 :exc:`SystemError` 且在失敗時回傳 ``-1``。"

#: ../../c-api/function.rst:91
msgid "Set the vectorcall field of a given function object *func*."
msgstr "為一個給定的函式物件 *func* 設定 vectorcall 欄位。"

#: ../../c-api/function.rst:93
msgid ""
"Warning: extensions using this API must preserve the behavior of the "
"unaltered (default) vectorcall function!"
msgstr ""

#: ../../c-api/function.rst:100
msgid ""
"Return the closure associated with the function object *op*. This can be "
"``NULL`` or a tuple of cell objects."
msgstr ""
"回傳與函式物件 *op* 相關聯的閉包，這可以是個 ``NULL`` 或是一個包含 cell 物件"
"的 tuple。"

#: ../../c-api/function.rst:106
msgid ""
"Set the closure associated with the function object *op*. *closure* must be "
"``Py_None`` or a tuple of cell objects."
msgstr ""
"設定與函式物件 *op* 相關聯的閉包，*closure* 必須是 ``Py_None`` 或是一個包含 "
"cell 物件的 tuple。"

#: ../../c-api/function.rst:114
msgid ""
"Return the annotations of the function object *op*. This can be a mutable "
"dictionary or ``NULL``."
msgstr ""
"回傳函式物件 *op* 的標註，這可以是一個可變動的 (mutable) 字典或 ``NULL``。"

#: ../../c-api/function.rst:120
msgid ""
"Set the annotations for the function object *op*. *annotations* must be a "
"dictionary or ``Py_None``."
msgstr "設定函式物件 *op* 的標註，*annotations* 必須是一個字典或 ``Py_None``。"

#: ../../c-api/function.rst:128
msgid ""
"Register *callback* as a function watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyFunction_ClearWatcher`. In "
"case of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""

#: ../../c-api/function.rst:138
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyFunction_AddWatcher` for the current interpreter. Return ``0`` on "
"success, or ``-1`` and set an exception on error (e.g.  if the given "
"*watcher_id* was never registered.)"
msgstr ""

#: ../../c-api/function.rst:148
msgid ""
"Enumeration of possible function watcher events: - "
"``PyFunction_EVENT_CREATE`` - ``PyFunction_EVENT_DESTROY`` - "
"``PyFunction_EVENT_MODIFY_CODE`` - ``PyFunction_EVENT_MODIFY_DEFAULTS`` - "
"``PyFunction_EVENT_MODIFY_KWDEFAULTS``"
msgstr ""

#: ../../c-api/function.rst:160
msgid "Type of a function watcher callback function."
msgstr ""

#: ../../c-api/function.rst:162
msgid ""
"If *event* is ``PyFunction_EVENT_CREATE`` or ``PyFunction_EVENT_DESTROY`` "
"then *new_value* will be ``NULL``. Otherwise, *new_value* will hold a :term:"
"`borrowed reference` to the new value that is about to be stored in *func* "
"for the attribute that is being modified."
msgstr ""

#: ../../c-api/function.rst:167
msgid ""
"The callback may inspect but must not modify *func*; doing so could have "
"unpredictable effects, including infinite recursion."
msgstr ""

#: ../../c-api/function.rst:170
msgid ""
"If *event* is ``PyFunction_EVENT_CREATE``, then the callback is invoked "
"after `func` has been fully initialized. Otherwise, the callback is invoked "
"before the modification to *func* takes place, so the prior state of *func* "
"can be inspected. The runtime is permitted to optimize away the creation of "
"function objects when possible. In such cases no event will be emitted. "
"Although this creates the possibility of an observable difference of runtime "
"behavior depending on optimization decisions, it does not change the "
"semantics of the Python code being executed."
msgstr ""

#: ../../c-api/function.rst:179
msgid ""
"If *event* is ``PyFunction_EVENT_DESTROY``,  Taking a reference in the "
"callback to the about-to-be-destroyed function will resurrect it, preventing "
"it from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""

#: ../../c-api/function.rst:184
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""

#: ../../c-api/function.rst:188
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""

#: ../../c-api/function.rst:8
msgid "object"
msgstr "object（物件）"

#: ../../c-api/function.rst:8
msgid "function"
msgstr "function（函式）"

#: ../../c-api/function.rst:20
msgid "MethodType (in module types)"
msgstr "MethodType（types 模組中）"
