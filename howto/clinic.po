# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-07 00:03+0000\n"
"PO-Revision-Date: 2018-05-23 14:36+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/clinic.rst:7
msgid "Argument Clinic How-To"
msgstr ""

#: ../../howto/clinic.rst:0
msgid "author"
msgstr "作者"

#: ../../howto/clinic.rst:9
msgid "Larry Hastings"
msgstr "Larry Hastings"

#: ../../howto/clinic.rst:11
msgid "**Source code:** :source:`Tools/clinic/clinic.py`."
msgstr "**原始碼：** :source:`Tools/clinic/clinic.py`。"

#: ../../howto/clinic.rst:7
msgid "Abstract"
msgstr "摘要"

#: ../../howto/clinic.rst:15
msgid ""
"Argument Clinic is a preprocessor for CPython C files. It was introduced in "
"Python 3.4 with :pep:`436`, in order to provide introspection signatures, "
"and to generate performant and tailor-made boilerplate code for argument "
"parsing in CPython builtins, module level functions, and class methods. This "
"document is divided in four major sections:"
msgstr ""

#: ../../howto/clinic.rst:23
msgid ""
":ref:`clinic-background` talks about the basic concepts and goals of "
"Argument Clinic."
msgstr ""

#: ../../howto/clinic.rst:25
msgid ""
":ref:`clinic-reference` describes the command-line interface and Argument "
"Clinic terminology."
msgstr ""

#: ../../howto/clinic.rst:27
msgid ""
":ref:`clinic-tutorial` guides you through all the steps required to adapt an "
"existing C function to Argument Clinic."
msgstr ""

#: ../../howto/clinic.rst:29
msgid ":ref:`clinic-howtos` details how to handle specific tasks."
msgstr ""

#: ../../howto/clinic.rst:34
msgid ""
"Argument Clinic is considered internal-only for CPython.  Its use is not "
"supported for files outside CPython, and no guarantees are made regarding "
"backwards compatibility for future versions.  In other words: if you "
"maintain an external C extension for CPython, you're welcome to experiment "
"with Argument Clinic in your own code.  But the version of Argument Clinic "
"that ships with the next version of CPython *could* be totally incompatible "
"and break all your code."
msgstr ""

#: ../../howto/clinic.rst:47
msgid "Background"
msgstr ""

#: ../../howto/clinic.rst:50
msgid "Basic concepts"
msgstr ""

#: ../../howto/clinic.rst:52
msgid ""
"When Argument Clinic is run on a file, either via the :ref:`clinic-cli` or "
"via ``make clinic``, it will scan over the input files looking for :term:"
"`start lines <start line>`:"
msgstr ""

#: ../../howto/clinic.rst:60
msgid "When it finds one, it reads everything up to the :term:`end line`:"
msgstr ""

#: ../../howto/clinic.rst:66
msgid ""
"Everything in between these two lines is Argument Clinic :term:`input`. When "
"Argument Clinic parses input, it generates :term:`output`. The output is "
"rewritten into the C file immediately after the input, followed by a :term:"
"`checksum line`. All of these lines, including the :term:`start line` and :"
"term:`checksum line`, are collectively called an Argument Clinic :term:"
"`block`:"
msgstr ""

#: ../../howto/clinic.rst:81
msgid ""
"If you run Argument Clinic on the same file a second time, Argument Clinic "
"will discard the old :term:`output` and write out the new output with a "
"fresh :term:`checksum line`. If the :term:`input` hasn't changed, the output "
"won't change either."
msgstr ""

#: ../../howto/clinic.rst:88
msgid ""
"You should never modify the output of an Argument Clinic block, as any "
"change will be lost in future Argument Clinic runs; Argument Clinic will "
"detect an output checksum mismatch and regenerate the correct output. If you "
"are not happy with the generated output, you should instead change the input "
"until it produces the output you want."
msgstr ""

#: ../../howto/clinic.rst:99
msgid "Reference"
msgstr ""

#: ../../howto/clinic.rst:105
msgid "Terminology"
msgstr ""

#: ../../howto/clinic.rst:108
msgid "start line"
msgstr ""

#: ../../howto/clinic.rst:110
msgid ""
"The line ``/*[clinic input]``. This line marks the beginning of Argument "
"Clinic input. Note that the *start line* opens a C block comment."
msgstr ""

#: ../../howto/clinic.rst:113
msgid "end line"
msgstr ""

#: ../../howto/clinic.rst:115
msgid ""
"The line ``[clinic start generated code]*/``. The *end line* marks the _end_ "
"of Argument Clinic :term:`input`, but at the same time marks the _start_ of "
"Argument Clinic :term:`output`, thus the text *\"clinic start start "
"generated code\"* Note that the *end line* closes the C block comment opened "
"by the *start line*."
msgstr ""

#: ../../howto/clinic.rst:121
msgid "checksum"
msgstr ""

#: ../../howto/clinic.rst:123
msgid ""
"A hash to distinguish unique :term:`inputs <input>` and :term:`outputs "
"<output>`."
msgstr ""

#: ../../howto/clinic.rst:125
msgid "checksum line"
msgstr ""

#: ../../howto/clinic.rst:127
msgid ""
"A line that looks like ``/*[clinic end generated code: ...]*/``. The three "
"dots will be replaced by a :term:`checksum` generated from the :term:"
"`input`, and a :term:`checksum` generated from the :term:`output`. The "
"checksum line marks the end of Argument Clinic generated code, and is used "
"by Argument Clinic to determine if it needs to regenerate output."
msgstr ""

#: ../../howto/clinic.rst:133
msgid "input"
msgstr ""

#: ../../howto/clinic.rst:135
msgid ""
"The text between the :term:`start line` and the :term:`end line`. Note that "
"the start and end lines open and close a C block comment; the *input* is "
"thus a part of that same C block comment."
msgstr ""

#: ../../howto/clinic.rst:138
msgid "output"
msgstr ""

#: ../../howto/clinic.rst:140
msgid "The text between the :term:`end line` and the :term:`checksum line`."
msgstr ""

#: ../../howto/clinic.rst:141
msgid "block"
msgstr ""

#: ../../howto/clinic.rst:143
msgid ""
"All text from the :term:`start line` to the :term:`checksum line` "
"inclusively."
msgstr ""

#: ../../howto/clinic.rst:149
msgid "Command-line interface"
msgstr ""

#: ../../howto/clinic.rst:151
msgid ""
"The Argument Clinic :abbr:`CLI (Command-Line Interface)` is typically used "
"to process a single source file, like this:"
msgstr ""

#: ../../howto/clinic.rst:158
msgid "The CLI supports the following options:"
msgstr ""

#: ../../howto/clinic.rst:165
msgid "Print CLI usage."
msgstr ""

#: ../../howto/clinic.rst:169
msgid "Force output regeneration."
msgstr ""

#: ../../howto/clinic.rst:173
msgid "Redirect file output to OUTPUT"
msgstr ""

#: ../../howto/clinic.rst:177
msgid "Enable verbose mode."
msgstr ""

#: ../../howto/clinic.rst:181
msgid "Print a list of all supported converters and return converters."
msgstr ""

#: ../../howto/clinic.rst:185
msgid "Walk :option:`--srcdir` to run over all relevant files."
msgstr ""

#: ../../howto/clinic.rst:189
msgid "The directory tree to walk in :option:`--make` mode."
msgstr ""

#: ../../howto/clinic.rst:193
msgid "The list of files to process."
msgstr ""

#: ../../howto/clinic.rst:199
msgid "Tutorial"
msgstr ""

#: ../../howto/clinic.rst:201
msgid ""
"The best way to get a sense of how Argument Clinic works is to convert a "
"function to work with it.  Here, then, are the bare minimum steps you'd need "
"to follow to convert a function to work with Argument Clinic.  Note that for "
"code you plan to check in to CPython, you really should take the conversion "
"farther, using some of the :ref:`advanced concepts <clinic-howtos>` you'll "
"see later on in the document, like :ref:`clinic-howto-return-converters` "
"and :ref:`clinic-howto-self-converter`. But we'll keep it simple for this "
"walkthrough so you can learn."
msgstr ""

#: ../../howto/clinic.rst:212
msgid ""
"First, make sure you're working with a freshly updated checkout of the "
"CPython trunk."
msgstr ""

#: ../../howto/clinic.rst:215
msgid ""
"Next, find a Python builtin that calls either :c:func:`PyArg_ParseTuple` or :"
"c:func:`PyArg_ParseTupleAndKeywords`, and hasn't been converted to work with "
"Argument Clinic yet. For this tutorial, we'll be using :py:meth:`_pickle."
"Pickler.dump <pickle.Pickler.dump>`."
msgstr ""

#: ../../howto/clinic.rst:221
msgid ""
"If the call to the :c:func:`!PyArg_Parse*` function uses any of the "
"following format units...:"
msgstr ""

#: ../../howto/clinic.rst:233
msgid ""
"... or if it has multiple calls to :c:func:`PyArg_ParseTuple`, you should "
"choose a different function. (See :ref:`clinic-howto-advanced-converters` "
"for those scenarios.)"
msgstr ""

#: ../../howto/clinic.rst:237
msgid ""
"Also, if the function has multiple calls to :c:func:`!PyArg_ParseTuple` or :"
"c:func:`PyArg_ParseTupleAndKeywords` where it supports different types for "
"the same argument, or if the function uses something besides :c:func:`!"
"PyArg_Parse*` functions to parse its arguments, it probably isn't suitable "
"for conversion to Argument Clinic.  Argument Clinic doesn't support generic "
"functions or polymorphic parameters."
msgstr ""

#: ../../howto/clinic.rst:244
msgid ""
"Next, add the following boilerplate above the function, creating our input "
"block::"
msgstr ""

#: ../../howto/clinic.rst:250
msgid ""
"Cut the docstring and paste it in between the ``[clinic]`` lines, removing "
"all the junk that makes it a properly quoted C string. When you're done you "
"should have just the text, based at the left margin, with no line wider than "
"80 characters. Argument Clinic will preserve indents inside the docstring."
msgstr ""

#: ../../howto/clinic.rst:256
msgid ""
"If the old docstring had a first line that looked like a function signature, "
"throw that line away; The docstring doesn't need it anymore --- when you "
"use :py:func:`help` on your builtin in the future, the first line will be "
"built automatically based on the function's signature."
msgstr ""

#: ../../howto/clinic.rst:261
msgid "Example docstring summary line::"
msgstr ""

#: ../../howto/clinic.rst:267
msgid ""
"If your docstring doesn't have a \"summary\" line, Argument Clinic will "
"complain, so let's make sure it has one.  The \"summary\" line should be a "
"paragraph consisting of a single 80-column line at the beginning of the "
"docstring. (See :pep:`257` regarding docstring conventions.)"
msgstr ""

#: ../../howto/clinic.rst:273
msgid ""
"Our example docstring consists solely of a summary line, so the sample code "
"doesn't have to change for this step."
msgstr ""

#: ../../howto/clinic.rst:276
msgid ""
"Now, above the docstring, enter the name of the function, followed by a "
"blank line.  This should be the Python name of the function, and should be "
"the full dotted path to the function --- it should start with the name of "
"the module, include any sub-modules, and if the function is a method on a "
"class it should include the class name too."
msgstr ""

#: ../../howto/clinic.rst:283
msgid ""
"In our example, :mod:`!_pickle` is the module, :py:class:`!Pickler` is the "
"class, and :py:meth:`!dump` is the method, so the name becomes :py:meth:`!"
"_pickle.Pickler.dump`::"
msgstr ""

#: ../../howto/clinic.rst:293
msgid ""
"If this is the first time that module or class has been used with Argument "
"Clinic in this C file, you must declare the module and/or class.  Proper "
"Argument Clinic hygiene prefers declaring these in a separate block "
"somewhere near the top of the C file, in the same way that include files and "
"statics go at the top. In our sample code we'll just show the two blocks "
"next to each other."
msgstr ""

#: ../../howto/clinic.rst:301
msgid ""
"The name of the class and module should be the same as the one seen by "
"Python.  Check the name defined in the :c:type:`PyModuleDef` or :c:type:"
"`PyTypeObject` as appropriate."
msgstr ""

#: ../../howto/clinic.rst:305
msgid ""
"When you declare a class, you must also specify two aspects of its type in "
"C: the type declaration you'd use for a pointer to an instance of this "
"class, and a pointer to the :c:type:`!PyTypeObject` for this class::"
msgstr ""

#: ../../howto/clinic.rst:320
msgid ""
"Declare each of the parameters to the function.  Each parameter should get "
"its own line.  All the parameter lines should be indented from the function "
"name and the docstring. The general form of these parameter lines is as "
"follows:"
msgstr ""

#: ../../howto/clinic.rst:329
msgid "If the parameter has a default value, add that after the converter:"
msgstr ""

#: ../../howto/clinic.rst:336
msgid ""
"Argument Clinic's support for \"default values\" is quite sophisticated; "
"see :ref:`clinic-howto-default-values` for more information."
msgstr ""

#: ../../howto/clinic.rst:339
msgid "Next, add a blank line below the parameters."
msgstr ""

#: ../../howto/clinic.rst:341
msgid ""
"What's a \"converter\"? It establishes both the type of the variable used in "
"C, and the method to convert the Python value into a C value at runtime. For "
"now you're going to use what's called a \"legacy converter\" --- a "
"convenience syntax intended to make porting old code into Argument Clinic "
"easier."
msgstr ""

#: ../../howto/clinic.rst:348
msgid ""
"For each parameter, copy the \"format unit\" for that parameter from the :c:"
"func:`PyArg_Parse` format argument and specify *that* as its converter, as a "
"quoted string. The \"format unit\" is the formal name for the one-to-three "
"character substring of the *format* parameter that tells the argument "
"parsing function what the type of the variable is and how to convert it. For "
"more on format units please see :ref:`arg-parsing`."
msgstr ""

#: ../../howto/clinic.rst:357
msgid ""
"For multicharacter format units like ``z#``, use the entire two-or-three "
"character string."
msgstr ""

#: ../../howto/clinic.rst:360 ../../howto/clinic.rst:395
#: ../../howto/clinic.rst:423 ../../howto/clinic.rst:529
#: ../../howto/clinic.rst:582
msgid "Sample::"
msgstr ""

#: ../../howto/clinic.rst:375
msgid ""
"If your function has ``|`` in the format string, meaning some parameters "
"have default values, you can ignore it. Argument Clinic infers which "
"parameters are optional based on whether or not they have default values."
msgstr ""

#: ../../howto/clinic.rst:380
msgid ""
"If your function has ``$`` in the format string, meaning it takes keyword-"
"only arguments, specify ``*`` on a line by itself before the first keyword-"
"only argument, indented the same as the parameter lines."
msgstr ""

#: ../../howto/clinic.rst:385
msgid ""
":py:meth:`!_pickle.Pickler.dump` has neither, so our sample is unchanged."
msgstr ""

#: ../../howto/clinic.rst:387
msgid ""
"Next, if the existing C function calls :c:func:`PyArg_ParseTuple` (as "
"opposed to :c:func:`PyArg_ParseTupleAndKeywords`), then all its arguments "
"are positional-only."
msgstr ""

#: ../../howto/clinic.rst:391
msgid ""
"To mark parameters as positional-only in Argument Clinic, add a ``/`` on a "
"line by itself after the last positional-only parameter, indented the same "
"as the parameter lines."
msgstr ""

#: ../../howto/clinic.rst:411
msgid ""
"It can be helpful to write a per-parameter docstring for each parameter. "
"Since per-parameter docstrings are optional, you can skip this step if you "
"prefer."
msgstr ""

#: ../../howto/clinic.rst:415
msgid ""
"Nevertheless, here's how to add a per-parameter docstring. The first line of "
"the per-parameter docstring must be indented further than the parameter "
"definition. The left margin of this first line establishes the left margin "
"for the whole per-parameter docstring; all the text you write will be "
"outdented by this amount. You can write as much text as you like, across "
"multiple lines if you wish."
msgstr ""

#: ../../howto/clinic.rst:440
msgid ""
"Save and close the file, then run ``Tools/clinic/clinic.py`` on it. With "
"luck everything worked---your block now has output, and a :file:`.c.h` file "
"has been generated! Reload the file in your text editor to see the generated "
"code::"
msgstr ""

#: ../../howto/clinic.rst:459
msgid ""
"Obviously, if Argument Clinic didn't produce any output, it's because it "
"found an error in your input. Keep fixing your errors and retrying until "
"Argument Clinic processes your file without complaint."
msgstr ""

#: ../../howto/clinic.rst:464
msgid ""
"For readability, most of the glue code has been generated to a :file:`.c.h` "
"file.  You'll need to include that in your original :file:`.c` file, "
"typically right after the clinic module block::"
msgstr ""

#: ../../howto/clinic.rst:470
msgid ""
"Double-check that the argument-parsing code Argument Clinic generated looks "
"basically the same as the existing code."
msgstr ""

#: ../../howto/clinic.rst:473
msgid ""
"First, ensure both places use the same argument-parsing function. The "
"existing code must call either :c:func:`PyArg_ParseTuple` or :c:func:"
"`PyArg_ParseTupleAndKeywords`; ensure that the code generated by Argument "
"Clinic calls the *exact* same function."
msgstr ""

#: ../../howto/clinic.rst:479
msgid ""
"Second, the format string passed in to :c:func:`!PyArg_ParseTuple` or :c:"
"func:`!PyArg_ParseTupleAndKeywords` should be *exactly* the same as the hand-"
"written one in the existing function, up to the colon or semi-colon."
msgstr ""

#: ../../howto/clinic.rst:484
msgid ""
"Argument Clinic always generates its format strings with a ``:`` followed by "
"the name of the function. If the existing code's format string ends with ``;"
"``, to provide usage help, this change is harmless --- don't worry about it."
msgstr ""

#: ../../howto/clinic.rst:489
msgid ""
"Third, for parameters whose format units require two arguments, like a "
"length variable, an encoding string, or a pointer to a conversion function, "
"ensure that the second argument is *exactly* the same between the two "
"invocations."
msgstr ""

#: ../../howto/clinic.rst:494
msgid ""
"Fourth, inside the output portion of the block, you'll find a preprocessor "
"macro defining the appropriate static :c:type:`PyMethodDef` structure for "
"this builtin::"
msgstr ""

#: ../../howto/clinic.rst:501
msgid ""
"This static structure should be *exactly* the same as the existing static :c:"
"type:`!PyMethodDef` structure for this builtin."
msgstr ""

#: ../../howto/clinic.rst:504
msgid ""
"If any of these items differ in *any way*, adjust your Argument Clinic "
"function specification and rerun ``Tools/clinic/clinic.py`` until they *are* "
"the same."
msgstr ""

#: ../../howto/clinic.rst:508
msgid ""
"Notice that the last line of its output is the declaration of your \"impl\" "
"function.  This is where the builtin's implementation goes. Delete the "
"existing prototype of the function you're modifying, but leave the opening "
"curly brace.  Now delete its argument parsing code and the declarations of "
"all the variables it dumps the arguments into. Notice how the Python "
"arguments are now arguments to this impl function; if the implementation "
"used different names for these variables, fix it."
msgstr ""

#: ../../howto/clinic.rst:516
msgid ""
"Let's reiterate, just because it's kind of weird. Your code should now look "
"like this::"
msgstr ""

#: ../../howto/clinic.rst:525
msgid ""
"Argument Clinic generated the checksum line and the function prototype just "
"above it.  You should write the opening and closing curly braces for the "
"function, and the implementation inside."
msgstr ""

#: ../../howto/clinic.rst:571
msgid ""
"Remember the macro with the :c:type:`PyMethodDef` structure for this "
"function? Find the existing :c:type:`!PyMethodDef` structure for this "
"function and replace it with a reference to the macro.  If the builtin is at "
"module scope, this will probably be very near the end of the file; if the "
"builtin is a class method, this will probably be below but relatively near "
"to the implementation."
msgstr ""

#: ../../howto/clinic.rst:578
msgid ""
"Note that the body of the macro contains a trailing comma; when you replace "
"the existing static :c:type:`!PyMethodDef` structure with the macro, *don't* "
"add a comma to the end."
msgstr ""

#: ../../howto/clinic.rst:590
msgid "Argument Clinic may generate new instances of ``_Py_ID``. For example::"
msgstr ""

#: ../../howto/clinic.rst:594
msgid ""
"If it does, you'll have to run ``make regen-global-objects`` to regenerate "
"the list of precompiled identifiers at this point."
msgstr ""

#: ../../howto/clinic.rst:597
msgid ""
"Finally, compile, then run the relevant portions of the regression-test "
"suite. This change should not introduce any new compile-time warnings or "
"errors, and there should be no externally visible change to Python's "
"behavior, except for one difference: :py:func:`inspect.signature` run on "
"your function should now provide a valid signature!"
msgstr ""

#: ../../howto/clinic.rst:603
msgid ""
"Congratulations, you've ported your first function to work with Argument "
"Clinic!"
msgstr ""

#: ../../howto/clinic.rst:609
msgid "How-to guides"
msgstr ""

#: ../../howto/clinic.rst:613
msgid "How to rename C functions and variables generated by Argument Clinic"
msgstr ""

#: ../../howto/clinic.rst:615
msgid ""
"Argument Clinic automatically names the functions it generates for you. "
"Occasionally this may cause a problem, if the generated name collides with "
"the name of an existing C function.  There's an easy solution: override the "
"names used for the C functions.  Just add the keyword ``\"as\"`` to your "
"function declaration line, followed by the function name you wish to use. "
"Argument Clinic will use that function name for the base (generated) "
"function, then add ``\"_impl\"`` to the end and use that for the name of the "
"impl function."
msgstr ""

#: ../../howto/clinic.rst:623
msgid ""
"For example, if we wanted to rename the C function names generated for :py:"
"meth:`pickle.Pickler.dump`, it'd look like this::"
msgstr ""

#: ../../howto/clinic.rst:631
msgid ""
"The base function would now be named :c:func:`!pickler_dumper`, and the impl "
"function would now be named :c:func:`!pickler_dumper_impl`."
msgstr ""

#: ../../howto/clinic.rst:635
msgid ""
"Similarly, you may have a problem where you want to give a parameter a "
"specific Python name, but that name may be inconvenient in C.  Argument "
"Clinic allows you to give a parameter different names in Python and in C, "
"using the same ``\"as\"`` syntax::"
msgstr ""

#: ../../howto/clinic.rst:649
msgid ""
"Here, the name used in Python (in the signature and the ``keywords`` array) "
"would be *file*, but the C variable would be named ``file_obj``."
msgstr ""

#: ../../howto/clinic.rst:652
msgid "You can use this to rename the *self* parameter too!"
msgstr ""

#: ../../howto/clinic.rst:656
msgid "How to convert functions using ``PyArg_UnpackTuple``"
msgstr ""

#: ../../howto/clinic.rst:658
msgid ""
"To convert a function parsing its arguments with :c:func:"
"`PyArg_UnpackTuple`, simply write out all the arguments, specifying each as "
"an ``object``.  You may specify the *type* argument to cast the type as "
"appropriate.  All arguments should be marked positional-only (add a ``/`` on "
"a line by itself after the last argument)."
msgstr ""

#: ../../howto/clinic.rst:664
msgid ""
"Currently the generated code will use :c:func:`PyArg_ParseTuple`, but this "
"will change soon."
msgstr ""

#: ../../howto/clinic.rst:669
msgid "How to use optional groups"
msgstr ""

#: ../../howto/clinic.rst:671
msgid ""
"Some legacy functions have a tricky approach to parsing their arguments: "
"they count the number of positional arguments, then use a ``switch`` "
"statement to call one of several different :c:func:`PyArg_ParseTuple` calls "
"depending on how many positional arguments there are.  (These functions "
"cannot accept keyword-only arguments.)  This approach was used to simulate "
"optional arguments back before :c:func:`PyArg_ParseTupleAndKeywords` was "
"created."
msgstr ""

#: ../../howto/clinic.rst:678
msgid ""
"While functions using this approach can often be converted to use :c:func:`!"
"PyArg_ParseTupleAndKeywords`, optional arguments, and default values, it's "
"not always possible.  Some of these legacy functions have behaviors :c:func:"
"`!PyArg_ParseTupleAndKeywords` doesn't directly support. The most obvious "
"example is the builtin function :py:func:`range`, which has an optional "
"argument on the *left* side of its required argument! Another example is :py:"
"meth:`curses.window.addch`, which has a group of two arguments that must "
"always be specified together.  (The arguments are called *x* and *y*; if you "
"call the function passing in *x*, you must also pass in *y* — and if you "
"don't pass in *x* you may not pass in *y* either.)"
msgstr ""

#: ../../howto/clinic.rst:690
msgid ""
"In any case, the goal of Argument Clinic is to support argument parsing for "
"all existing CPython builtins without changing their semantics. Therefore "
"Argument Clinic supports this alternate approach to parsing, using what are "
"called *optional groups*. Optional groups are groups of arguments that must "
"all be passed in together. They can be to the left or the right of the "
"required arguments.  They can *only* be used with positional-only parameters."
msgstr ""

#: ../../howto/clinic.rst:698
msgid ""
"Optional groups are *only* intended for use when converting functions that "
"make multiple calls to :c:func:`PyArg_ParseTuple`! Functions that use *any* "
"other approach for parsing arguments should *almost never* be converted to "
"Argument Clinic using optional groups.  Functions using optional groups "
"currently cannot have accurate signatures in Python, because Python just "
"doesn't understand the concept.  Please avoid using optional groups wherever "
"possible."
msgstr ""

#: ../../howto/clinic.rst:707
msgid ""
"To specify an optional group, add a ``[`` on a line by itself before the "
"parameters you wish to group together, and a ``]`` on a line by itself after "
"these parameters.  As an example, here's how :py:meth:`curses.window.addch` "
"uses optional groups to make the first two parameters and the last parameter "
"optional::"
msgstr ""

#: ../../howto/clinic.rst:736
msgid "Notes:"
msgstr "註解："

#: ../../howto/clinic.rst:738
msgid ""
"For every optional group, one additional parameter will be passed into the "
"impl function representing the group.  The parameter will be an int named "
"``group_{direction}_{number}``, where ``{direction}`` is either ``right`` or "
"``left`` depending on whether the group is before or after the required "
"parameters, and ``{number}`` is a monotonically increasing number (starting "
"at 1) indicating how far away the group is from the required parameters.  "
"When the impl is called, this parameter will be set to zero if this group "
"was unused, and set to non-zero if this group was used. (By used or unused, "
"I mean whether or not the parameters received arguments in this invocation.)"
msgstr ""

#: ../../howto/clinic.rst:749
msgid ""
"If there are no required arguments, the optional groups will behave as if "
"they're to the right of the required arguments."
msgstr ""

#: ../../howto/clinic.rst:752
msgid ""
"In the case of ambiguity, the argument parsing code favors parameters on the "
"left (before the required parameters)."
msgstr ""

#: ../../howto/clinic.rst:755
msgid "Optional groups can only contain positional-only parameters."
msgstr ""

#: ../../howto/clinic.rst:757
msgid ""
"Optional groups are *only* intended for legacy code.  Please do not use "
"optional groups for new code."
msgstr ""

#: ../../howto/clinic.rst:762
msgid ""
"How to use real Argument Clinic converters, instead of \"legacy converters\""
msgstr ""

#: ../../howto/clinic.rst:764
msgid ""
"To save time, and to minimize how much you need to learn to achieve your "
"first port to Argument Clinic, the walkthrough above tells you to use "
"\"legacy converters\".  \"Legacy converters\" are a convenience, designed "
"explicitly to make porting existing code to Argument Clinic easier.  And to "
"be clear, their use is acceptable when porting code for Python 3.4."
msgstr ""

#: ../../howto/clinic.rst:771
msgid ""
"However, in the long term we probably want all our blocks to use Argument "
"Clinic's real syntax for converters.  Why?  A couple reasons:"
msgstr ""

#: ../../howto/clinic.rst:775
msgid ""
"The proper converters are far easier to read and clearer in their intent."
msgstr ""

#: ../../howto/clinic.rst:776
msgid ""
"There are some format units that are unsupported as \"legacy converters\", "
"because they require arguments, and the legacy converter syntax doesn't "
"support specifying arguments."
msgstr ""

#: ../../howto/clinic.rst:779
msgid ""
"In the future we may have a new argument parsing library that isn't "
"restricted to what :c:func:`PyArg_ParseTuple` supports; this flexibility "
"won't be available to parameters using legacy converters."
msgstr ""

#: ../../howto/clinic.rst:783
msgid ""
"Therefore, if you don't mind a little extra effort, please use the normal "
"converters instead of legacy converters."
msgstr ""

#: ../../howto/clinic.rst:786
msgid ""
"In a nutshell, the syntax for Argument Clinic (non-legacy) converters looks "
"like a Python function call.  However, if there are no explicit arguments to "
"the function (all functions take their default values), you may omit the "
"parentheses.  Thus ``bool`` and ``bool()`` are exactly the same converters."
msgstr ""

#: ../../howto/clinic.rst:792
msgid ""
"All arguments to Argument Clinic converters are keyword-only. All Argument "
"Clinic converters accept the following arguments:"
msgstr ""

#: ../../howto/clinic.rst:800
msgid "*c_default*"
msgstr "*c_default*"

#: ../../howto/clinic.rst:796
msgid ""
"The default value for this parameter when defined in C. Specifically, this "
"will be the initializer for the variable declared in the \"parse "
"function\".  See :ref:`the section on default values <default_values>` for "
"how to use this. Specified as a string."
msgstr ""

#: ../../howto/clinic.rst:805
msgid "*annotation*"
msgstr "*annotation*"

#: ../../howto/clinic.rst:803
msgid ""
"The annotation value for this parameter.  Not currently supported, because :"
"pep:`8` mandates that the Python library may not use annotations."
msgstr ""

#: ../../howto/clinic.rst:808
msgid "*unused*"
msgstr "*unused*"

#: ../../howto/clinic.rst:808
msgid ""
"Wrap the argument with :c:macro:`Py_UNUSED` in the impl function signature."
msgstr ""

#: ../../howto/clinic.rst:810
msgid ""
"In addition, some converters accept additional arguments.  Here is a list of "
"these arguments, along with their meanings:"
msgstr ""

#: ../../howto/clinic.rst:819
msgid "*accept*"
msgstr "*accept*"

#: ../../howto/clinic.rst:814
msgid ""
"A set of Python types (and possibly pseudo-types); this restricts the "
"allowable Python argument to values of these types. (This is not a general-"
"purpose facility; as a rule it only supports specific lists of types as "
"shown in the legacy converter table.)"
msgstr ""

#: ../../howto/clinic.rst:819
msgid "To accept ``None``, add ``NoneType`` to this set."
msgstr ""

#: ../../howto/clinic.rst:824
msgid "*bitwise*"
msgstr "*bitwise*"

#: ../../howto/clinic.rst:822
msgid ""
"Only supported for unsigned integers.  The native integer value of this "
"Python argument will be written to the parameter without any range checking, "
"even for negative values."
msgstr ""

#: ../../howto/clinic.rst:829
msgid "*converter*"
msgstr "*converter*"

#: ../../howto/clinic.rst:827
msgid ""
"Only supported by the ``object`` converter.  Specifies the name of a :ref:`C "
"\"converter function\" <o_ampersand>` to use to convert this object to a "
"native type."
msgstr ""

#: ../../howto/clinic.rst:834
msgid "*encoding*"
msgstr "*encoding*"

#: ../../howto/clinic.rst:832
msgid ""
"Only supported for strings.  Specifies the encoding to use when converting "
"this string from a Python str (Unicode) value into a C ``char *`` value."
msgstr ""

#: ../../howto/clinic.rst:838
msgid "*subclass_of*"
msgstr "*subclass_of*"

#: ../../howto/clinic.rst:837
msgid ""
"Only supported for the ``object`` converter.  Requires that the Python value "
"be a subclass of a Python type, as expressed in C."
msgstr ""

#: ../../howto/clinic.rst:843
msgid "*type*"
msgstr ""

#: ../../howto/clinic.rst:841
msgid ""
"Only supported for the ``object`` and ``self`` converters.  Specifies the C "
"type that will be used to declare the variable.  Default value is "
"``\"PyObject *\"``."
msgstr ""

#: ../../howto/clinic.rst:849
msgid "*zeroes*"
msgstr "*zeroes*"

#: ../../howto/clinic.rst:846
msgid ""
"Only supported for strings.  If true, embedded NUL bytes (``'\\\\0'``) are "
"permitted inside the value.  The length of the string will be passed in to "
"the impl function, just after the string parameter, as a parameter named "
"``<parameter_name>_length``."
msgstr ""

#: ../../howto/clinic.rst:851
msgid ""
"Please note, not every possible combination of arguments will work. Usually "
"these arguments are implemented by specific :c:func:`PyArg_ParseTuple` "
"*format units*, with specific behavior.  For example, currently you cannot "
"call ``unsigned_short`` without also specifying ``bitwise=True``. Although "
"it's perfectly reasonable to think this would work, these semantics don't "
"map to any existing format unit.  So Argument Clinic doesn't support it.  "
"(Or, at least, not yet.)"
msgstr ""

#: ../../howto/clinic.rst:859
msgid ""
"Below is a table showing the mapping of legacy converters into real Argument "
"Clinic converters.  On the left is the legacy converter, on the right is the "
"text you'd replace it with."
msgstr ""

#: ../../howto/clinic.rst:864
msgid "``'B'``"
msgstr "``'B'``"

#: ../../howto/clinic.rst:864
msgid "``unsigned_char(bitwise=True)``"
msgstr "``unsigned_char(bitwise=True)``"

#: ../../howto/clinic.rst:865
msgid "``'b'``"
msgstr "``'b'``"

#: ../../howto/clinic.rst:865
msgid "``unsigned_char``"
msgstr "``unsigned_char``"

#: ../../howto/clinic.rst:866
msgid "``'c'``"
msgstr "``'c'``"

#: ../../howto/clinic.rst:866
msgid "``char``"
msgstr "``char``"

#: ../../howto/clinic.rst:867
msgid "``'C'``"
msgstr "``'C'``"

#: ../../howto/clinic.rst:867
msgid "``int(accept={str})``"
msgstr "``int(accept={str})``"

#: ../../howto/clinic.rst:868
msgid "``'d'``"
msgstr "``'d'``"

#: ../../howto/clinic.rst:868
msgid "``double``"
msgstr "``double``"

#: ../../howto/clinic.rst:869
msgid "``'D'``"
msgstr "``'D'``"

#: ../../howto/clinic.rst:869
msgid "``Py_complex``"
msgstr "``Py_complex``"

#: ../../howto/clinic.rst:870
msgid "``'es'``"
msgstr "``'es'``"

#: ../../howto/clinic.rst:870
msgid "``str(encoding='name_of_encoding')``"
msgstr "``str(encoding='name_of_encoding')``"

#: ../../howto/clinic.rst:871
msgid "``'es#'``"
msgstr "``'es#'``"

#: ../../howto/clinic.rst:871
msgid "``str(encoding='name_of_encoding', zeroes=True)``"
msgstr "``str(encoding='name_of_encoding', zeroes=True)``"

#: ../../howto/clinic.rst:872
msgid "``'et'``"
msgstr "``'et'``"

#: ../../howto/clinic.rst:872
msgid "``str(encoding='name_of_encoding', accept={bytes, bytearray, str})``"
msgstr "``str(encoding='name_of_encoding', accept={bytes, bytearray, str})``"

#: ../../howto/clinic.rst:873
msgid "``'et#'``"
msgstr "``'et#'``"

#: ../../howto/clinic.rst:873
msgid ""
"``str(encoding='name_of_encoding', accept={bytes, bytearray, str}, "
"zeroes=True)``"
msgstr ""

#: ../../howto/clinic.rst:874
msgid "``'f'``"
msgstr "``'f'``"

#: ../../howto/clinic.rst:874
msgid "``float``"
msgstr "``float``"

#: ../../howto/clinic.rst:875
msgid "``'h'``"
msgstr "``'h'``"

#: ../../howto/clinic.rst:875
msgid "``short``"
msgstr "``short``"

#: ../../howto/clinic.rst:876
msgid "``'H'``"
msgstr "``'H'``"

#: ../../howto/clinic.rst:876
msgid "``unsigned_short(bitwise=True)``"
msgstr "``unsigned_short(bitwise=True)``"

#: ../../howto/clinic.rst:877
msgid "``'i'``"
msgstr "``'i'``"

#: ../../howto/clinic.rst:877
msgid "``int``"
msgstr "``int``"

#: ../../howto/clinic.rst:878
msgid "``'I'``"
msgstr "``'I'``"

#: ../../howto/clinic.rst:878
msgid "``unsigned_int(bitwise=True)``"
msgstr "``unsigned_int(bitwise=True)``"

#: ../../howto/clinic.rst:879
msgid "``'k'``"
msgstr "``'k'``"

#: ../../howto/clinic.rst:879
msgid "``unsigned_long(bitwise=True)``"
msgstr "``unsigned_long(bitwise=True)``"

#: ../../howto/clinic.rst:880
msgid "``'K'``"
msgstr "``'K'``"

#: ../../howto/clinic.rst:880
msgid "``unsigned_long_long(bitwise=True)``"
msgstr "``unsigned_long_long(bitwise=True)``"

#: ../../howto/clinic.rst:881
msgid "``'l'``"
msgstr "``'l'``"

#: ../../howto/clinic.rst:881
msgid "``long``"
msgstr "``long``"

#: ../../howto/clinic.rst:882
msgid "``'L'``"
msgstr "``'L'``"

#: ../../howto/clinic.rst:882
msgid "``long long``"
msgstr "``long long``"

#: ../../howto/clinic.rst:883
msgid "``'n'``"
msgstr "``'n'``"

#: ../../howto/clinic.rst:883
msgid "``Py_ssize_t``"
msgstr "``Py_ssize_t``"

#: ../../howto/clinic.rst:884
msgid "``'O'``"
msgstr "``'O'``"

#: ../../howto/clinic.rst:884
msgid "``object``"
msgstr "``object``"

#: ../../howto/clinic.rst:885
msgid "``'O!'``"
msgstr "``'O!'``"

#: ../../howto/clinic.rst:885
msgid "``object(subclass_of='&PySomething_Type')``"
msgstr "``object(subclass_of='&PySomething_Type')``"

#: ../../howto/clinic.rst:886
msgid "``'O&'``"
msgstr "``'O&'``"

#: ../../howto/clinic.rst:886
msgid "``object(converter='name_of_c_function')``"
msgstr "``object(converter='name_of_c_function')``"

#: ../../howto/clinic.rst:887
msgid "``'p'``"
msgstr "``'p'``"

#: ../../howto/clinic.rst:887
msgid "``bool``"
msgstr "``bool``"

#: ../../howto/clinic.rst:888
msgid "``'S'``"
msgstr "``'S'``"

#: ../../howto/clinic.rst:888
msgid "``PyBytesObject``"
msgstr "``PyBytesObject``"

#: ../../howto/clinic.rst:889
msgid "``'s'``"
msgstr "``'s'``"

#: ../../howto/clinic.rst:889
msgid "``str``"
msgstr "``str``"

#: ../../howto/clinic.rst:890
msgid "``'s#'``"
msgstr "``'s#'``"

#: ../../howto/clinic.rst:890
msgid "``str(zeroes=True)``"
msgstr "``str(zeroes=True)``"

#: ../../howto/clinic.rst:891
msgid "``'s*'``"
msgstr "``'s*'``"

#: ../../howto/clinic.rst:891
msgid "``Py_buffer(accept={buffer, str})``"
msgstr "``Py_buffer(accept={buffer, str})``"

#: ../../howto/clinic.rst:892
msgid "``'U'``"
msgstr "``'U'``"

#: ../../howto/clinic.rst:892
msgid "``unicode``"
msgstr "``unicode``"

#: ../../howto/clinic.rst:893
msgid "``'u'``"
msgstr "``'u'``"

#: ../../howto/clinic.rst:893
msgid "``wchar_t``"
msgstr "``wchar_t``"

#: ../../howto/clinic.rst:894
msgid "``'u#'``"
msgstr "``'u#'``"

#: ../../howto/clinic.rst:894
msgid "``wchar_t(zeroes=True)``"
msgstr "``wchar_t(zeroes=True)``"

#: ../../howto/clinic.rst:895
msgid "``'w*'``"
msgstr "``'w*'``"

#: ../../howto/clinic.rst:895
msgid "``Py_buffer(accept={rwbuffer})``"
msgstr "``Py_buffer(accept={rwbuffer})``"

#: ../../howto/clinic.rst:896
msgid "``'Y'``"
msgstr "``'Y'``"

#: ../../howto/clinic.rst:896
msgid "``PyByteArrayObject``"
msgstr "``PyByteArrayObject``"

#: ../../howto/clinic.rst:897
msgid "``'y'``"
msgstr "``'y'``"

#: ../../howto/clinic.rst:897
msgid "``str(accept={bytes})``"
msgstr "``str(accept={bytes})``"

#: ../../howto/clinic.rst:898
msgid "``'y#'``"
msgstr "``'y#'``"

#: ../../howto/clinic.rst:898
msgid "``str(accept={robuffer}, zeroes=True)``"
msgstr "``str(accept={robuffer}, zeroes=True)``"

#: ../../howto/clinic.rst:899
msgid "``'y*'``"
msgstr "``'y*'``"

#: ../../howto/clinic.rst:899
msgid "``Py_buffer``"
msgstr "``Py_buffer``"

#: ../../howto/clinic.rst:900
msgid "``'Z'``"
msgstr "``'Z'``"

#: ../../howto/clinic.rst:900
msgid "``wchar_t(accept={str, NoneType})``"
msgstr "``wchar_t(accept={str, NoneType})``"

#: ../../howto/clinic.rst:901
msgid "``'Z#'``"
msgstr "``'Z#'``"

#: ../../howto/clinic.rst:901
msgid "``wchar_t(accept={str, NoneType}, zeroes=True)``"
msgstr "``wchar_t(accept={str, NoneType}, zeroes=True)``"

#: ../../howto/clinic.rst:902
msgid "``'z'``"
msgstr "``'z'``"

#: ../../howto/clinic.rst:902
msgid "``str(accept={str, NoneType})``"
msgstr "``str(accept={str, NoneType})``"

#: ../../howto/clinic.rst:903
msgid "``'z#'``"
msgstr "``'z#'``"

#: ../../howto/clinic.rst:903
msgid "``str(accept={str, NoneType}, zeroes=True)``"
msgstr "``str(accept={str, NoneType}, zeroes=True)``"

#: ../../howto/clinic.rst:904
msgid "``'z*'``"
msgstr "``'z*'``"

#: ../../howto/clinic.rst:904
msgid "``Py_buffer(accept={buffer, str, NoneType})``"
msgstr "``Py_buffer(accept={buffer, str, NoneType})``"

#: ../../howto/clinic.rst:907
msgid ""
"As an example, here's our sample ``pickle.Pickler.dump`` using the proper "
"converter::"
msgstr ""

#: ../../howto/clinic.rst:920
msgid ""
"One advantage of real converters is that they're more flexible than legacy "
"converters.  For example, the ``unsigned_int`` converter (and all the "
"``unsigned_`` converters) can be specified without ``bitwise=True``.  Their "
"default behavior performs range checking on the value, and they won't accept "
"negative numbers.  You just can't do that with a legacy converter!"
msgstr ""

#: ../../howto/clinic.rst:926
msgid ""
"Argument Clinic will show you all the converters it has available.  For each "
"converter it'll show you all the parameters it accepts, along with the "
"default value for each parameter. Just run ``Tools/clinic/clinic.py --"
"converters`` to see the full list."
msgstr ""

#: ../../howto/clinic.rst:933
msgid "How to use the ``Py_buffer`` converter"
msgstr ""

#: ../../howto/clinic.rst:935
msgid ""
"When using the ``Py_buffer`` converter (or the ``'s*'``, ``'w*'``, ``'*y'``, "
"or ``'z*'`` legacy converters), you *must* not call :c:func:"
"`PyBuffer_Release` on the provided buffer. Argument Clinic generates code "
"that does it for you (in the parsing function)."
msgstr ""

#: ../../howto/clinic.rst:944
msgid "How to use advanced converters"
msgstr ""

#: ../../howto/clinic.rst:946
msgid ""
"Remember those format units you skipped for your first time because they "
"were advanced?  Here's how to handle those too."
msgstr ""

#: ../../howto/clinic.rst:949
msgid ""
"The trick is, all those format units take arguments—either conversion "
"functions, or types, or strings specifying an encoding. (But \"legacy "
"converters\" don't support arguments.  That's why we skipped them for your "
"first function.)  The argument you specified to the format unit is now an "
"argument to the converter; this argument is either *converter* (for ``O&``), "
"*subclass_of* (for ``O!``), or *encoding* (for all the format units that "
"start with ``e``)."
msgstr ""

#: ../../howto/clinic.rst:957
msgid ""
"When using *subclass_of*, you may also want to use the other custom argument "
"for ``object()``: *type*, which lets you set the type actually used for the "
"parameter.  For example, if you want to ensure that the object is a subclass "
"of :c:var:`PyUnicode_Type`, you probably want to use the converter "
"``object(type='PyUnicodeObject *', subclass_of='&PyUnicode_Type')``."
msgstr ""

#: ../../howto/clinic.rst:963
msgid ""
"One possible problem with using Argument Clinic: it takes away some possible "
"flexibility for the format units starting with ``e``.  When writing a :c:"
"func:`!PyArg_Parse*` call by hand, you could theoretically decide at runtime "
"what encoding string to pass to that call.   But now this string must be "
"hard-coded at Argument-Clinic-preprocessing-time.  This limitation is "
"deliberate; it made supporting this format unit much easier, and may allow "
"for future optimizations. This restriction doesn't seem unreasonable; "
"CPython itself always passes in static hard-coded encoding strings for "
"parameters whose format units start with ``e``."
msgstr ""

#: ../../howto/clinic.rst:977
msgid "How to assign default values to parameter"
msgstr ""

#: ../../howto/clinic.rst:979
msgid ""
"Default values for parameters can be any of a number of values. At their "
"simplest, they can be string, int, or float literals:"
msgstr ""

#: ../../howto/clinic.rst:988
msgid "They can also use any of Python's built-in constants:"
msgstr ""

#: ../../howto/clinic.rst:996
msgid ""
"There's also special support for a default value of ``NULL``, and for simple "
"expressions, documented in the following sections."
msgstr ""

#: ../../howto/clinic.rst:1001
msgid "The ``NULL`` default value"
msgstr ""

#: ../../howto/clinic.rst:1003
msgid ""
"For string and object parameters, you can set them to ``None`` to indicate "
"that there's no default.  However, that means the C variable will be "
"initialized to ``Py_None``.  For convenience's sakes, there's a special "
"value called ``NULL`` for just this reason: from Python's perspective it "
"behaves like a default value of ``None``, but the C variable is initialized "
"with ``NULL``."
msgstr ""

#: ../../howto/clinic.rst:1012
msgid "Symbolic default values"
msgstr ""

#: ../../howto/clinic.rst:1014
msgid ""
"The default value you provide for a parameter can't be any arbitrary "
"expression.  Currently the following are explicitly supported:"
msgstr ""

#: ../../howto/clinic.rst:1017
msgid "Numeric constants (integer and float)"
msgstr ""

#: ../../howto/clinic.rst:1018
msgid "String constants"
msgstr ""

#: ../../howto/clinic.rst:1019
msgid "``True``, ``False``, and ``None``"
msgstr ""

#: ../../howto/clinic.rst:1020
msgid ""
"Simple symbolic constants like :py:data:`sys.maxsize`, which must start with "
"the name of the module"
msgstr ""

#: ../../howto/clinic.rst:1023
msgid ""
"(In the future, this may need to get even more elaborate, to allow full "
"expressions like ``CONSTANT - 1``.)"
msgstr ""

#: ../../howto/clinic.rst:1028
msgid "Expressions as default values"
msgstr ""

#: ../../howto/clinic.rst:1030
msgid ""
"The default value for a parameter can be more than just a literal value. It "
"can be an entire expression, using math operators and looking up attributes "
"on objects.  However, this support isn't exactly simple, because of some non-"
"obvious semantics."
msgstr ""

#: ../../howto/clinic.rst:1035
msgid "Consider the following example:"
msgstr ""

#: ../../howto/clinic.rst:1041
msgid ""
":py:data:`sys.maxsize` can have different values on different platforms.  "
"Therefore Argument Clinic can't simply evaluate that expression locally and "
"hard-code it in C.  So it stores the default in such a way that it will get "
"evaluated at runtime, when the user asks for the function's signature."
msgstr ""

#: ../../howto/clinic.rst:1046
msgid ""
"What namespace is available when the expression is evaluated?  It's "
"evaluated in the context of the module the builtin came from.  So, if your "
"module has an attribute called :py:attr:`!max_widgets`, you may simply use "
"it:"
msgstr ""

#: ../../howto/clinic.rst:1054
msgid ""
"If the symbol isn't found in the current module, it fails over to looking "
"in :py:data:`sys.modules`.  That's how it can find :py:data:`sys.maxsize` "
"for example. (Since you don't know in advance what modules the user will "
"load into their interpreter, it's best to restrict yourself to modules that "
"are preloaded by Python itself.)"
msgstr ""

#: ../../howto/clinic.rst:1059
msgid ""
"Evaluating default values only at runtime means Argument Clinic can't "
"compute the correct equivalent C default value.  So you need to tell it "
"explicitly. When you use an expression, you must also specify the equivalent "
"expression in C, using the *c_default* parameter to the converter:"
msgstr ""

#: ../../howto/clinic.rst:1068
msgid ""
"Another complication: Argument Clinic can't know in advance whether or not "
"the expression you supply is valid.  It parses it to make sure it looks "
"legal, but it can't *actually* know.  You must be very careful when using "
"expressions to specify values that are guaranteed to be valid at runtime!"
msgstr ""

#: ../../howto/clinic.rst:1073
msgid ""
"Finally, because expressions must be representable as static C values, there "
"are many restrictions on legal expressions.  Here's a list of Python "
"features you're not permitted to use:"
msgstr ""

#: ../../howto/clinic.rst:1077
msgid "Function calls."
msgstr ""

#: ../../howto/clinic.rst:1078
msgid "Inline if statements (``3 if foo else 5``)."
msgstr ""

#: ../../howto/clinic.rst:1079
msgid "Automatic sequence unpacking (``*[1, 2, 3]``)."
msgstr ""

#: ../../howto/clinic.rst:1080
msgid "List/set/dict comprehensions and generator expressions."
msgstr ""

#: ../../howto/clinic.rst:1081
msgid "Tuple/list/set/dict literals."
msgstr ""

#: ../../howto/clinic.rst:1087
msgid "How to use return converters"
msgstr ""

#: ../../howto/clinic.rst:1089
msgid ""
"By default, the impl function Argument Clinic generates for you returns :c:"
"type:`PyObject * <PyObject>`. But your C function often computes some C "
"type, then converts it into the :c:type:`!PyObject *` at the last moment.  "
"Argument Clinic handles converting your inputs from Python types into native "
"C types—why not have it convert your return value from a native C type into "
"a Python type too?"
msgstr ""

#: ../../howto/clinic.rst:1097
msgid ""
"That's what a \"return converter\" does.  It changes your impl function to "
"return some C type, then adds code to the generated (non-impl) function to "
"handle converting that value into the appropriate :c:type:`!PyObject *`."
msgstr ""

#: ../../howto/clinic.rst:1101
msgid ""
"The syntax for return converters is similar to that of parameter converters. "
"You specify the return converter like it was a return annotation on the "
"function itself, using ``->`` notation."
msgstr ""

#: ../../howto/clinic.rst:1105
msgid "For example:"
msgstr ""

#: ../../howto/clinic.rst:1118
msgid ""
"Return converters behave much the same as parameter converters; they take "
"arguments, the arguments are all keyword-only, and if you're not changing "
"any of the default arguments you can omit the parentheses."
msgstr ""

#: ../../howto/clinic.rst:1122
msgid ""
"(If you use both ``\"as\"`` *and* a return converter for your function, the "
"``\"as\"`` should come before the return converter.)"
msgstr ""

#: ../../howto/clinic.rst:1125
msgid ""
"There's one additional complication when using return converters: how do you "
"indicate an error has occurred?  Normally, a function returns a valid (non-"
"``NULL``) pointer for success, and ``NULL`` for failure.  But if you use an "
"integer return converter, all integers are valid.  How can Argument Clinic "
"detect an error?  Its solution: each return converter implicitly looks for a "
"special value that indicates an error.  If you return that value, and an "
"error has been set (c:func:`PyErr_Occurred` returns a true value), then the "
"generated code will propagate the error.  Otherwise it will encode the value "
"you return like normal."
msgstr ""

#: ../../howto/clinic.rst:1134
msgid "Currently Argument Clinic supports only a few return converters:"
msgstr ""

#: ../../howto/clinic.rst:1148
msgid ""
"None of these take parameters. For all of these, return ``-1`` to indicate "
"error."
msgstr ""

#: ../../howto/clinic.rst:1151
msgid ""
"To see all the return converters Argument Clinic supports, along with their "
"parameters (if any), just run ``Tools/clinic/clinic.py --converters`` for "
"the full list."
msgstr ""

#: ../../howto/clinic.rst:1157
msgid "How to clone existing functions"
msgstr ""

#: ../../howto/clinic.rst:1159
msgid ""
"If you have a number of functions that look similar, you may be able to use "
"Clinic's \"clone\" feature.  When you clone an existing function, you reuse:"
msgstr ""

#: ../../howto/clinic.rst:1163
msgid "its parameters, including"
msgstr ""

#: ../../howto/clinic.rst:1165
msgid "their names,"
msgstr ""

#: ../../howto/clinic.rst:1167
msgid "their converters, with all parameters,"
msgstr ""

#: ../../howto/clinic.rst:1169
msgid "their default values,"
msgstr ""

#: ../../howto/clinic.rst:1171
msgid "their per-parameter docstrings,"
msgstr ""

#: ../../howto/clinic.rst:1173
msgid ""
"their *kind* (whether they're positional only, positional or keyword, or "
"keyword only), and"
msgstr ""

#: ../../howto/clinic.rst:1176
msgid "its return converter."
msgstr ""

#: ../../howto/clinic.rst:1178
msgid ""
"The only thing not copied from the original function is its docstring; the "
"syntax allows you to specify a new docstring."
msgstr ""

#: ../../howto/clinic.rst:1181
msgid "Here's the syntax for cloning a function::"
msgstr ""

#: ../../howto/clinic.rst:1189
msgid ""
"(The functions can be in different modules or classes.  I wrote ``module."
"class`` in the sample just to illustrate that you must use the full path to "
"*both* functions.)"
msgstr ""

#: ../../howto/clinic.rst:1193
msgid ""
"Sorry, there's no syntax for partially cloning a function, or cloning a "
"function then modifying it.  Cloning is an all-or nothing proposition."
msgstr ""

#: ../../howto/clinic.rst:1196
msgid ""
"Also, the function you are cloning from must have been previously defined in "
"the current file."
msgstr ""

#: ../../howto/clinic.rst:1201
msgid "How to call Python code"
msgstr ""

#: ../../howto/clinic.rst:1203
msgid ""
"The rest of the advanced topics require you to write Python code which lives "
"inside your C file and modifies Argument Clinic's runtime state.  This is "
"simple: you simply define a Python block."
msgstr ""

#: ../../howto/clinic.rst:1207
msgid ""
"A Python block uses different delimiter lines than an Argument Clinic "
"function block.  It looks like this::"
msgstr ""

#: ../../howto/clinic.rst:1214
msgid ""
"All the code inside the Python block is executed at the time it's parsed.  "
"All text written to stdout inside the block is redirected into the "
"\"output\" after the block."
msgstr ""

#: ../../howto/clinic.rst:1218
msgid ""
"As an example, here's a Python block that adds a static integer variable to "
"the C code::"
msgstr ""

#: ../../howto/clinic.rst:1231
msgid "How to use the \"self converter\""
msgstr ""

#: ../../howto/clinic.rst:1233
msgid ""
"Argument Clinic automatically adds a \"self\" parameter for you using a "
"default converter.  It automatically sets the ``type`` of this parameter to "
"the \"pointer to an instance\" you specified when you declared the type.  "
"However, you can override Argument Clinic's converter and specify one "
"yourself. Just add your own *self* parameter as the first parameter in a "
"block, and ensure that its converter is an instance of :class:`!"
"self_converter` or a subclass thereof."
msgstr ""

#: ../../howto/clinic.rst:1242
msgid ""
"What's the point?  This lets you override the type of ``self``, or give it a "
"different default name."
msgstr ""

#: ../../howto/clinic.rst:1245
msgid ""
"How do you specify the custom type you want to cast ``self`` to? If you only "
"have one or two functions with the same type for ``self``, you can directly "
"use Argument Clinic's existing ``self`` converter, passing in the type you "
"want to use as the *type* parameter::"
msgstr ""

#: ../../howto/clinic.rst:1261
msgid ""
"On the other hand, if you have a lot of functions that will use the same "
"type for ``self``, it's best to create your own converter, subclassing :"
"class:`!self_converter` but overwriting the :py:attr:`!type` member::"
msgstr ""

#: ../../howto/clinic.rst:1283
msgid "How to use the \"defining class\" converter"
msgstr ""

#: ../../howto/clinic.rst:1285
msgid ""
"Argument Clinic facilitates gaining access to the defining class of a "
"method. This is useful for :ref:`heap type <heap-types>` methods that need "
"to fetch module level state.  Use :c:func:`PyType_FromModuleAndSpec` to "
"associate a new heap type with a module.  You can now use :c:func:"
"`PyType_GetModuleState` on the defining class to fetch the module state, for "
"example from a module method."
msgstr ""

#: ../../howto/clinic.rst:1291
msgid ""
"Example from :source:`Modules/zlibmodule.c`. First, ``defining_class`` is "
"added to the clinic input::"
msgstr ""

#: ../../howto/clinic.rst:1303
msgid ""
"After running the Argument Clinic tool, the following function signature is "
"generated::"
msgstr ""

#: ../../howto/clinic.rst:1313
msgid ""
"The following code can now use ``PyType_GetModuleState(cls)`` to fetch the "
"module state::"
msgstr ""

#: ../../howto/clinic.rst:1319
msgid ""
"Each method may only have one argument using this converter, and it must "
"appear after ``self``, or, if ``self`` is not used, as the first argument.  "
"The argument will be of type ``PyTypeObject *``.  The argument will not "
"appear in the :py:attr:`!__text_signature__`."
msgstr ""

#: ../../howto/clinic.rst:1324
msgid ""
"The ``defining_class`` converter is not compatible with :py:meth:`!__init__` "
"and :py:meth:`!__new__` methods, which cannot use the :c:macro:`METH_METHOD` "
"convention."
msgstr ""

#: ../../howto/clinic.rst:1328
msgid ""
"It is not possible to use ``defining_class`` with slot methods.  In order to "
"fetch the module state from such methods, use :c:func:"
"`PyType_GetModuleByDef` to look up the module and then :c:func:"
"`PyModule_GetState` to fetch the module state.  Example from the "
"``setattro`` slot method in :source:`Modules/_threadmodule.c`::"
msgstr ""

#: ../../howto/clinic.rst:1343
msgid "See also :pep:`573`."
msgstr "也請見 :pep:`573`\\ 。"

#: ../../howto/clinic.rst:1349
msgid "How to write a custom converter"
msgstr ""

#: ../../howto/clinic.rst:1351
msgid ""
"A converter is a Python class that inherits from :py:class:`!CConverter`. "
"The main purpose of a custom converter, is for parameters parsed with the "
"``O&`` format unit --- parsing such a parameter means calling a :c:func:"
"`PyArg_ParseTuple` \"converter function\"."
msgstr ""

#: ../../howto/clinic.rst:1356
msgid ""
"Your converter class should be named :samp:`{ConverterName}_converter`. By "
"following this convention, your converter class will be automatically "
"registered with Argument Clinic, with its *converter name* being the name of "
"your converter class with the ``_converter`` suffix stripped off."
msgstr ""

#: ../../howto/clinic.rst:1361
msgid ""
"Instead of subclassing :py:meth:`!CConverter.__init__`, write a :py:meth:`!"
"converter_init` method. Apart for the *self* parameter, all additional :py:"
"meth:`!converter_init` parameters **must** be keyword-only. Any arguments "
"passed to the converter in Argument Clinic will be passed along to your :py:"
"meth:`!converter_init` method. See :py:class:`!CConverter` for a list of "
"members you may wish to specify in your subclass."
msgstr ""

#: ../../howto/clinic.rst:1374
msgid ""
"The base class for all converters. See :ref:`clinic-howto-custom-converter` "
"for how to subclass this class."
msgstr ""

#: ../../howto/clinic.rst:1379
msgid ""
"The C type to use for this variable. :attr:`!type` should be a Python string "
"specifying the type, e.g. ``'int'``. If this is a pointer type, the type "
"string should end with ``' *'``."
msgstr ""

#: ../../howto/clinic.rst:1386
msgid ""
"The Python default value for this parameter, as a Python value. Or the magic "
"value ``unspecified`` if there is no default."
msgstr ""

#: ../../howto/clinic.rst:1391
msgid ""
":attr:`!default` as it should appear in Python code, as a string. Or "
"``None`` if there is no default."
msgstr ""

#: ../../howto/clinic.rst:1397
msgid ""
":attr:`!default` as it should appear in C code, as a string. Or ``None`` if "
"there is no default."
msgstr ""

#: ../../howto/clinic.rst:1403
msgid ""
"The default value used to initialize the C variable when there is no "
"default, but not specifying a default may result in an \"uninitialized "
"variable\" warning.  This can easily happen when using option groups—"
"although properly written code will never actually use this value, the "
"variable does get passed in to the impl, and the C compiler will complain "
"about the \"use\" of the uninitialized value.  This value should always be a "
"non-empty string."
msgstr ""

#: ../../howto/clinic.rst:1415
msgid "The name of the C converter function, as a string."
msgstr ""

#: ../../howto/clinic.rst:1419
msgid ""
"A boolean value.  If true, Argument Clinic will add a ``&`` in front of the "
"name of the variable when passing it into the impl function."
msgstr ""

#: ../../howto/clinic.rst:1425
msgid ""
"A boolean value.  If true, Argument Clinic will add a ``&`` in front of the "
"name of the variable when passing it into :c:func:`PyArg_ParseTuple`."
msgstr ""

#: ../../howto/clinic.rst:1430
msgid ""
"Here's the simplest example of a custom converter, from :source:`Modules/"
"zlibmodule.c`::"
msgstr ""

#: ../../howto/clinic.rst:1441
msgid ""
"This block adds a converter named ``ssize_t`` to Argument Clinic. Parameters "
"declared as ``ssize_t`` will be declared with type :c:type:`Py_ssize_t`, and "
"will be parsed by the ``'O&'`` format unit, which will call the :c:func:`!"
"ssize_t_converter` converter C function. ``ssize_t`` variables automatically "
"support default values."
msgstr ""

#: ../../howto/clinic.rst:1447
msgid ""
"More sophisticated custom converters can insert custom C code to handle "
"initialization and cleanup. You can see more examples of custom converters "
"in the CPython source tree; grep the C files for the string ``CConverter``."
msgstr ""

#: ../../howto/clinic.rst:1454
msgid "How to write a custom return converter"
msgstr ""

#: ../../howto/clinic.rst:1456
msgid ""
"Writing a custom return converter is much like writing a custom converter.  "
"Except it's somewhat simpler, because return converters are themselves much "
"simpler."
msgstr ""

#: ../../howto/clinic.rst:1460
msgid ""
"Return converters must subclass :py:class:`!CReturnConverter`. There are no "
"examples yet of custom return converters, because they are not widely used "
"yet.  If you wish to write your own return converter, please read :source:"
"`Tools/clinic/clinic.py`, specifically the implementation of :py:class:`!"
"CReturnConverter` and all its subclasses."
msgstr ""

#: ../../howto/clinic.rst:1469
msgid "How to convert ``METH_O`` and ``METH_NOARGS`` functions"
msgstr ""

#: ../../howto/clinic.rst:1471
msgid ""
"To convert a function using :c:macro:`METH_O`, make sure the function's "
"single argument is using the ``object`` converter, and mark the arguments as "
"positional-only::"
msgstr ""

#: ../../howto/clinic.rst:1483
msgid ""
"To convert a function using :c:macro:`METH_NOARGS`, just don't specify any "
"arguments."
msgstr ""

#: ../../howto/clinic.rst:1486
msgid ""
"You can still use a self converter, a return converter, and specify a *type* "
"argument to the object converter for :c:macro:`METH_O`."
msgstr ""

#: ../../howto/clinic.rst:1491
msgid "How to convert ``tp_new`` and ``tp_init`` functions"
msgstr ""

#: ../../howto/clinic.rst:1493
msgid ""
"You can convert :c:member:`~PyTypeObject.tp_new` and :c:member:"
"`~PyTypeObject.tp_init` functions. Just name them ``__new__`` or "
"``__init__`` as appropriate.  Notes:"
msgstr ""

#: ../../howto/clinic.rst:1497
msgid ""
"The function name generated for ``__new__`` doesn't end in ``__new__`` like "
"it would by default.  It's just the name of the class, converted into a "
"valid C identifier."
msgstr ""

#: ../../howto/clinic.rst:1501
msgid "No :c:type:`PyMethodDef` ``#define`` is generated for these functions."
msgstr ""

#: ../../howto/clinic.rst:1503
msgid "``__init__`` functions return ``int``, not ``PyObject *``."
msgstr ""

#: ../../howto/clinic.rst:1505
msgid "Use the docstring as the class docstring."
msgstr ""

#: ../../howto/clinic.rst:1507
msgid ""
"Although ``__new__`` and ``__init__`` functions must always accept both the "
"``args`` and ``kwargs`` objects, when converting you may specify any "
"signature for these functions that you like. (If your function doesn't "
"support keywords, the parsing function generated will throw an exception if "
"it receives any.)"
msgstr ""

#: ../../howto/clinic.rst:1515
msgid "How to change and redirect Clinic's output"
msgstr ""

#: ../../howto/clinic.rst:1517
msgid ""
"It can be inconvenient to have Clinic's output interspersed with your "
"conventional hand-edited C code.  Luckily, Clinic is configurable: you can "
"buffer up its output for printing later (or earlier!), or write its output "
"to a separate file.  You can also add a prefix or suffix to every line of "
"Clinic's generated output."
msgstr ""

#: ../../howto/clinic.rst:1523
msgid ""
"While changing Clinic's output in this manner can be a boon to readability, "
"it may result in Clinic code using types before they are defined, or your "
"code attempting to use Clinic-generated code before it is defined. These "
"problems can be easily solved by rearranging the declarations in your file, "
"or moving where Clinic's generated code goes.  (This is why the default "
"behavior of Clinic is to output everything into the current block; while "
"many people consider this hampers readability, it will never require "
"rearranging your code to fix definition-before-use problems.)"
msgstr ""

#: ../../howto/clinic.rst:1532
msgid "Let's start with defining some terminology:"
msgstr ""

#: ../../howto/clinic.rst:1559
msgid "*field*"
msgstr ""

#: ../../howto/clinic.rst:1535
msgid ""
"A field, in this context, is a subsection of Clinic's output. For example, "
"the ``#define`` for the :c:type:`PyMethodDef` structure is a field, called "
"``methoddef_define``.  Clinic has seven different fields it can output per "
"function definition:"
msgstr ""

#: ../../howto/clinic.rst:1550
msgid ""
"All the names are of the form ``\"<a>_<b>\"``, where ``\"<a>\"`` is the "
"semantic object represented (the parsing function, the impl function, the "
"docstring, or the methoddef structure) and ``\"<b>\"`` represents what kind "
"of statement the field is.  Field names that end in ``\"_prototype\"`` "
"represent forward declarations of that thing, without the actual body/data "
"of the thing; field names that end in ``\"_definition\"`` represent the "
"actual definition of the thing, with the body/data of the thing.  "
"(``\"methoddef\"`` is special, it's the only one that ends with "
"``\"_define\"``, representing that it's a preprocessor #define.)"
msgstr ""

#: ../../howto/clinic.rst:1593
msgid "*destination*"
msgstr ""

#: ../../howto/clinic.rst:1562
msgid ""
"A destination is a place Clinic can write output to.  There are five built-"
"in destinations:"
msgstr ""

#: ../../howto/clinic.rst:1567 ../../howto/clinic.rst:1642
#: ../../howto/clinic.rst:1720
msgid "``block``"
msgstr "``block``"

#: ../../howto/clinic.rst:1566
msgid ""
"The default destination: printed in the output section of the current Clinic "
"block."
msgstr ""

#: ../../howto/clinic.rst:1573 ../../howto/clinic.rst:1669
#: ../../howto/clinic.rst:1723
msgid "``buffer``"
msgstr "``buffer``"

#: ../../howto/clinic.rst:1570
msgid ""
"A text buffer where you can save text for later.  Text sent here is appended "
"to the end of any existing text.  It's an error to have any text left in the "
"buffer when Clinic finishes processing a file."
msgstr ""

#: ../../howto/clinic.rst:1584 ../../howto/clinic.rst:1655
#: ../../howto/clinic.rst:1749
msgid "``file``"
msgstr "``file``"

#: ../../howto/clinic.rst:1576
msgid ""
"A separate \"clinic file\" that will be created automatically by Clinic. The "
"filename chosen for the file is ``{basename}.clinic{extension}``, where "
"``basename`` and ``extension`` were assigned the output from ``os.path."
"splitext()`` run on the current file.  (Example: the ``file`` destination "
"for :file:`_pickle.c` would be written to :file:`_pickle.clinic.c`.)"
msgstr ""

#: ../../howto/clinic.rst:1583
msgid ""
"**Important: When using a** ``file`` **destination, you** *must check in* "
"**the generated file!**"
msgstr ""

#: ../../howto/clinic.rst:1589 ../../howto/clinic.rst:1682
#: ../../howto/clinic.rst:1753
msgid "``two-pass``"
msgstr "``two-pass``"

#: ../../howto/clinic.rst:1587
msgid ""
"A buffer like ``buffer``.  However, a two-pass buffer can only be dumped "
"once, and it prints out all text sent to it during all processing, even from "
"Clinic blocks *after* the dumping point."
msgstr ""

#: ../../howto/clinic.rst:1593 ../../howto/clinic.rst:1716
msgid "``suppress``"
msgstr "``suppress``"

#: ../../howto/clinic.rst:1592
msgid "The text is suppressed—thrown away."
msgstr ""

#: ../../howto/clinic.rst:1595
msgid "Clinic defines five new directives that let you reconfigure its output."
msgstr ""

#: ../../howto/clinic.rst:1597
msgid "The first new directive is ``dump``:"
msgstr ""

#: ../../howto/clinic.rst:1603
msgid ""
"This dumps the current contents of the named destination into the output of "
"the current block, and empties it.  This only works with ``buffer`` and "
"``two-pass`` destinations."
msgstr ""

#: ../../howto/clinic.rst:1607
msgid ""
"The second new directive is ``output``.  The most basic form of ``output`` "
"is like this:"
msgstr ""

#: ../../howto/clinic.rst:1614
msgid ""
"This tells Clinic to output *field* to *destination*.  ``output`` also "
"supports a special meta-destination, called ``everything``, which tells "
"Clinic to output *all* fields to that *destination*."
msgstr ""

#: ../../howto/clinic.rst:1618
msgid "``output`` has a number of other functions:"
msgstr ""

#: ../../howto/clinic.rst:1627
msgid ""
"``output push`` and ``output pop`` allow you to push and pop configurations "
"on an internal configuration stack, so that you can temporarily modify the "
"output configuration, then easily restore the previous configuration.  "
"Simply push before your change to save the current configuration, then pop "
"when you wish to restore the previous configuration."
msgstr ""

#: ../../howto/clinic.rst:1634
msgid ""
"``output preset`` sets Clinic's output to one of several built-in preset "
"configurations, as follows:"
msgstr ""

#: ../../howto/clinic.rst:1638
msgid ""
"Clinic's original starting configuration.  Writes everything immediately "
"after the input block."
msgstr ""

#: ../../howto/clinic.rst:1641
msgid ""
"Suppress the ``parser_prototype`` and ``docstring_prototype``, write "
"everything else to ``block``."
msgstr ""

#: ../../howto/clinic.rst:1645
msgid ""
"Designed to write everything to the \"clinic file\" that it can. You then "
"``#include`` this file near the top of your file. You may need to rearrange "
"your file to make this work, though usually this just means creating forward "
"declarations for various ``typedef`` and ``PyTypeObject`` definitions."
msgstr ""

#: ../../howto/clinic.rst:1651
msgid ""
"Suppress the ``parser_prototype`` and ``docstring_prototype``, write the "
"``impl_definition`` to ``block``, and write everything else to ``file``."
msgstr ""

#: ../../howto/clinic.rst:1655
msgid "The default filename is ``\"{dirname}/clinic/{basename}.h\"``."
msgstr ""

#: ../../howto/clinic.rst:1658
msgid ""
"Save up most of the output from Clinic, to be written into your file near "
"the end.  For Python files implementing modules or builtin types, it's "
"recommended that you dump the buffer just above the static structures for "
"your module or builtin type; these are normally very near the end.  Using "
"``buffer`` may require even more editing than ``file``, if your file has "
"static ``PyMethodDef`` arrays defined in the middle of the file."
msgstr ""

#: ../../howto/clinic.rst:1667
msgid ""
"Suppress the ``parser_prototype``, ``impl_prototype``, and "
"``docstring_prototype``, write the ``impl_definition`` to ``block``, and "
"write everything else to ``file``."
msgstr ""

#: ../../howto/clinic.rst:1672
msgid ""
"Similar to the ``buffer`` preset, but writes forward declarations to the "
"``two-pass`` buffer, and definitions to the ``buffer``. This is similar to "
"the ``buffer`` preset, but may require less editing than ``buffer``.  Dump "
"the ``two-pass`` buffer near the top of your file, and dump the ``buffer`` "
"near the end just like you would when using the ``buffer`` preset."
msgstr ""

#: ../../howto/clinic.rst:1679
msgid ""
"Suppresses the ``impl_prototype``, write the ``impl_definition`` to "
"``block``, write ``docstring_prototype``, ``methoddef_define``, and "
"``parser_prototype`` to ``two-pass``, write everything else to ``buffer``."
msgstr ""

#: ../../howto/clinic.rst:1693
msgid "``partial-buffer``"
msgstr "``partial-buffer``"

#: ../../howto/clinic.rst:1685
msgid ""
"Similar to the ``buffer`` preset, but writes more things to ``block``, only "
"writing the really big chunks of generated code to ``buffer``. This avoids "
"the definition-before-use problem of ``buffer`` completely, at the small "
"cost of having slightly more stuff in the block's output. Dump the "
"``buffer`` near the end, just like you would when using the ``buffer`` "
"preset."
msgstr ""

#: ../../howto/clinic.rst:1692
msgid ""
"Suppresses the ``impl_prototype``, write the ``docstring_definition`` and "
"``parser_definition`` to ``buffer``, write everything else to ``block``."
msgstr ""

#: ../../howto/clinic.rst:1695
msgid "The third new directive is ``destination``:"
msgstr ""

#: ../../howto/clinic.rst:1701
msgid "This performs an operation on the destination named ``name``."
msgstr ""

#: ../../howto/clinic.rst:1703
msgid "There are two defined subcommands: ``new`` and ``clear``."
msgstr ""

#: ../../howto/clinic.rst:1705
msgid "The ``new`` subcommand works like this:"
msgstr ""

#: ../../howto/clinic.rst:1711
msgid ""
"This creates a new destination with name ``<name>`` and type ``<type>``."
msgstr ""

#: ../../howto/clinic.rst:1713
msgid "There are five destination types:"
msgstr ""

#: ../../howto/clinic.rst:1716
msgid "Throws the text away."
msgstr ""

#: ../../howto/clinic.rst:1719
msgid ""
"Writes the text to the current block.  This is what Clinic originally did."
msgstr ""

#: ../../howto/clinic.rst:1723
msgid "A simple text buffer, like the \"buffer\" builtin destination above."
msgstr ""

#: ../../howto/clinic.rst:1726
msgid ""
"A text file.  The file destination takes an extra argument, a template to "
"use for building the filename, like so:"
msgstr ""

#: ../../howto/clinic.rst:1729
msgid "destination <name> new <type> <file_template>"
msgstr ""

#: ../../howto/clinic.rst:1731
msgid ""
"The template can use three strings internally that will be replaced by bits "
"of the filename:"
msgstr ""

#: ../../howto/clinic.rst:1734
msgid "{path}"
msgstr "{path}"

#: ../../howto/clinic.rst:1735
msgid "The full path to the file, including directory and full filename."
msgstr ""

#: ../../howto/clinic.rst:1736
msgid "{dirname}"
msgstr "{dirname}"

#: ../../howto/clinic.rst:1737
msgid "The name of the directory the file is in."
msgstr ""

#: ../../howto/clinic.rst:1738
msgid "{basename}"
msgstr "{basename}"

#: ../../howto/clinic.rst:1739
msgid "Just the name of the file, not including the directory."
msgstr ""

#: ../../howto/clinic.rst:1741
msgid "{basename_root}"
msgstr "{basename_root}"

#: ../../howto/clinic.rst:1741
msgid ""
"Basename with the extension clipped off (everything up to but not including "
"the last '.')."
msgstr ""

#: ../../howto/clinic.rst:1745
msgid "{basename_extension}"
msgstr "{basename_extension}"

#: ../../howto/clinic.rst:1744
msgid ""
"The last '.' and everything after it.  If the basename does not contain a "
"period, this will be the empty string."
msgstr ""

#: ../../howto/clinic.rst:1747
msgid ""
"If there are no periods in the filename, {basename} and {filename} are the "
"same, and {extension} is empty.  \"{basename}{extension}\" is always exactly "
"the same as \"{filename}\".\""
msgstr ""

#: ../../howto/clinic.rst:1752
msgid "A two-pass buffer, like the \"two-pass\" builtin destination above."
msgstr ""

#: ../../howto/clinic.rst:1755
msgid "The ``clear`` subcommand works like this:"
msgstr ""

#: ../../howto/clinic.rst:1761
msgid ""
"It removes all the accumulated text up to this point in the destination. (I "
"don't know what you'd need this for, but I thought maybe it'd be useful "
"while someone's experimenting.)"
msgstr ""

#: ../../howto/clinic.rst:1765
msgid "The fourth new directive is ``set``:"
msgstr ""

#: ../../howto/clinic.rst:1772
msgid ""
"``set`` lets you set two internal variables in Clinic. ``line_prefix`` is a "
"string that will be prepended to every line of Clinic's output; "
"``line_suffix`` is a string that will be appended to every line of Clinic's "
"output."
msgstr ""

#: ../../howto/clinic.rst:1776
msgid "Both of these support two format strings:"
msgstr ""

#: ../../howto/clinic.rst:1779
msgid "``{block comment start}``"
msgstr "``{block comment start}``"

#: ../../howto/clinic.rst:1779
msgid ""
"Turns into the string ``/*``, the start-comment text sequence for C files."
msgstr ""

#: ../../howto/clinic.rst:1782
msgid "``{block comment end}``"
msgstr "``{block comment end}``"

#: ../../howto/clinic.rst:1782
msgid ""
"Turns into the string ``*/``, the end-comment text sequence for C files."
msgstr ""

#: ../../howto/clinic.rst:1784
msgid ""
"The final new directive is one you shouldn't need to use directly, called "
"``preserve``:"
msgstr ""

#: ../../howto/clinic.rst:1791
msgid ""
"This tells Clinic that the current contents of the output should be kept, "
"unmodified. This is used internally by Clinic when dumping output into "
"``file`` files; wrapping it in a Clinic block lets Clinic use its existing "
"checksum functionality to ensure the file was not modified by hand before it "
"gets overwritten."
msgstr ""

#: ../../howto/clinic.rst:1798
msgid "How to use the ``#ifdef`` trick"
msgstr ""

#: ../../howto/clinic.rst:1800
msgid ""
"If you're converting a function that isn't available on all platforms, "
"there's a trick you can use to make life a little easier.  The existing code "
"probably looks like this::"
msgstr ""

#: ../../howto/clinic.rst:1811
msgid ""
"And then in the ``PyMethodDef`` structure at the bottom the existing code "
"will have:"
msgstr ""

#: ../../howto/clinic.rst:1820
msgid ""
"In this scenario, you should enclose the body of your impl function inside "
"the ``#ifdef``, like so::"
msgstr ""

#: ../../howto/clinic.rst:1834
msgid ""
"Then, remove those three lines from the :c:type:`PyMethodDef` structure, "
"replacing them with the macro Argument Clinic generated:"
msgstr ""

#: ../../howto/clinic.rst:1841
msgid ""
"(You can find the real name for this macro inside the generated code. Or you "
"can calculate it yourself: it's the name of your function as defined on the "
"first line of your block, but with periods changed to underscores, "
"uppercased, and ``\"_METHODDEF\"`` added to the end.)"
msgstr ""

#: ../../howto/clinic.rst:1846
msgid ""
"Perhaps you're wondering: what if ``HAVE_FUNCTIONNAME`` isn't defined? The "
"``MODULE_FUNCTIONNAME_METHODDEF`` macro won't be defined either!"
msgstr ""

#: ../../howto/clinic.rst:1849
msgid ""
"Here's where Argument Clinic gets very clever.  It actually detects that the "
"Argument Clinic block might be deactivated by the ``#ifdef``.  When that "
"happens, it generates a little extra code that looks like this::"
msgstr ""

#: ../../howto/clinic.rst:1857
msgid ""
"That means the macro always works.  If the function is defined, this turns "
"into the correct structure, including the trailing comma.  If the function "
"is undefined, this turns into nothing."
msgstr ""

#: ../../howto/clinic.rst:1861
msgid ""
"However, this causes one ticklish problem: where should Argument Clinic put "
"this extra code when using the \"block\" output preset?  It can't go in the "
"output block, because that could be deactivated by the ``#ifdef``.  (That's "
"the whole point!)"
msgstr ""

#: ../../howto/clinic.rst:1865
msgid ""
"In this situation, Argument Clinic writes the extra code to the \"buffer\" "
"destination. This may mean that you get a complaint from Argument Clinic:"
msgstr ""

#: ../../howto/clinic.rst:1873
msgid ""
"When this happens, just open your file, find the ``dump buffer`` block that "
"Argument Clinic added to your file (it'll be at the very bottom), then move "
"it above the :c:type:`PyMethodDef` structure where that macro is used."
msgstr ""

#: ../../howto/clinic.rst:1879
msgid "How to use Argument Clinic in Python files"
msgstr ""

#: ../../howto/clinic.rst:1881
msgid ""
"It's actually possible to use Argument Clinic to preprocess Python files. "
"There's no point to using Argument Clinic blocks, of course, as the output "
"wouldn't make any sense to the Python interpreter.  But using Argument "
"Clinic to run Python blocks lets you use Python as a Python preprocessor!"
msgstr ""

#: ../../howto/clinic.rst:1886
msgid ""
"Since Python comments are different from C comments, Argument Clinic blocks "
"embedded in Python files look slightly different.  They look like this:"
msgstr ""

#~ msgid "``type``"
#~ msgstr "``type``"

#~ msgid "``default``"
#~ msgstr "``default``"

#~ msgid "``py_default``"
#~ msgstr "``py_default``"

#~ msgid "``c_ignored_default``"
#~ msgstr "``c_ignored_default``"

#~ msgid "``impl_by_reference``"
#~ msgstr "``impl_by_reference``"

#~ msgid "``parse_by_reference``"
#~ msgstr "``parse_by_reference``"

#~ msgid "Py_buffer"
#~ msgstr "Py_buffer"
