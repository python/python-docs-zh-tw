# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-03 11:11+0800\n"
"PO-Revision-Date: 2018-05-23 14:36+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/descriptor.rst:5
msgid "Descriptor Guide"
msgstr "描述器 (Descriptor) 指南"

#: ../../howto/descriptor.rst:0
msgid "Author"
msgstr "作者"

#: ../../howto/descriptor.rst:7
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../howto/descriptor.rst:0
msgid "Contact"
msgstr "聯絡方式"

#: ../../howto/descriptor.rst:8
msgid "<python at rcn dot com>"
msgstr "<python at rcn dot com>"

#: ../../howto/descriptor.rst:11
msgid "Contents"
msgstr "目錄"

#: ../../howto/descriptor.rst:13
msgid ""
":term:`Descriptors <descriptor>` let objects customize attribute lookup, "
"storage, and deletion."
msgstr ":term:`描述器 <descriptor>`\\ 讓物件自訂屬性能夠被查找、儲存和刪除。"

#: ../../howto/descriptor.rst:16
msgid "This guide has four major sections:"
msgstr "此指南有四個主要章節："

#: ../../howto/descriptor.rst:18
msgid ""
"The \"primer\" gives a basic overview, moving gently from simple examples, "
"adding one feature at a time.  Start here if you're new to descriptors."
msgstr ""

#: ../../howto/descriptor.rst:21
msgid ""
"The second section shows a complete, practical descriptor example.  If you "
"already know the basics, start there."
msgstr ""

#: ../../howto/descriptor.rst:24
msgid ""
"The third section provides a more technical tutorial that goes into the "
"detailed mechanics of how descriptors work.  Most people don't need this "
"level of detail."
msgstr ""

#: ../../howto/descriptor.rst:28
msgid ""
"The last section has pure Python equivalents for built-in descriptors that "
"are written in C.  Read this if you're curious about how functions turn into "
"bound methods or about the implementation of common tools like :func:"
"`classmethod`, :func:`staticmethod`, :func:`property`, and :term:`__slots__`."
msgstr ""

#: ../../howto/descriptor.rst:36
msgid "Primer"
msgstr ""

#: ../../howto/descriptor.rst:38
msgid ""
"In this primer, we start with the most basic possible example and then we'll "
"add new capabilities one by one."
msgstr ""

#: ../../howto/descriptor.rst:43
msgid "Simple example: A descriptor that returns a constant"
msgstr ""

#: ../../howto/descriptor.rst:45
msgid ""
"The :class:`Ten` class is a descriptor whose :meth:`__get__` method always "
"returns the constant ``10``:"
msgstr ""

#: ../../howto/descriptor.rst:48
msgid ""
"class Ten:\n"
"    def __get__(self, obj, objtype=None):\n"
"        return 10"
msgstr ""
"class Ten:\n"
"    def __get__(self, obj, objtype=None):\n"
"        return 10"

#: ../../howto/descriptor.rst:54
msgid ""
"To use the descriptor, it must be stored as a class variable in another "
"class:"
msgstr ""

#: ../../howto/descriptor.rst:56
msgid ""
"class A:\n"
"    x = 5                       # Regular class attribute\n"
"    y = Ten()                   # Descriptor instance"
msgstr ""

#: ../../howto/descriptor.rst:62
msgid ""
"An interactive session shows the difference between normal attribute lookup "
"and descriptor lookup:"
msgstr ""

#: ../../howto/descriptor.rst:65
msgid ""
">>> a = A()                     # Make an instance of class A\n"
">>> a.x                         # Normal attribute lookup\n"
"5\n"
">>> a.y                         # Descriptor lookup\n"
"10"
msgstr ""

#: ../../howto/descriptor.rst:73
msgid ""
"In the ``a.x`` attribute lookup, the dot operator finds ``'x': 5`` in the "
"class dictionary.  In the ``a.y`` lookup, the dot operator finds a "
"descriptor instance, recognized by its ``__get__`` method. Calling that "
"method returns ``10``."
msgstr ""

#: ../../howto/descriptor.rst:78
msgid ""
"Note that the value ``10`` is not stored in either the class dictionary or "
"the instance dictionary.  Instead, the value ``10`` is computed on demand."
msgstr ""

#: ../../howto/descriptor.rst:81
msgid ""
"This example shows how a simple descriptor works, but it isn't very useful. "
"For retrieving constants, normal attribute lookup would be better."
msgstr ""

#: ../../howto/descriptor.rst:84
msgid ""
"In the next section, we'll create something more useful, a dynamic lookup."
msgstr ""

#: ../../howto/descriptor.rst:88
msgid "Dynamic lookups"
msgstr ""

#: ../../howto/descriptor.rst:90
msgid ""
"Interesting descriptors typically run computations instead of returning "
"constants:"
msgstr ""

#: ../../howto/descriptor.rst:93
msgid ""
"import os\n"
"\n"
"class DirectorySize:\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        return len(os.listdir(obj.dirname))\n"
"\n"
"class Directory:\n"
"\n"
"    size = DirectorySize()              # Descriptor instance\n"
"\n"
"    def __init__(self, dirname):\n"
"        self.dirname = dirname          # Regular instance attribute"
msgstr ""

#: ../../howto/descriptor.rst:109
msgid ""
"An interactive session shows that the lookup is dynamic — it computes "
"different, updated answers each time::"
msgstr ""

#: ../../howto/descriptor.rst:112
msgid ""
">>> s = Directory('songs')\n"
">>> g = Directory('games')\n"
">>> s.size                              # The songs directory has twenty "
"files\n"
"20\n"
">>> g.size                              # The games directory has three "
"files\n"
"3\n"
">>> os.remove('games/chess')            # Delete a game\n"
">>> g.size                              # File count is automatically "
"updated\n"
"2"
msgstr ""

#: ../../howto/descriptor.rst:122
msgid ""
"Besides showing how descriptors can run computations, this example also "
"reveals the purpose of the parameters to :meth:`__get__`.  The *self* "
"parameter is *size*, an instance of *DirectorySize*.  The *obj* parameter is "
"either *g* or *s*, an instance of *Directory*.  It is the *obj* parameter "
"that lets the :meth:`__get__` method learn the target directory.  The "
"*objtype* parameter is the class *Directory*."
msgstr ""

#: ../../howto/descriptor.rst:131
msgid "Managed attributes"
msgstr ""

#: ../../howto/descriptor.rst:133
msgid ""
"A popular use for descriptors is managing access to instance data.  The "
"descriptor is assigned to a public attribute in the class dictionary while "
"the actual data is stored as a private attribute in the instance "
"dictionary.  The descriptor's :meth:`__get__` and :meth:`__set__` methods "
"are triggered when the public attribute is accessed."
msgstr ""

#: ../../howto/descriptor.rst:139
msgid ""
"In the following example, *age* is the public attribute and *_age* is the "
"private attribute.  When the public attribute is accessed, the descriptor "
"logs the lookup or update:"
msgstr ""

#: ../../howto/descriptor.rst:143
msgid ""
"import logging\n"
"\n"
"logging.basicConfig(level=logging.INFO)\n"
"\n"
"class LoggedAgeAccess:\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        value = obj._age\n"
"        logging.info('Accessing %r giving %r', 'age', value)\n"
"        return value\n"
"\n"
"    def __set__(self, obj, value):\n"
"        logging.info('Updating %r to %r', 'age', value)\n"
"        obj._age = value\n"
"\n"
"class Person:\n"
"\n"
"    age = LoggedAgeAccess()             # Descriptor instance\n"
"\n"
"    def __init__(self, name, age):\n"
"        self.name = name                # Regular instance attribute\n"
"        self.age = age                  # Calls __set__()\n"
"\n"
"    def birthday(self):\n"
"        self.age += 1                   # Calls both __get__() and __set__()"
msgstr ""

#: ../../howto/descriptor.rst:172
msgid ""
"An interactive session shows that all access to the managed attribute *age* "
"is logged, but that the regular attribute *name* is not logged:"
msgstr ""

#: ../../howto/descriptor.rst:181
msgid ""
">>> mary = Person('Mary M', 30)         # The initial age update is logged\n"
"INFO:root:Updating 'age' to 30\n"
">>> dave = Person('David D', 40)\n"
"INFO:root:Updating 'age' to 40\n"
"\n"
">>> vars(mary)                          # The actual data is in a private "
"attribute\n"
"{'name': 'Mary M', '_age': 30}\n"
">>> vars(dave)\n"
"{'name': 'David D', '_age': 40}\n"
"\n"
">>> mary.age                            # Access the data and log the "
"lookup\n"
"INFO:root:Accessing 'age' giving 30\n"
"30\n"
">>> mary.birthday()                     # Updates are logged as well\n"
"INFO:root:Accessing 'age' giving 30\n"
"INFO:root:Updating 'age' to 31\n"
"\n"
">>> dave.name                           # Regular attribute lookup isn't "
"logged\n"
"'David D'\n"
">>> dave.age                            # Only the managed attribute is "
"logged\n"
"INFO:root:Accessing 'age' giving 40\n"
"40"
msgstr ""

#: ../../howto/descriptor.rst:206
msgid ""
"One major issue with this example is that the private name *_age* is "
"hardwired in the *LoggedAgeAccess* class.  That means that each instance can "
"only have one logged attribute and that its name is unchangeable.  In the "
"next example, we'll fix that problem."
msgstr ""

#: ../../howto/descriptor.rst:213
msgid "Customized names"
msgstr ""

#: ../../howto/descriptor.rst:215
msgid ""
"When a class uses descriptors, it can inform each descriptor about which "
"variable name was used."
msgstr ""

#: ../../howto/descriptor.rst:218
msgid ""
"In this example, the :class:`Person` class has two descriptor instances, "
"*name* and *age*.  When the :class:`Person` class is defined, it makes a "
"callback to :meth:`__set_name__` in *LoggedAccess* so that the field names "
"can be recorded, giving each descriptor its own *public_name* and "
"*private_name*:"
msgstr ""

#: ../../howto/descriptor.rst:223
msgid ""
"import logging\n"
"\n"
"logging.basicConfig(level=logging.INFO)\n"
"\n"
"class LoggedAccess:\n"
"\n"
"    def __set_name__(self, owner, name):\n"
"        self.public_name = name\n"
"        self.private_name = '_' + name\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        value = getattr(obj, self.private_name)\n"
"        logging.info('Accessing %r giving %r', self.public_name, value)\n"
"        return value\n"
"\n"
"    def __set__(self, obj, value):\n"
"        logging.info('Updating %r to %r', self.public_name, value)\n"
"        setattr(obj, self.private_name, value)\n"
"\n"
"class Person:\n"
"\n"
"    name = LoggedAccess()                # First descriptor instance\n"
"    age = LoggedAccess()                 # Second descriptor instance\n"
"\n"
"    def __init__(self, name, age):\n"
"        self.name = name                 # Calls the first descriptor\n"
"        self.age = age                   # Calls the second descriptor\n"
"\n"
"    def birthday(self):\n"
"        self.age += 1"
msgstr ""

#: ../../howto/descriptor.rst:256
msgid ""
"An interactive session shows that the :class:`Person` class has called :meth:"
"`__set_name__` so that the field names would be recorded.  Here we call :"
"func:`vars` to look up the descriptor without triggering it:"
msgstr ""

#: ../../howto/descriptor.rst:260
msgid ""
">>> vars(vars(Person)['name'])\n"
"{'public_name': 'name', 'private_name': '_name'}\n"
">>> vars(vars(Person)['age'])\n"
"{'public_name': 'age', 'private_name': '_age'}"
msgstr ""
">>> vars(vars(Person)['name'])\n"
"{'public_name': 'name', 'private_name': '_name'}\n"
">>> vars(vars(Person)['age'])\n"
"{'public_name': 'age', 'private_name': '_age'}"

#: ../../howto/descriptor.rst:267
msgid "The new class now logs access to both *name* and *age*:"
msgstr ""

#: ../../howto/descriptor.rst:275
msgid ""
">>> pete = Person('Peter P', 10)\n"
"INFO:root:Updating 'name' to 'Peter P'\n"
"INFO:root:Updating 'age' to 10\n"
">>> kate = Person('Catherine C', 20)\n"
"INFO:root:Updating 'name' to 'Catherine C'\n"
"INFO:root:Updating 'age' to 20"
msgstr ""
">>> pete = Person('Peter P', 10)\n"
"INFO:root:Updating 'name' to 'Peter P'\n"
"INFO:root:Updating 'age' to 10\n"
">>> kate = Person('Catherine C', 20)\n"
"INFO:root:Updating 'name' to 'Catherine C'\n"
"INFO:root:Updating 'age' to 20"

#: ../../howto/descriptor.rst:284
msgid "The two *Person* instances contain only the private names:"
msgstr ""

#: ../../howto/descriptor.rst:286
msgid ""
">>> vars(pete)\n"
"{'_name': 'Peter P', '_age': 10}\n"
">>> vars(kate)\n"
"{'_name': 'Catherine C', '_age': 20}"
msgstr ""
">>> vars(pete)\n"
"{'_name': 'Peter P', '_age': 10}\n"
">>> vars(kate)\n"
"{'_name': 'Catherine C', '_age': 20}"

#: ../../howto/descriptor.rst:295
msgid "Closing thoughts"
msgstr ""

#: ../../howto/descriptor.rst:297
msgid ""
"A :term:`descriptor` is what we call any object that defines :meth:"
"`__get__`, :meth:`__set__`, or :meth:`__delete__`."
msgstr ""

#: ../../howto/descriptor.rst:300
msgid ""
"Optionally, descriptors can have a :meth:`__set_name__` method.  This is "
"only used in cases where a descriptor needs to know either the class where "
"it was created or the name of class variable it was assigned to.  (This "
"method, if present, is called even if the class is not a descriptor.)"
msgstr ""

#: ../../howto/descriptor.rst:305
msgid ""
"Descriptors get invoked by the dot operator during attribute lookup.  If a "
"descriptor is accessed indirectly with ``vars(some_class)"
"[descriptor_name]``, the descriptor instance is returned without invoking it."
msgstr ""

#: ../../howto/descriptor.rst:309
msgid ""
"Descriptors only work when used as class variables.  When put in instances, "
"they have no effect."
msgstr ""

#: ../../howto/descriptor.rst:312
msgid ""
"The main motivation for descriptors is to provide a hook allowing objects "
"stored in class variables to control what happens during attribute lookup."
msgstr ""

#: ../../howto/descriptor.rst:315
msgid ""
"Traditionally, the calling class controls what happens during lookup. "
"Descriptors invert that relationship and allow the data being looked-up to "
"have a say in the matter."
msgstr ""

#: ../../howto/descriptor.rst:319
msgid ""
"Descriptors are used throughout the language.  It is how functions turn into "
"bound methods.  Common tools like :func:`classmethod`, :func:"
"`staticmethod`, :func:`property`, and :func:`functools.cached_property` are "
"all implemented as descriptors."
msgstr ""

#: ../../howto/descriptor.rst:326
msgid "Complete Practical Example"
msgstr ""

#: ../../howto/descriptor.rst:328
msgid ""
"In this example, we create a practical and powerful tool for locating "
"notoriously hard to find data corruption bugs."
msgstr ""

#: ../../howto/descriptor.rst:333
msgid "Validator class"
msgstr ""

#: ../../howto/descriptor.rst:335
msgid ""
"A validator is a descriptor for managed attribute access.  Prior to storing "
"any data, it verifies that the new value meets various type and range "
"restrictions.  If those restrictions aren't met, it raises an exception to "
"prevent data corruption at its source."
msgstr ""

#: ../../howto/descriptor.rst:340
msgid ""
"This :class:`Validator` class is both an :term:`abstract base class` and a "
"managed attribute descriptor:"
msgstr ""

#: ../../howto/descriptor.rst:343
msgid ""
"from abc import ABC, abstractmethod\n"
"\n"
"class Validator(ABC):\n"
"\n"
"    def __set_name__(self, owner, name):\n"
"        self.private_name = '_' + name\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        return getattr(obj, self.private_name)\n"
"\n"
"    def __set__(self, obj, value):\n"
"        self.validate(value)\n"
"        setattr(obj, self.private_name, value)\n"
"\n"
"    @abstractmethod\n"
"    def validate(self, value):\n"
"        pass"
msgstr ""
"from abc import ABC, abstractmethod\n"
"\n"
"class Validator(ABC):\n"
"\n"
"    def __set_name__(self, owner, name):\n"
"        self.private_name = '_' + name\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        return getattr(obj, self.private_name)\n"
"\n"
"    def __set__(self, obj, value):\n"
"        self.validate(value)\n"
"        setattr(obj, self.private_name, value)\n"
"\n"
"    @abstractmethod\n"
"    def validate(self, value):\n"
"        pass"

#: ../../howto/descriptor.rst:363
msgid ""
"Custom validators need to inherit from :class:`Validator` and must supply a :"
"meth:`validate` method to test various restrictions as needed."
msgstr ""

#: ../../howto/descriptor.rst:368
msgid "Custom validators"
msgstr ""

#: ../../howto/descriptor.rst:370
msgid "Here are three practical data validation utilities:"
msgstr ""

#: ../../howto/descriptor.rst:372
msgid ""
":class:`OneOf` verifies that a value is one of a restricted set of options."
msgstr ""

#: ../../howto/descriptor.rst:374
msgid ""
":class:`Number` verifies that a value is either an :class:`int` or :class:"
"`float`.  Optionally, it verifies that a value is between a given minimum or "
"maximum."
msgstr ""

#: ../../howto/descriptor.rst:378
msgid ""
":class:`String` verifies that a value is a :class:`str`.  Optionally, it "
"validates a given minimum or maximum length.  It can validate a user-defined "
"`predicate <https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)>`_ "
"as well."
msgstr ""

#: ../../howto/descriptor.rst:383
msgid ""
"class OneOf(Validator):\n"
"\n"
"    def __init__(self, *options):\n"
"        self.options = set(options)\n"
"\n"
"    def validate(self, value):\n"
"        if value not in self.options:\n"
"            raise ValueError(f'Expected {value!r} to be one of {self.options!"
"r}')\n"
"\n"
"class Number(Validator):\n"
"\n"
"    def __init__(self, minvalue=None, maxvalue=None):\n"
"        self.minvalue = minvalue\n"
"        self.maxvalue = maxvalue\n"
"\n"
"    def validate(self, value):\n"
"        if not isinstance(value, (int, float)):\n"
"            raise TypeError(f'Expected {value!r} to be an int or float')\n"
"        if self.minvalue is not None and value < self.minvalue:\n"
"            raise ValueError(\n"
"                f'Expected {value!r} to be at least {self.minvalue!r}'\n"
"            )\n"
"        if self.maxvalue is not None and value > self.maxvalue:\n"
"            raise ValueError(\n"
"                f'Expected {value!r} to be no more than {self.maxvalue!r}'\n"
"            )\n"
"\n"
"class String(Validator):\n"
"\n"
"    def __init__(self, minsize=None, maxsize=None, predicate=None):\n"
"        self.minsize = minsize\n"
"        self.maxsize = maxsize\n"
"        self.predicate = predicate\n"
"\n"
"    def validate(self, value):\n"
"        if not isinstance(value, str):\n"
"            raise TypeError(f'Expected {value!r} to be an str')\n"
"        if self.minsize is not None and len(value) < self.minsize:\n"
"            raise ValueError(\n"
"                f'Expected {value!r} to be no smaller than {self.minsize!"
"r}'\n"
"            )\n"
"        if self.maxsize is not None and len(value) > self.maxsize:\n"
"            raise ValueError(\n"
"                f'Expected {value!r} to be no bigger than {self.maxsize!r}'\n"
"            )\n"
"        if self.predicate is not None and not self.predicate(value):\n"
"            raise ValueError(\n"
"                f'Expected {self.predicate} to be true for {value!r}'\n"
"            )"
msgstr ""

#: ../../howto/descriptor.rst:437
msgid "Practical application"
msgstr ""

#: ../../howto/descriptor.rst:439
msgid "Here's how the data validators can be used in a real class:"
msgstr ""

#: ../../howto/descriptor.rst:441
msgid ""
"class Component:\n"
"\n"
"    name = String(minsize=3, maxsize=10, predicate=str.isupper)\n"
"    kind = OneOf('wood', 'metal', 'plastic')\n"
"    quantity = Number(minvalue=0)\n"
"\n"
"    def __init__(self, name, kind, quantity):\n"
"        self.name = name\n"
"        self.kind = kind\n"
"        self.quantity = quantity"
msgstr ""

#: ../../howto/descriptor.rst:454
msgid "The descriptors prevent invalid instances from being created:"
msgstr ""

#: ../../howto/descriptor.rst:456
msgid ""
">>> Component('Widget', 'metal', 5)      # Blocked: 'Widget' is not all "
"uppercase\n"
"Traceback (most recent call last):\n"
"    ...\n"
"ValueError: Expected <method 'isupper' of 'str' objects> to be true for "
"'Widget'\n"
"\n"
">>> Component('WIDGET', 'metle', 5)      # Blocked: 'metle' is misspelled\n"
"Traceback (most recent call last):\n"
"    ...\n"
"ValueError: Expected 'metle' to be one of {'metal', 'plastic', 'wood'}\n"
"\n"
">>> Component('WIDGET', 'metal', -5)     # Blocked: -5 is negative\n"
"Traceback (most recent call last):\n"
"    ...\n"
"ValueError: Expected -5 to be at least 0\n"
">>> Component('WIDGET', 'metal', 'V')    # Blocked: 'V' isn't a number\n"
"Traceback (most recent call last):\n"
"    ...\n"
"TypeError: Expected 'V' to be an int or float\n"
"\n"
">>> c = Component('WIDGET', 'metal', 5)  # Allowed:  The inputs are valid"
msgstr ""

#: ../../howto/descriptor.rst:481
msgid "Technical Tutorial"
msgstr ""

#: ../../howto/descriptor.rst:483
msgid ""
"What follows is a more technical tutorial for the mechanics and details of "
"how descriptors work."
msgstr ""

#: ../../howto/descriptor.rst:488
msgid "Abstract"
msgstr "摘要"

#: ../../howto/descriptor.rst:490
msgid ""
"Defines descriptors, summarizes the protocol, and shows how descriptors are "
"called.  Provides an example showing how object relational mappings work."
msgstr ""

#: ../../howto/descriptor.rst:493
msgid ""
"Learning about descriptors not only provides access to a larger toolset, it "
"creates a deeper understanding of how Python works."
msgstr ""

#: ../../howto/descriptor.rst:498
msgid "Definition and introduction"
msgstr ""

#: ../../howto/descriptor.rst:500
msgid ""
"In general, a descriptor is an attribute value that has one of the methods "
"in the descriptor protocol.  Those methods are :meth:`__get__`, :meth:"
"`__set__`, and :meth:`__delete__`.  If any of those methods are defined for "
"an attribute, it is said to be a :term:`descriptor`."
msgstr ""

#: ../../howto/descriptor.rst:505
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary.  For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and "
"continuing through the method resolution order of ``type(a)``. If the looked-"
"up value is an object defining one of the descriptor methods, then Python "
"may override the default behavior and invoke the descriptor method instead. "
"Where this occurs in the precedence chain depends on which descriptor "
"methods were defined."
msgstr ""

#: ../../howto/descriptor.rst:514
msgid ""
"Descriptors are a powerful, general purpose protocol.  They are the "
"mechanism behind properties, methods, static methods, class methods, and :"
"func:`super`.  They are used throughout Python itself.  Descriptors simplify "
"the underlying C code and offer a flexible set of new tools for everyday "
"Python programs."
msgstr ""

#: ../../howto/descriptor.rst:522
msgid "Descriptor protocol"
msgstr "描述器協定"

#: ../../howto/descriptor.rst:524
msgid "``descr.__get__(self, obj, type=None)``"
msgstr "``descr.__get__(self, obj, type=None)``"

#: ../../howto/descriptor.rst:526
msgid "``descr.__set__(self, obj, value)``"
msgstr "``descr.__set__(self, obj, value)``"

#: ../../howto/descriptor.rst:528
msgid "``descr.__delete__(self, obj)``"
msgstr "``descr.__delete__(self, obj)``"

#: ../../howto/descriptor.rst:530
msgid ""
"That is all there is to it.  Define any of these methods and an object is "
"considered a descriptor and can override default behavior upon being looked "
"up as an attribute."
msgstr ""

#: ../../howto/descriptor.rst:534
msgid ""
"If an object defines :meth:`__set__` or :meth:`__delete__`, it is considered "
"a data descriptor.  Descriptors that only define :meth:`__get__` are called "
"non-data descriptors (they are often used for methods but other uses are "
"possible)."
msgstr ""

#: ../../howto/descriptor.rst:539
msgid ""
"Data and non-data descriptors differ in how overrides are calculated with "
"respect to entries in an instance's dictionary.  If an instance's dictionary "
"has an entry with the same name as a data descriptor, the data descriptor "
"takes precedence.  If an instance's dictionary has an entry with the same "
"name as a non-data descriptor, the dictionary entry takes precedence."
msgstr ""

#: ../../howto/descriptor.rst:545
msgid ""
"To make a read-only data descriptor, define both :meth:`__get__` and :meth:"
"`__set__` with the :meth:`__set__` raising an :exc:`AttributeError` when "
"called.  Defining the :meth:`__set__` method with an exception raising "
"placeholder is enough to make it a data descriptor."
msgstr ""

#: ../../howto/descriptor.rst:552
msgid "Overview of descriptor invocation"
msgstr ""

#: ../../howto/descriptor.rst:554
msgid ""
"A descriptor can be called directly with ``desc.__get__(obj)`` or ``desc."
"__get__(None, cls)``."
msgstr ""

#: ../../howto/descriptor.rst:557
msgid ""
"But it is more common for a descriptor to be invoked automatically from "
"attribute access."
msgstr ""

#: ../../howto/descriptor.rst:560
msgid ""
"The expression ``obj.x`` looks up the attribute ``x`` in the chain of "
"namespaces for ``obj``.  If the search finds a descriptor outside of the "
"instance ``__dict__``, its :meth:`__get__` method is invoked according to "
"the precedence rules listed below."
msgstr ""

#: ../../howto/descriptor.rst:565
msgid ""
"The details of invocation depend on whether ``obj`` is an object, class, or "
"instance of super."
msgstr ""

#: ../../howto/descriptor.rst:570
msgid "Invocation from an instance"
msgstr ""

#: ../../howto/descriptor.rst:572
msgid ""
"Instance lookup scans through a chain of namespaces giving data descriptors "
"the highest priority, followed by instance variables, then non-data "
"descriptors, then class variables, and lastly :meth:`__getattr__` if it is "
"provided."
msgstr ""

#: ../../howto/descriptor.rst:577
msgid ""
"If a descriptor is found for ``a.x``, then it is invoked with: ``desc."
"__get__(a, type(a))``."
msgstr ""

#: ../../howto/descriptor.rst:580
msgid ""
"The logic for a dotted lookup is in :meth:`object.__getattribute__`.  Here "
"is a pure Python equivalent:"
msgstr ""

#: ../../howto/descriptor.rst:583
msgid ""
"def find_name_in_mro(cls, name, default):\n"
"    \"Emulate _PyType_Lookup() in Objects/typeobject.c\"\n"
"    for base in cls.__mro__:\n"
"        if name in vars(base):\n"
"            return vars(base)[name]\n"
"    return default\n"
"\n"
"def object_getattribute(obj, name):\n"
"    \"Emulate PyObject_GenericGetAttr() in Objects/object.c\"\n"
"    null = object()\n"
"    objtype = type(obj)\n"
"    cls_var = find_name_in_mro(objtype, name, null)\n"
"    descr_get = getattr(type(cls_var), '__get__', null)\n"
"    if descr_get is not null:\n"
"        if (hasattr(type(cls_var), '__set__')\n"
"            or hasattr(type(cls_var), '__delete__')):\n"
"            return descr_get(cls_var, obj, objtype)     # data descriptor\n"
"    if hasattr(obj, '__dict__') and name in vars(obj):\n"
"        return vars(obj)[name]                          # instance variable\n"
"    if descr_get is not null:\n"
"        return descr_get(cls_var, obj, objtype)         # non-data "
"descriptor\n"
"    if cls_var is not null:\n"
"        return cls_var                                  # class variable\n"
"    raise AttributeError(name)"
msgstr ""

#: ../../howto/descriptor.rst:719
msgid ""
"Note, there is no :meth:`__getattr__` hook in the :meth:`__getattribute__` "
"code.  That is why calling :meth:`__getattribute__` directly or with "
"``super().__getattribute__`` will bypass :meth:`__getattr__` entirely."
msgstr ""

#: ../../howto/descriptor.rst:723
msgid ""
"Instead, it is the dot operator and the :func:`getattr` function that are "
"responsible for invoking :meth:`__getattr__` whenever :meth:"
"`__getattribute__` raises an :exc:`AttributeError`.  Their logic is "
"encapsulated in a helper function:"
msgstr ""

#: ../../howto/descriptor.rst:728
msgid ""
"def getattr_hook(obj, name):\n"
"    \"Emulate slot_tp_getattr_hook() in Objects/typeobject.c\"\n"
"    try:\n"
"        return obj.__getattribute__(name)\n"
"    except AttributeError:\n"
"        if not hasattr(type(obj), '__getattr__'):\n"
"            raise\n"
"    return type(obj).__getattr__(obj, name)             # __getattr__"
msgstr ""
"def getattr_hook(obj, name):\n"
"    \"Emulate slot_tp_getattr_hook() in Objects/typeobject.c\"\n"
"    try:\n"
"        return obj.__getattribute__(name)\n"
"    except AttributeError:\n"
"        if not hasattr(type(obj), '__getattr__'):\n"
"            raise\n"
"    return type(obj).__getattr__(obj, name)             # __getattr__"

#: ../../howto/descriptor.rst:773
msgid "Invocation from a class"
msgstr ""

#: ../../howto/descriptor.rst:775
msgid ""
"The logic for a dotted lookup such as ``A.x`` is in :meth:`type."
"__getattribute__`.  The steps are similar to those for :meth:`object."
"__getattribute__` but the instance dictionary lookup is replaced by a search "
"through the class's :term:`method resolution order`."
msgstr ""

#: ../../howto/descriptor.rst:780
msgid "If a descriptor is found, it is invoked with ``desc.__get__(None, A)``."
msgstr ""

#: ../../howto/descriptor.rst:782
msgid ""
"The full C implementation can be found in :c:func:`!type_getattro` and :c:"
"func:`!_PyType_Lookup` in :source:`Objects/typeobject.c`."
msgstr ""

#: ../../howto/descriptor.rst:787
msgid "Invocation from super"
msgstr ""

#: ../../howto/descriptor.rst:789
msgid ""
"The logic for super's dotted lookup is in the :meth:`__getattribute__` "
"method for object returned by :func:`super`."
msgstr ""

#: ../../howto/descriptor.rst:792
msgid ""
"A dotted lookup such as ``super(A, obj).m`` searches ``obj.__class__."
"__mro__`` for the base class ``B`` immediately following ``A`` and then "
"returns ``B.__dict__['m'].__get__(obj, A)``.  If not a descriptor, ``m`` is "
"returned unchanged."
msgstr ""

#: ../../howto/descriptor.rst:797
msgid ""
"The full C implementation can be found in :c:func:`!super_getattro` in :"
"source:`Objects/typeobject.c`.  A pure Python equivalent can be found in "
"`Guido's Tutorial <https://www.python.org/download/releases/2.2.3/descrintro/"
"#cooperation>`_."
msgstr ""

#: ../../howto/descriptor.rst:804
msgid "Summary of invocation logic"
msgstr ""

#: ../../howto/descriptor.rst:806
msgid ""
"The mechanism for descriptors is embedded in the :meth:`__getattribute__` "
"methods for :class:`object`, :class:`type`, and :func:`super`."
msgstr ""

#: ../../howto/descriptor.rst:809
msgid "The important points to remember are:"
msgstr "要記住的重點是："

#: ../../howto/descriptor.rst:811
msgid "Descriptors are invoked by the :meth:`__getattribute__` method."
msgstr ""

#: ../../howto/descriptor.rst:813
msgid ""
"Classes inherit this machinery from :class:`object`, :class:`type`, or :func:"
"`super`."
msgstr ""

#: ../../howto/descriptor.rst:816
msgid ""
"Overriding :meth:`__getattribute__` prevents automatic descriptor calls "
"because all the descriptor logic is in that method."
msgstr ""

#: ../../howto/descriptor.rst:819
msgid ""
":meth:`object.__getattribute__` and :meth:`type.__getattribute__` make "
"different calls to :meth:`__get__`.  The first includes the instance and may "
"include the class.  The second puts in ``None`` for the instance and always "
"includes the class."
msgstr ""

#: ../../howto/descriptor.rst:824
msgid "Data descriptors always override instance dictionaries."
msgstr ""

#: ../../howto/descriptor.rst:826
msgid "Non-data descriptors may be overridden by instance dictionaries."
msgstr ""

#: ../../howto/descriptor.rst:830
msgid "Automatic name notification"
msgstr ""

#: ../../howto/descriptor.rst:832
msgid ""
"Sometimes it is desirable for a descriptor to know what class variable name "
"it was assigned to.  When a new class is created, the :class:`type` "
"metaclass scans the dictionary of the new class.  If any of the entries are "
"descriptors and if they define :meth:`__set_name__`, that method is called "
"with two arguments.  The *owner* is the class where the descriptor is used, "
"and the *name* is the class variable the descriptor was assigned to."
msgstr ""

#: ../../howto/descriptor.rst:839
msgid ""
"The implementation details are in :c:func:`!type_new` and :c:func:`!"
"set_names` in :source:`Objects/typeobject.c`."
msgstr ""

#: ../../howto/descriptor.rst:842
msgid ""
"Since the update logic is in :meth:`type.__new__`, notifications only take "
"place at the time of class creation.  If descriptors are added to the class "
"afterwards, :meth:`__set_name__` will need to be called manually."
msgstr ""

#: ../../howto/descriptor.rst:848
msgid "ORM example"
msgstr "ORM 範例"

#: ../../howto/descriptor.rst:850
msgid ""
"The following code is a simplified skeleton showing how data descriptors "
"could be used to implement an `object relational mapping <https://en."
"wikipedia.org/wiki/Object%E2%80%93relational_mapping>`_."
msgstr ""

#: ../../howto/descriptor.rst:854
msgid ""
"The essential idea is that the data is stored in an external database.  The "
"Python instances only hold keys to the database's tables.  Descriptors take "
"care of lookups or updates:"
msgstr ""

#: ../../howto/descriptor.rst:858
msgid ""
"class Field:\n"
"\n"
"    def __set_name__(self, owner, name):\n"
"        self.fetch = f'SELECT {name} FROM {owner.table} WHERE {owner.key}"
"=?;'\n"
"        self.store = f'UPDATE {owner.table} SET {name}=? WHERE {owner.key}"
"=?;'\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        return conn.execute(self.fetch, [obj.key]).fetchone()[0]\n"
"\n"
"    def __set__(self, obj, value):\n"
"        conn.execute(self.store, [value, obj.key])\n"
"        conn.commit()"
msgstr ""
"class Field:\n"
"\n"
"    def __set_name__(self, owner, name):\n"
"        self.fetch = f'SELECT {name} FROM {owner.table} WHERE {owner.key}"
"=?;'\n"
"        self.store = f'UPDATE {owner.table} SET {name}=? WHERE {owner.key}"
"=?;'\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        return conn.execute(self.fetch, [obj.key]).fetchone()[0]\n"
"\n"
"    def __set__(self, obj, value):\n"
"        conn.execute(self.store, [value, obj.key])\n"
"        conn.commit()"

#: ../../howto/descriptor.rst:873
msgid ""
"We can use the :class:`Field` class to define `models <https://en.wikipedia."
"org/wiki/Database_model>`_ that describe the schema for each table in a "
"database:"
msgstr ""

#: ../../howto/descriptor.rst:877
msgid ""
"class Movie:\n"
"    table = 'Movies'                    # Table name\n"
"    key = 'title'                       # Primary key\n"
"    director = Field()\n"
"    year = Field()\n"
"\n"
"    def __init__(self, key):\n"
"        self.key = key\n"
"\n"
"class Song:\n"
"    table = 'Music'\n"
"    key = 'title'\n"
"    artist = Field()\n"
"    year = Field()\n"
"    genre = Field()\n"
"\n"
"    def __init__(self, key):\n"
"        self.key = key"
msgstr ""

#: ../../howto/descriptor.rst:898
msgid "To use the models, first connect to the database::"
msgstr ""

#: ../../howto/descriptor.rst:900
msgid ""
">>> import sqlite3\n"
">>> conn = sqlite3.connect('entertainment.db')"
msgstr ""
">>> import sqlite3\n"
">>> conn = sqlite3.connect('entertainment.db')"

#: ../../howto/descriptor.rst:903
msgid ""
"An interactive session shows how data is retrieved from the database and how "
"it can be updated:"
msgstr ""

#: ../../howto/descriptor.rst:931
msgid ""
">>> Movie('Star Wars').director\n"
"'George Lucas'\n"
">>> jaws = Movie('Jaws')\n"
">>> f'Released in {jaws.year} by {jaws.director}'\n"
"'Released in 1975 by Steven Spielberg'\n"
"\n"
">>> Song('Country Roads').artist\n"
"'John Denver'\n"
"\n"
">>> Movie('Star Wars').director = 'J.J. Abrams'\n"
">>> Movie('Star Wars').director\n"
"'J.J. Abrams'"
msgstr ""
">>> Movie('Star Wars').director\n"
"'George Lucas'\n"
">>> jaws = Movie('Jaws')\n"
">>> f'Released in {jaws.year} by {jaws.director}'\n"
"'Released in 1975 by Steven Spielberg'\n"
"\n"
">>> Song('Country Roads').artist\n"
"'John Denver'\n"
"\n"
">>> Movie('Star Wars').director = 'J.J. Abrams'\n"
">>> Movie('Star Wars').director\n"
"'J.J. Abrams'"

#: ../../howto/descriptor.rst:952
msgid "Pure Python Equivalents"
msgstr ""

#: ../../howto/descriptor.rst:954
msgid ""
"The descriptor protocol is simple and offers exciting possibilities.  "
"Several use cases are so common that they have been prepackaged into built-"
"in tools. Properties, bound methods, static methods, class methods, and "
"\\_\\_slots\\_\\_ are all based on the descriptor protocol."
msgstr ""

#: ../../howto/descriptor.rst:961
msgid "Properties"
msgstr ""

#: ../../howto/descriptor.rst:963
msgid ""
"Calling :func:`property` is a succinct way of building a data descriptor "
"that triggers a function call upon access to an attribute.  Its signature "
"is::"
msgstr ""

#: ../../howto/descriptor.rst:966
msgid "property(fget=None, fset=None, fdel=None, doc=None) -> property"
msgstr "property(fget=None, fset=None, fdel=None, doc=None) -> property"

#: ../../howto/descriptor.rst:968
msgid ""
"The documentation shows a typical use to define a managed attribute ``x``:"
msgstr ""

#: ../../howto/descriptor.rst:970
msgid ""
"class C:\n"
"    def getx(self): return self.__x\n"
"    def setx(self, value): self.__x = value\n"
"    def delx(self): del self.__x\n"
"    x = property(getx, setx, delx, \"I'm the 'x' property.\")"
msgstr ""
"class C:\n"
"    def getx(self): return self.__x\n"
"    def setx(self, value): self.__x = value\n"
"    def delx(self): del self.__x\n"
"    x = property(getx, setx, delx, \"I'm the 'x' property.\")"

#: ../../howto/descriptor.rst:992
msgid ""
"To see how :func:`property` is implemented in terms of the descriptor "
"protocol, here is a pure Python equivalent:"
msgstr ""

#: ../../howto/descriptor.rst:995
msgid ""
"class Property:\n"
"    \"Emulate PyProperty_Type() in Objects/descrobject.c\"\n"
"\n"
"    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n"
"        self.fget = fget\n"
"        self.fset = fset\n"
"        self.fdel = fdel\n"
"        if doc is None and fget is not None:\n"
"            doc = fget.__doc__\n"
"        self.__doc__ = doc\n"
"        self._name = ''\n"
"\n"
"    def __set_name__(self, owner, name):\n"
"        self._name = name\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        if obj is None:\n"
"            return self\n"
"        if self.fget is None:\n"
"            raise AttributeError(\n"
"                f'property {self._name!r} of {type(obj).__name__!r} object "
"has no getter'\n"
"             )\n"
"        return self.fget(obj)\n"
"\n"
"    def __set__(self, obj, value):\n"
"        if self.fset is None:\n"
"            raise AttributeError(\n"
"                f'property {self._name!r} of {type(obj).__name__!r} object "
"has no setter'\n"
"             )\n"
"        self.fset(obj, value)\n"
"\n"
"    def __delete__(self, obj):\n"
"        if self.fdel is None:\n"
"            raise AttributeError(\n"
"                f'property {self._name!r} of {type(obj).__name__!r} object "
"has no deleter'\n"
"             )\n"
"        self.fdel(obj)\n"
"\n"
"    def getter(self, fget):\n"
"        prop = type(self)(fget, self.fset, self.fdel, self.__doc__)\n"
"        prop._name = self._name\n"
"        return prop\n"
"\n"
"    def setter(self, fset):\n"
"        prop = type(self)(self.fget, fset, self.fdel, self.__doc__)\n"
"        prop._name = self._name\n"
"        return prop\n"
"\n"
"    def deleter(self, fdel):\n"
"        prop = type(self)(self.fget, self.fset, fdel, self.__doc__)\n"
"        prop._name = self._name\n"
"        return prop"
msgstr ""

#: ../../howto/descriptor.rst:1132
msgid ""
"The :func:`property` builtin helps whenever a user interface has granted "
"attribute access and then subsequent changes require the intervention of a "
"method."
msgstr ""

#: ../../howto/descriptor.rst:1136
msgid ""
"For instance, a spreadsheet class may grant access to a cell value through "
"``Cell('b10').value``. Subsequent improvements to the program require the "
"cell to be recalculated on every access; however, the programmer does not "
"want to affect existing client code accessing the attribute directly.  The "
"solution is to wrap access to the value attribute in a property data "
"descriptor:"
msgstr ""

#: ../../howto/descriptor.rst:1142
msgid ""
"class Cell:\n"
"    ...\n"
"\n"
"    @property\n"
"    def value(self):\n"
"        \"Recalculate the cell before returning value\"\n"
"        self.recalc()\n"
"        return self._value"
msgstr ""

#: ../../howto/descriptor.rst:1153
msgid ""
"Either the built-in :func:`property` or our :func:`Property` equivalent "
"would work in this example."
msgstr ""

#: ../../howto/descriptor.rst:1158
msgid "Functions and methods"
msgstr ""

#: ../../howto/descriptor.rst:1160
msgid ""
"Python's object oriented features are built upon a function based "
"environment. Using non-data descriptors, the two are merged seamlessly."
msgstr ""

#: ../../howto/descriptor.rst:1163
msgid ""
"Functions stored in class dictionaries get turned into methods when invoked. "
"Methods only differ from regular functions in that the object instance is "
"prepended to the other arguments.  By convention, the instance is called "
"*self* but could be called *this* or any other variable name."
msgstr ""

#: ../../howto/descriptor.rst:1168
msgid ""
"Methods can be created manually with :class:`types.MethodType` which is "
"roughly equivalent to:"
msgstr ""

#: ../../howto/descriptor.rst:1171
msgid ""
"class MethodType:\n"
"    \"Emulate PyMethod_Type in Objects/classobject.c\"\n"
"\n"
"    def __init__(self, func, obj):\n"
"        self.__func__ = func\n"
"        self.__self__ = obj\n"
"\n"
"    def __call__(self, *args, **kwargs):\n"
"        func = self.__func__\n"
"        obj = self.__self__\n"
"        return func(obj, *args, **kwargs)"
msgstr ""

#: ../../howto/descriptor.rst:1185
msgid ""
"To support automatic creation of methods, functions include the :meth:"
"`__get__` method for binding methods during attribute access.  This means "
"that functions are non-data descriptors that return bound methods during "
"dotted lookup from an instance.  Here's how it works:"
msgstr ""

#: ../../howto/descriptor.rst:1190
msgid ""
"class Function:\n"
"    ...\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        \"Simulate func_descr_get() in Objects/funcobject.c\"\n"
"        if obj is None:\n"
"            return self\n"
"        return MethodType(self, obj)"
msgstr ""

#: ../../howto/descriptor.rst:1201
msgid ""
"Running the following class in the interpreter shows how the function "
"descriptor works in practice:"
msgstr ""

#: ../../howto/descriptor.rst:1204
msgid ""
"class D:\n"
"    def f(self, x):\n"
"         return x"
msgstr ""
"class D:\n"
"    def f(self, x):\n"
"         return x"

#: ../../howto/descriptor.rst:1210
msgid ""
"The function has a :term:`qualified name` attribute to support introspection:"
msgstr ""

#: ../../howto/descriptor.rst:1212
msgid ""
">>> D.f.__qualname__\n"
"'D.f'"
msgstr ""
">>> D.f.__qualname__\n"
"'D.f'"

#: ../../howto/descriptor.rst:1217
msgid ""
"Accessing the function through the class dictionary does not invoke :meth:"
"`__get__`.  Instead, it just returns the underlying function object::"
msgstr ""

#: ../../howto/descriptor.rst:1220
msgid ""
">>> D.__dict__['f']\n"
"<function D.f at 0x00C45070>"
msgstr ""
">>> D.__dict__['f']\n"
"<function D.f at 0x00C45070>"

#: ../../howto/descriptor.rst:1223
msgid ""
"Dotted access from a class calls :meth:`__get__` which just returns the "
"underlying function unchanged::"
msgstr ""

#: ../../howto/descriptor.rst:1226
msgid ""
">>> D.f\n"
"<function D.f at 0x00C45070>"
msgstr ""
">>> D.f\n"
"<function D.f at 0x00C45070>"

#: ../../howto/descriptor.rst:1229
msgid ""
"The interesting behavior occurs during dotted access from an instance.  The "
"dotted lookup calls :meth:`__get__` which returns a bound method object::"
msgstr ""

#: ../../howto/descriptor.rst:1232
msgid ""
">>> d = D()\n"
">>> d.f\n"
"<bound method D.f of <__main__.D object at 0x00B18C90>>"
msgstr ""
">>> d = D()\n"
">>> d.f\n"
"<bound method D.f of <__main__.D object at 0x00B18C90>>"

#: ../../howto/descriptor.rst:1236
msgid ""
"Internally, the bound method stores the underlying function and the bound "
"instance::"
msgstr ""

#: ../../howto/descriptor.rst:1239
msgid ""
">>> d.f.__func__\n"
"<function D.f at 0x00C45070>\n"
"\n"
">>> d.f.__self__\n"
"<__main__.D object at 0x00B18C90>"
msgstr ""
">>> d.f.__func__\n"
"<function D.f at 0x00C45070>\n"
"\n"
">>> d.f.__self__\n"
"<__main__.D object at 0x00B18C90>"

#: ../../howto/descriptor.rst:1245
msgid ""
"If you have ever wondered where *self* comes from in regular methods or "
"where *cls* comes from in class methods, this is it!"
msgstr ""

#: ../../howto/descriptor.rst:1250
msgid "Kinds of methods"
msgstr ""

#: ../../howto/descriptor.rst:1252
msgid ""
"Non-data descriptors provide a simple mechanism for variations on the usual "
"patterns of binding functions into methods."
msgstr ""

#: ../../howto/descriptor.rst:1255
msgid ""
"To recap, functions have a :meth:`__get__` method so that they can be "
"converted to a method when accessed as attributes.  The non-data descriptor "
"transforms an ``obj.f(*args)`` call into ``f(obj, *args)``.  Calling ``cls."
"f(*args)`` becomes ``f(*args)``."
msgstr ""

#: ../../howto/descriptor.rst:1260
msgid "This chart summarizes the binding and its two most useful variants:"
msgstr ""

#: ../../howto/descriptor.rst:1263
msgid "Transformation"
msgstr ""

#: ../../howto/descriptor.rst:1263
msgid "Called from an object"
msgstr ""

#: ../../howto/descriptor.rst:1263
msgid "Called from a class"
msgstr ""

#: ../../howto/descriptor.rst:1266
msgid "function"
msgstr "函式"

#: ../../howto/descriptor.rst:1266
msgid "f(obj, \\*args)"
msgstr "f(obj, \\*args)"

#: ../../howto/descriptor.rst:1266 ../../howto/descriptor.rst:1268
msgid "f(\\*args)"
msgstr "f(\\*args)"

#: ../../howto/descriptor.rst:1268
msgid "staticmethod"
msgstr "staticmethod"

#: ../../howto/descriptor.rst:1270
msgid "classmethod"
msgstr "classmethod"

#: ../../howto/descriptor.rst:1270
msgid "f(type(obj), \\*args)"
msgstr "f(type(obj), \\*args)"

#: ../../howto/descriptor.rst:1270
msgid "f(cls, \\*args)"
msgstr "f(cls, \\*args)"

#: ../../howto/descriptor.rst:1275
msgid "Static methods"
msgstr ""

#: ../../howto/descriptor.rst:1277
msgid ""
"Static methods return the underlying function without changes.  Calling "
"either ``c.f`` or ``C.f`` is the equivalent of a direct lookup into ``object."
"__getattribute__(c, \"f\")`` or ``object.__getattribute__(C, \"f\")``. As a "
"result, the function becomes identically accessible from either an object or "
"a class."
msgstr ""

#: ../../howto/descriptor.rst:1283
msgid ""
"Good candidates for static methods are methods that do not reference the "
"``self`` variable."
msgstr ""

#: ../../howto/descriptor.rst:1286
msgid ""
"For instance, a statistics package may include a container class for "
"experimental data.  The class provides normal methods for computing the "
"average, mean, median, and other descriptive statistics that depend on the "
"data. However, there may be useful functions which are conceptually related "
"but do not depend on the data.  For instance, ``erf(x)`` is handy conversion "
"routine that comes up in statistical work but does not directly depend on a "
"particular dataset. It can be called either from an object or the class:  "
"``s.erf(1.5) --> .9332`` or ``Sample.erf(1.5) --> .9332``."
msgstr ""

#: ../../howto/descriptor.rst:1295
msgid ""
"Since static methods return the underlying function with no changes, the "
"example calls are unexciting:"
msgstr ""

#: ../../howto/descriptor.rst:1298
msgid ""
"class E:\n"
"    @staticmethod\n"
"    def f(x):\n"
"        return x * 10"
msgstr ""
"class E:\n"
"    @staticmethod\n"
"    def f(x):\n"
"        return x * 10"

#: ../../howto/descriptor.rst:1305
msgid ""
">>> E.f(3)\n"
"30\n"
">>> E().f(3)\n"
"30"
msgstr ""
">>> E.f(3)\n"
"30\n"
">>> E().f(3)\n"
"30"

#: ../../howto/descriptor.rst:1312
msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`staticmethod` would look like this:"
msgstr ""

#: ../../howto/descriptor.rst:1315
msgid ""
"import functools\n"
"\n"
"class StaticMethod:\n"
"    \"Emulate PyStaticMethod_Type() in Objects/funcobject.c\"\n"
"\n"
"    def __init__(self, f):\n"
"        self.f = f\n"
"        functools.update_wrapper(self, f)\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        return self.f\n"
"\n"
"    def __call__(self, *args, **kwds):\n"
"        return self.f(*args, **kwds)"
msgstr ""

#: ../../howto/descriptor.rst:1332
msgid ""
"The :func:`functools.update_wrapper` call adds a ``__wrapped__`` attribute "
"that refers to the underlying function.  Also it carries forward the "
"attributes necessary to make the wrapper look like the wrapped function: :"
"attr:`~function.__name__`, :attr:`~function.__qualname__`, :attr:`~function."
"__doc__`, and :attr:`~function.__annotations__`."
msgstr ""

#: ../../howto/descriptor.rst:1401
msgid "Class methods"
msgstr ""

#: ../../howto/descriptor.rst:1403
msgid ""
"Unlike static methods, class methods prepend the class reference to the "
"argument list before calling the function.  This format is the same for "
"whether the caller is an object or a class:"
msgstr ""

#: ../../howto/descriptor.rst:1407
msgid ""
"class F:\n"
"    @classmethod\n"
"    def f(cls, x):\n"
"        return cls.__name__, x"
msgstr ""
"class F:\n"
"    @classmethod\n"
"    def f(cls, x):\n"
"        return cls.__name__, x"

#: ../../howto/descriptor.rst:1414
msgid ""
">>> F.f(3)\n"
"('F', 3)\n"
">>> F().f(3)\n"
"('F', 3)"
msgstr ""
">>> F.f(3)\n"
"('F', 3)\n"
">>> F().f(3)\n"
"('F', 3)"

#: ../../howto/descriptor.rst:1421
msgid ""
"This behavior is useful whenever the method only needs to have a class "
"reference and does not rely on data stored in a specific instance.  One use "
"for class methods is to create alternate class constructors.  For example, "
"the classmethod :func:`dict.fromkeys` creates a new dictionary from a list "
"of keys.  The pure Python equivalent is:"
msgstr ""

#: ../../howto/descriptor.rst:1427
msgid ""
"class Dict(dict):\n"
"    @classmethod\n"
"    def fromkeys(cls, iterable, value=None):\n"
"        \"Emulate dict_fromkeys() in Objects/dictobject.c\"\n"
"        d = cls()\n"
"        for key in iterable:\n"
"            d[key] = value\n"
"        return d"
msgstr ""

#: ../../howto/descriptor.rst:1438
msgid "Now a new dictionary of unique keys can be constructed like this:"
msgstr ""

#: ../../howto/descriptor.rst:1440
msgid ""
">>> d = Dict.fromkeys('abracadabra')\n"
">>> type(d) is Dict\n"
"True\n"
">>> d\n"
"{'a': None, 'b': None, 'r': None, 'c': None, 'd': None}"
msgstr ""
">>> d = Dict.fromkeys('abracadabra')\n"
">>> type(d) is Dict\n"
"True\n"
">>> d\n"
"{'a': None, 'b': None, 'r': None, 'c': None, 'd': None}"

#: ../../howto/descriptor.rst:1448
msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`classmethod` would look like this:"
msgstr ""

#: ../../howto/descriptor.rst:1451
msgid ""
"import functools\n"
"\n"
"class ClassMethod:\n"
"    \"Emulate PyClassMethod_Type() in Objects/funcobject.c\"\n"
"\n"
"    def __init__(self, f):\n"
"        self.f = f\n"
"        functools.update_wrapper(self, f)\n"
"\n"
"    def __get__(self, obj, cls=None):\n"
"        if cls is None:\n"
"            cls = type(obj)\n"
"        if hasattr(type(self.f), '__get__'):\n"
"            # This code path was added in Python 3.9\n"
"            # and was deprecated in Python 3.11.\n"
"            return self.f.__get__(cls, cls)\n"
"        return MethodType(self.f, cls)"
msgstr ""

#: ../../howto/descriptor.rst:1526
msgid ""
"The code path for ``hasattr(type(self.f), '__get__')`` was added in Python "
"3.9 and makes it possible for :func:`classmethod` to support chained "
"decorators.  For example, a classmethod and property could be chained "
"together.  In Python 3.11, this functionality was deprecated."
msgstr ""

#: ../../howto/descriptor.rst:1531
msgid ""
"class G:\n"
"    @classmethod\n"
"    @property\n"
"    def __doc__(cls):\n"
"        return f'A doc for {cls.__name__!r}'"
msgstr ""
"class G:\n"
"    @classmethod\n"
"    @property\n"
"    def __doc__(cls):\n"
"        return f'A doc for {cls.__name__!r}'"

#: ../../howto/descriptor.rst:1539
msgid ""
">>> G.__doc__\n"
"\"A doc for 'G'\""
msgstr ""
">>> G.__doc__\n"
"\"A doc for 'G'\""

#: ../../howto/descriptor.rst:1544
msgid ""
"The :func:`functools.update_wrapper` call in ``ClassMethod`` adds a "
"``__wrapped__`` attribute that refers to the underlying function.  Also it "
"carries forward the attributes necessary to make the wrapper look like the "
"wrapped function: :attr:`~function.__name__`, :attr:`~function."
"__qualname__`, :attr:`~function.__doc__`, and :attr:`~function."
"__annotations__`."
msgstr ""

#: ../../howto/descriptor.rst:1553
msgid "Member objects and __slots__"
msgstr ""

#: ../../howto/descriptor.rst:1555
msgid ""
"When a class defines ``__slots__``, it replaces instance dictionaries with a "
"fixed-length array of slot values.  From a user point of view that has "
"several effects:"
msgstr ""

#: ../../howto/descriptor.rst:1559
msgid ""
"1. Provides immediate detection of bugs due to misspelled attribute "
"assignments.  Only attribute names specified in ``__slots__`` are allowed:"
msgstr ""

#: ../../howto/descriptor.rst:1562
msgid ""
"class Vehicle:\n"
"    __slots__ = ('id_number', 'make', 'model')"
msgstr ""
"class Vehicle:\n"
"    __slots__ = ('id_number', 'make', 'model')"

#: ../../howto/descriptor.rst:1567
msgid ""
">>> auto = Vehicle()\n"
">>> auto.id_nubmer = 'VYE483814LQEX'\n"
"Traceback (most recent call last):\n"
"    ...\n"
"AttributeError: 'Vehicle' object has no attribute 'id_nubmer'"
msgstr ""
">>> auto = Vehicle()\n"
">>> auto.id_nubmer = 'VYE483814LQEX'\n"
"Traceback (most recent call last):\n"
"    ...\n"
"AttributeError: 'Vehicle' object has no attribute 'id_nubmer'"

#: ../../howto/descriptor.rst:1575
msgid ""
"2. Helps create immutable objects where descriptors manage access to private "
"attributes stored in ``__slots__``:"
msgstr ""

#: ../../howto/descriptor.rst:1578
msgid ""
"class Immutable:\n"
"\n"
"    __slots__ = ('_dept', '_name')          # Replace the instance "
"dictionary\n"
"\n"
"    def __init__(self, dept, name):\n"
"        self._dept = dept                   # Store to private attribute\n"
"        self._name = name                   # Store to private attribute\n"
"\n"
"    @property                               # Read-only descriptor\n"
"    def dept(self):\n"
"        return self._dept\n"
"\n"
"    @property\n"
"    def name(self):                         # Read-only descriptor\n"
"        return self._name"
msgstr ""

#: ../../howto/descriptor.rst:1596
msgid ""
">>> mark = Immutable('Botany', 'Mark Watney')\n"
">>> mark.dept\n"
"'Botany'\n"
">>> mark.dept = 'Space Pirate'\n"
"Traceback (most recent call last):\n"
"    ...\n"
"AttributeError: property 'dept' of 'Immutable' object has no setter\n"
">>> mark.location = 'Mars'\n"
"Traceback (most recent call last):\n"
"    ...\n"
"AttributeError: 'Immutable' object has no attribute 'location'"
msgstr ""
">>> mark = Immutable('Botany', 'Mark Watney')\n"
">>> mark.dept\n"
"'Botany'\n"
">>> mark.dept = 'Space Pirate'\n"
"Traceback (most recent call last):\n"
"    ...\n"
"AttributeError: property 'dept' of 'Immutable' object has no setter\n"
">>> mark.location = 'Mars'\n"
"Traceback (most recent call last):\n"
"    ...\n"
"AttributeError: 'Immutable' object has no attribute 'location'"

#: ../../howto/descriptor.rst:1610
msgid ""
"3. Saves memory.  On a 64-bit Linux build, an instance with two attributes "
"takes 48 bytes with ``__slots__`` and 152 bytes without.  This `flyweight "
"design pattern <https://en.wikipedia.org/wiki/Flyweight_pattern>`_ likely "
"only matters when a large number of instances are going to be created."
msgstr ""

#: ../../howto/descriptor.rst:1615
msgid ""
"4. Improves speed.  Reading instance variables is 35% faster with "
"``__slots__`` (as measured with Python 3.10 on an Apple M1 processor)."
msgstr ""

#: ../../howto/descriptor.rst:1618
msgid ""
"5. Blocks tools like :func:`functools.cached_property` which require an "
"instance dictionary to function correctly:"
msgstr ""

#: ../../howto/descriptor.rst:1621
msgid ""
"from functools import cached_property\n"
"\n"
"class CP:\n"
"    __slots__ = ()                          # Eliminates the instance dict\n"
"\n"
"    @cached_property                        # Requires an instance dict\n"
"    def pi(self):\n"
"        return 4 * sum((-1.0)**n / (2.0*n + 1.0)\n"
"                       for n in reversed(range(100_000)))"
msgstr ""

#: ../../howto/descriptor.rst:1633
msgid ""
">>> CP().pi\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: No '__dict__' attribute on 'CP' instance to cache 'pi' property."
msgstr ""
">>> CP().pi\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: No '__dict__' attribute on 'CP' instance to cache 'pi' property."

#: ../../howto/descriptor.rst:1640
msgid ""
"It is not possible to create an exact drop-in pure Python version of "
"``__slots__`` because it requires direct access to C structures and control "
"over object memory allocation.  However, we can build a mostly faithful "
"simulation where the actual C structure for slots is emulated by a private "
"``_slotvalues`` list.  Reads and writes to that private structure are "
"managed by member descriptors:"
msgstr ""

#: ../../howto/descriptor.rst:1647
msgid ""
"null = object()\n"
"\n"
"class Member:\n"
"\n"
"    def __init__(self, name, clsname, offset):\n"
"        'Emulate PyMemberDef in Include/structmember.h'\n"
"        # Also see descr_new() in Objects/descrobject.c\n"
"        self.name = name\n"
"        self.clsname = clsname\n"
"        self.offset = offset\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        'Emulate member_get() in Objects/descrobject.c'\n"
"        # Also see PyMember_GetOne() in Python/structmember.c\n"
"        if obj is None:\n"
"            return self\n"
"        value = obj._slotvalues[self.offset]\n"
"        if value is null:\n"
"            raise AttributeError(self.name)\n"
"        return value\n"
"\n"
"    def __set__(self, obj, value):\n"
"        'Emulate member_set() in Objects/descrobject.c'\n"
"        obj._slotvalues[self.offset] = value\n"
"\n"
"    def __delete__(self, obj):\n"
"        'Emulate member_delete() in Objects/descrobject.c'\n"
"        value = obj._slotvalues[self.offset]\n"
"        if value is null:\n"
"            raise AttributeError(self.name)\n"
"        obj._slotvalues[self.offset] = null\n"
"\n"
"    def __repr__(self):\n"
"        'Emulate member_repr() in Objects/descrobject.c'\n"
"        return f'<Member {self.name!r} of {self.clsname!r}>'"
msgstr ""

#: ../../howto/descriptor.rst:1685
msgid ""
"The :meth:`type.__new__` method takes care of adding member objects to class "
"variables:"
msgstr ""

#: ../../howto/descriptor.rst:1688
msgid ""
"class Type(type):\n"
"    'Simulate how the type metaclass adds member objects for slots'\n"
"\n"
"    def __new__(mcls, clsname, bases, mapping, **kwargs):\n"
"        'Emulate type_new() in Objects/typeobject.c'\n"
"        # type_new() calls PyTypeReady() which calls add_methods()\n"
"        slot_names = mapping.get('slot_names', [])\n"
"        for offset, name in enumerate(slot_names):\n"
"            mapping[name] = Member(name, clsname, offset)\n"
"        return type.__new__(mcls, clsname, bases, mapping, **kwargs)"
msgstr ""

#: ../../howto/descriptor.rst:1701
msgid ""
"The :meth:`object.__new__` method takes care of creating instances that have "
"slots instead of an instance dictionary.  Here is a rough simulation in pure "
"Python:"
msgstr ""

#: ../../howto/descriptor.rst:1705
msgid ""
"class Object:\n"
"    'Simulate how object.__new__() allocates memory for __slots__'\n"
"\n"
"    def __new__(cls, *args, **kwargs):\n"
"        'Emulate object_new() in Objects/typeobject.c'\n"
"        inst = super().__new__(cls)\n"
"        if hasattr(cls, 'slot_names'):\n"
"            empty_slots = [null] * len(cls.slot_names)\n"
"            object.__setattr__(inst, '_slotvalues', empty_slots)\n"
"        return inst\n"
"\n"
"    def __setattr__(self, name, value):\n"
"        'Emulate _PyObject_GenericSetAttrWithDict() Objects/object.c'\n"
"        cls = type(self)\n"
"        if hasattr(cls, 'slot_names') and name not in cls.slot_names:\n"
"            raise AttributeError(\n"
"                f'{cls.__name__!r} object has no attribute {name!r}'\n"
"            )\n"
"        super().__setattr__(name, value)\n"
"\n"
"    def __delattr__(self, name):\n"
"        'Emulate _PyObject_GenericSetAttrWithDict() Objects/object.c'\n"
"        cls = type(self)\n"
"        if hasattr(cls, 'slot_names') and name not in cls.slot_names:\n"
"            raise AttributeError(\n"
"                f'{cls.__name__!r} object has no attribute {name!r}'\n"
"            )\n"
"        super().__delattr__(name)"
msgstr ""

#: ../../howto/descriptor.rst:1736
msgid ""
"To use the simulation in a real class, just inherit from :class:`Object` and "
"set the :term:`metaclass` to :class:`Type`:"
msgstr ""

#: ../../howto/descriptor.rst:1739
msgid ""
"class H(Object, metaclass=Type):\n"
"    'Instance variables stored in slots'\n"
"\n"
"    slot_names = ['x', 'y']\n"
"\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y"
msgstr ""

#: ../../howto/descriptor.rst:1750
msgid ""
"At this point, the metaclass has loaded member objects for *x* and *y*::"
msgstr ""

#: ../../howto/descriptor.rst:1752
msgid ""
">>> from pprint import pp\n"
">>> pp(dict(vars(H)))\n"
"{'__module__': '__main__',\n"
" '__doc__': 'Instance variables stored in slots',\n"
" 'slot_names': ['x', 'y'],\n"
" '__init__': <function H.__init__ at 0x7fb5d302f9d0>,\n"
" 'x': <Member 'x' of 'H'>,\n"
" 'y': <Member 'y' of 'H'>}"
msgstr ""
">>> from pprint import pp\n"
">>> pp(dict(vars(H)))\n"
"{'__module__': '__main__',\n"
" '__doc__': 'Instance variables stored in slots',\n"
" 'slot_names': ['x', 'y'],\n"
" '__init__': <function H.__init__ at 0x7fb5d302f9d0>,\n"
" 'x': <Member 'x' of 'H'>,\n"
" 'y': <Member 'y' of 'H'>}"

#: ../../howto/descriptor.rst:1771
msgid ""
"When instances are created, they have a ``slot_values`` list where the "
"attributes are stored:"
msgstr ""

#: ../../howto/descriptor.rst:1774
msgid ""
">>> h = H(10, 20)\n"
">>> vars(h)\n"
"{'_slotvalues': [10, 20]}\n"
">>> h.x = 55\n"
">>> vars(h)\n"
"{'_slotvalues': [55, 20]}"
msgstr ""
">>> h = H(10, 20)\n"
">>> vars(h)\n"
"{'_slotvalues': [10, 20]}\n"
">>> h.x = 55\n"
">>> vars(h)\n"
"{'_slotvalues': [55, 20]}"

#: ../../howto/descriptor.rst:1783
msgid "Misspelled or unassigned attributes will raise an exception:"
msgstr ""

#: ../../howto/descriptor.rst:1785
msgid ""
">>> h.xz\n"
"Traceback (most recent call last):\n"
"    ...\n"
"AttributeError: 'H' object has no attribute 'xz'"
msgstr ""
">>> h.xz\n"
"Traceback (most recent call last):\n"
"    ...\n"
"AttributeError: 'H' object has no attribute 'xz'"
