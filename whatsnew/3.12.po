# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-05 00:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../whatsnew/3.12.rst:4
msgid "What's New In Python 3.12"
msgstr "Python 3.12 有什麼新功能"

#: ../../whatsnew/3.12.rst:0
msgid "Release"
msgstr "發行版本"

#: ../../whatsnew/3.12.rst:6
msgid "|release|"
msgstr "|release|"

#: ../../whatsnew/3.12.rst:0
msgid "Date"
msgstr "日期"

#: ../../whatsnew/3.12.rst:7
msgid "|today|"
msgstr "|today|"

#: ../../whatsnew/3.12.rst:49
msgid ""
"This article explains the new features in Python 3.12, compared to 3.11."
msgstr "此文章解釋了 Python 3.12 和 3.11 相比多了哪些新特性。"

#: ../../whatsnew/3.12.rst:51
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr "若想了解完整細節，請見\\ :ref:`更動日誌 <changelog>`。"

#: ../../whatsnew/3.12.rst:55
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.12 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""

#: ../../whatsnew/3.12.rst:61
msgid "Summary -- Release highlights"
msgstr "發布重點摘要"

#: ../../whatsnew/3.12.rst:69
msgid "New grammar features:"
msgstr "新增語法特性："

#: ../../whatsnew/3.12.rst:71
msgid ":pep:`701`: Syntactic formalization of f-strings"
msgstr ""

#: ../../whatsnew/3.12.rst:73
msgid "Interpreter improvements:"
msgstr ""

#: ../../whatsnew/3.12.rst:75
msgid ":ref:`whatsnew312-pep684`"
msgstr ""

#: ../../whatsnew/3.12.rst:77
msgid "New typing features:"
msgstr "新增型別特性："

#: ../../whatsnew/3.12.rst:79
msgid ":pep:`688`: Making the buffer protocol accessible in Python"
msgstr ""

#: ../../whatsnew/3.12.rst:81
msgid ":ref:`whatsnew312-pep692`"
msgstr ":ref:`whatsnew312-pep692`"

#: ../../whatsnew/3.12.rst:83
msgid ":ref:`whatsnew312-pep695`"
msgstr ":ref:`whatsnew312-pep695`"

#: ../../whatsnew/3.12.rst:85
msgid ":pep:`698`: Override Decorator for Static Typing"
msgstr ""

#: ../../whatsnew/3.12.rst:87
msgid "Important deprecations, removals or restrictions:"
msgstr ""

#: ../../whatsnew/3.12.rst:89
msgid ":pep:`623`: Remove wstr from Unicode"
msgstr ""

#: ../../whatsnew/3.12.rst:91
msgid ""
":pep:`632`: Remove the ``distutils`` package. See `the migration guide "
"<https://peps.python.org/pep-0632/#migration-advice>`_ for advice on its "
"replacement."
msgstr ""

#: ../../whatsnew/3.12.rst:96
msgid "Improved Error Messages"
msgstr ""

#: ../../whatsnew/3.12.rst:98
msgid ""
"Modules from the standard library are now potentially suggested as part of "
"the error messages displayed by the interpreter when a :exc:`NameError` is "
"raised to the top level. Contributed by Pablo Galindo in :gh:`98254`."
msgstr ""

#: ../../whatsnew/3.12.rst:107
msgid ""
"Improve the error suggestion for :exc:`NameError` exceptions for instances. "
"Now if a :exc:`NameError` is raised in a method and the instance has an "
"attribute that's exactly equal to the name in the exception, the suggestion "
"will include ``self.<NAME>`` instead of the closest match in the method "
"scope. Contributed by Pablo Galindo in :gh:`99139`."
msgstr ""

#: ../../whatsnew/3.12.rst:128
msgid ""
"Improve the :exc:`SyntaxError` error message when the user types ``import x "
"from y`` instead of ``from y import x``. Contributed by Pablo Galindo in :gh:"
"`98931`."
msgstr ""

#: ../../whatsnew/3.12.rst:138
msgid ""
":exc:`ImportError` exceptions raised from failed ``from <module> import "
"<name>`` statements now include suggestions for the value of ``<name>`` "
"based on the available names in ``<module>``. Contributed by Pablo Galindo "
"in :gh:`91058`."
msgstr ""

#: ../../whatsnew/3.12.rst:149 ../../whatsnew/3.12.rst:1639
msgid "New Features"
msgstr "新增特性"

#: ../../whatsnew/3.12.rst:154
msgid "PEP 701: Syntactic formalization of f-strings"
msgstr ""

#: ../../whatsnew/3.12.rst:156
msgid ""
":pep:`701` lifts some restrictions on the usage of f-strings. Expression "
"components inside f-strings can now be any valid Python expression including "
"backslashes, unicode escaped sequences, multi-line expressions, comments and "
"strings reusing the same quote as the containing f-string. Let's cover these "
"in detail:"
msgstr ""

#: ../../whatsnew/3.12.rst:161
msgid ""
"Quote reuse: in Python 3.11, reusing the same quotes as the containing f-"
"string raises a :exc:`SyntaxError`, forcing the user to either use other "
"available quotes (like using double quotes or triple quotes if the f-string "
"uses single quotes). In Python 3.12, you can now do things like this:"
msgstr ""

#: ../../whatsnew/3.12.rst:170
msgid ""
"Note that before this change there was no explicit limit in how f-strings "
"can be nested, but the fact that string quotes cannot be reused inside the "
"expression component of f-strings made it impossible to nest f-strings "
"arbitrarily. In fact, this is the most nested f-string that could be written:"
msgstr ""

#: ../../whatsnew/3.12.rst:178
msgid ""
"As now f-strings can contain any valid Python expression inside expression "
"components, it is now possible to nest f-strings arbitrarily:"
msgstr ""

#: ../../whatsnew/3.12.rst:184
msgid ""
"Multi-line expressions and comments: In Python 3.11, f-strings expressions "
"must be defined in a single line even if outside f-strings expressions could "
"span multiple lines (like literal lists being defined over multiple lines), "
"making them harder to read. In Python 3.12 you can now define expressions "
"spanning multiple lines and include comments on them:"
msgstr ""

#: ../../whatsnew/3.12.rst:197
msgid ""
"Backslashes and unicode characters: before Python 3.12 f-string expressions "
"couldn't contain any ``\\`` character. This also affected unicode escaped "
"sequences (such as ``\\N{snowman}``) as these contain the ``\\N`` part that "
"previously could not be part of expression components of f-strings. Now, you "
"can define expressions like this:"
msgstr ""

#: ../../whatsnew/3.12.rst:210
msgid "See :pep:`701` for more details."
msgstr "詳情請見 :pep:`701`。"

#: ../../whatsnew/3.12.rst:212
msgid ""
"As a positive side-effect of how this feature has been implemented (by "
"parsing f-strings with the PEG parser (see :pep:`617`), now error messages "
"for f-strings are more precise and include the exact location of the error. "
"For example, in Python 3.11, the following f-string raises a :exc:"
"`SyntaxError`:"
msgstr ""

#: ../../whatsnew/3.12.rst:225
msgid ""
"but the error message doesn't include the exact location of the error within "
"the line and also has the expression artificially surrounded by parentheses. "
"In Python 3.12, as f-strings are parsed with the PEG parser, error messages "
"can be more precise and show the entire line:"
msgstr ""

#: ../../whatsnew/3.12.rst:237
msgid ""
"(Contributed by Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristián "
"Maureira-Fredes and Marta Gómez in :gh:`102856`. PEP written by Pablo "
"Galindo, Batuhan Taskaya, Lysandros Nikolaou and Marta Gómez)."
msgstr ""

#: ../../whatsnew/3.12.rst:244
msgid "PEP 709: Comprehension inlining"
msgstr ""

#: ../../whatsnew/3.12.rst:246
msgid ""
"Dictionary, list, and set comprehensions are now inlined, rather than "
"creating a new single-use function object for each execution of the "
"comprehension. This speeds up execution of a comprehension by up to 2x."
msgstr ""

#: ../../whatsnew/3.12.rst:250
msgid ""
"Comprehension iteration variables remain isolated; they don't overwrite a "
"variable of the same name in the outer scope, nor are they visible after the "
"comprehension. This isolation is now maintained via stack/locals "
"manipulation, not via separate function scope."
msgstr ""

#: ../../whatsnew/3.12.rst:255
msgid "Inlining does result in a few visible behavior changes:"
msgstr ""

#: ../../whatsnew/3.12.rst:257
msgid ""
"There is no longer a separate frame for the comprehension in tracebacks, and "
"tracing/profiling no longer shows the comprehension as a function call."
msgstr ""

#: ../../whatsnew/3.12.rst:259
msgid ""
"Calling :func:`locals` inside a comprehension now includes variables from "
"outside the comprehension, and no longer includes the synthetic ``.0`` "
"variable for the comprehension \"argument\"."
msgstr ""

#: ../../whatsnew/3.12.rst:262
msgid ""
"A comprehension iterating directly over ``locals()`` (e.g. ``[k for k in "
"locals()]``) may see \"RuntimeError: dictionary changed size during "
"iteration\" when run under tracing (e.g. code coverage measurement). This is "
"the same behavior already seen in e.g. ``for k in locals():``. To avoid the "
"error, first create a list of keys to iterate over: ``keys = list(locals()); "
"[k for k in keys]``."
msgstr ""

#: ../../whatsnew/3.12.rst:269
msgid "Contributed by Carl Meyer and Vladimir Matveev in :pep:`709`."
msgstr ""

#: ../../whatsnew/3.12.rst:272
msgid "PEP 688: Making the buffer protocol accessible in Python"
msgstr ""

#: ../../whatsnew/3.12.rst:274
msgid ""
":pep:`688` introduces a way to use the :ref:`buffer protocol "
"<bufferobjects>` from Python code. Classes that implement the :meth:`~object."
"__buffer__` method are now usable as buffer types."
msgstr ""

#: ../../whatsnew/3.12.rst:278
msgid ""
"The new :class:`collections.abc.Buffer` ABC provides a standard way to "
"represent buffer objects, for example in type annotations. The new :class:"
"`inspect.BufferFlags` enum represents the flags that can be used to "
"customize buffer creation. (Contributed by Jelle Zijlstra in :gh:`102500`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:287
msgid "PEP 684: A Per-Interpreter GIL"
msgstr ""

#: ../../whatsnew/3.12.rst:289
msgid ""
"Sub-interpreters may now be created with a unique GIL per interpreter. This "
"allows Python programs to take full advantage of multiple CPU cores."
msgstr ""

#: ../../whatsnew/3.12.rst:293
msgid ""
"Use the new :c:func:`Py_NewInterpreterFromConfig` function to create an "
"interpreter with its own GIL::"
msgstr ""

#: ../../whatsnew/3.12.rst:307
msgid ""
"For further examples how to use the C-API for sub-interpreters with a per-"
"interpreter GIL, see :source:`Modules/_xxsubinterpretersmodule.c`."
msgstr ""

#: ../../whatsnew/3.12.rst:310
msgid "A Python API is anticipated for 3.13.  (See :pep:`554`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:312
msgid "(Contributed by Eric Snow in :gh:`104210`, etc.)"
msgstr ""

#: ../../whatsnew/3.12.rst:315
msgid "New Features Related to Type Hints"
msgstr ""

#: ../../whatsnew/3.12.rst:317
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr ""

#: ../../whatsnew/3.12.rst:323
msgid "PEP 692: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr ""

#: ../../whatsnew/3.12.rst:325
msgid ""
"Typing ``**kwargs`` in a function signature as introduced by :pep:`484` "
"allowed for valid annotations only in cases where all of the ``**kwargs`` "
"were of the same type."
msgstr ""

#: ../../whatsnew/3.12.rst:329
msgid ""
"This PEP specifies a more precise way of typing ``**kwargs`` by relying on "
"typed dictionaries::"
msgstr ""

#: ../../whatsnew/3.12.rst:340
msgid "See :pep:`692` for more details."
msgstr ""

#: ../../whatsnew/3.12.rst:342
msgid "(Contributed by Franek Magiera in :gh:`103629`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:345
msgid "PEP 698: Override Decorator for Static Typing"
msgstr ""

#: ../../whatsnew/3.12.rst:347
msgid ""
"A new decorator :func:`typing.override` has been added to the :mod:`typing` "
"module. It indicates to type checkers that the method is intended to "
"override a method in a superclass. This allows type checkers to catch "
"mistakes where a method that is intended to override something in a base "
"class does not in fact do so."
msgstr ""

#: ../../whatsnew/3.12.rst:353
msgid "Example::"
msgstr ""

#: ../../whatsnew/3.12.rst:371
msgid "(Contributed by Steven Troxler in :gh:`101561`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:376
msgid "PEP 695: Type Parameter Syntax"
msgstr ""

#: ../../whatsnew/3.12.rst:378
msgid ""
"Generic classes and functions under :pep:`484` were declared using a verbose "
"syntax that left the scope of type parameters unclear and required explicit "
"declarations of variance."
msgstr ""

#: ../../whatsnew/3.12.rst:382
msgid ""
":pep:`695` introduces a new, more compact and explicit way to create :ref:"
"`generic classes <generic-classes>` and :ref:`functions <generic-"
"functions>`::"
msgstr ""

#: ../../whatsnew/3.12.rst:395
msgid ""
"In addition, the PEP introduces a new way to declare :ref:`type aliases "
"<type-aliases>` using the :keyword:`type` statement, which creates an "
"instance of :class:`~typing.TypeAliasType`::"
msgstr ""

#: ../../whatsnew/3.12.rst:401
msgid "Type aliases can also be :ref:`generic <generic-type-aliases>`::"
msgstr ""

#: ../../whatsnew/3.12.rst:405
msgid ""
"The new syntax allows declaring :class:`~typing.TypeVarTuple` and :class:"
"`~typing.ParamSpec` parameters, as well as :class:`~typing.TypeVar` "
"parameters with bounds or constraints::"
msgstr ""

#: ../../whatsnew/3.12.rst:414
msgid ""
"The value of type aliases and the bound and constraints of type variables "
"created through this syntax are evaluated only on demand (see :ref:`lazy-"
"evaluation`). This means type aliases are able to refer to other types "
"defined later in the file."
msgstr ""

#: ../../whatsnew/3.12.rst:419
msgid ""
"Type parameters declared through a type parameter list are visible within "
"the scope of the declaration and any nested scopes, but not in the outer "
"scope. For example, they can be used in the type annotations for the methods "
"of a generic class or in the class body. However, they cannot be used in the "
"module scope after the class is defined. See :ref:`type-params` for a "
"detailed description of the runtime semantics of type parameters."
msgstr ""

#: ../../whatsnew/3.12.rst:426
msgid ""
"In order to support these scoping semantics, a new kind of scope is "
"introduced, the :ref:`annotation scope <annotation-scopes>`. Annotation "
"scopes behave for the most part like function scopes, but interact "
"differently with enclosing class scopes. In Python 3.13, :term:`annotations "
"<annotation>` will also be evaluated in annotation scopes."
msgstr ""

#: ../../whatsnew/3.12.rst:432
msgid "See :pep:`695` for more details."
msgstr "詳情請見 :pep:`695`。"

#: ../../whatsnew/3.12.rst:434
msgid ""
"(PEP written by Eric Traut. Implementation by Jelle Zijlstra, Eric Traut, "
"and others in :gh:`103764`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:438
msgid "Other Language Changes"
msgstr "其他語言更動"

#: ../../whatsnew/3.12.rst:440
msgid ""
"Add :ref:`perf_profiling` through the new environment variable :envvar:"
"`PYTHONPERFSUPPORT`, the new command-line option :option:`-X perf <-X>`, as "
"well as the new :func:`sys.activate_stack_trampoline`, :func:`sys."
"deactivate_stack_trampoline`, and :func:`sys.is_stack_trampoline_active` "
"APIs. (Design by Pablo Galindo. Contributed by Pablo Galindo and Christian "
"Heimes with contributions from Gregory P. Smith [Google] and Mark Shannon "
"in :gh:`96123`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:450
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.14, "
"the default will switch to ``'data'``. (Contributed by Petr Viktorin in :pep:"
"`706`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:458
msgid ""
":class:`types.MappingProxyType` instances are now hashable if the underlying "
"mapping is hashable. (Contributed by Serhiy Storchaka in :gh:`87995`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:462
msgid ""
":class:`memoryview` now supports the half-float type (the \"e\" format "
"code). (Contributed by Dong-hee Na and Antoine Pitrou in :gh:`90751`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:465
msgid ""
"The parser now raises :exc:`SyntaxError` when parsing source code containing "
"null bytes. (Contributed by Pablo Galindo in :gh:`96670`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:468
msgid ""
":func:`ast.parse` now raises :exc:`SyntaxError` instead of :exc:`ValueError` "
"when parsing source code containing null bytes. (Contributed by Pablo "
"Galindo in :gh:`96670`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:472
msgid ""
"The Garbage Collector now runs only on the eval breaker mechanism of the "
"Python bytecode evaluation loop instead of object allocations. The GC can "
"also run when :c:func:`PyErr_CheckSignals` is called so C extensions that "
"need to run for a long time without executing any Python code also have a "
"chance to execute the GC periodically. (Contributed by Pablo Galindo in :gh:"
"`97922`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:479
msgid ""
"A backslash-character pair that is not a valid escape sequence now generates "
"a :exc:`SyntaxWarning`, instead of :exc:`DeprecationWarning`. For example, "
"``re.compile(\"\\d+\\.\\d+\")`` now emits a :exc:`SyntaxWarning` "
"(``\"\\d\"`` is an invalid escape sequence), use raw strings for regular "
"expression: ``re.compile(r\"\\d+\\.\\d+\")``. In a future Python version, :"
"exc:`SyntaxError` will eventually be raised, instead of :exc:"
"`SyntaxWarning`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:488
msgid ""
"Octal escapes with value larger than ``0o377`` (ex: ``\"\\477\"``), "
"deprecated in Python 3.11, now produce a :exc:`SyntaxWarning`, instead of :"
"exc:`DeprecationWarning`. In a future Python version they will be eventually "
"a :exc:`SyntaxError`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:494
msgid ""
"All builtin and extension callables expecting boolean parameters now accept "
"arguments of any type instead of just :class:`bool` and :class:`int`. "
"(Contributed by Serhiy Storchaka in :gh:`60203`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:498
msgid ""
"Variables used in the target part of comprehensions that are not stored to "
"can now be used in assignment expressions (``:=``). For example, in ``[(b := "
"1) for a, b.prop in some_iter]``, the assignment to ``b`` is now allowed. "
"Note that assigning to variables stored to in the target part of "
"comprehensions (like ``a``) is still disallowed, as per :pep:`572`. "
"(Contributed by Nikita Sobolev in :gh:`100581`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:505
msgid ""
":class:`slice` objects are now hashable, allowing them to be used as dict "
"keys and set items. (Contributed by Will Bradshaw, Furkan Onder, and Raymond "
"Hettinger in :gh:`101264`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:508
msgid ""
":func:`sum` now uses Neumaier summation to improve accuracy when summing "
"floats or mixed ints and floats. (Contributed by Raymond Hettinger in :gh:"
"`100425`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:512
msgid ""
"Exceptions raised in a typeobject's ``__set_name__`` method are no longer "
"wrapped by a :exc:`RuntimeError`. Context information is added to the "
"exception as a :pep:`678` note. (Contributed by Irit Katriel in :gh:`77757`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:516
msgid ""
"When a ``try-except*`` construct handles the entire :exc:`ExceptionGroup` "
"and raises one other exception, that exception is no longer wrapped in an :"
"exc:`ExceptionGroup`. Also changed in version 3.11.4. (Contributed by Irit "
"Katriel in :gh:`103590`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:523
msgid "New Modules"
msgstr ""

#: ../../whatsnew/3.12.rst:525
msgid "None."
msgstr ""

#: ../../whatsnew/3.12.rst:529
msgid "Improved Modules"
msgstr ""

#: ../../whatsnew/3.12.rst:532
msgid "array"
msgstr "array"

#: ../../whatsnew/3.12.rst:534
msgid ""
"The :class:`array.array` class now supports subscripting, making it a :term:"
"`generic type`. (Contributed by Jelle Zijlstra in :gh:`98658`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:538
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.12.rst:540
msgid ""
"The performance of writing to sockets in :mod:`asyncio` has been "
"significantly improved. ``asyncio`` now avoids unnecessary copying when "
"writing to sockets and uses :meth:`~socket.socket.sendmsg` if the platform "
"supports it. (Contributed by Kumar Aditya in :gh:`91166`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:545
msgid ""
"Added :func:`asyncio.eager_task_factory` and :func:`asyncio."
"create_eager_task_factory` functions to allow opting an event loop in to "
"eager task execution, making some use-cases 2x to 5x faster. (Contributed by "
"Jacob Bower & Itamar O in :gh:`102853`, :gh:`104140`, and :gh:`104138`)"
msgstr ""

#: ../../whatsnew/3.12.rst:550
msgid ""
"On Linux, :mod:`asyncio` uses :class:`~asyncio.PidfdChildWatcher` by default "
"if :func:`os.pidfd_open` is available and functional instead of :class:"
"`~asyncio.ThreadedChildWatcher`. (Contributed by Kumar Aditya in :gh:"
"`98024`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:555
msgid ""
"The child watcher classes :class:`~asyncio.MultiLoopChildWatcher`, :class:"
"`~asyncio.FastChildWatcher`, :class:`~asyncio.AbstractChildWatcher` and :"
"class:`~asyncio.SafeChildWatcher` are deprecated and will be removed in "
"Python 3.14. It is recommended to not manually configure a child watcher as "
"the event loop now uses the best available child watcher for each platform (:"
"class:`~asyncio.PidfdChildWatcher` if supported and :class:`~asyncio."
"ThreadedChildWatcher` otherwise). (Contributed by Kumar Aditya in :gh:"
"`94597`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:564
msgid ""
":func:`asyncio.set_child_watcher`, :func:`asyncio.get_child_watcher`, :meth:"
"`asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`asyncio."
"AbstractEventLoopPolicy.get_child_watcher` are deprecated and will be "
"removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:570
msgid ""
"Add *loop_factory* parameter to :func:`asyncio.run` to allow specifying a "
"custom event loop factory. (Contributed by Kumar Aditya in :gh:`99388`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:574
msgid ""
"Add C implementation of :func:`asyncio.current_task` for 4x-6x speedup. "
"(Contributed by Itamar Ostricher and Pranav Thulasiram Bhat in :gh:`100344`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:577
msgid ""
":func:`asyncio.iscoroutine` now returns ``False`` for generators as :mod:"
"`asyncio` does not support legacy generator-based coroutines. (Contributed "
"by Kumar Aditya in :gh:`102748`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:581
msgid ""
":func:`asyncio.wait` and :func:`asyncio.as_completed` now accepts generators "
"yielding tasks. (Contributed by Kumar Aditya in :gh:`78530`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:586
msgid "calendar"
msgstr "calendar"

#: ../../whatsnew/3.12.rst:588
msgid ""
"Add enums :data:`~calendar.Month` and :data:`~calendar.Day`. (Contributed by "
"Prince Roshan in :gh:`103636`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:592
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.12.rst:594
msgid ""
"Add :const:`~csv.QUOTE_NOTNULL` and :const:`~csv.QUOTE_STRINGS` flags to "
"provide finer grained control of ``None`` and empty strings by :class:`~csv."
"writer` objects."
msgstr ""

#: ../../whatsnew/3.12.rst:599
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.12.rst:601
msgid ""
"Pseudo instruction opcodes (which are used by the compiler but do not appear "
"in executable bytecode) are now exposed in the :mod:`dis` module. :opcode:"
"`HAVE_ARGUMENT` is still relevant to real opcodes, but it is not useful for "
"pseudo instructions. Use the new :data:`~dis.hasarg` collection instead. "
"(Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:610
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.12.rst:612
msgid ""
"Objects of type :class:`fractions.Fraction` now support float-style "
"formatting. (Contributed by Mark Dickinson in :gh:`100161`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:616
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.12.rst:618
msgid ""
"Add :func:`inspect.markcoroutinefunction` to mark sync functions that return "
"a :term:`coroutine` for use with :func:`inspect.iscoroutinefunction`. "
"(Contributed Carlton Gibson in :gh:`99247`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:622
msgid ""
"Add :func:`inspect.getasyncgenstate` and :func:`inspect.getasyncgenlocals` "
"for determining the current state of asynchronous generators. (Contributed "
"by Thomas Krennwallner in :issue:`35759`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:626
msgid ""
"The performance of :func:`inspect.getattr_static` has been considerably "
"improved. Most calls to the function should be at least 2x faster than they "
"were in Python 3.11, and some may be 6x faster or more. (Contributed by Alex "
"Waygood in :gh:`103193`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:632
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.12.rst:634
msgid ""
"Added :class:`itertools.batched()` for collecting into even-sized tuples "
"where the last batch may be shorter than the rest. (Contributed by Raymond "
"Hettinger in :gh:`98363`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:639
msgid "math"
msgstr "math"

#: ../../whatsnew/3.12.rst:641
msgid ""
"Added :func:`math.sumprod` for computing a sum of products. (Contributed by "
"Raymond Hettinger in :gh:`100485`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:644
msgid ""
"Extended :func:`math.nextafter` to include a *steps* argument for moving up "
"or down multiple steps at a time. (By Matthias Goergens, Mark Dickinson, and "
"Raymond Hettinger in :gh:`94906`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:649
msgid "os"
msgstr "os"

#: ../../whatsnew/3.12.rst:651
msgid ""
"Add :const:`os.PIDFD_NONBLOCK` to open a file descriptor for a process with :"
"func:`os.pidfd_open` in non-blocking mode. (Contributed by Kumar Aditya in :"
"gh:`93312`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:655
msgid ""
":class:`os.DirEntry` now includes an :meth:`os.DirEntry.is_junction` method "
"to check if the entry is a junction. (Contributed by Charles Machalow in :gh:"
"`99547`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:659
msgid ""
"Add :func:`os.listdrives`, :func:`os.listvolumes` and :func:`os.listmounts` "
"functions on Windows for enumerating drives, volumes and mount points. "
"(Contributed by Steve Dower in :gh:`102519`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:663
msgid ""
":func:`os.stat` and :func:`os.lstat` are now more accurate on Windows. The "
"``st_birthtime`` field will now be filled with the creation time of the "
"file, and ``st_ctime`` is deprecated but still contains the creation time "
"(but in the future will return the last metadata change, for consistency "
"with other platforms). ``st_dev`` may be up to 64 bits and ``st_ino`` up to "
"128 bits depending on your file system, and ``st_rdev`` is always set to "
"zero rather than incorrect values. Both functions may be significantly "
"faster on newer releases of Windows. (Contributed by Steve Dower in :gh:"
"`99726`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:674
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.12.rst:676
msgid ""
"Add :func:`os.path.isjunction` to check if a given path is a junction. "
"(Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:679
msgid ""
"Add :func:`os.path.splitroot` to split a path into a triad ``(drive, root, "
"tail)``. (Contributed by Barney Gale in :gh:`101000`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:683
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.12.rst:685
msgid ""
"Add support for subclassing :class:`pathlib.PurePath` and :class:`~pathlib."
"Path`, plus their Posix- and Windows-specific variants. Subclasses may "
"override the :meth:`~pathlib.PurePath.with_segments` method to pass "
"information between path instances."
msgstr ""

#: ../../whatsnew/3.12.rst:690
msgid ""
"Add :meth:`~pathlib.Path.walk` for walking the directory trees and "
"generating all file or directory names within them, similar to :func:`os."
"walk`. (Contributed by Stanislav Zmiev in :gh:`90385`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:694
msgid ""
"Add *walk_up* optional parameter to :meth:`pathlib.PurePath.relative_to` to "
"allow the insertion of ``..`` entries in the result; this behavior is more "
"consistent with :func:`os.path.relpath`. (Contributed by Domenico Ragusa in :"
"issue:`40358`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:699
msgid ""
"Add :meth:`pathlib.Path.is_junction` as a proxy to :func:`os.path."
"isjunction`. (Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:702
msgid ""
"Add *case_sensitive* optional parameter to :meth:`pathlib.Path.glob`, :meth:"
"`pathlib.Path.rglob` and :meth:`pathlib.PurePath.match` for matching the "
"path's case sensitivity, allowing for more precise control over the matching "
"process."
msgstr ""

#: ../../whatsnew/3.12.rst:707
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.12.rst:709
msgid ""
"Add convenience variables to hold values temporarily for debug session and "
"provide quick access to values like the current frame or the return value. "
"(Contributed by Tian Gao in :gh:`103693`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:715
msgid "random"
msgstr "random"

#: ../../whatsnew/3.12.rst:717
msgid ""
"Added :func:`random.binomialvariate`. (Contributed by Raymond Hettinger in :"
"gh:`81620`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:720
msgid ""
"Added a default of ``lamb=1.0`` to :func:`random.expovariate`. (Contributed "
"by Raymond Hettinger in :gh:`100234`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:724
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.12.rst:726
msgid ""
":func:`shutil.make_archive` now passes the *root_dir* argument to custom "
"archivers which support it. In this case it no longer temporarily changes "
"the current working directory of the process to *root_dir* to perform "
"archiving. (Contributed by Serhiy Storchaka in :gh:`74696`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:732
msgid ""
":func:`shutil.rmtree` now accepts a new argument *onexc* which is an error "
"handler like *onerror* but which expects an exception instance rather than a "
"*(typ, val, tb)* triplet. *onerror* is deprecated and will be removed in "
"Python 3.14. (Contributed by Irit Katriel in :gh:`102828`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:738
msgid ""
":func:`shutil.which` now consults the *PATHEXT* environment variable to find "
"matches within *PATH* on Windows even when the given *cmd* includes a "
"directory component. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:743
msgid ""
":func:`shutil.which` will call ``NeedCurrentDirectoryForExePathW`` when "
"querying for executables on Windows to determine if the current working "
"directory should be prepended to the search path. (Contributed by Charles "
"Machalow in :gh:`103179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:748
msgid ""
":func:`shutil.which` will return a path matching the *cmd* with a component "
"from ``PATHEXT`` prior to a direct match elsewhere in the search path on "
"Windows. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:754
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.12.rst:756
msgid ""
"Add a :ref:`command-line interface <sqlite3-cli>`. (Contributed by Erlend E. "
"Aasland in :gh:`77617`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:759
msgid ""
"Add the :attr:`~sqlite3.Connection.autocommit` attribute to :class:`~sqlite3."
"Connection` and the *autocommit* parameter to :func:`~sqlite3.connect` to "
"control :pep:`249`-compliant :ref:`transaction handling <sqlite3-transaction-"
"control-autocommit>`. (Contributed by Erlend E. Aasland in :gh:`83638`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:766
msgid ""
"Add *entrypoint* keyword-only parameter to :meth:`~sqlite3.Connection."
"load_extension`, for overriding the SQLite extension entry point. "
"(Contributed by Erlend E. Aasland in :gh:`103015`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:771
msgid ""
"Add :meth:`~sqlite3.Connection.getconfig` and :meth:`~sqlite3.Connection."
"setconfig` to :class:`~sqlite3.Connection` to make configuration changes to "
"a database connection. (Contributed by Erlend E. Aasland in :gh:`103489`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:777
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.12.rst:779
msgid ""
"Extended :func:`statistics.correlation` to include as a ``ranked`` method "
"for computing the Spearman correlation of ranked data. (Contributed by "
"Raymond Hettinger in :gh:`95861`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:784
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.12.rst:786
msgid ""
"Add :func:`sys.activate_stack_trampoline` and :func:`sys."
"deactivate_stack_trampoline` for activating and deactivating stack profiler "
"trampolines, and :func:`sys.is_stack_trampoline_active` for querying if "
"stack profiler trampolines are active. (Contributed by Pablo Galindo and "
"Christian Heimes with contributions from Gregory P. Smith [Google] and Mark "
"Shannon in :gh:`96123`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:795
msgid ""
"Add :data:`sys.last_exc` which holds the last unhandled exception that was "
"raised (for post-mortem debugging use cases). Deprecate the three fields "
"that have the same information in its legacy form: :data:`sys.last_type`, :"
"data:`sys.last_value` and :data:`sys.last_traceback`. (Contributed by Irit "
"Katriel in :gh:`102778`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:801 ../../whatsnew/3.12.rst:1547
msgid ""
":func:`sys._current_exceptions` now returns a mapping from thread-id to an "
"exception instance, rather than to a ``(typ, exc, tb)`` tuple. (Contributed "
"by Irit Katriel in :gh:`103176`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:805
msgid ""
":func:`sys.setrecursionlimit` and :func:`sys.getrecursionlimit`. The "
"recursion limit now applies only to Python code. Builtin functions do not "
"use the recursion limit, but are protected by a different mechanism that "
"prevents recursion from causing a virtual machine crash."
msgstr ""

#: ../../whatsnew/3.12.rst:811
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.12.rst:813
msgid ""
"The :class:`tempfile.NamedTemporaryFile` function has a new optional "
"parameter *delete_on_close* (Contributed by Evgeny Zorin in :gh:`58451`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:815
msgid ""
":func:`tempfile.mkdtemp` now always returns an absolute path, even if the "
"argument provided to the *dir* parameter is a relative path."
msgstr ""

#: ../../whatsnew/3.12.rst:821
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.12.rst:823
msgid ""
"Add :func:`threading.settrace_all_threads` and :func:`threading."
"setprofile_all_threads` that allow to set tracing and profiling functions in "
"all running threads in addition to the calling one. (Contributed by Pablo "
"Galindo in :gh:`93503`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:829
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.12.rst:831
msgid ""
"``tkinter.Canvas.coords()`` now flattens its arguments. It now accepts not "
"only coordinates as separate arguments (``x1, y1, x2, y2, ...``) and a "
"sequence of coordinates (``[x1, y1, x2, y2, ...]``), but also coordinates "
"grouped in pairs (``(x1, y1), (x2, y2), ...`` and ``[(x1, y1), (x2, "
"y2), ...]``), like ``create_*()`` methods. (Contributed by Serhiy Storchaka "
"in :gh:`94473`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:840
msgid "tokenize"
msgstr "tokenize"

#: ../../whatsnew/3.12.rst:842
msgid ""
"The :mod:`tokenize` module includes the changes introduced in :pep:`701`. "
"( Contributed by Marta Gómez Macías and Pablo Galindo in :gh:`102856`.) See :"
"ref:`whatsnew312-porting-to-python312` for more information on the changes "
"to the :mod:`tokenize` module."
msgstr ""

#: ../../whatsnew/3.12.rst:848
msgid "types"
msgstr "types"

#: ../../whatsnew/3.12.rst:850
msgid ""
"Add :func:`types.get_original_bases` to allow for further introspection of :"
"ref:`user-defined-generics` when subclassed. (Contributed by James Hilton-"
"Balfe and Alex Waygood in :gh:`101827`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:855
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.12.rst:857
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols <typing."
"runtime_checkable>` now use :func:`inspect.getattr_static` rather than :func:"
"`hasattr` to lookup whether attributes exist. This means that descriptors "
"and :meth:`~object.__getattr__` methods are no longer unexpectedly evaluated "
"during ``isinstance()`` checks against runtime-checkable protocols. However, "
"it may also mean that some objects which used to be considered instances of "
"a runtime-checkable protocol may no longer be considered instances of that "
"protocol on Python 3.12+, and vice versa. Most users are unlikely to be "
"affected by this change. (Contributed by Alex Waygood in :gh:`102433`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:868
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. For example::"
msgstr ""

#: ../../whatsnew/3.12.rst:890
msgid ""
"This change was made in order to speed up ``isinstance()`` checks against "
"runtime-checkable protocols."
msgstr ""

#: ../../whatsnew/3.12.rst:893
msgid ""
"The performance profile of :func:`isinstance` checks against :func:`runtime-"
"checkable protocols <typing.runtime_checkable>` has changed significantly. "
"Most ``isinstance()`` checks against protocols with only a few members "
"should be at least 2x faster than in 3.11, and some may be 20x faster or "
"more. However, ``isinstance()`` checks against protocols with fourteen or "
"more members may be slower than in Python 3.11. (Contributed by Alex Waygood "
"in :gh:`74690` and :gh:`103193`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:901
msgid ""
"All :data:`typing.TypedDict` and :data:`typing.NamedTuple` classes now have "
"the ``__orig_bases__`` attribute. (Contributed by Adrian Garcia Badaracco "
"in :gh:`103699`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:905
msgid ""
"Add ``frozen_default`` parameter to :func:`typing.dataclass_transform`. "
"(Contributed by Erik De Bonte in :gh:`99957`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:909
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.12.rst:911
msgid ""
"The Unicode database has been updated to version 15.0.0. (Contributed by "
"Benjamin Peterson in :gh:`96734`)."
msgstr ""

#: ../../whatsnew/3.12.rst:915
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.12.rst:917
msgid ""
"Added ``--durations`` command line option, showing the N slowest test cases::"
msgstr ""

#: ../../whatsnew/3.12.rst:933
msgid "(Contributed by Giampaolo Rodola in :issue:`4080`)"
msgstr ""

#: ../../whatsnew/3.12.rst:936
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.12.rst:938
msgid ""
"Add a :ref:`command-line interface <uuid-cli>`. (Contributed by Adam Chhina "
"in :gh:`88597`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:943
msgid "Optimizations"
msgstr ""

#: ../../whatsnew/3.12.rst:945
msgid ""
"Removed ``wstr`` and ``wstr_length`` members from Unicode objects. It "
"reduces object size by 8 or 16 bytes on 64bit platform. (:pep:`623`) "
"(Contributed by Inada Naoki in :gh:`92536`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:949
msgid ""
"Added experimental support for using the BOLT binary optimizer in the build "
"process, which improves performance by 1-5%. (Contributed by Kevin "
"Modzelewski in :gh:`90536` and tuned by Dong-hee Na in :gh:`101525`)"
msgstr ""

#: ../../whatsnew/3.12.rst:953
msgid ""
"Speed up the regular expression substitution (functions :func:`re.sub` and :"
"func:`re.subn` and corresponding :class:`!re.Pattern` methods) for "
"replacement strings containing group references by 2--3 times. (Contributed "
"by Serhiy Storchaka in :gh:`91524`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:958
msgid ""
"Speed up :class:`asyncio.Task` creation by deferring expensive string "
"formatting. (Contributed by Itamar O in :gh:`103793`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:961
msgid ""
"The :func:`tokenize.tokenize` and :func:`tokenize.generate_tokens` functions "
"are up to 64% faster as a side effect of the changes required to cover :pep:"
"`701` in the :mod:`tokenize` module. (Contributed by Marta Gómez Macías and "
"Pablo Galindo in :gh:`102856`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:966
msgid ""
"Speed up :func:`super` method calls and attribute loads via the new :opcode:"
"`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer and Vladimir "
"Matveev in :gh:`103497`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:972
msgid "CPython bytecode changes"
msgstr ""

#: ../../whatsnew/3.12.rst:974
msgid ""
"Remove the :opcode:`LOAD_METHOD` instruction. It has been merged into :"
"opcode:`LOAD_ATTR`. :opcode:`LOAD_ATTR` will now behave like the old :opcode:"
"`LOAD_METHOD` instruction if the low bit of its oparg is set. (Contributed "
"by Ken Jin in :gh:`93429`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:979
msgid ""
"Remove the :opcode:`!JUMP_IF_FALSE_OR_POP` and :opcode:`!"
"JUMP_IF_TRUE_OR_POP` instructions. (Contributed by Irit Katriel in :gh:"
"`102859`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:982
msgid ""
"Add the :opcode:`LOAD_FAST_AND_CLEAR` instruction as part of the "
"implementation of :pep:`709`. (Contributed by Carl Meyer in :gh:`101441`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:985
msgid ""
"Add the :opcode:`LOAD_FROM_DICT_OR_DEREF`, :opcode:"
"`LOAD_FROM_DICT_OR_GLOBALS`, and :opcode:`LOAD_LOCALS` opcodes as part of "
"the implementation of :pep:`695`. Remove the :opcode:`!LOAD_CLASSDEREF` "
"opcode, which can be replaced with :opcode:`LOAD_LOCALS` plus :opcode:"
"`LOAD_FROM_DICT_OR_DEREF`. (Contributed by Jelle Zijlstra in :gh:`103764`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:991
msgid ""
"Add the :opcode:`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer "
"and Vladimir Matveev in :gh:`103497`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:995
msgid "Demos and Tools"
msgstr ""

#: ../../whatsnew/3.12.rst:997
msgid ""
"Remove the ``Tools/demo/`` directory which contained old demo scripts. A "
"copy can be found in the `old-demos project <https://github.com/gvanrossum/"
"old-demos>`_. (Contributed by Victor Stinner in :gh:`97681`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1002
msgid ""
"Remove outdated example scripts of the ``Tools/scripts/`` directory. A copy "
"can be found in the `old-demos project <https://github.com/gvanrossum/old-"
"demos>`_. (Contributed by Victor Stinner in :gh:`97669`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1009 ../../whatsnew/3.12.rst:1938
msgid "Deprecated"
msgstr ""

#: ../../whatsnew/3.12.rst:1011
msgid ""
":mod:`asyncio`: The :meth:`~asyncio.get_event_loop` method of the default "
"event loop policy now emits a :exc:`DeprecationWarning` if there is no "
"current event loop set and it decides to create one. (Contributed by Serhiy "
"Storchaka and Guido van Rossum in :gh:`100160`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1016
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.Month.JANUARY` and :data:"
"`calendar.Month.FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1020
msgid ""
":mod:`datetime`: :class:`datetime.datetime`'s :meth:`~datetime.datetime."
"utcnow` and :meth:`~datetime.datetime.utcfromtimestamp` are deprecated and "
"will be removed in a future version. Instead, use timezone-aware objects to "
"represent datetimes in UTC: respectively, call :meth:`~datetime.datetime."
"now` and :meth:`~datetime.datetime.fromtimestamp`  with the *tz* parameter "
"set to :const:`datetime.UTC`. (Contributed by Paul Ganssle in :gh:`103857`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1028
msgid ""
":mod:`os`: The ``st_ctime`` fields return by :func:`os.stat` and :func:`os."
"lstat` on Windows are deprecated. In a future release, they will contain the "
"last metadata change time, consistent with other platforms. For now, they "
"still contain the creation time, which is also available in the new "
"``st_birthtime`` field. (Contributed by Steve Dower in :gh:`99726`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1034
msgid ""
":mod:`shutil`: The *onerror* argument of :func:`shutil.rmtree` is deprecated "
"as will be removed in Python 3.14. Use *onexc* instead. (Contributed by Irit "
"Katriel in :gh:`102828`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1049
msgid ":mod:`sqlite3`:"
msgstr ""

#: ../../whatsnew/3.12.rst:1038
msgid ""
":ref:`default adapters and converters <sqlite3-default-converters>` are now "
"deprecated. Instead, use the :ref:`sqlite3-adapter-converter-recipes` and "
"tailor them to your needs. (Contributed by Erlend E. Aasland in :gh:`90016`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1044
msgid ""
"In :meth:`~sqlite3.Cursor.execute`, :exc:`DeprecationWarning` is now emitted "
"when :ref:`named placeholders <sqlite3-placeholders>` are used together with "
"parameters supplied as a :term:`sequence` instead of as a :class:`dict`. "
"Starting from Python 3.14, using named placeholders with parameters supplied "
"as a sequence will raise a :exc:`~sqlite3.ProgrammingError`. (Contributed by "
"Erlend E. Aasland in :gh:`101698`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1051
msgid ""
":mod:`sys`: The :data:`sys.last_type`, :data:`sys.last_value` and :data:`sys."
"last_traceback` fields are deprecated. Use :data:`sys.last_exc` instead. "
"(Contributed by Irit Katriel in :gh:`102778`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1055
msgid ""
":mod:`tarfile`: Extracting tar archives without specifying *filter* is "
"deprecated until Python 3.14, when ``'data'`` filter will become the "
"default. See :ref:`tarfile-extraction-filter` for details."
msgstr ""

#: ../../whatsnew/3.12.rst:1059
msgid ""
":mod:`typing`: :class:`typing.Hashable` and :class:`typing.Sized` aliases "
"for :class:`collections.abc.Hashable` and :class:`collections.abc.Sized`. (:"
"gh:`94309`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1062
msgid ""
":mod:`xml.etree.ElementTree`: The module now emits :exc:`DeprecationWarning` "
"when testing the truth value of an :class:`xml.etree.ElementTree.Element`. "
"Before, the Python implementation emitted :exc:`FutureWarning`, and the C "
"implementation emitted nothing."
msgstr ""

#: ../../whatsnew/3.12.rst:1067
msgid ""
"The 3-arg signatures (type, value, traceback) of :meth:`~coroutine.throw`, :"
"meth:`~generator.throw` and :meth:`~agen.athrow` are deprecated and may be "
"removed in a future version of Python. Use the single-arg versions of these "
"functions instead. (Contributed by Ofey Chan in :gh:`89874`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1072
msgid ""
":exc:`DeprecationWarning` is now raised when ``__package__`` on a module "
"differs from ``__spec__.parent`` (previously it was :exc:`ImportWarning`). "
"(Contributed by Brett Cannon in :gh:`65961`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1077
msgid ""
"In accordance with :pep:`699`, the ``ma_version_tag`` field in :c:type:"
"`PyDictObject` is deprecated for extension modules. Accessing this field "
"will generate a compiler warning at compile time. This field will be removed "
"in Python 3.14. (Contributed by Ramvikrams and Kumar Aditya in :gh:`101193`. "
"PEP by Ken Jin.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1082
msgid ""
"The bitwise inversion operator (``~``) on bool is deprecated. It will throw "
"an error in Python 3.14. Use ``not`` for logical negation of bools instead. "
"In the rare case that you really need the bitwise inversion of the "
"underlying ``int``, convert to int explicitly with ``~int(x)``. (Contributed "
"by Tim Hoffmann in :gh:`103487`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1089
msgid "Pending Removal in Python 3.13"
msgstr ""

#: ../../whatsnew/3.12.rst:1091
msgid ""
"The following modules and APIs have been deprecated in earlier Python "
"releases, and will be removed in Python 3.13."
msgstr ""

#: ../../whatsnew/3.12.rst:1094
msgid "Modules (see :pep:`594`):"
msgstr ""

#: ../../whatsnew/3.12.rst:1096
msgid ":mod:`aifc`"
msgstr ":mod:`aifc`"

#: ../../whatsnew/3.12.rst:1097
msgid ":mod:`audioop`"
msgstr ":mod:`audioop`"

#: ../../whatsnew/3.12.rst:1098
msgid ":mod:`cgi`"
msgstr ":mod:`cgi`"

#: ../../whatsnew/3.12.rst:1099
msgid ":mod:`cgitb`"
msgstr ":mod:`cgitb`"

#: ../../whatsnew/3.12.rst:1100
msgid ":mod:`chunk`"
msgstr ":mod:`chunk`"

#: ../../whatsnew/3.12.rst:1101
msgid ":mod:`crypt`"
msgstr ":mod:`crypt`"

#: ../../whatsnew/3.12.rst:1102
msgid ":mod:`imghdr`"
msgstr ":mod:`imghdr`"

#: ../../whatsnew/3.12.rst:1103
msgid ":mod:`mailcap`"
msgstr ":mod:`mailcap`"

#: ../../whatsnew/3.12.rst:1104
msgid ":mod:`msilib`"
msgstr ":mod:`msilib`"

#: ../../whatsnew/3.12.rst:1105
msgid ":mod:`nis`"
msgstr ":mod:`nis`"

#: ../../whatsnew/3.12.rst:1106
msgid ":mod:`nntplib`"
msgstr ":mod:`nntplib`"

#: ../../whatsnew/3.12.rst:1107
msgid ":mod:`ossaudiodev`"
msgstr ":mod:`ossaudiodev`"

#: ../../whatsnew/3.12.rst:1108
msgid ":mod:`pipes`"
msgstr ":mod:`pipes`"

#: ../../whatsnew/3.12.rst:1109
msgid ":mod:`sndhdr`"
msgstr ":mod:`sndhdr`"

#: ../../whatsnew/3.12.rst:1110
msgid ":mod:`spwd`"
msgstr ":mod:`spwd`"

#: ../../whatsnew/3.12.rst:1111
msgid ":mod:`sunau`"
msgstr ":mod:`sunau`"

#: ../../whatsnew/3.12.rst:1112
msgid ":mod:`telnetlib`"
msgstr ":mod:`telnetlib`"

#: ../../whatsnew/3.12.rst:1113
msgid ":mod:`uu`"
msgstr ":mod:`uu`"

#: ../../whatsnew/3.12.rst:1114
msgid ":mod:`xdrlib`"
msgstr ":mod:`xdrlib`"

#: ../../whatsnew/3.12.rst:1116
msgid "APIs:"
msgstr ""

#: ../../whatsnew/3.12.rst:1118
msgid ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"
msgstr ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"

#: ../../whatsnew/3.12.rst:1119
msgid ":func:`locale.getdefaultlocale` (:gh:`90817`)"
msgstr ":func:`locale.getdefaultlocale` (:gh:`90817`)"

#: ../../whatsnew/3.12.rst:1120
msgid ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"
msgstr ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"

#: ../../whatsnew/3.12.rst:1121
msgid ":func:`!unittest.findTestCases` (:gh:`50096`)"
msgstr ":func:`!unittest.findTestCases` (:gh:`50096`)"

#: ../../whatsnew/3.12.rst:1122
msgid ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"
msgstr ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"

#: ../../whatsnew/3.12.rst:1123
msgid ":func:`!unittest.makeSuite` (:gh:`50096`)"
msgstr ":func:`!unittest.makeSuite` (:gh:`50096`)"

#: ../../whatsnew/3.12.rst:1124
msgid ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"
msgstr ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"

#: ../../whatsnew/3.12.rst:1125
msgid ":class:`!webbrowser.MacOSX` (:gh:`86421`)"
msgstr ":class:`!webbrowser.MacOSX` (:gh:`86421`)"

#: ../../whatsnew/3.12.rst:1126
msgid ":class:`classmethod` descriptor chaining (:gh:`89519`)"
msgstr ""

#: ../../whatsnew/3.12.rst:1129
msgid "Pending Removal in Python 3.14"
msgstr ""

#: ../../whatsnew/3.12.rst:1131
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1136
msgid ""
":mod:`ast`: The following :mod:`ast` features have been deprecated in "
"documentation since Python 3.8, now cause a :exc:`DeprecationWarning` to be "
"emitted at runtime when they are accessed or used, and will be removed in "
"Python 3.14:"
msgstr ""

#: ../../whatsnew/3.12.rst:1140
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../whatsnew/3.12.rst:1141
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../whatsnew/3.12.rst:1142
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../whatsnew/3.12.rst:1143
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: ../../whatsnew/3.12.rst:1144
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../whatsnew/3.12.rst:1146
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1149
msgid ""
":mod:`collections.abc`: Deprecated :class:`collections.abc.ByteString`. "
"Prefer :class:`Sequence` or :class:`collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1154
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1157
msgid ""
":mod:`importlib.abc`: Deprecated the following classes, scheduled for "
"removal in Python 3.14:"
msgstr ""

#: ../../whatsnew/3.12.rst:1160
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../whatsnew/3.12.rst:1161
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1162
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1164
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr ""

#: ../../whatsnew/3.12.rst:1166
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1167
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1169
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1171
msgid ""
":mod:`itertools`: The module had undocumented, inefficient, historically "
"buggy, and inconsistent support for copy, deepcopy, and pickle operations. "
"This will be removed in 3.14 for a significant reduction in code volume and "
"maintenance burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1177
msgid ""
":mod:`multiprocessing`: The default :mod:`multiprocessing` start method will "
"change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms "
"where ``'fork'`` is currently the default (:gh:`84559`). Adding a runtime "
"warning about this was deemed too disruptive as the majority of code is not "
"expected to care. Use the :func:`~multiprocessing.get_context` or :func:"
"`~multiprocessing.set_start_method` APIs to explicitly specify when your "
"code *requires* ``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""

#: ../../whatsnew/3.12.rst:1185
msgid ""
":mod:`pkgutil`: :func:`pkgutil.find_loader` and :func:`pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1190
msgid ""
":mod:`pty`: The module has two undocumented ``master_open()`` and "
"``slave_open()`` functions that have been deprecated since Python 2 but only "
"gained a proper :exc:`DeprecationWarning` in 3.12. Remove them in 3.14."
msgstr ""

#: ../../whatsnew/3.12.rst:1194
msgid ""
":mod:`shutil`: The *onerror* argument of :func:`shutil.rmtree` is deprecated "
"in 3.12, and will be removed in 3.14."
msgstr ""

#: ../../whatsnew/3.12.rst:1197
msgid ""
":mod:`typing`: :class:`typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""

#: ../../whatsnew/3.12.rst:1200
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`xml."
"etree.ElementTree.Element` is deprecated and will raise an exception in "
"Python 3.14."
msgstr ""

#: ../../whatsnew/3.12.rst:1203
msgid ""
"Creating immutable types (:c:macro:`Py_TPFLAGS_IMMUTABLETYPE`) with mutable "
"bases using the C API."
msgstr ""

#: ../../whatsnew/3.12.rst:1206
msgid ""
"``__package__`` and ``__cached__`` will cease to be set or taken into "
"consideration by the import system (:gh:`97879`)."
msgstr ""

#: ../../whatsnew/3.12.rst:1209
msgid ""
"Accessing ``co_lnotab`` was deprecated in :pep:`626` since 3.10 and was "
"planned to be removed in 3.12 but it only got a proper :exc:"
"`DeprecationWarning` in 3.12. May be removed in 3.14. (Contributed by Nikita "
"Sobolev in :gh:`101866`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1216
msgid "Pending Removal in Future Versions"
msgstr ""

#: ../../whatsnew/3.12.rst:1218
msgid ""
"The following APIs were deprecated in earlier Python versions and will be "
"removed, although there is currently no date scheduled for their removal."
msgstr ""

#: ../../whatsnew/3.12.rst:1221
msgid ":class:`typing.Text` (:gh:`92332`)"
msgstr ":class:`typing.Text` (:gh:`92332`)"

#: ../../whatsnew/3.12.rst:1223
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``). A syntax warning is raised if "
"the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`. In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""

#: ../../whatsnew/3.12.rst:1234 ../../whatsnew/3.12.rst:2020
msgid "Removed"
msgstr ""

#: ../../whatsnew/3.12.rst:1236
msgid ""
"``asynchat`` and ``asyncore``: These two modules have been removed according "
"to the schedule in :pep:`594`, having been deprecated in Python 3.6. Use :"
"mod:`asyncio` instead. (Contributed by Nikita Sobolev in :gh:`96580`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1242
msgid ""
":mod:`configparser`: Several names deprecated in the :mod:`configparser` way "
"back in 3.2 have been removed per :gh:`89336`:"
msgstr ""

#: ../../whatsnew/3.12.rst:1245
msgid ""
":class:`configparser.ParsingError` no longer has a ``filename`` attribute or "
"argument. Use the ``source`` attribute and argument instead."
msgstr ""

#: ../../whatsnew/3.12.rst:1247
msgid ""
":mod:`configparser` no longer has a ``SafeConfigParser`` class. Use the "
"shorter :class:`~configparser.ConfigParser` name instead."
msgstr ""

#: ../../whatsnew/3.12.rst:1249
msgid ""
":class:`configparser.ConfigParser` no longer has a ``readfp`` method. Use :"
"meth:`~configparser.ConfigParser.read_file` instead."
msgstr ""

#: ../../whatsnew/3.12.rst:1252
msgid ""
"``distutils``: Remove the ``distutils`` package. It was deprecated in Python "
"3.10 by :pep:`632` \"Deprecate distutils module\". For projects still using "
"``distutils`` and cannot be updated to something else, the ``setuptools`` "
"project can be installed: it still provides ``distutils``. (Contributed by "
"Victor Stinner in :gh:`92584`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1258
msgid ""
":mod:`ensurepip`: Remove the bundled setuptools wheel from :mod:`ensurepip`, "
"and stop installing setuptools in environments created by :mod:`venv`."
msgstr ""

#: ../../whatsnew/3.12.rst:1261
msgid ""
"``pip (>= 22.1)`` does not require setuptools to be installed in the "
"environment. ``setuptools``-based (and ``distutils``-based) packages can "
"still be used with ``pip install``, since pip will provide ``setuptools`` in "
"the build environment it uses for building a package."
msgstr ""

#: ../../whatsnew/3.12.rst:1267
msgid ""
"``easy_install``, ``pkg_resources``, ``setuptools`` and ``distutils`` are no "
"longer provided by default in environments created with ``venv`` or "
"bootstrapped with ``ensurepip``, since they are part of the ``setuptools`` "
"package. For projects relying on these at runtime, the ``setuptools`` "
"project should be declared as a dependency and installed separately "
"(typically, using pip)."
msgstr ""

#: ../../whatsnew/3.12.rst:1274
msgid "(Contributed by Pradyun Gedam in :gh:`95299`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1276
msgid ""
":mod:`enum`: Remove ``EnumMeta.__getattr__``, which is no longer needed for "
"enum attribute access. (Contributed by Ethan Furman in :gh:`95083`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1280
msgid ""
":mod:`ftplib`: Remove the ``FTP_TLS.ssl_version`` class attribute: use the "
"*context* parameter instead. (Contributed by Victor Stinner in :gh:`94172`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1284
msgid ""
":mod:`gzip`: Remove the ``filename`` attribute of :class:`gzip.GzipFile`, "
"deprecated since Python 2.6, use the :attr:`~gzip.GzipFile.name` attribute "
"instead. In write mode, the ``filename`` attribute added ``'.gz'`` file "
"extension if it was not present. (Contributed by Victor Stinner in :gh:"
"`94196`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1290
msgid ""
":mod:`hashlib`: Remove the pure Python implementation of :func:`hashlib."
"pbkdf2_hmac()`, deprecated in Python 3.10. Python 3.10 and newer requires "
"OpenSSL 1.1.1 (:pep:`644`): this OpenSSL version provides a C implementation "
"of :func:`~hashlib.pbkdf2_hmac()` which is faster. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1296
msgid ""
":mod:`importlib`: Many previously deprecated cleanups in :mod:`importlib` "
"have now been completed:"
msgstr ""

#: ../../whatsnew/3.12.rst:1299
msgid ""
"References to, and support for :meth:`!module_repr()` has been removed. "
"(Contributed by Barry Warsaw in :gh:`97850`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1302
msgid ""
"``importlib.util.set_package`` has been removed. (Contributed by Brett "
"Cannon in :gh:`65961`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1305
msgid ""
"Support for ``find_loader()`` and ``find_module()`` APIs have been removed.  "
"(Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1308
msgid ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter``, and ``pkgutil.ImpLoader`` "
"have been removed.  (Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1311
msgid ""
"The :mod:`!imp` module has been removed.  (Contributed by Barry Warsaw in :"
"gh:`98040`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1314
msgid "Replace removed :mod:`!imp` functions with :mod:`importlib` functions:"
msgstr ""

#: ../../whatsnew/3.12.rst:1317
msgid "imp"
msgstr "imp"

#: ../../whatsnew/3.12.rst:1317
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.12.rst:1319
msgid "``imp.NullImporter``"
msgstr "``imp.NullImporter``"

#: ../../whatsnew/3.12.rst:1319
msgid "Insert ``None`` into ``sys.path_importer_cache``"
msgstr ""

#: ../../whatsnew/3.12.rst:1320
msgid "``imp.cache_from_source()``"
msgstr "``imp.cache_from_source()``"

#: ../../whatsnew/3.12.rst:1320
msgid ":func:`importlib.util.cache_from_source`"
msgstr ":func:`importlib.util.cache_from_source`"

#: ../../whatsnew/3.12.rst:1321
msgid "``imp.find_module()``"
msgstr "``imp.find_module()``"

#: ../../whatsnew/3.12.rst:1321
msgid ":func:`importlib.util.find_spec`"
msgstr ":func:`importlib.util.find_spec`"

#: ../../whatsnew/3.12.rst:1322
msgid "``imp.get_magic()``"
msgstr "``imp.get_magic()``"

#: ../../whatsnew/3.12.rst:1322
msgid ":attr:`importlib.util.MAGIC_NUMBER`"
msgstr ":attr:`importlib.util.MAGIC_NUMBER`"

#: ../../whatsnew/3.12.rst:1323
msgid "``imp.get_suffixes()``"
msgstr "``imp.get_suffixes()``"

#: ../../whatsnew/3.12.rst:1323
msgid ""
":attr:`importlib.machinery.SOURCE_SUFFIXES`, :attr:`importlib.machinery."
"EXTENSION_SUFFIXES`, and :attr:`importlib.machinery.BYTECODE_SUFFIXES`"
msgstr ""

#: ../../whatsnew/3.12.rst:1324
msgid "``imp.get_tag()``"
msgstr "``imp.get_tag()``"

#: ../../whatsnew/3.12.rst:1324
msgid ":attr:`sys.implementation.cache_tag <sys.implementation>`"
msgstr ":attr:`sys.implementation.cache_tag <sys.implementation>`"

#: ../../whatsnew/3.12.rst:1325
msgid "``imp.load_module()``"
msgstr "``imp.load_module()``"

#: ../../whatsnew/3.12.rst:1325
msgid ":func:`importlib.import_module`"
msgstr ":func:`importlib.import_module`"

#: ../../whatsnew/3.12.rst:1326
msgid "``imp.new_module(name)``"
msgstr "``imp.new_module(name)``"

#: ../../whatsnew/3.12.rst:1326
msgid "``types.ModuleType(name)``"
msgstr "``types.ModuleType(name)``"

#: ../../whatsnew/3.12.rst:1327
msgid "``imp.reload()``"
msgstr "``imp.reload()``"

#: ../../whatsnew/3.12.rst:1327
msgid ":func:`importlib.reload`"
msgstr ":func:`importlib.reload`"

#: ../../whatsnew/3.12.rst:1328
msgid "``imp.source_from_cache()``"
msgstr "``imp.source_from_cache()``"

#: ../../whatsnew/3.12.rst:1328
msgid ":func:`importlib.util.source_from_cache`"
msgstr ":func:`importlib.util.source_from_cache`"

#: ../../whatsnew/3.12.rst:1331
msgid "Replace ``imp.load_source()`` with::"
msgstr ""

#: ../../whatsnew/3.12.rst:1346
msgid "Removed :mod:`!imp` functions and attributes with no replacements:"
msgstr ""

#: ../../whatsnew/3.12.rst:1348
msgid "undocumented functions:"
msgstr ""

#: ../../whatsnew/3.12.rst:1350
msgid "``imp.init_builtin()``"
msgstr "``imp.init_builtin()``"

#: ../../whatsnew/3.12.rst:1351
msgid "``imp.load_compiled()``"
msgstr "``imp.load_compiled()``"

#: ../../whatsnew/3.12.rst:1352
msgid "``imp.load_dynamic()``"
msgstr "``imp.load_dynamic()``"

#: ../../whatsnew/3.12.rst:1353
msgid "``imp.load_package()``"
msgstr "``imp.load_package()``"

#: ../../whatsnew/3.12.rst:1355
msgid ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: the "
"locking scheme has changed in Python 3.3 to per-module locks."
msgstr ""

#: ../../whatsnew/3.12.rst:1357
msgid ""
"``imp.find_module()`` constants: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."
msgstr ""

#: ../../whatsnew/3.12.rst:1361
msgid ""
":mod:`io`: Remove ``io.OpenWrapper`` and ``_pyio.OpenWrapper``, deprecated "
"in Python 3.10: just use :func:`open` instead. The :func:`open` (:func:`io."
"open`) function is a built-in function. Since Python 3.10, :func:`!_pyio."
"open` is also a static method. (Contributed by Victor Stinner in :gh:"
"`94169`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1367
msgid ""
":mod:`locale`: Remove the :func:`!locale.format` function, deprecated in "
"Python 3.7: use :func:`locale.format_string` instead. (Contributed by Victor "
"Stinner in :gh:`94226`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1371
msgid ""
"``smtpd``: The module has been removed according to the schedule in :pep:"
"`594`, having been deprecated in Python 3.4.7 and 3.5.4. Use aiosmtpd_ PyPI "
"module or any other :mod:`asyncio`-based server instead. (Contributed by "
"Oleg Iarygin in :gh:`93243`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1379
msgid ""
":mod:`sqlite3`: The following undocumented :mod:`sqlite3` features, "
"deprecated in Python 3.10, are now removed:"
msgstr ""

#: ../../whatsnew/3.12.rst:1382
msgid "``sqlite3.enable_shared_cache()``"
msgstr "``sqlite3.enable_shared_cache()``"

#: ../../whatsnew/3.12.rst:1383
msgid "``sqlite3.OptimizedUnicode``"
msgstr "``sqlite3.OptimizedUnicode``"

#: ../../whatsnew/3.12.rst:1385
msgid ""
"If a shared cache must be used, open the database in URI mode using the "
"``cache=shared`` query parameter."
msgstr ""

#: ../../whatsnew/3.12.rst:1388
msgid ""
"The ``sqlite3.OptimizedUnicode`` text factory has been an alias for :class:"
"`str` since Python 3.3. Code that previously set the text factory to "
"``OptimizedUnicode`` can either use ``str`` explicitly, or rely on the "
"default value which is also ``str``."
msgstr ""

#: ../../whatsnew/3.12.rst:1393
msgid "(Contributed by Erlend E. Aasland in :gh:`92548`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1395
msgid ":mod:`ssl`:"
msgstr ""

#: ../../whatsnew/3.12.rst:1397
msgid ""
"Remove the :func:`!ssl.RAND_pseudo_bytes` function, deprecated in Python "
"3.6: use :func:`os.urandom` or :func:`ssl.RAND_bytes` instead. (Contributed "
"by Victor Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1401
msgid ""
"Remove the :func:`!ssl.match_hostname` function. It was deprecated in Python "
"3.7. OpenSSL performs hostname matching since Python 3.7, Python no longer "
"uses the :func:`!ssl.match_hostname` function. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1407
msgid ""
"Remove the :func:`!ssl.wrap_socket` function, deprecated in Python 3.7: "
"instead, create a :class:`ssl.SSLContext` object and call its :class:`ssl."
"SSLContext.wrap_socket` method. Any package that still uses :func:`!ssl."
"wrap_socket` is broken and insecure. The function neither sends a SNI TLS "
"extension nor validates server hostname. Code is subject to `CWE-295 "
"<https://cwe.mitre.org/data/definitions/295.html>`_: Improper Certificate "
"Validation. (Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1416
msgid ":mod:`unittest`: Removed many old deprecated :mod:`unittest` features:"
msgstr ""

#: ../../whatsnew/3.12.rst:1418
msgid "A number of :class:`~unittest.TestCase` method aliases:"
msgstr ""

#: ../../whatsnew/3.12.rst:1421
msgid "Deprecated alias"
msgstr ""

#: ../../whatsnew/3.12.rst:1421
msgid "Method Name"
msgstr ""

#: ../../whatsnew/3.12.rst:1421
msgid "Deprecated in"
msgstr ""

#: ../../whatsnew/3.12.rst:1423
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.12.rst:1423 ../../whatsnew/3.12.rst:1430
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.12.rst:1423 ../../whatsnew/3.12.rst:1424
#: ../../whatsnew/3.12.rst:1425 ../../whatsnew/3.12.rst:1426
#: ../../whatsnew/3.12.rst:1427 ../../whatsnew/3.12.rst:1428
#: ../../whatsnew/3.12.rst:1429
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.12.rst:1424
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.12.rst:1424
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.12.rst:1425
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.12.rst:1425 ../../whatsnew/3.12.rst:1431
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.12.rst:1426
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.12.rst:1426 ../../whatsnew/3.12.rst:1432
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.12.rst:1427
msgid "``failUnlessAlmostEqual``"
msgstr "``failUnlessAlmostEqual``"

#: ../../whatsnew/3.12.rst:1427 ../../whatsnew/3.12.rst:1433
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.12.rst:1428
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.12.rst:1428 ../../whatsnew/3.12.rst:1434
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.12.rst:1429
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.12.rst:1429
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.12.rst:1430
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.12.rst:1430 ../../whatsnew/3.12.rst:1431
#: ../../whatsnew/3.12.rst:1432 ../../whatsnew/3.12.rst:1433
#: ../../whatsnew/3.12.rst:1434 ../../whatsnew/3.12.rst:1435
#: ../../whatsnew/3.12.rst:1436
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.12.rst:1431
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.12.rst:1432
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.12.rst:1433
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.12.rst:1434
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.12.rst:1435
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.12.rst:1435
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.12.rst:1436
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.12.rst:1436
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.12.rst:1437
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.12.rst:1437
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.12.rst:1437
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.12.rst:1440
msgid ""
"You can use https://github.com/isidentical/teyit to automatically modernise "
"your unit tests."
msgstr ""

#: ../../whatsnew/3.12.rst:1443
msgid ""
"Undocumented and broken :class:`~unittest.TestCase` method "
"``assertDictContainsSubset`` (deprecated in Python 3.2)."
msgstr ""

#: ../../whatsnew/3.12.rst:1446
msgid ""
"Undocumented :meth:`TestLoader.loadTestsFromModule <unittest.TestLoader."
"loadTestsFromModule>` parameter *use_load_tests* (deprecated and ignored "
"since Python 3.2)."
msgstr ""

#: ../../whatsnew/3.12.rst:1450
msgid ""
"An alias of the :class:`~unittest.TextTestResult` class: ``_TextTestResult`` "
"(deprecated in Python 3.2)."
msgstr ""

#: ../../whatsnew/3.12.rst:1453
msgid "(Contributed by Serhiy Storchaka in :issue:`45162`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1455
msgid ""
":mod:`webbrowser`: Remove support for obsolete browsers from :mod:"
"`webbrowser`. Removed browsers include: Grail, Mosaic, Netscape, Galeon, "
"Skipstone, Iceape, Firebird, and Firefox versions 35 and below (:gh:"
"`102871`)."
msgstr ""

#: ../../whatsnew/3.12.rst:1459
msgid ""
":mod:`xml.etree.ElementTree`: Remove the ``ElementTree.Element.copy()`` "
"method of the pure Python implementation, deprecated in Python 3.10, use "
"the :func:`copy.copy` function instead.  The C implementation of :mod:`xml."
"etree.ElementTree` has no ``copy()`` method, only a ``__copy__()`` method. "
"(Contributed by Victor Stinner in :gh:`94383`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1465
msgid ""
":mod:`zipimport`: Remove ``find_loader()`` and ``find_module()`` methods, "
"deprecated in Python 3.10: use the ``find_spec()`` method instead.  See :pep:"
"`451` for the rationale. (Contributed by Victor Stinner in :gh:`94379`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1470
msgid ""
"Removed the ``suspicious`` rule from the documentation Makefile, and removed "
"``Doc/tools/rstlint.py``, both in favor of `sphinx-lint <https://github.com/"
"sphinx-contrib/sphinx-lint>`_. (Contributed by Julien Palard in :gh:`98179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1475
msgid ""
"Remove the *keyfile* and *certfile* parameters from the :mod:`ftplib`, :mod:"
"`imaplib`, :mod:`poplib` and :mod:`smtplib` modules, and the *key_file*, "
"*cert_file* and *check_hostname* parameters from the :mod:`http.client` "
"module, all deprecated since Python 3.6. Use the *context* parameter "
"(*ssl_context* in :mod:`imaplib`) instead. (Contributed by Victor Stinner "
"in :gh:`94172`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1486 ../../whatsnew/3.12.rst:1798
msgid "Porting to Python 3.12"
msgstr ""

#: ../../whatsnew/3.12.rst:1488
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""

#: ../../whatsnew/3.12.rst:1492
msgid "Changes in the Python API"
msgstr ""

#: ../../whatsnew/3.12.rst:1494
msgid ""
"More strict rules are now applied for numerical group references and group "
"names in regular expressions. Only sequence of ASCII digits is now accepted "
"as a numerical reference. The group name in bytes patterns and replacement "
"strings can now only contain ASCII letters and digits and underscore. "
"(Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1501
msgid ""
"Removed ``randrange()`` functionality deprecated since Python 3.10.  "
"Formerly, ``randrange(10.0)`` losslessly converted to ``randrange(10)``. "
"Now, it raises a :exc:`TypeError`. Also, the exception raised for non-"
"integer values such as ``randrange(10.5)`` or ``randrange('10')`` has been "
"changed from :exc:`ValueError` to :exc:`TypeError`.  This also prevents bugs "
"where ``randrange(1e25)`` would silently select from a larger range than "
"``randrange(10**25)``. (Originally suggested by Serhiy Storchaka :gh:"
"`86388`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1509
msgid ""
":class:`argparse.ArgumentParser` changed encoding and error handler for "
"reading arguments from file (e.g. ``fromfile_prefix_chars`` option) from "
"default text encoding (e.g. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`) to :term:`filesystem encoding and error "
"handler`. Argument files should be encoded in UTF-8 instead of ANSI Codepage "
"on Windows."
msgstr ""

#: ../../whatsnew/3.12.rst:1515
msgid ""
"Removed the ``asyncore``-based ``smtpd`` module deprecated in Python 3.4.7 "
"and 3.5.4.  A recommended replacement is the :mod:`asyncio`-based aiosmtpd_ "
"PyPI module."
msgstr ""

#: ../../whatsnew/3.12.rst:1519
msgid ""
":func:`shlex.split`: Passing ``None`` for *s* argument now raises an "
"exception, rather than reading :data:`sys.stdin`. The feature was deprecated "
"in Python 3.9. (Contributed by Victor Stinner in :gh:`94352`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1524
msgid ""
"The :mod:`os` module no longer accepts bytes-like paths, like :class:"
"`bytearray` and :class:`memoryview` types: only the exact :class:`bytes` "
"type is accepted for bytes strings. (Contributed by Victor Stinner in :gh:"
"`98393`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1529
msgid ""
":func:`syslog.openlog` and :func:`syslog.closelog` now fail if used in "
"subinterpreters. :func:`syslog.syslog` may still be used in subinterpreters, "
"but now only if :func:`syslog.openlog` has already been called in the main "
"interpreter. These new restrictions do not apply to the main interpreter, so "
"only a very small set of users might be affected. This change helps with "
"interpreter isolation.  Furthermore, :mod:`syslog` is a wrapper around "
"process-global resources, which are best managed from the main interpreter. "
"(Contributed by Dong-hee Na in :gh:`99127`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1538
msgid ""
"The undocumented locking behavior of :func:`~functools.cached_property` is "
"removed, because it locked across all instances of the class, leading to "
"high lock contention. This means that a cached property getter function "
"could now run more than once for a single instance, if two threads race. For "
"most simple cached properties (e.g. those that are idempotent and simply "
"calculate a value based on other attributes of the instance) this will be "
"fine.  If synchronization is needed, implement locking within the cached "
"property getter function or around multi-threaded access points."
msgstr ""

#: ../../whatsnew/3.12.rst:1551
msgid ""
"When extracting tar files using :mod:`tarfile` or :func:`shutil."
"unpack_archive`, pass the *filter* argument to limit features that may be "
"surprising or dangerous. See :ref:`tarfile-extraction-filter` for details."
msgstr ""

#: ../../whatsnew/3.12.rst:1556
msgid ""
"The output of the :func:`tokenize.tokenize` and :func:`tokenize."
"generate_tokens` functions is now changed due to the changes introduced in :"
"pep:`701`. This means that ``STRING`` tokens are not emitted any more for f-"
"strings and the tokens described in :pep:`701` are now produced instead: "
"``FSTRING_START``, ``FSRING_MIDDLE`` and ``FSTRING_END`` are now emitted for "
"f-string \"string\" parts in addition to the appropriate tokens for the "
"tokenization in the expression components. For example for the f-string "
"``f\"start {1+1} end\"`` the old version of the tokenizer emitted::"
msgstr ""

#: ../../whatsnew/3.12.rst:1567
msgid "while the new version emits::"
msgstr ""

#: ../../whatsnew/3.12.rst:1579
msgid ""
"Additionally, there may be some minor behavioral changes as a consecuence of "
"the changes required to support :pep:`701`. Some of these changes include:"
msgstr ""

#: ../../whatsnew/3.12.rst:1582
msgid ""
"The ``type`` attribute of the tokens emitted when tokenizing some invalid "
"Python characters such as ``!`` has changed from ``ERRORTOKEN`` to ``OP``."
msgstr ""

#: ../../whatsnew/3.12.rst:1585
msgid ""
"Incomplete single-line strings now also raise :exc:`tokenize.TokenError` as "
"incomplete multiline strings do."
msgstr ""

#: ../../whatsnew/3.12.rst:1588
msgid ""
"Some incomplete or invalid Python code now raises :exc:`tokenize.TokenError` "
"instead of returning arbitrary ``ERRORTOKEN`` tokens when tokenizing it."
msgstr ""

#: ../../whatsnew/3.12.rst:1591
msgid ""
"Mixing tabs and spaces as indentation in the same file is not supported "
"anymore and will raise a :exc:`TabError`."
msgstr ""

#: ../../whatsnew/3.12.rst:1595
msgid "Build Changes"
msgstr ""

#: ../../whatsnew/3.12.rst:1597
msgid ""
"Python no longer uses ``setup.py`` to build shared C extension modules. "
"Build parameters like headers and libraries are detected in ``configure`` "
"script. Extensions are built by ``Makefile``. Most extensions use ``pkg-"
"config`` and fall back to manual detection. (Contributed by Christian Heimes "
"in :gh:`93939`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1603
msgid ""
"``va_start()`` with two parameters, like ``va_start(args, format),`` is now "
"required to build Python. ``va_start()`` is no longer called with a single "
"parameter. (Contributed by Kumar Aditya in :gh:`93207`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1608
msgid ""
"CPython now uses the ThinLTO option as the default link time optimization "
"policy if the Clang compiler accepts the flag. (Contributed by Dong-hee Na "
"in :gh:`89536`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1612
msgid ""
"Add ``COMPILEALL_OPTS`` variable in Makefile to override :mod:`compileall` "
"options (default: ``-j0``) in ``make install``. Also merged the 3 "
"``compileall`` commands into a single command to build .pyc files for all "
"optimization levels (0, 1, 2) at once. (Contributed by Victor Stinner in :gh:"
"`99289`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1618
msgid "Add platform triplets for 64-bit LoongArch:"
msgstr ""

#: ../../whatsnew/3.12.rst:1620
msgid "loongarch64-linux-gnusf"
msgstr "loongarch64-linux-gnusf"

#: ../../whatsnew/3.12.rst:1621
msgid "loongarch64-linux-gnuf32"
msgstr "loongarch64-linux-gnuf32"

#: ../../whatsnew/3.12.rst:1622
msgid "loongarch64-linux-gnu"
msgstr "loongarch64-linux-gnu"

#: ../../whatsnew/3.12.rst:1624
msgid "(Contributed by Zhang Na in :gh:`90656`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1626
msgid "``PYTHON_FOR_REGEN`` now require Python 3.10 or newer."
msgstr ""

#: ../../whatsnew/3.12.rst:1628
msgid ""
"Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate :file:`!"
"configure`. (Contributed by Christian Heimes in :gh:`89886`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1632
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr ""

#: ../../whatsnew/3.12.rst:1636
msgid "C API Changes"
msgstr ""

#: ../../whatsnew/3.12.rst:1642
msgid ""
":pep:`697`: Introduced the :ref:`Unstable C API tier <unstable-c-api>`, "
"intended for low-level tools like debuggers and JIT compilers. This API may "
"change in each minor release of CPython without deprecation warnings. Its "
"contents are marked by the ``PyUnstable_`` prefix in names."
msgstr ""

#: ../../whatsnew/3.12.rst:1648
msgid "Code object constructors:"
msgstr ""

#: ../../whatsnew/3.12.rst:1650
msgid "``PyUnstable_Code_New()`` (renamed from ``PyCode_New``)"
msgstr ""

#: ../../whatsnew/3.12.rst:1651
msgid ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (renamed from "
"``PyCode_NewWithPosOnlyArgs``)"
msgstr ""

#: ../../whatsnew/3.12.rst:1653
msgid "Extra storage for code objects (:pep:`523`):"
msgstr ""

#: ../../whatsnew/3.12.rst:1655
msgid ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (renamed from "
"``_PyEval_RequestCodeExtraIndex``)"
msgstr ""

#: ../../whatsnew/3.12.rst:1656
msgid "``PyUnstable_Code_GetExtra()`` (renamed from ``_PyCode_GetExtra``)"
msgstr ""

#: ../../whatsnew/3.12.rst:1657
msgid "``PyUnstable_Code_SetExtra()`` (renamed from ``_PyCode_SetExtra``)"
msgstr ""

#: ../../whatsnew/3.12.rst:1659
msgid ""
"The original names will continue to be available until the respective API "
"changes."
msgstr ""

#: ../../whatsnew/3.12.rst:1662
msgid "(Contributed by Petr Viktorin in :gh:`101101`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1664
msgid ""
":pep:`697`: Added API for extending types whose instance memory layout is "
"opaque:"
msgstr ""

#: ../../whatsnew/3.12.rst:1667
msgid ""
":c:member:`PyType_Spec.basicsize` can be zero or negative to specify "
"inheriting or extending the base class size."
msgstr ""

#: ../../whatsnew/3.12.rst:1669
msgid ""
":c:func:`PyObject_GetTypeData` and :c:func:`PyType_GetTypeDataSize` added to "
"allow access to subclass-specific instance data."
msgstr ""

#: ../../whatsnew/3.12.rst:1671
msgid ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` and :c:func:`PyObject_GetItemData` added "
"to allow safely extending certain variable-sized types, including :c:var:"
"`PyType_Type`."
msgstr ""

#: ../../whatsnew/3.12.rst:1674
msgid ""
":c:macro:`Py_RELATIVE_OFFSET` added to allow defining :c:type:`members "
"<PyMemberDef>` in terms of a subclass-specific struct."
msgstr ""

#: ../../whatsnew/3.12.rst:1677
msgid "(Contributed by Petr Viktorin in :gh:`103509`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1679
msgid ""
"Added the new :ref:`limited C API <limited-c-api>` function :c:func:"
"`PyType_FromMetaclass`, which generalizes the existing :c:func:"
"`PyType_FromModuleAndSpec` using an additional metaclass argument. "
"(Contributed by Wenzel Jakob in :gh:`93012`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1684
msgid ""
"API for creating objects that can be called using :ref:`the vectorcall "
"protocol <vectorcall>` was added to the :ref:`Limited API <stable>`:"
msgstr ""

#: ../../whatsnew/3.12.rst:1688
msgid ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"
msgstr ""

#: ../../whatsnew/3.12.rst:1689
msgid ":c:func:`PyVectorcall_NARGS`"
msgstr ":c:func:`PyVectorcall_NARGS`"

#: ../../whatsnew/3.12.rst:1690
msgid ":c:func:`PyVectorcall_Call`"
msgstr ":c:func:`PyVectorcall_Call`"

#: ../../whatsnew/3.12.rst:1691
msgid ":c:type:`vectorcallfunc`"
msgstr ":c:type:`vectorcallfunc`"

#: ../../whatsnew/3.12.rst:1693
msgid ""
"The :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` flag is now removed from a class "
"when the class's :py:meth:`~object.__call__` method is reassigned. This "
"makes vectorcall safe to use with mutable types (i.e. heap types without the "
"immutable flag, :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). Mutable types that do "
"not override :c:member:`~PyTypeObject.tp_call` now inherit the "
"``Py_TPFLAGS_HAVE_VECTORCALL`` flag. (Contributed by Petr Viktorin in :gh:"
"`93274`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1701
msgid ""
"The :c:macro:`Py_TPFLAGS_MANAGED_DICT` and :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` flags have been added. This allows extensions "
"classes to support object ``__dict__`` and weakrefs with less bookkeeping, "
"using less memory and with faster access."
msgstr ""

#: ../../whatsnew/3.12.rst:1706
msgid ""
"API for performing calls using :ref:`the vectorcall protocol <vectorcall>` "
"was added to the :ref:`Limited API <stable>`:"
msgstr ""

#: ../../whatsnew/3.12.rst:1710
msgid ":c:func:`PyObject_Vectorcall`"
msgstr ":c:func:`PyObject_Vectorcall`"

#: ../../whatsnew/3.12.rst:1711
msgid ":c:func:`PyObject_VectorcallMethod`"
msgstr ":c:func:`PyObject_VectorcallMethod`"

#: ../../whatsnew/3.12.rst:1712
msgid ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"
msgstr ""

#: ../../whatsnew/3.12.rst:1714
msgid ""
"This means that both the incoming and outgoing ends of the vector call "
"protocol are now available in the :ref:`Limited API <stable>`. (Contributed "
"by Wenzel Jakob in :gh:`98586`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1718
msgid ""
"Added two new public functions, :c:func:`PyEval_SetProfileAllThreads` and :c:"
"func:`PyEval_SetTraceAllThreads`, that allow to set tracing and profiling "
"functions in all running threads in addition to the calling one. "
"(Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1724
msgid ""
"Added new function :c:func:`PyFunction_SetVectorcall` to the C API which "
"sets the vectorcall field of a given :c:type:`PyFunctionObject`. "
"(Contributed by Andrew Frost in :gh:`92257`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1728
msgid ""
"The C API now permits registering callbacks via :c:func:"
"`PyDict_AddWatcher`, :c:func:`PyDict_Watch` and related APIs to be called "
"whenever a dictionary is modified. This is intended for use by optimizing "
"interpreters, JIT compilers, or debuggers. (Contributed by Carl Meyer in :gh:"
"`91052`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1734
msgid ""
"Added :c:func:`PyType_AddWatcher` and :c:func:`PyType_Watch` API to register "
"callbacks to receive notification on changes to a type. (Contributed by Carl "
"Meyer in :gh:`91051`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1738
msgid ""
"Added :c:func:`PyCode_AddWatcher` and :c:func:`PyCode_ClearWatcher` APIs to "
"register callbacks to receive notification on creation and destruction of "
"code objects. (Contributed by Itamar Ostricher in :gh:`91054`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1743
msgid ""
"Add :c:func:`PyFrame_GetVar` and :c:func:`PyFrame_GetVarString` functions to "
"get a frame variable by its name. (Contributed by Victor Stinner in :gh:"
"`91248`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1747
msgid ""
"Add :c:func:`PyErr_GetRaisedException` and :c:func:"
"`PyErr_SetRaisedException` for saving and restoring the current exception. "
"These functions return and accept a single exception object, rather than the "
"triple arguments of the now-deprecated :c:func:`PyErr_Fetch` and :c:func:"
"`PyErr_Restore`. This is less error prone and a bit more efficient. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1755
msgid ""
"Add ``_PyErr_ChainExceptions1``, which takes an exception instance, to "
"replace the legacy-API ``_PyErr_ChainExceptions``, which is now deprecated. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1759
msgid ""
"Add :c:func:`PyException_GetArgs` and :c:func:`PyException_SetArgs` as "
"convenience functions for retrieving and modifying the :attr:`~BaseException."
"args` passed to the exception's constructor. (Contributed by Mark Shannon "
"in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1764
msgid ""
"Add :c:func:`PyErr_DisplayException`, which takes an exception instance, to "
"replace the legacy-api :c:func:`!PyErr_Display`. (Contributed by Irit "
"Katriel in :gh:`102755`)."
msgstr ""

#: ../../whatsnew/3.12.rst:1768
msgid ""
":pep:`683`: Introduced Immortal Objects to Python which allows objects to "
"bypass reference counts and introduced changes to the C-API:"
msgstr ""

#: ../../whatsnew/3.12.rst:1771
msgid "``_Py_IMMORTAL_REFCNT``: The reference count that defines an object"
msgstr ""

#: ../../whatsnew/3.12.rst:1772
msgid "as immortal."
msgstr ""

#: ../../whatsnew/3.12.rst:1773
msgid ""
"``_Py_IsImmortal`` Checks if an object has the immortal reference count."
msgstr ""

#: ../../whatsnew/3.12.rst:1774
msgid "``PyObject_HEAD_INIT`` This will now initialize reference count to"
msgstr ""

#: ../../whatsnew/3.12.rst:1775
msgid "``_Py_IMMORTAL_REFCNT`` when used with ``Py_BUILD_CORE``."
msgstr ""

#: ../../whatsnew/3.12.rst:1776
msgid "``SSTATE_INTERNED_IMMORTAL`` An identifier for interned unicode objects"
msgstr ""

#: ../../whatsnew/3.12.rst:1777
msgid "that are immortal."
msgstr ""

#: ../../whatsnew/3.12.rst:1778
msgid "``SSTATE_INTERNED_IMMORTAL_STATIC`` An identifier for interned unicode"
msgstr ""

#: ../../whatsnew/3.12.rst:1779
msgid "objects that are immortal and static"
msgstr ""

#: ../../whatsnew/3.12.rst:1782
msgid "``sys.getunicodeinternedsize`` This returns the total number of unicode"
msgstr ""

#: ../../whatsnew/3.12.rst:1781
msgid ""
"objects that have been interned. This is now needed for refleak.py to "
"correctly track reference counts and allocated blocks"
msgstr ""

#: ../../whatsnew/3.12.rst:1784
msgid "(Contributed by Eddie Elizondo in :gh:`84436`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1786
msgid ""
":pep:`684`: Added the new :c:func:`Py_NewInterpreterFromConfig` function "
"and :c:type:`PyInterpreterConfig`, which may be used to create sub-"
"interpreters with their own GILs. (See :ref:`whatsnew312-pep684` for more "
"info.) (Contributed by Eric Snow in :gh:`104110`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1792
msgid ""
"In the limited C API version 3.12, :c:func:`Py_INCREF` and :c:func:"
"`Py_DECREF` functions are now implemented as opaque function calls to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`105387`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1800
msgid ""
"Legacy Unicode APIs based on ``Py_UNICODE*`` representation has been "
"removed. Please migrate to APIs based on UTF-8 or ``wchar_t*``."
msgstr ""

#: ../../whatsnew/3.12.rst:1803
msgid ""
"Argument parsing functions like :c:func:`PyArg_ParseTuple` doesn't support "
"``Py_UNICODE*`` based format (e.g. ``u``, ``Z``) anymore. Please migrate to "
"other formats for Unicode like ``s``, ``z``, ``es``, and ``U``."
msgstr ""

#: ../../whatsnew/3.12.rst:1807
msgid ""
"``tp_weaklist`` for all static builtin types is always ``NULL``. This is an "
"internal-only field on ``PyTypeObject`` but we're pointing out the change in "
"case someone happens to be accessing the field directly anyway.  To avoid "
"breakage, consider using the existing public C-API instead, or, if "
"necessary, the (internal-only) ``_PyObject_GET_WEAKREFS_LISTPTR()`` macro."
msgstr ""

#: ../../whatsnew/3.12.rst:1814
msgid ""
"This internal-only :c:member:`PyTypeObject.tp_subclasses` may now not be a "
"valid object pointer.  Its type was changed to :c:expr:`void *` to reflect "
"this.  We mention this in case someone happens to be accessing the internal-"
"only field directly."
msgstr ""

#: ../../whatsnew/3.12.rst:1819
msgid ""
"To get a list of subclasses, call the Python method :py:meth:`~class."
"__subclasses__` (using :c:func:`PyObject_CallMethod`, for example)."
msgstr ""

#: ../../whatsnew/3.12.rst:1823
msgid ""
"Add support of more formatting options (left aligning, octals, uppercase "
"hexadecimals, :c:type:`intmax_t`, :c:type:`ptrdiff_t`, :c:type:`wchar_t` C "
"strings, variable width and precision) in :c:func:`PyUnicode_FromFormat` "
"and :c:func:`PyUnicode_FromFormatV`. (Contributed by Serhiy Storchaka in :gh:"
"`98836`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1829
msgid ""
"An unrecognized format character in :c:func:`PyUnicode_FromFormat` and :c:"
"func:`PyUnicode_FromFormatV` now sets a :exc:`SystemError`. In previous "
"versions it caused all the rest of the format string to be copied as-is to "
"the result string, and any extra arguments discarded. (Contributed by Serhiy "
"Storchaka in :gh:`95781`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1835
msgid ""
"Fixed wrong sign placement in :c:func:`PyUnicode_FromFormat` and :c:func:"
"`PyUnicode_FromFormatV`. (Contributed by Philip Georgi in :gh:`95504`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1839
msgid ""
"Extension classes wanting to add a ``__dict__`` or weak reference slot "
"should use :c:macro:`Py_TPFLAGS_MANAGED_DICT` and :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` instead of ``tp_dictoffset`` and "
"``tp_weaklistoffset``, respectively. The use of ``tp_dictoffset`` and "
"``tp_weaklistoffset`` is still supported, but does not fully support "
"multiple inheritance (:gh:`95589`), and performance may be worse. Classes "
"declaring :c:macro:`Py_TPFLAGS_MANAGED_DICT` should call :c:func:`!"
"_PyObject_VisitManagedDict` and :c:func:`!_PyObject_ClearManagedDict` to "
"traverse and clear their instance's dictionaries. To clear weakrefs, call :c:"
"func:`PyObject_ClearWeakRefs`, as before."
msgstr ""

#: ../../whatsnew/3.12.rst:1851
msgid ""
"The :c:func:`PyUnicode_FSDecoder` function no longer accepts bytes-like "
"paths, like :class:`bytearray` and :class:`memoryview` types: only the "
"exact :class:`bytes` type is accepted for bytes strings. (Contributed by "
"Victor Stinner in :gh:`98393`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1856
msgid ""
"The :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` and :c:macro:`Py_XSETREF` "
"macros now only evaluate their arguments once. If an argument has side "
"effects, these side effects are no longer duplicated. (Contributed by Victor "
"Stinner in :gh:`98724`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1861
msgid ""
"The interpreter's error indicator is now always normalized. This means that :"
"c:func:`PyErr_SetObject`, :c:func:`PyErr_SetString` and the other functions "
"that set the error indicator now normalize the exception before storing it. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1866
msgid ""
"``_Py_RefTotal`` is no longer authoritative and only kept around for ABI "
"compatibility.  Note that it is an internal global and only available on "
"debug builds.  If you happen to be using it then you'll need to start using "
"``_Py_GetGlobalRefTotal()``."
msgstr ""

#: ../../whatsnew/3.12.rst:1871
msgid ""
"The following functions now select an appropriate metaclass for the newly "
"created type:"
msgstr ""

#: ../../whatsnew/3.12.rst:1874
msgid ":c:func:`PyType_FromSpec`"
msgstr ":c:func:`PyType_FromSpec`"

#: ../../whatsnew/3.12.rst:1875
msgid ":c:func:`PyType_FromSpecWithBases`"
msgstr ":c:func:`PyType_FromSpecWithBases`"

#: ../../whatsnew/3.12.rst:1876
msgid ":c:func:`PyType_FromModuleAndSpec`"
msgstr ":c:func:`PyType_FromModuleAndSpec`"

#: ../../whatsnew/3.12.rst:1878
msgid ""
"Creating classes whose metaclass overrides :c:member:`~PyTypeObject.tp_new` "
"is deprecated, and in Python 3.14+ it will be disallowed. Note that these "
"functions ignore ``tp_new`` of the metaclass, possibly allowing incomplete "
"initialization."
msgstr ""

#: ../../whatsnew/3.12.rst:1883
msgid ""
"Note that :c:func:`PyType_FromMetaclass` (added in Python 3.12) already "
"disallows creating classes whose metaclass overrides ``tp_new`` (:meth:"
"`~object.__new__` in Python)."
msgstr ""

#: ../../whatsnew/3.12.rst:1887
msgid ""
"Since ``tp_new`` overrides almost everything ``PyType_From*`` functions do, "
"the two are incompatible with each other. The existing behavior -- ignoring "
"the metaclass for several steps of type creation -- is unsafe in general, "
"since (meta)classes assume that ``tp_new`` was called. There is no simple "
"general workaround. One of the following may work for you:"
msgstr ""

#: ../../whatsnew/3.12.rst:1894
msgid "If you control the metaclass, avoid using ``tp_new`` in it:"
msgstr ""

#: ../../whatsnew/3.12.rst:1896
msgid ""
"If initialization can be skipped, it can be done in :c:member:`~PyTypeObject."
"tp_init` instead."
msgstr ""

#: ../../whatsnew/3.12.rst:1898
msgid ""
"If the metaclass doesn't need to be instantiated from Python, set its "
"``tp_new`` to ``NULL`` using the :c:macro:"
"`Py_TPFLAGS_DISALLOW_INSTANTIATION` flag. This makes it acceptable for "
"``PyType_From*`` functions."
msgstr ""

#: ../../whatsnew/3.12.rst:1903
msgid ""
"Avoid ``PyType_From*`` functions: if you don't need C-specific features "
"(slots or setting the instance size), create types by :ref:`calling <call>` "
"the metaclass."
msgstr ""

#: ../../whatsnew/3.12.rst:1907
msgid ""
"If you *know* the ``tp_new`` can be skipped safely, filter the deprecation "
"warning out using :func:`warnings.catch_warnings` from Python."
msgstr ""

#: ../../whatsnew/3.12.rst:1910
msgid ""
":c:var:`PyOS_InputHook` and :c:var:`PyOS_ReadlineFunctionPointer` are no "
"longer called in :ref:`subinterpreters <sub-interpreter-support>`. This is "
"because clients generally rely on process-wide global state (since these "
"callbacks have no way of recovering extension module state)."
msgstr ""

#: ../../whatsnew/3.12.rst:1915
msgid ""
"This also avoids situations where extensions may find themselves running in "
"a subinterpreter that they don't support (or haven't yet been loaded in). "
"See :gh:`104668` for more info."
msgstr ""

#: ../../whatsnew/3.12.rst:1919
msgid ""
":c:struct:`PyLongObject` has had its internals changed for better "
"performance. Although the internals of :c:struct:`PyLongObject` are private, "
"they are used by some extension modules. The internal fields should no "
"longer be accessed directly, instead the API functions beginning ``PyLong_..."
"`` should be used instead. Two new *unstable* API functions are provided for "
"efficient access to the value of :c:struct:`PyLongObject`\\s which fit into "
"a single machine word:"
msgstr ""

#: ../../whatsnew/3.12.rst:1927
msgid ":c:func:`PyUnstable_Long_IsCompact`"
msgstr ""

#: ../../whatsnew/3.12.rst:1928
msgid ":c:func:`PyUnstable_Long_CompactValue`"
msgstr ""

#: ../../whatsnew/3.12.rst:1930
msgid ""
"Custom allocators, set via :c:func:`PyMem_SetAllocator`, are now required to "
"be thread-safe, regardless of memory domain.  Allocators that don't have "
"their own state, including \"hooks\", are not affected. If your custom "
"allocator is not already thread-safe and you need guidance then please "
"create a new GitHub issue and CC ``@ericsnowcurrently``."
msgstr ""

#: ../../whatsnew/3.12.rst:1940
msgid "Deprecate global configuration variable:"
msgstr ""

#: ../../whatsnew/3.12.rst:1942
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ""

#: ../../whatsnew/3.12.rst:1943
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ""

#: ../../whatsnew/3.12.rst:1944
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ""

#: ../../whatsnew/3.12.rst:1945
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ""

#: ../../whatsnew/3.12.rst:1946
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ""

#: ../../whatsnew/3.12.rst:1947
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ""

#: ../../whatsnew/3.12.rst:1948
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ""

#: ../../whatsnew/3.12.rst:1949
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ""

#: ../../whatsnew/3.12.rst:1950
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

#: ../../whatsnew/3.12.rst:1951
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment`"
msgstr ""

#: ../../whatsnew/3.12.rst:1952
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""

#: ../../whatsnew/3.12.rst:1953
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use :c:member:`PyConfig.user_site_directory`"
msgstr ""

#: ../../whatsnew/3.12.rst:1954
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""

#: ../../whatsnew/3.12.rst:1955
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed`"
msgstr ""

#: ../../whatsnew/3.12.rst:1957
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ""

#: ../../whatsnew/3.12.rst:1958
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"
msgstr ""

#: ../../whatsnew/3.12.rst:1959
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use :c:member:`PyConfig."
"legacy_windows_stdio`"
msgstr ""

#: ../../whatsnew/3.12.rst:1960
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""

#: ../../whatsnew/3.12.rst:1961
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""

#: ../../whatsnew/3.12.rst:1962
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use :c:member:`PyConfig."
"filesystem_errors`"
msgstr ""

#: ../../whatsnew/3.12.rst:1963
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""

#: ../../whatsnew/3.12.rst:1965
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead. (Contributed by Victor Stinner in :gh:`77782`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1969
msgid ""
"Creating immutable types (:c:macro:`Py_TPFLAGS_IMMUTABLETYPE`) with mutable "
"bases is deprecated and will be disabled in Python 3.14."
msgstr ""

#: ../../whatsnew/3.12.rst:1972
msgid ""
"The ``structmember.h`` header is deprecated, though it continues to be "
"available and there are no plans to remove it."
msgstr ""

#: ../../whatsnew/3.12.rst:1975
msgid ""
"Its contents are now available just by including ``Python.h``, with a ``Py`` "
"prefix added if it was missing:"
msgstr ""

#: ../../whatsnew/3.12.rst:1978
msgid ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` and :c:func:"
"`PyMember_SetOne`"
msgstr ""

#: ../../whatsnew/3.12.rst:1980
msgid ""
"Type macros like :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE`, etc. "
"(previously ``T_INT``, ``T_DOUBLE``, etc.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1982
msgid ""
"The flags :c:macro:`Py_READONLY` (previously ``READONLY``) and :c:macro:"
"`Py_AUDIT_READ` (previously all uppercase)"
msgstr ""

#: ../../whatsnew/3.12.rst:1985
msgid "Several items are not exposed from ``Python.h``:"
msgstr ""

#: ../../whatsnew/3.12.rst:1987
msgid ":c:macro:`T_OBJECT` (use :c:macro:`Py_T_OBJECT_EX`)"
msgstr ""

#: ../../whatsnew/3.12.rst:1988
msgid ":c:macro:`T_NONE` (previously undocumented, and pretty quirky)"
msgstr ""

#: ../../whatsnew/3.12.rst:1989
msgid "The macro ``WRITE_RESTRICTED`` which does nothing."
msgstr ""

#: ../../whatsnew/3.12.rst:1990
msgid ""
"The macros ``RESTRICTED`` and ``READ_RESTRICTED``, equivalents of :c:macro:"
"`Py_AUDIT_READ`."
msgstr ""

#: ../../whatsnew/3.12.rst:1992
msgid ""
"In some configurations, ``<stddef.h>`` is not included from ``Python.h``. It "
"should be included manually when using ``offsetof()``."
msgstr ""

#: ../../whatsnew/3.12.rst:1995
msgid ""
"The deprecated header continues to provide its original contents under the "
"original names. Your old code can stay unchanged, unless the extra include "
"and non-namespaced macros bother you greatly."
msgstr ""

#: ../../whatsnew/3.12.rst:2000
msgid ""
"(Contributed in :gh:`47146` by Petr Viktorin, based on earlier work by "
"Alexander Belopolsky and Matthias Braun.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2003
msgid ""
":c:func:`PyErr_Fetch` and :c:func:`PyErr_Restore` are deprecated. Use :c:"
"func:`PyErr_GetRaisedException` and :c:func:`PyErr_SetRaisedException` "
"instead. (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2008
msgid ""
":c:func:`!PyErr_Display` is deprecated. Use :c:func:`PyErr_DisplayException` "
"instead. (Contributed by Irit Katriel in :gh:`102755`)."
msgstr ""

#: ../../whatsnew/3.12.rst:2011
msgid ""
"``_PyErr_ChainExceptions`` is deprecated. Use ``_PyErr_ChainExceptions1`` "
"instead. (Contributed by Irit Katriel in :gh:`102192`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2014
msgid ""
"Using :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` or :c:"
"func:`PyType_FromModuleAndSpec` to create a class whose metaclass overrides :"
"c:member:`~PyTypeObject.tp_new` is deprecated. Call the metaclass instead."
msgstr ""

#: ../../whatsnew/3.12.rst:2022
msgid ""
"Remove the ``token.h`` header file. There was never any public tokenizer C "
"API. The ``token.h`` header file was only designed to be used by Python "
"internals. (Contributed by Victor Stinner in :gh:`92651`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2027
msgid "Legacy Unicode APIs have been removed. See :pep:`623` for detail."
msgstr ""

#: ../../whatsnew/3.12.rst:2029
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`!PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.12.rst:2030
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.12.rst:2031
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: ../../whatsnew/3.12.rst:2032
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.12.rst:2033
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: ../../whatsnew/3.12.rst:2034
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: ../../whatsnew/3.12.rst:2035
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.12.rst:2036
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: ../../whatsnew/3.12.rst:2037
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.12.rst:2039
msgid ""
"Remove the ``PyUnicode_InternImmortal()`` function macro. (Contributed by "
"Victor Stinner in :gh:`85858`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2042
msgid ""
"Remove ``Jython`` compatibility hacks from several stdlib modules and tests. "
"(Contributed by Nikita Sobolev in :gh:`99482`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2045
msgid ""
"Remove ``_use_broken_old_ctypes_structure_semantics_`` flag from :mod:"
"`ctypes` module. (Contributed by Nikita Sobolev in :gh:`99285`.)"
msgstr ""

#~ msgid ":const:`Py_TPFLAGS_HAVE_VECTORCALL`"
#~ msgstr ":const:`Py_TPFLAGS_HAVE_VECTORCALL`"

#~ msgid ":const:`PY_VECTORCALL_ARGUMENTS_OFFSET`"
#~ msgstr ":const:`PY_VECTORCALL_ARGUMENTS_OFFSET`"

#~ msgid "email"
#~ msgstr "email"
