# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-23 07:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../whatsnew/3.12.rst:4
msgid "What's New In Python 3.12"
msgstr "Python 3.12 有什麼新功能"

#: ../../whatsnew/3.12.rst:0
msgid "Editor"
msgstr "編輯者"

#: ../../whatsnew/3.12.rst:6
msgid "Adam Turner"
msgstr "Adam Turner"

#: ../../whatsnew/3.12.rst:48
msgid ""
"This article explains the new features in Python 3.12, compared to 3.11. "
"Python 3.12 was released on October 2, 2023. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"本文介紹了 Python 3.12 與 3.11 相比的新功能。 Python 3.12 於 2023 年 10 月 2 "
"日發布。完整詳請請見  :ref:`changelog <changelog>`。"

#: ../../whatsnew/3.12.rst:54
msgid ":pep:`693` -- Python 3.12 Release Schedule"
msgstr ":pep:`693` -- Python 3.12 發佈時程"

#: ../../whatsnew/3.12.rst:57
msgid "Summary -- Release highlights"
msgstr "發布重點摘要"

#: ../../whatsnew/3.12.rst:62
msgid ""
"Python 3.12 is the latest stable release of the Python programming language, "
"with a mix of changes to the language and the standard library. The library "
"changes focus on cleaning up deprecated APIs, usability, and correctness. Of "
"note, the :mod:`!distutils` package has been removed from the standard "
"library. Filesystem support in :mod:`os` and :mod:`pathlib` has seen a "
"number of improvements, and several modules have better performance."
msgstr ""

#: ../../whatsnew/3.12.rst:69
msgid ""
"The language changes focus on usability, as :term:`f-strings <f-string>` "
"have had many limitations removed and 'Did you mean ...' suggestions "
"continue to improve. The new :ref:`type parameter syntax <whatsnew312-"
"pep695>` and :keyword:`type` statement improve ergonomics for using :term:"
"`generic types <generic type>` and :term:`type aliases <type alias>` with "
"static type checkers."
msgstr ""

#: ../../whatsnew/3.12.rst:76
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details, you "
"should refer to the documentation, such as the  :ref:`Library Reference "
"<library-index>` and :ref:`Language Reference <reference-index>`. If you "
"want to understand the complete implementation and design rationale for a "
"change, refer to the PEP for a particular new feature; but note that PEPs "
"usually are not kept up-to-date once a feature has been fully implemented."
msgstr ""

#: ../../whatsnew/3.12.rst:90
msgid "New syntax features:"
msgstr "新增語法特性："

#: ../../whatsnew/3.12.rst:92
msgid ""
":ref:`PEP 695 <whatsnew312-pep695>`, type parameter syntax and the :keyword:"
"`type` statement"
msgstr ""
":ref:`PEP 695 <whatsnew312-pep695>`，型別參數語法和 :keyword:`type` 陳述式"

#: ../../whatsnew/3.12.rst:94
msgid "New grammar features:"
msgstr "新增語法特性："

#: ../../whatsnew/3.12.rst:96
msgid ""
":ref:`PEP 701 <whatsnew312-pep701>`, :term:`f-strings <f-string>` in the "
"grammar"
msgstr ""

#: ../../whatsnew/3.12.rst:98
msgid "Interpreter improvements:"
msgstr "直譯器改進："

#: ../../whatsnew/3.12.rst:100
msgid ""
":ref:`PEP 684 <whatsnew312-pep684>`, a unique per-interpreter :term:`GIL "
"<global interpreter lock>`"
msgstr ""

#: ../../whatsnew/3.12.rst:102
msgid ":ref:`PEP 669 <whatsnew312-pep669>`, low impact monitoring"
msgstr ""

#: ../../whatsnew/3.12.rst:103
msgid ""
"`Improved 'Did you mean ...' suggestions <improved error messages_>`_ for :"
"exc:`NameError`, :exc:`ImportError`, and :exc:`SyntaxError` exceptions"
msgstr ""

#: ../../whatsnew/3.12.rst:106
msgid "Python data model improvements:"
msgstr "Python 資料模型改進："

#: ../../whatsnew/3.12.rst:108
msgid ""
":ref:`PEP 688 <whatsnew312-pep688>`, using the :ref:`buffer protocol "
"<bufferobjects>` from Python"
msgstr ""

#: ../../whatsnew/3.12.rst:111
msgid "Significant improvements in the standard library:"
msgstr ""

#: ../../whatsnew/3.12.rst:113
msgid "The :class:`pathlib.Path` class now supports subclassing"
msgstr ":class:`pathlib.Path` 類別現在支援子類別化"

#: ../../whatsnew/3.12.rst:114
msgid "The :mod:`os` module received several improvements for Windows support"
msgstr ""

#: ../../whatsnew/3.12.rst:115
msgid ""
"A :ref:`command-line interface <sqlite3-cli>` has been added to the :mod:"
"`sqlite3` module"
msgstr ""
"一個\\ :ref:`命令列介面 <sqlite3-cli>`\\ 已被加入 :mod:`sqlite3` 模組中"

#: ../../whatsnew/3.12.rst:117
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols <typing."
"runtime_checkable>` enjoy a speed up of between two and 20 times"
msgstr ""

#: ../../whatsnew/3.12.rst:119
msgid ""
"The :mod:`asyncio` package has had a number of performance improvements, "
"with some benchmarks showing a 75% speed up."
msgstr ""
":mod:`asyncio` 套件進行了許多效能改進，一些基準測試顯示速度提高了 75%。"

#: ../../whatsnew/3.12.rst:121
msgid ""
"A :ref:`command-line interface <uuid-cli>` has been added to the :mod:`uuid` "
"module"
msgstr "一個\\ :ref:`命令列介面 <uuid-cli>`\\ 已被加入 :mod:`uuid` 模組中"

#: ../../whatsnew/3.12.rst:123
msgid ""
"Due to the changes in :ref:`PEP 701 <whatsnew312-pep701>`, producing tokens "
"via the :mod:`tokenize` module is up to 64% faster."
msgstr ""

#: ../../whatsnew/3.12.rst:126
msgid "Security improvements:"
msgstr "安全性改進："

#: ../../whatsnew/3.12.rst:128
msgid ""
"Replace the builtin :mod:`hashlib` implementations of SHA1, SHA3, SHA2-384, "
"SHA2-512, and MD5 with formally verified code from the `HACL* <https://"
"github.com/hacl-star/hacl-star/>`__ project. These builtin implementations "
"remain as fallbacks that are only used when OpenSSL does not provide them."
msgstr ""

#: ../../whatsnew/3.12.rst:134
msgid "C API improvements:"
msgstr "C API 改進："

#: ../../whatsnew/3.12.rst:136
msgid ":ref:`PEP 697 <whatsnew312-pep697>`, unstable C API tier"
msgstr ":ref:`PEP 697 <whatsnew312-pep697>`，不穩定 C API 層"

#: ../../whatsnew/3.12.rst:137
msgid ":ref:`PEP 683 <whatsnew312-pep683>`, immortal objects"
msgstr ""

#: ../../whatsnew/3.12.rst:139
msgid "CPython implementation improvements:"
msgstr "CPython 實作改進："

#: ../../whatsnew/3.12.rst:141
msgid ":ref:`PEP 709 <whatsnew312-pep709>`, comprehension inlining"
msgstr ""

#: ../../whatsnew/3.12.rst:142
msgid ":ref:`CPython support <perf_profiling>` for the Linux ``perf`` profiler"
msgstr ""

#: ../../whatsnew/3.12.rst:143
msgid "Implement stack overflow protection on supported platforms"
msgstr ""

#: ../../whatsnew/3.12.rst:145
msgid "New typing features:"
msgstr "新增型別特性："

#: ../../whatsnew/3.12.rst:147
msgid ""
":ref:`PEP 692 <whatsnew312-pep692>`, using :class:`~typing.TypedDict` to "
"annotate :term:`**kwargs <argument>`"
msgstr ""
":ref:`PEP 692 <whatsnew312-pep692>`、使用 :class:`~typing.TypedDict` 來標註 :"
"term:`**kwargs <argument>`"

#: ../../whatsnew/3.12.rst:149
msgid ":ref:`PEP 698 <whatsnew312-pep698>`, :func:`typing.override` decorator"
msgstr ":ref:`PEP 698 <whatsnew312-pep698>`、:func:`typing.override` 裝飾器"

#: ../../whatsnew/3.12.rst:151
msgid "Important deprecations, removals or restrictions:"
msgstr "重要的棄用、刪除或限制："

#: ../../whatsnew/3.12.rst:153
msgid ""
":pep:`623`: Remove ``wstr`` from Unicode objects in Python's C API, reducing "
"the size of every :class:`str` object by at least 8 bytes."
msgstr ""

#: ../../whatsnew/3.12.rst:156
msgid ""
":pep:`632`: Remove the :mod:`!distutils` package. See `the migration guide "
"<https://peps.python.org/pep-0632/#migration-advice>`_ for advice replacing "
"the APIs it provided. The third-party `Setuptools <https://setuptools.pypa."
"io/en/latest/deprecated/distutils-legacy.html>`__ package continues to "
"provide :mod:`!distutils`, if you still require it in Python 3.12 and beyond."
msgstr ""

#: ../../whatsnew/3.12.rst:163
msgid ""
":gh:`95299`: Do not pre-install ``setuptools`` in virtual environments "
"created with :mod:`venv`. This means that ``distutils``, ``setuptools``, "
"``pkg_resources``, and ``easy_install`` will no longer available by default; "
"to access these run ``pip install setuptools`` in the :ref:`activated <venv-"
"explanation>` virtual environment."
msgstr ""

#: ../../whatsnew/3.12.rst:170
msgid ""
"The :mod:`!asynchat`, :mod:`!asyncore`, and :mod:`!imp` modules have been "
"removed, along with several :class:`unittest.TestCase` `method aliases "
"<unittest-TestCase-removed-aliases_>`_."
msgstr ""
":mod:`!asynchat`、:mod:`!asyncore` 和 :mod:`!imp` 模組以及幾個 :class:"
"`unittest.TestCase` 的\\ `方法別名 <unittest-TestCase-removed-aliases_>`_\\ "
"已被刪除。"

#: ../../whatsnew/3.12.rst:176 ../../whatsnew/3.12.rst:1825
msgid "New Features"
msgstr "新增特性"

#: ../../whatsnew/3.12.rst:181
msgid "PEP 695: Type Parameter Syntax"
msgstr "PEP 695：型別參數語法"

#: ../../whatsnew/3.12.rst:183
msgid ""
"Generic classes and functions under :pep:`484` were declared using a verbose "
"syntax that left the scope of type parameters unclear and required explicit "
"declarations of variance."
msgstr ""

#: ../../whatsnew/3.12.rst:187
msgid ""
":pep:`695` introduces a new, more compact and explicit way to create :ref:"
"`generic classes <generic-classes>` and :ref:`functions <generic-"
"functions>`::"
msgstr ""

#: ../../whatsnew/3.12.rst:190
msgid ""
"def max[T](args: Iterable[T]) -> T:\n"
"    ...\n"
"\n"
"class list[T]:\n"
"    def __getitem__(self, index: int, /) -> T:\n"
"        ...\n"
"\n"
"    def append(self, element: T) -> None:\n"
"        ..."
msgstr ""
"def max[T](args: Iterable[T]) -> T:\n"
"    ...\n"
"\n"
"class list[T]:\n"
"    def __getitem__(self, index: int, /) -> T:\n"
"        ...\n"
"\n"
"    def append(self, element: T) -> None:\n"
"        ..."

#: ../../whatsnew/3.12.rst:200
msgid ""
"In addition, the PEP introduces a new way to declare :ref:`type aliases "
"<type-aliases>` using the :keyword:`type` statement, which creates an "
"instance of :class:`~typing.TypeAliasType`::"
msgstr ""

#: ../../whatsnew/3.12.rst:204
msgid "type Point = tuple[float, float]"
msgstr "type Point = tuple[float, float]"

#: ../../whatsnew/3.12.rst:206
msgid "Type aliases can also be :ref:`generic <generic-type-aliases>`::"
msgstr "型別別名也可以是\\ :ref:`泛型 <generic-type-aliases>`： ::"

#: ../../whatsnew/3.12.rst:208
msgid "type Point[T] = tuple[T, T]"
msgstr "type Point[T] = tuple[T, T]"

#: ../../whatsnew/3.12.rst:210
msgid ""
"The new syntax allows declaring :class:`~typing.TypeVarTuple` and :class:"
"`~typing.ParamSpec` parameters, as well as :class:`~typing.TypeVar` "
"parameters with bounds or constraints::"
msgstr ""

#: ../../whatsnew/3.12.rst:214
msgid ""
"type IntFunc[**P] = Callable[P, int]  # ParamSpec\n"
"type LabeledTuple[*Ts] = tuple[str, *Ts]  # TypeVarTuple\n"
"type HashableSequence[T: Hashable] = Sequence[T]  # TypeVar with bound\n"
"type IntOrStrSequence[T: (int, str)] = Sequence[T]  # TypeVar with "
"constraints"
msgstr ""

#: ../../whatsnew/3.12.rst:219
msgid ""
"The value of type aliases and the bound and constraints of type variables "
"created through this syntax are evaluated only on demand (see :ref:`lazy "
"evaluation <lazy-evaluation>`). This means type aliases are able to refer to "
"other types defined later in the file."
msgstr ""

#: ../../whatsnew/3.12.rst:224
msgid ""
"Type parameters declared through a type parameter list are visible within "
"the scope of the declaration and any nested scopes, but not in the outer "
"scope. For example, they can be used in the type annotations for the methods "
"of a generic class or in the class body. However, they cannot be used in the "
"module scope after the class is defined. See :ref:`type-params` for a "
"detailed description of the runtime semantics of type parameters."
msgstr ""

#: ../../whatsnew/3.12.rst:231
msgid ""
"In order to support these scoping semantics, a new kind of scope is "
"introduced, the :ref:`annotation scope <annotation-scopes>`. Annotation "
"scopes behave for the most part like function scopes, but interact "
"differently with enclosing class scopes. In Python 3.13, :term:`annotations "
"<annotation>` will also be evaluated in annotation scopes."
msgstr ""

#: ../../whatsnew/3.12.rst:237
msgid "See :pep:`695` for more details."
msgstr "詳情請見 :pep:`695`。"

#: ../../whatsnew/3.12.rst:239
msgid ""
"(PEP written by Eric Traut. Implementation by Jelle Zijlstra, Eric Traut, "
"and others in :gh:`103764`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:245
msgid "PEP 701: Syntactic formalization of f-strings"
msgstr ""

#: ../../whatsnew/3.12.rst:247
msgid ""
":pep:`701` lifts some restrictions on the usage of :term:`f-strings <f-"
"string>`. Expression components inside f-strings can now be any valid Python "
"expression, including strings reusing the same quote as the containing f-"
"string, multi-line expressions, comments, backslashes, and unicode escape "
"sequences. Let's cover these in detail:"
msgstr ""

#: ../../whatsnew/3.12.rst:253
msgid ""
"Quote reuse: in Python 3.11, reusing the same quotes as the enclosing f-"
"string raises a :exc:`SyntaxError`, forcing the user to either use other "
"available quotes (like using double quotes or triple quotes if the f-string "
"uses single quotes). In Python 3.12, you can now do things like this:"
msgstr ""

#: ../../whatsnew/3.12.rst:262
msgid ""
"Note that before this change there was no explicit limit in how f-strings "
"can be nested, but the fact that string quotes cannot be reused inside the "
"expression component of f-strings made it impossible to nest f-strings "
"arbitrarily. In fact, this is the most nested f-string that could be written:"
msgstr ""

#: ../../whatsnew/3.12.rst:270
msgid ""
"As now f-strings can contain any valid Python expression inside expression "
"components, it is now possible to nest f-strings arbitrarily:"
msgstr ""

#: ../../whatsnew/3.12.rst:276
msgid ""
"Multi-line expressions and comments: In Python 3.11, f-string expressions "
"must be defined in a single line, even if the expression within the f-string "
"could normally span multiple lines (like literal lists being defined over "
"multiple lines), making them harder to read. In Python 3.12 you can now "
"define f-strings spanning multiple lines, and add inline comments:"
msgstr ""

#: ../../whatsnew/3.12.rst:290
msgid ""
"Backslashes and unicode characters: before Python 3.12 f-string expressions "
"couldn't contain any ``\\`` character. This also affected unicode :ref:"
"`escape sequences <escape-sequences>` (such as ``\\N{snowman}``) as these "
"contain the ``\\N`` part that previously could not be part of expression "
"components of f-strings. Now, you can define expressions like this:"
msgstr ""

#: ../../whatsnew/3.12.rst:303
msgid "See :pep:`701` for more details."
msgstr "詳情請見 :pep:`701`。"

#: ../../whatsnew/3.12.rst:305
msgid ""
"As a positive side-effect of how this feature has been implemented (by "
"parsing f-strings with :pep:`the PEG parser <617>`), now error messages for "
"f-strings are more precise and include the exact location of the error. For "
"example, in Python 3.11, the following f-string raises a :exc:`SyntaxError`:"
msgstr ""

#: ../../whatsnew/3.12.rst:310
msgid ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    (x z y)\n"
"     ^^^\n"
"SyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    (x z y)\n"
"     ^^^\n"
"SyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?"

#: ../../whatsnew/3.12.rst:318
msgid ""
"but the error message doesn't include the exact location of the error within "
"the line and also has the expression artificially surrounded by parentheses. "
"In Python 3.12, as f-strings are parsed with the PEG parser, error messages "
"can be more precise and show the entire line:"
msgstr ""

#: ../../whatsnew/3.12.rst:322
msgid ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"                   ^^^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"                   ^^^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"

#: ../../whatsnew/3.12.rst:330
msgid ""
"(Contributed by Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristián "
"Maureira-Fredes and Marta Gómez in :gh:`102856`. PEP written by Pablo "
"Galindo, Batuhan Taskaya, Lysandros Nikolaou and Marta Gómez)."
msgstr ""

#: ../../whatsnew/3.12.rst:337
msgid "PEP 684: A Per-Interpreter GIL"
msgstr ""

#: ../../whatsnew/3.12.rst:339
msgid ""
":pep:`684` introduces a per-interpreter :term:`GIL <global interpreter "
"lock>`, so that sub-interpreters may now be created with a unique GIL per "
"interpreter. This allows Python programs to take full advantage of multiple "
"CPU cores. This is currently only available through the C-API, though a "
"Python API is :pep:`anticipated for 3.13 <554>`."
msgstr ""

#: ../../whatsnew/3.12.rst:345
msgid ""
"Use the new :c:func:`Py_NewInterpreterFromConfig` function to create an "
"interpreter with its own GIL:"
msgstr ""

#: ../../whatsnew/3.12.rst:348
msgid ""
"PyInterpreterConfig config = {\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    return -1;\n"
"}\n"
"/* The new interpreter is now active in the current thread. */"
msgstr ""

#: ../../whatsnew/3.12.rst:361
msgid ""
"For further examples how to use the C-API for sub-interpreters with a per-"
"interpreter GIL, see :source:`Modules/_xxsubinterpretersmodule.c`."
msgstr ""

#: ../../whatsnew/3.12.rst:364
msgid "(Contributed by Eric Snow in :gh:`104210`, etc.)"
msgstr "（由 Eric Snow 於 :gh:`104210` 等貢獻。）"

#: ../../whatsnew/3.12.rst:369
msgid "PEP 669: Low impact monitoring for CPython"
msgstr ""

#: ../../whatsnew/3.12.rst:371
msgid ""
":pep:`669` defines a new :mod:`API <sys.monitoring>` for profilers, "
"debuggers, and other tools to monitor events in CPython. It covers a wide "
"range of events, including calls, returns, lines, exceptions, jumps, and "
"more. This means that you only pay for what you use, providing support for "
"near-zero overhead debuggers and coverage tools. See  :mod:`sys.monitoring` "
"for details."
msgstr ""

#: ../../whatsnew/3.12.rst:379
msgid "(Contributed by Mark Shannon in :gh:`103082`.)"
msgstr "（由 Mark Shannon 於 :gh:`103082` 中貢獻。）"

#: ../../whatsnew/3.12.rst:384
msgid "PEP 688: Making the buffer protocol accessible in Python"
msgstr ""

#: ../../whatsnew/3.12.rst:386
msgid ""
":pep:`688` introduces a way to use the :ref:`buffer protocol "
"<bufferobjects>` from Python code. Classes that implement the :meth:`~object."
"__buffer__` method are now usable as buffer types."
msgstr ""

#: ../../whatsnew/3.12.rst:390
msgid ""
"The new :class:`collections.abc.Buffer` ABC provides a standard way to "
"represent buffer objects, for example in type annotations. The new :class:"
"`inspect.BufferFlags` enum represents the flags that can be used to "
"customize buffer creation. (Contributed by Jelle Zijlstra in :gh:`102500`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:399
msgid "PEP 709: Comprehension inlining"
msgstr ""

#: ../../whatsnew/3.12.rst:401
msgid ""
"Dictionary, list, and set comprehensions are now inlined, rather than "
"creating a new single-use function object for each execution of the "
"comprehension. This speeds up execution of a comprehension by up to two "
"times. See :pep:`709` for further details."
msgstr ""

#: ../../whatsnew/3.12.rst:406
msgid ""
"Comprehension iteration variables remain isolated and don't overwrite a "
"variable of the same name in the outer scope, nor are they visible after the "
"comprehension. Inlining does result in a few visible behavior changes:"
msgstr ""

#: ../../whatsnew/3.12.rst:410
msgid ""
"There is no longer a separate frame for the comprehension in tracebacks, and "
"tracing/profiling no longer shows the comprehension as a function call."
msgstr ""

#: ../../whatsnew/3.12.rst:412
msgid ""
"The :mod:`symtable` module will no longer produce child symbol tables for "
"each comprehension; instead, the comprehension's locals will be included in "
"the parent function's symbol table."
msgstr ""

#: ../../whatsnew/3.12.rst:415
msgid ""
"Calling :func:`locals` inside a comprehension now includes variables from "
"outside the comprehension, and no longer includes the synthetic ``.0`` "
"variable for the comprehension \"argument\"."
msgstr ""

#: ../../whatsnew/3.12.rst:418
msgid ""
"A comprehension iterating directly over ``locals()`` (e.g. ``[k for k in "
"locals()]``) may see \"RuntimeError: dictionary changed size during "
"iteration\" when run under tracing (e.g. code coverage measurement). This is "
"the same behavior already seen in e.g. ``for k in locals():``. To avoid the "
"error, first create a list of keys to iterate over: ``keys = list(locals()); "
"[k for k in keys]``."
msgstr ""

#: ../../whatsnew/3.12.rst:425
msgid "(Contributed by Carl Meyer and Vladimir Matveev in :pep:`709`.)"
msgstr "（由 Carl Meyer 和 Vladimir Matveev 於 :pep:`709` 中貢獻。）"

#: ../../whatsnew/3.12.rst:428
msgid "Improved Error Messages"
msgstr ""

#: ../../whatsnew/3.12.rst:430
msgid ""
"Modules from the standard library are now potentially suggested as part of "
"the error messages displayed by the interpreter when a :exc:`NameError` is "
"raised to the top level. (Contributed by Pablo Galindo in :gh:`98254`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:439
msgid ""
"Improve the error suggestion for :exc:`NameError` exceptions for instances. "
"Now if a :exc:`NameError` is raised in a method and the instance has an "
"attribute that's exactly equal to the name in the exception, the suggestion "
"will include ``self.<NAME>`` instead of the closest match in the method "
"scope. (Contributed by Pablo Galindo in :gh:`99139`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:459
msgid ""
"Improve the :exc:`SyntaxError` error message when the user types ``import x "
"from y`` instead of ``from y import x``. (Contributed by Pablo Galindo in :"
"gh:`98931`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:469
msgid ""
":exc:`ImportError` exceptions raised from failed ``from <module> import "
"<name>`` statements now include suggestions for the value of ``<name>`` "
"based on the available names in ``<module>``. (Contributed by Pablo Galindo "
"in :gh:`91058`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:480
msgid "New Features Related to Type Hints"
msgstr ""

#: ../../whatsnew/3.12.rst:482
msgid ""
"This section covers major changes affecting :pep:`type hints <484>` and the :"
"mod:`typing` module."
msgstr ""

#: ../../whatsnew/3.12.rst:488
msgid "PEP 692: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr ""

#: ../../whatsnew/3.12.rst:490
msgid ""
"Typing ``**kwargs`` in a function signature as introduced by :pep:`484` "
"allowed for valid annotations only in cases where all of the ``**kwargs`` "
"were of the same type."
msgstr ""

#: ../../whatsnew/3.12.rst:494
msgid ""
":pep:`692` specifies a more precise way of typing ``**kwargs`` by relying on "
"typed dictionaries::"
msgstr ""

#: ../../whatsnew/3.12.rst:497
msgid ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"  name: str\n"
"  year: int\n"
"\n"
"def foo(**kwargs: Unpack[Movie]): ..."
msgstr ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"  name: str\n"
"  year: int\n"
"\n"
"def foo(**kwargs: Unpack[Movie]): ..."

#: ../../whatsnew/3.12.rst:505
msgid "See :pep:`692` for more details."
msgstr "詳情請見 :pep:`692`。"

#: ../../whatsnew/3.12.rst:507
msgid "(Contributed by Franek Magiera in :gh:`103629`.)"
msgstr "（由 Franek Magiera 於 :gh:`103629` 中貢獻。）"

#: ../../whatsnew/3.12.rst:512
msgid "PEP 698: Override Decorator for Static Typing"
msgstr ""

#: ../../whatsnew/3.12.rst:514
msgid ""
"A new decorator :func:`typing.override` has been added to the :mod:`typing` "
"module. It indicates to type checkers that the method is intended to "
"override a method in a superclass. This allows type checkers to catch "
"mistakes where a method that is intended to override something in a base "
"class does not in fact do so."
msgstr ""

#: ../../whatsnew/3.12.rst:520
msgid "Example::"
msgstr "範例： ::"

#: ../../whatsnew/3.12.rst:522
msgid ""
"from typing import override\n"
"\n"
"class Base:\n"
"  def get_color(self) -> str:\n"
"    return \"blue\"\n"
"\n"
"class GoodChild(Base):\n"
"  @override  # ok: overrides Base.get_color\n"
"  def get_color(self) -> str:\n"
"    return \"yellow\"\n"
"\n"
"class BadChild(Base):\n"
"  @override  # type checker error: does not override Base.get_color\n"
"  def get_colour(self) -> str:\n"
"    return \"red\""
msgstr ""

#: ../../whatsnew/3.12.rst:538
msgid "See :pep:`698` for more details."
msgstr "詳情請見 :pep:`698`。"

#: ../../whatsnew/3.12.rst:540
msgid "(Contributed by Steven Troxler in :gh:`101561`.)"
msgstr "（由 Steven Troxler 於 :gh:`101561` 中貢獻。）"

#: ../../whatsnew/3.12.rst:543
msgid "Other Language Changes"
msgstr "其他語言更動"

#: ../../whatsnew/3.12.rst:545
msgid ""
"The parser now raises :exc:`SyntaxError` when parsing source code containing "
"null bytes. (Contributed by Pablo Galindo in :gh:`96670`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:548
msgid ""
"A backslash-character pair that is not a valid escape sequence now generates "
"a :exc:`SyntaxWarning`, instead of :exc:`DeprecationWarning`. For example, "
"``re.compile(\"\\d+\\.\\d+\")`` now emits a :exc:`SyntaxWarning` "
"(``\"\\d\"`` is an invalid escape sequence, use raw strings for regular "
"expression: ``re.compile(r\"\\d+\\.\\d+\")``). In a future Python version, :"
"exc:`SyntaxError` will eventually be raised, instead of :exc:"
"`SyntaxWarning`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:557
msgid ""
"Octal escapes with value larger than ``0o377`` (ex: ``\"\\477\"``), "
"deprecated in Python 3.11, now produce a :exc:`SyntaxWarning`, instead of :"
"exc:`DeprecationWarning`. In a future Python version they will be eventually "
"a :exc:`SyntaxError`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:563
msgid ""
"Variables used in the target part of comprehensions that are not stored to "
"can now be used in assignment expressions (``:=``). For example, in ``[(b := "
"1) for a, b.prop in some_iter]``, the assignment to ``b`` is now allowed. "
"Note that assigning to variables stored to in the target part of "
"comprehensions (like ``a``) is still disallowed, as per :pep:`572`. "
"(Contributed by Nikita Sobolev in :gh:`100581`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:570
msgid ""
"Exceptions raised in a class or type's ``__set_name__`` method are no longer "
"wrapped by a :exc:`RuntimeError`. Context information is added to the "
"exception as a :pep:`678` note. (Contributed by Irit Katriel in :gh:`77757`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:574
msgid ""
"When a ``try-except*`` construct handles the entire :exc:`ExceptionGroup` "
"and raises one other exception, that exception is no longer wrapped in an :"
"exc:`ExceptionGroup`. Also changed in version 3.11.4. (Contributed by Irit "
"Katriel in :gh:`103590`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:579
msgid ""
"The Garbage Collector now runs only on the eval breaker mechanism of the "
"Python bytecode evaluation loop instead of object allocations. The GC can "
"also run when :c:func:`PyErr_CheckSignals` is called so C extensions that "
"need to run for a long time without executing any Python code also have a "
"chance to execute the GC periodically. (Contributed by Pablo Galindo in :gh:"
"`97922`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:586
msgid ""
"All builtin and extension callables expecting boolean parameters now accept "
"arguments of any type instead of just :class:`bool` and :class:`int`. "
"(Contributed by Serhiy Storchaka in :gh:`60203`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:590
msgid ""
":class:`memoryview` now supports the half-float type (the \"e\" format "
"code). (Contributed by Donghee Na and Antoine Pitrou in :gh:`90751`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:593
msgid ""
":class:`slice` objects are now hashable, allowing them to be used as dict "
"keys and set items. (Contributed by Will Bradshaw, Furkan Onder, and Raymond "
"Hettinger in :gh:`101264`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:596
msgid ""
":func:`sum` now uses Neumaier summation to improve accuracy and "
"commutativity when summing floats or mixed ints and floats. (Contributed by "
"Raymond Hettinger in :gh:`100425`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:600
msgid ""
":func:`ast.parse` now raises :exc:`SyntaxError` instead of :exc:`ValueError` "
"when parsing source code containing null bytes. (Contributed by Pablo "
"Galindo in :gh:`96670`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:604
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile extraction filters <tarfile-extraction-filter>` "
"for details. In Python 3.14, the default will switch to ``'data'``. "
"(Contributed by Petr Viktorin in :pep:`706`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:612
msgid ""
":class:`types.MappingProxyType` instances are now hashable if the underlying "
"mapping is hashable. (Contributed by Serhiy Storchaka in :gh:`87995`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:616
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` through the new "
"environment variable :envvar:`PYTHONPERFSUPPORT` and command-line option :"
"option:`-X perf <-X>`, as well as the new :func:`sys."
"activate_stack_trampoline`, :func:`sys.deactivate_stack_trampoline`, and :"
"func:`sys.is_stack_trampoline_active` functions. (Design by Pablo Galindo. "
"Contributed by Pablo Galindo and Christian Heimes with contributions from "
"Gregory P. Smith [Google] and Mark Shannon in :gh:`96123`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:628
msgid "New Modules"
msgstr "新增模組"

#: ../../whatsnew/3.12.rst:630
msgid "None."
msgstr ""

#: ../../whatsnew/3.12.rst:634
msgid "Improved Modules"
msgstr "改進的模組"

#: ../../whatsnew/3.12.rst:637
msgid "array"
msgstr "array"

#: ../../whatsnew/3.12.rst:639
msgid ""
"The :class:`array.array` class now supports subscripting, making it a :term:"
"`generic type`. (Contributed by Jelle Zijlstra in :gh:`98658`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:643
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.12.rst:645
msgid ""
"The performance of writing to sockets in :mod:`asyncio` has been "
"significantly improved. ``asyncio`` now avoids unnecessary copying when "
"writing to sockets and uses :meth:`~socket.socket.sendmsg` if the platform "
"supports it. (Contributed by Kumar Aditya in :gh:`91166`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:650
msgid ""
"Add :func:`asyncio.eager_task_factory` and :func:`asyncio."
"create_eager_task_factory` functions to allow opting an event loop in to "
"eager task execution, making some use-cases 2x to 5x faster. (Contributed by "
"Jacob Bower & Itamar Oren in :gh:`102853`, :gh:`104140`, and :gh:`104138`)"
msgstr ""

#: ../../whatsnew/3.12.rst:655
msgid ""
"On Linux, :mod:`asyncio` uses :class:`asyncio.PidfdChildWatcher` by default "
"if :func:`os.pidfd_open` is available and functional instead of :class:"
"`asyncio.ThreadedChildWatcher`. (Contributed by Kumar Aditya in :gh:`98024`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:660
msgid ""
"The event loop now uses the best available child watcher for each platform (:"
"class:`asyncio.PidfdChildWatcher` if supported and :class:`asyncio."
"ThreadedChildWatcher` otherwise), so manually configuring a child watcher is "
"not recommended. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:666
msgid ""
"Add *loop_factory* parameter to :func:`asyncio.run` to allow specifying a "
"custom event loop factory. (Contributed by Kumar Aditya in :gh:`99388`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:670
msgid ""
"Add C implementation of :func:`asyncio.current_task` for 4x-6x speedup. "
"(Contributed by Itamar Oren and Pranav Thulasiram Bhat in :gh:`100344`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:673
msgid ""
":func:`asyncio.iscoroutine` now returns ``False`` for generators as :mod:"
"`asyncio` does not support legacy generator-based coroutines. (Contributed "
"by Kumar Aditya in :gh:`102748`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:677
msgid ""
":func:`asyncio.wait` and :func:`asyncio.as_completed` now accepts generators "
"yielding tasks. (Contributed by Kumar Aditya in :gh:`78530`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:682
msgid "calendar"
msgstr "calendar"

#: ../../whatsnew/3.12.rst:684
msgid ""
"Add enums :data:`calendar.Month` and :data:`calendar.Day` defining months of "
"the year and days of the week. (Contributed by Prince Roshan in :gh:"
"`103636`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:689
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.12.rst:691
msgid ""
"Add :const:`csv.QUOTE_NOTNULL` and :const:`csv.QUOTE_STRINGS` flags to "
"provide finer grained control of ``None`` and empty strings by :class:`~csv."
"reader` and :class:`~csv.writer` objects."
msgstr ""

#: ../../whatsnew/3.12.rst:696
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.12.rst:698
msgid ""
"Pseudo instruction opcodes (which are used by the compiler but do not appear "
"in executable bytecode) are now exposed in the :mod:`dis` module. :opcode:"
"`HAVE_ARGUMENT` is still relevant to real opcodes, but it is not useful for "
"pseudo instructions. Use the new :data:`dis.hasarg` collection instead. "
"(Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:706
msgid ""
"Add the :data:`dis.hasexc` collection to signify instructions that set an "
"exception handler. (Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:710
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.12.rst:712
msgid ""
"Objects of type :class:`fractions.Fraction` now support float-style "
"formatting. (Contributed by Mark Dickinson in :gh:`100161`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:716
msgid "importlib.resources"
msgstr "importlib.resources"

#: ../../whatsnew/3.12.rst:718
msgid ""
":func:`importlib.resources.as_file` now supports resource directories. "
"(Contributed by Jason R. Coombs in :gh:`97930`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:721
msgid ""
"Rename first parameter of :func:`importlib.resources.files` to *anchor*. "
"(Contributed by Jason R. Coombs in :gh:`100598`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:725
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.12.rst:727
msgid ""
"Add :func:`inspect.markcoroutinefunction` to mark sync functions that return "
"a :term:`coroutine` for use with :func:`inspect.iscoroutinefunction`. "
"(Contributed by Carlton Gibson in :gh:`99247`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:731
msgid ""
"Add :func:`inspect.getasyncgenstate` and :func:`inspect.getasyncgenlocals` "
"for determining the current state of asynchronous generators. (Contributed "
"by Thomas Krennwallner in :gh:`79940`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:735
msgid ""
"The performance of :func:`inspect.getattr_static` has been considerably "
"improved. Most calls to the function should be at least 2x faster than they "
"were in Python 3.11. (Contributed by Alex Waygood in :gh:`103193`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:740
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.12.rst:742
msgid ""
"Add :func:`itertools.batched` for collecting into even-sized tuples where "
"the last batch may be shorter than the rest. (Contributed by Raymond "
"Hettinger in :gh:`98363`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:747
msgid "math"
msgstr "math"

#: ../../whatsnew/3.12.rst:749
msgid ""
"Add :func:`math.sumprod` for computing a sum of products. (Contributed by "
"Raymond Hettinger in :gh:`100485`.)"
msgstr ""
"新增 :func:`math.sumprod` 以計算乘積總和。（由 Raymond Hettinger 於 :gh:"
"`100485` 中貢獻。）"

#: ../../whatsnew/3.12.rst:752
msgid ""
"Extend :func:`math.nextafter` to include a *steps* argument for moving up or "
"down multiple steps at a time. (Contributed by Matthias Goergens, Mark "
"Dickinson, and Raymond Hettinger in :gh:`94906`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:757
msgid "os"
msgstr "os"

#: ../../whatsnew/3.12.rst:759
msgid ""
"Add :const:`os.PIDFD_NONBLOCK` to open a file descriptor for a process with :"
"func:`os.pidfd_open` in non-blocking mode. (Contributed by Kumar Aditya in :"
"gh:`93312`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:763
msgid ""
":class:`os.DirEntry` now includes an :meth:`os.DirEntry.is_junction` method "
"to check if the entry is a junction. (Contributed by Charles Machalow in :gh:"
"`99547`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:767
msgid ""
"Add :func:`os.listdrives`, :func:`os.listvolumes` and :func:`os.listmounts` "
"functions on Windows for enumerating drives, volumes and mount points. "
"(Contributed by Steve Dower in :gh:`102519`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:771
msgid ""
":func:`os.stat` and :func:`os.lstat` are now more accurate on Windows. The "
"``st_birthtime`` field will now be filled with the creation time of the "
"file, and ``st_ctime`` is deprecated but still contains the creation time "
"(but in the future will return the last metadata change, for consistency "
"with other platforms). ``st_dev`` may be up to 64 bits and ``st_ino`` up to "
"128 bits depending on your file system, and ``st_rdev`` is always set to "
"zero rather than incorrect values. Both functions may be significantly "
"faster on newer releases of Windows. (Contributed by Steve Dower in :gh:"
"`99726`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:782
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.12.rst:784
msgid ""
"Add :func:`os.path.isjunction` to check if a given path is a junction. "
"(Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:787
msgid ""
"Add :func:`os.path.splitroot` to split a path into a triad ``(drive, root, "
"tail)``. (Contributed by Barney Gale in :gh:`101000`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:791
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.12.rst:793
msgid ""
"Add support for subclassing :class:`pathlib.PurePath` and :class:`pathlib."
"Path`, plus their Posix- and Windows-specific variants. Subclasses may "
"override the :meth:`pathlib.PurePath.with_segments` method to pass "
"information between path instances."
msgstr ""

#: ../../whatsnew/3.12.rst:798
msgid ""
"Add :meth:`pathlib.Path.walk` for walking the directory trees and generating "
"all file or directory names within them, similar to :func:`os.walk`. "
"(Contributed by Stanislav Zmiev in :gh:`90385`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:802
msgid ""
"Add *walk_up* optional parameter to :meth:`pathlib.PurePath.relative_to` to "
"allow the insertion of ``..`` entries in the result; this behavior is more "
"consistent with :func:`os.path.relpath`. (Contributed by Domenico Ragusa in :"
"gh:`84538`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:807
msgid ""
"Add :meth:`pathlib.Path.is_junction` as a proxy to :func:`os.path."
"isjunction`. (Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:810
msgid ""
"Add *case_sensitive* optional parameter to :meth:`pathlib.Path.glob`, :meth:"
"`pathlib.Path.rglob` and :meth:`pathlib.PurePath.match` for matching the "
"path's case sensitivity, allowing for more precise control over the matching "
"process."
msgstr ""

#: ../../whatsnew/3.12.rst:815
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.12.rst:817
msgid ""
"Add convenience variables to hold values temporarily for debug session and "
"provide quick access to values like the current frame or the return value. "
"(Contributed by Tian Gao in :gh:`103693`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:823
msgid "random"
msgstr "random"

#: ../../whatsnew/3.12.rst:825
msgid ""
"Add :func:`random.binomialvariate`. (Contributed by Raymond Hettinger in :gh:"
"`81620`.)"
msgstr ""
"新增 :func:`random.binomialvariate`。（由 Raymond Hettinger 於 :gh:`81620` 中"
"貢獻。）"

#: ../../whatsnew/3.12.rst:828
msgid ""
"Add a default of ``lambd=1.0`` to :func:`random.expovariate`. (Contributed "
"by Raymond Hettinger in :gh:`100234`.)"
msgstr ""
"將預設值 ``lambd=1.0`` 加入至 :func:`random.expovariate` 中。（由 Raymond "
"Hettinger 在 :gh:`100234` 中貢獻。）"

#: ../../whatsnew/3.12.rst:832
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.12.rst:834
msgid ""
":func:`shutil.make_archive` now passes the *root_dir* argument to custom "
"archivers which support it. In this case it no longer temporarily changes "
"the current working directory of the process to *root_dir* to perform "
"archiving. (Contributed by Serhiy Storchaka in :gh:`74696`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:840
msgid ""
":func:`shutil.rmtree` now accepts a new argument *onexc* which is an error "
"handler like *onerror* but which expects an exception instance rather than a "
"*(typ, val, tb)* triplet. *onerror* is deprecated. (Contributed by Irit "
"Katriel in :gh:`102828`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:845
msgid ""
":func:`shutil.which` now consults the *PATHEXT* environment variable to find "
"matches within *PATH* on Windows even when the given *cmd* includes a "
"directory component. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:850
msgid ""
":func:`shutil.which` will call ``NeedCurrentDirectoryForExePathW`` when "
"querying for executables on Windows to determine if the current working "
"directory should be prepended to the search path. (Contributed by Charles "
"Machalow in :gh:`103179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:855
msgid ""
":func:`shutil.which` will return a path matching the *cmd* with a component "
"from ``PATHEXT`` prior to a direct match elsewhere in the search path on "
"Windows. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:861 ../../whatsnew/3.12.rst:1529
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.12.rst:863
msgid ""
"Add a :ref:`command-line interface <sqlite3-cli>`. (Contributed by Erlend E. "
"Aasland in :gh:`77617`.)"
msgstr ""
"新增\\ :ref:`命令列介面 <sqlite3-cli>`。（由 Erlend E. Aasland 於 :gh:"
"`77617` 中貢獻。）"

#: ../../whatsnew/3.12.rst:866
msgid ""
"Add the :attr:`sqlite3.Connection.autocommit` attribute to :class:`sqlite3."
"Connection` and the *autocommit* parameter to :func:`sqlite3.connect` to "
"control :pep:`249`-compliant :ref:`transaction handling <sqlite3-transaction-"
"control-autocommit>`. (Contributed by Erlend E. Aasland in :gh:`83638`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:873
msgid ""
"Add *entrypoint* keyword-only parameter to :meth:`sqlite3.Connection."
"load_extension`, for overriding the SQLite extension entry point. "
"(Contributed by Erlend E. Aasland in :gh:`103015`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:878
msgid ""
"Add :meth:`sqlite3.Connection.getconfig` and :meth:`sqlite3.Connection."
"setconfig` to :class:`sqlite3.Connection` to make configuration changes to a "
"database connection. (Contributed by Erlend E. Aasland in :gh:`103489`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:884
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.12.rst:886
msgid ""
"Extend :func:`statistics.correlation` to include as a ``ranked`` method for "
"computing the Spearman correlation of ranked data. (Contributed by Raymond "
"Hettinger in :gh:`95861`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:891
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.12.rst:893
msgid ""
"Add the :mod:`sys.monitoring` namespace to expose the new :ref:`PEP 669 "
"<whatsnew312-pep669>` monitoring API. (Contributed by Mark Shannon in :gh:"
"`103082`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:897
msgid ""
"Add :func:`sys.activate_stack_trampoline` and :func:`sys."
"deactivate_stack_trampoline` for activating and deactivating stack profiler "
"trampolines, and :func:`sys.is_stack_trampoline_active` for querying if "
"stack profiler trampolines are active. (Contributed by Pablo Galindo and "
"Christian Heimes with contributions from Gregory P. Smith [Google] and Mark "
"Shannon in :gh:`96123`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:906
msgid ""
"Add :data:`sys.last_exc` which holds the last unhandled exception that was "
"raised (for post-mortem debugging use cases). Deprecate the three fields "
"that have the same information in its legacy form: :data:`sys.last_type`, :"
"data:`sys.last_value` and :data:`sys.last_traceback`. (Contributed by Irit "
"Katriel in :gh:`102778`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:912 ../../whatsnew/3.12.rst:1724
msgid ""
":func:`sys._current_exceptions` now returns a mapping from thread-id to an "
"exception instance, rather than to a ``(typ, exc, tb)`` tuple. (Contributed "
"by Irit Katriel in :gh:`103176`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:916
msgid ""
":func:`sys.setrecursionlimit` and :func:`sys.getrecursionlimit`. The "
"recursion limit now applies only to Python code. Builtin functions do not "
"use the recursion limit, but are protected by a different mechanism that "
"prevents recursion from causing a virtual machine crash."
msgstr ""

#: ../../whatsnew/3.12.rst:922
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.12.rst:924
msgid ""
"The :class:`tempfile.NamedTemporaryFile` function has a new optional "
"parameter *delete_on_close* (Contributed by Evgeny Zorin in :gh:`58451`.)"
msgstr ""
":class:`tempfile.NamedTemporaryFile` 函式新增了一個選擇性參數 "
"*delete_on_close* （由 Evgeny Zorin 於 :gh:`58451` 中貢獻。）"

#: ../../whatsnew/3.12.rst:926
msgid ""
":func:`tempfile.mkdtemp` now always returns an absolute path, even if the "
"argument provided to the *dir* parameter is a relative path."
msgstr ""
":func:`tempfile.mkdtemp` 現在總是會傳回絕對路徑，即使提供給 *dir* 參數的引數"
"是相對路徑。"

#: ../../whatsnew/3.12.rst:930
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.12.rst:932
msgid ""
"Add :func:`threading.settrace_all_threads` and :func:`threading."
"setprofile_all_threads` that allow to set tracing and profiling functions in "
"all running threads in addition to the calling one. (Contributed by Pablo "
"Galindo in :gh:`93503`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:938
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.12.rst:940
msgid ""
"``tkinter.Canvas.coords()`` now flattens its arguments. It now accepts not "
"only coordinates as separate arguments (``x1, y1, x2, y2, ...``) and a "
"sequence of coordinates (``[x1, y1, x2, y2, ...]``), but also coordinates "
"grouped in pairs (``(x1, y1), (x2, y2), ...`` and ``[(x1, y1), (x2, "
"y2), ...]``), like ``create_*()`` methods. (Contributed by Serhiy Storchaka "
"in :gh:`94473`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:949
msgid "tokenize"
msgstr "tokenize"

#: ../../whatsnew/3.12.rst:951
msgid ""
"The :mod:`tokenize` module includes the changes introduced in :pep:`701`. "
"(Contributed by Marta Gómez Macías and Pablo Galindo in :gh:`102856`.) See :"
"ref:`whatsnew312-porting-to-python312` for more information on the changes "
"to the :mod:`tokenize` module."
msgstr ""

#: ../../whatsnew/3.12.rst:957
msgid "types"
msgstr "types"

#: ../../whatsnew/3.12.rst:959
msgid ""
"Add :func:`types.get_original_bases` to allow for further introspection of :"
"ref:`user-defined-generics` when subclassed. (Contributed by James Hilton-"
"Balfe and Alex Waygood in :gh:`101827`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:966
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.12.rst:968
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols <typing."
"runtime_checkable>` now use :func:`inspect.getattr_static` rather than :func:"
"`hasattr` to lookup whether attributes exist. This means that descriptors "
"and :meth:`~object.__getattr__` methods are no longer unexpectedly evaluated "
"during ``isinstance()`` checks against runtime-checkable protocols. However, "
"it may also mean that some objects which used to be considered instances of "
"a runtime-checkable protocol may no longer be considered instances of that "
"protocol on Python 3.12+, and vice versa. Most users are unlikely to be "
"affected by this change. (Contributed by Alex Waygood in :gh:`102433`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:979
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. For example::"
msgstr ""

#: ../../whatsnew/3.12.rst:984
msgid ""
">>> from typing import Protocol, runtime_checkable\n"
">>> @runtime_checkable\n"
"... class HasX(Protocol):\n"
"...     x = 1\n"
"...\n"
">>> class Foo: ...\n"
"...\n"
">>> f = Foo()\n"
">>> isinstance(f, HasX)\n"
"False\n"
">>> f.x = 1\n"
">>> isinstance(f, HasX)\n"
"True\n"
">>> HasX.y = 2\n"
">>> isinstance(f, HasX)  # unchanged, even though HasX now also has a \"y\" "
"attribute\n"
"True"
msgstr ""

#: ../../whatsnew/3.12.rst:1001
msgid ""
"This change was made in order to speed up ``isinstance()`` checks against "
"runtime-checkable protocols."
msgstr ""

#: ../../whatsnew/3.12.rst:1004
msgid ""
"The performance profile of :func:`isinstance` checks against :func:`runtime-"
"checkable protocols <typing.runtime_checkable>` has changed significantly. "
"Most ``isinstance()`` checks against protocols with only a few members "
"should be at least 2x faster than in 3.11, and some may be 20x faster or "
"more. However, ``isinstance()`` checks against protocols with many members "
"may be slower than in Python 3.11. (Contributed by Alex Waygood in :gh:"
"`74690` and :gh:`103193`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1012
msgid ""
"All :data:`typing.TypedDict` and :data:`typing.NamedTuple` classes now have "
"the ``__orig_bases__`` attribute. (Contributed by Adrian Garcia Badaracco "
"in :gh:`103699`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1016
msgid ""
"Add ``frozen_default`` parameter to :func:`typing.dataclass_transform`. "
"(Contributed by Erik De Bonte in :gh:`99957`.)"
msgstr ""
"新增 ``frozen_default`` 參數至 :func:`typing.dataclass_transform`。（由 Erik "
"De Bonte 於 :gh:`99957` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1020
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.12.rst:1022
msgid ""
"The Unicode database has been updated to version 15.0.0. (Contributed by "
"Benjamin Peterson in :gh:`96734`)."
msgstr ""

#: ../../whatsnew/3.12.rst:1026 ../../whatsnew/3.12.rst:1569
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.12.rst:1028
msgid ""
"Add a ``--durations`` command line option, showing the N slowest test cases::"
msgstr "新增 ``--durations`` 命令列選項，顯示 N 個最慢的測試案例："

#: ../../whatsnew/3.12.rst:1030
msgid ""
"python3 -m unittest --durations=3 lib.tests.test_threading\n"
".....\n"
"Slowest test durations\n"
"----------------------------------------------------------------------\n"
"1.210s     test_timeout (Lib.test.test_threading.BarrierTests)\n"
"1.003s     test_default_timeout (Lib.test.test_threading.BarrierTests)\n"
"0.518s     test_timeout (Lib.test.test_threading.EventTests)\n"
"\n"
"(0.000 durations hidden.  Use -v to show these durations.)\n"
"----------------------------------------------------------------------\n"
"Ran 158 tests in 9.869s\n"
"\n"
"OK (skipped=3)"
msgstr ""
"python3 -m unittest --durations=3 lib.tests.test_threading\n"
".....\n"
"Slowest test durations\n"
"----------------------------------------------------------------------\n"
"1.210s     test_timeout (Lib.test.test_threading.BarrierTests)\n"
"1.003s     test_default_timeout (Lib.test.test_threading.BarrierTests)\n"
"0.518s     test_timeout (Lib.test.test_threading.EventTests)\n"
"\n"
"(0.000 durations hidden.  Use -v to show these durations.)\n"
"----------------------------------------------------------------------\n"
"Ran 158 tests in 9.869s\n"
"\n"
"OK (skipped=3)"

#: ../../whatsnew/3.12.rst:1044
msgid "(Contributed by Giampaolo Rodola in :gh:`48330`)"
msgstr "（由 Giampaolo Rodola 於 :gh:`48330` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1047
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.12.rst:1049
msgid ""
"Add a :ref:`command-line interface <uuid-cli>`. (Contributed by Adam Chhina "
"in :gh:`88597`.)"
msgstr ""
"新增一個\\ :ref:`命令列介面 <uuid-cli>`。（由 Adam Chhina 於 :gh:`88597` 中貢"
"獻。）"

#: ../../whatsnew/3.12.rst:1054
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.12.rst:1056
msgid ""
"Remove ``wstr`` and ``wstr_length`` members from Unicode objects. It reduces "
"object size by 8 or 16 bytes on 64bit platform. (:pep:`623`) (Contributed by "
"Inada Naoki in :gh:`92536`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1060
msgid ""
"Add experimental support for using the BOLT binary optimizer in the build "
"process, which improves performance by 1-5%. (Contributed by Kevin "
"Modzelewski in :gh:`90536` and tuned by Donghee Na in :gh:`101525`)"
msgstr ""

#: ../../whatsnew/3.12.rst:1064
msgid ""
"Speed up the regular expression substitution (functions :func:`re.sub` and :"
"func:`re.subn` and corresponding :class:`!re.Pattern` methods) for "
"replacement strings containing group references by 2--3 times. (Contributed "
"by Serhiy Storchaka in :gh:`91524`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1069
msgid ""
"Speed up :class:`asyncio.Task` creation by deferring expensive string "
"formatting. (Contributed by Itamar Oren in :gh:`103793`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1072
msgid ""
"The :func:`tokenize.tokenize` and :func:`tokenize.generate_tokens` functions "
"are up to 64% faster as a side effect of the changes required to cover :pep:"
"`701` in the :mod:`tokenize` module. (Contributed by Marta Gómez Macías and "
"Pablo Galindo in :gh:`102856`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1077
msgid ""
"Speed up :func:`super` method calls and attribute loads via the new :opcode:"
"`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer and Vladimir "
"Matveev in :gh:`103497`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1083
msgid "CPython bytecode changes"
msgstr "CPython 位元組碼變更"

#: ../../whatsnew/3.12.rst:1085
msgid ""
"Remove the :opcode:`!LOAD_METHOD` instruction. It has been merged into :"
"opcode:`LOAD_ATTR`. :opcode:`LOAD_ATTR` will now behave like the old :opcode:"
"`!LOAD_METHOD` instruction if the low bit of its oparg is set. (Contributed "
"by Ken Jin in :gh:`93429`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1090
msgid ""
"Remove the :opcode:`!JUMP_IF_FALSE_OR_POP` and :opcode:`!"
"JUMP_IF_TRUE_OR_POP` instructions. (Contributed by Irit Katriel in :gh:"
"`102859`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1093
msgid ""
"Remove the :opcode:`!PRECALL` instruction. (Contributed by Mark Shannon in :"
"gh:`92925`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1096
msgid ""
"Add the :opcode:`BINARY_SLICE` and :opcode:`STORE_SLICE` instructions. "
"(Contributed by Mark Shannon in :gh:`94163`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1099
msgid ""
"Add the :opcode:`CALL_INTRINSIC_1` instructions. (Contributed by Mark "
"Shannon in :gh:`99005`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1102
msgid ""
"Add the :opcode:`CALL_INTRINSIC_2` instruction. (Contributed by Irit Katriel "
"in :gh:`101799`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1105
msgid ""
"Add the :opcode:`CLEANUP_THROW` instruction. (Contributed by Brandt Bucher "
"in :gh:`90997`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1108
msgid ""
"Add the :opcode:`!END_SEND` instruction. (Contributed by Mark Shannon in :gh:"
"`103082`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1111
msgid ""
"Add the :opcode:`LOAD_FAST_AND_CLEAR` instruction as part of the "
"implementation of :pep:`709`. (Contributed by Carl Meyer in :gh:`101441`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1114
msgid ""
"Add the :opcode:`LOAD_FAST_CHECK` instruction. (Contributed by Dennis "
"Sweeney in :gh:`93143`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1117
msgid ""
"Add the :opcode:`LOAD_FROM_DICT_OR_DEREF`, :opcode:"
"`LOAD_FROM_DICT_OR_GLOBALS`, and :opcode:`LOAD_LOCALS` opcodes as part of "
"the implementation of :pep:`695`. Remove the :opcode:`!LOAD_CLASSDEREF` "
"opcode, which can be replaced with :opcode:`LOAD_LOCALS` plus :opcode:"
"`LOAD_FROM_DICT_OR_DEREF`. (Contributed by Jelle Zijlstra in :gh:`103764`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1123
msgid ""
"Add the :opcode:`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer "
"and Vladimir Matveev in :gh:`103497`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1126
msgid ""
"Add the :opcode:`RETURN_CONST` instruction. (Contributed by Wenyang Wang in :"
"gh:`101632`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1129
msgid "Demos and Tools"
msgstr ""

#: ../../whatsnew/3.12.rst:1131
msgid ""
"Remove the ``Tools/demo/`` directory which contained old demo scripts. A "
"copy can be found in the `old-demos project <https://github.com/gvanrossum/"
"old-demos>`_. (Contributed by Victor Stinner in :gh:`97681`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1136
msgid ""
"Remove outdated example scripts of the ``Tools/scripts/`` directory. A copy "
"can be found in the `old-demos project <https://github.com/gvanrossum/old-"
"demos>`_. (Contributed by Victor Stinner in :gh:`97669`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1143 ../../whatsnew/3.12.rst:2127
msgid "Deprecated"
msgstr "已棄用"

#: ../../whatsnew/3.12.rst:1145
#: ../../deprecations/pending-removal-in-3.14.rst:4
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""
":mod:`argparse`：:class:`!argparse.BooleanOptionalAction` 的 *type*、"
"*choices* 和 *metavar* 參數已被棄用，將在 3.14 中移除。 (由 Nikita Sobolev "
"於 :gh:`92248` 貢獻。)"

#: ../../whatsnew/3.12.rst:1150
msgid ""
":mod:`ast`: The following :mod:`ast` features have been deprecated in "
"documentation since Python 3.8, now cause a :exc:`DeprecationWarning` to be "
"emitted at runtime when they are accessed or used, and will be removed in "
"Python 3.14:"
msgstr ""

#: ../../whatsnew/3.12.rst:1154
#: ../../deprecations/pending-removal-in-3.14.rst:13
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../whatsnew/3.12.rst:1155
#: ../../deprecations/pending-removal-in-3.14.rst:14
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../whatsnew/3.12.rst:1156
#: ../../deprecations/pending-removal-in-3.14.rst:15
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../whatsnew/3.12.rst:1157
#: ../../deprecations/pending-removal-in-3.14.rst:16
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: ../../whatsnew/3.12.rst:1158
#: ../../deprecations/pending-removal-in-3.14.rst:17
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../whatsnew/3.12.rst:1160
#: ../../deprecations/pending-removal-in-3.14.rst:19
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""
"請改用 :class:`ast.Constant`。（由 Serhiy Storchaka 於 :gh:`90953` 貢獻。）"

#: ../../whatsnew/3.12.rst:1163
#: ../../deprecations/pending-removal-in-3.14.rst:22
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`："

#: ../../whatsnew/3.12.rst:1165
msgid ""
"The child watcher classes :class:`asyncio.MultiLoopChildWatcher`, :class:"
"`asyncio.FastChildWatcher`, :class:`asyncio.AbstractChildWatcher` and :class:"
"`asyncio.SafeChildWatcher` are deprecated and will be removed in Python "
"3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1171
#: ../../deprecations/pending-removal-in-3.14.rst:30
msgid ""
":func:`asyncio.set_child_watcher`, :func:`asyncio.get_child_watcher`, :meth:"
"`asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`asyncio."
"AbstractEventLoopPolicy.get_child_watcher` are deprecated and will be "
"removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
":func:`asyncio.set_child_watcher`、:func:`asyncio.get_child_watcher`、:meth:"
"`asyncio.AbstractEventLoopPolicy.set_child_watcher` 和 :meth:`asyncio."
"AbstractEventLoopPolicy.get_child_watcher` 已被棄用並將在 Python 3.14 中移"
"除。（由 Kumar Aditya 於 :gh:`94597` 貢獻。）"

#: ../../whatsnew/3.12.rst:1177
#: ../../deprecations/pending-removal-in-3.14.rst:36
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"
msgstr ""
"預設事件迴圈策略的 :meth:`~asyncio.get_event_loop` 方法現在會在沒有設定目前事"
"件迴圈且決定建立一個時發出 :exc:`DeprecationWarning`。 (由 Serhiy Storchaka "
"和 Guido van Rossum 於 :gh:`100160` 貢獻。)"

#: ../../whatsnew/3.12.rst:1182
#: ../../deprecations/pending-removal-in-future.rst:41
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`：``calendar.January`` 和 ``calendar.February`` 常數已被棄用並"
"被 :data:`calendar.JANUARY` 和 :data:`calendar.FEBRUARY` 取代。 (由 Prince "
"Roshan 於 :gh:`103636` 貢獻。)"

#: ../../whatsnew/3.12.rst:1186
msgid ""
":mod:`collections.abc`: Deprecated :class:`collections.abc.ByteString`. "
"Prefer :class:`Sequence` or :class:`collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1191
msgid ""
":mod:`datetime`: :class:`datetime.datetime`'s :meth:`~datetime.datetime."
"utcnow` and :meth:`~datetime.datetime.utcfromtimestamp` are deprecated and "
"will be removed in a future version. Instead, use timezone-aware objects to "
"represent datetimes in UTC: respectively, call :meth:`~datetime.datetime."
"now` and :meth:`~datetime.datetime.fromtimestamp`  with the *tz* parameter "
"set to :const:`datetime.UTC`. (Contributed by Paul Ganssle in :gh:`103857`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1199
msgid ""
":mod:`email`: Deprecate the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""
":mod:`email`：棄用 :func:`email.utils.localtime` 中的 *isdst* 參數。（由 "
"Alan Williams 於 :gh:`72346` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1202
msgid ""
":mod:`importlib.abc`: Deprecated the following classes, scheduled for "
"removal in Python 3.14:"
msgstr ":mod:`importlib.abc`：棄用下列類別，預定於 Python 3.14 中移除："

#: ../../whatsnew/3.12.rst:1205
#: ../../deprecations/pending-removal-in-3.14.rst:55
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../whatsnew/3.12.rst:1206
#: ../../deprecations/pending-removal-in-3.14.rst:56
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1207
#: ../../deprecations/pending-removal-in-3.14.rst:57
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1209
#: ../../deprecations/pending-removal-in-3.14.rst:59
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "請改用 :mod:`importlib.resources.abc` 類別："

#: ../../whatsnew/3.12.rst:1211
#: ../../deprecations/pending-removal-in-3.14.rst:61
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1212
#: ../../deprecations/pending-removal-in-3.14.rst:62
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1214
#: ../../deprecations/pending-removal-in-3.14.rst:64
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "（由 Jason R. Coombs 和 Hugo van Kemenade 貢獻於 :gh:`93963`。）"

#: ../../whatsnew/3.12.rst:1216
msgid ""
":mod:`itertools`: Deprecate the support for copy, deepcopy, and pickle "
"operations, which is undocumented, inefficient, historically buggy, and "
"inconsistent. This will be removed in 3.14 for a significant reduction in "
"code volume and maintenance burden. (Contributed by Raymond Hettinger in :gh:"
"`101588`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1222
msgid ""
":mod:`multiprocessing`: In Python 3.14, the default :mod:`multiprocessing` "
"start method will change to a safer one on Linux, BSDs, and other non-macOS "
"POSIX platforms where ``'fork'`` is currently the default (:gh:`84559`). "
"Adding a runtime warning about this was deemed too disruptive as the "
"majority of code is not expected to care. Use the :func:`~multiprocessing."
"get_context` or :func:`~multiprocessing.set_start_method` APIs to explicitly "
"specify when your code *requires* ``'fork'``.  See :ref:`contexts and start "
"methods <multiprocessing-start-methods>`."
msgstr ""

#: ../../whatsnew/3.12.rst:1232
msgid ""
":mod:`pkgutil`: :func:`pkgutil.find_loader` and :func:`pkgutil.get_loader` "
"are deprecated and will be removed in Python 3.14; use :func:`importlib.util."
"find_spec` instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1237
msgid ""
":mod:`pty`: The module has two undocumented ``master_open()`` and "
"``slave_open()`` functions that have been deprecated since Python 2 but only "
"gained a proper :exc:`DeprecationWarning` in 3.12. Remove them in 3.14. "
"(Contributed by Soumendra Ganguly and Gregory P. Smith in :gh:`85984`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1242
msgid ":mod:`os`:"
msgstr ":mod:`os`："

#: ../../whatsnew/3.12.rst:1244
msgid ""
"The ``st_ctime`` fields return by :func:`os.stat` and :func:`os.lstat` on "
"Windows are deprecated. In a future release, they will contain the last "
"metadata change time, consistent with other platforms. For now, they still "
"contain the creation time, which is also available in the new "
"``st_birthtime`` field. (Contributed by Steve Dower in :gh:`99726`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1250
msgid ""
"On POSIX platforms, :func:`os.fork` can now raise a :exc:"
"`DeprecationWarning` when it can detect being called from a multithreaded "
"process. There has always been a fundamental incompatibility with the POSIX "
"platform when doing so. Even if such code *appeared* to work. We added the "
"warning to raise awareness as issues encountered by code doing this are "
"becoming more frequent. See the :func:`os.fork` documentation for more "
"details along with `this discussion on fork being incompatible with threads "
"<https://discuss.python.org/t/33555>`_ for *why* we're now surfacing this "
"longstanding platform compatibility problem to developers."
msgstr ""

#: ../../whatsnew/3.12.rst:1260
msgid ""
"When this warning appears due to usage of :mod:`multiprocessing` or :mod:"
"`concurrent.futures` the fix is to use a different :mod:`multiprocessing` "
"start method such as ``\"spawn\"`` or ``\"forkserver\"``."
msgstr ""

#: ../../whatsnew/3.12.rst:1264
msgid ""
":mod:`shutil`: The *onerror* argument of :func:`shutil.rmtree` is "
"deprecated; use *onexc* instead. (Contributed by Irit Katriel in :gh:"
"`102828`.)"
msgstr ""
":mod:`shutil`：:func:`shutil.rmtree` 的 *onerror* 引數已被棄用，請改用 "
"*onexc*。（由 Irit Katriel 於 :gh:`102828` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1267
#: ../../deprecations/pending-removal-in-3.14.rst:94
msgid ":mod:`sqlite3`:"
msgstr ":mod:`sqlite3`："

#: ../../whatsnew/3.12.rst:1269
msgid ""
":ref:`default adapters and converters <sqlite3-default-converters>` are now "
"deprecated. Instead, use the :ref:`sqlite3-adapter-converter-recipes` and "
"tailor them to your needs. (Contributed by Erlend E. Aasland in :gh:`90016`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1275
msgid ""
"In :meth:`~sqlite3.Cursor.execute`, :exc:`DeprecationWarning` is now emitted "
"when :ref:`named placeholders <sqlite3-placeholders>` are used together with "
"parameters supplied as a :term:`sequence` instead of as a :class:`dict`. "
"Starting from Python 3.14, using named placeholders with parameters supplied "
"as a sequence will raise a :exc:`~sqlite3.ProgrammingError`. (Contributed by "
"Erlend E. Aasland in :gh:`101698`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1282
msgid ""
":mod:`sys`: The :data:`sys.last_type`, :data:`sys.last_value` and :data:`sys."
"last_traceback` fields are deprecated. Use :data:`sys.last_exc` instead. "
"(Contributed by Irit Katriel in :gh:`102778`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1286
msgid ""
":mod:`tarfile`: Extracting tar archives without specifying *filter* is "
"deprecated until Python 3.14, when ``'data'`` filter will become the "
"default. See :ref:`tarfile-extraction-filter` for details."
msgstr ""

#: ../../whatsnew/3.12.rst:1290
msgid ":mod:`typing`:"
msgstr ":mod:`typing`："

#: ../../whatsnew/3.12.rst:1292
msgid ""
":class:`typing.Hashable` and :class:`typing.Sized`, aliases for :class:"
"`collections.abc.Hashable` and :class:`collections.abc.Sized` respectively, "
"are deprecated. (:gh:`94309`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1296
msgid ""
":class:`typing.ByteString`, deprecated since Python 3.9, now causes a :exc:"
"`DeprecationWarning` to be emitted when it is used. (Contributed by Alex "
"Waygood in :gh:`91896`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1300
msgid ""
":mod:`xml.etree.ElementTree`: The module now emits :exc:`DeprecationWarning` "
"when testing the truth value of an :class:`xml.etree.ElementTree.Element`. "
"Before, the Python implementation emitted :exc:`FutureWarning`, and the C "
"implementation emitted nothing. (Contributed by Jacob Walls in :gh:`83122`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1306
msgid ""
"The 3-arg signatures (type, value, traceback) of :meth:`coroutine throw() "
"<coroutine.throw>`, :meth:`generator throw() <generator.throw>` and :meth:"
"`async generator throw() <agen.athrow>` are deprecated and may be removed in "
"a future version of Python. Use the single-arg versions of these functions "
"instead. (Contributed by Ofey Chan in :gh:`89874`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1312
msgid ""
":exc:`DeprecationWarning` is now raised when ``__package__`` on a module "
"differs from ``__spec__.parent`` (previously it was :exc:`ImportWarning`). "
"(Contributed by Brett Cannon in :gh:`65961`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1317
msgid ""
"Setting ``__package__`` or ``__cached__`` on a module is deprecated, and "
"will cease to be set or taken into consideration by the import system in "
"Python 3.14. (Contributed by Brett Cannon in :gh:`65961`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1321
msgid ""
"The bitwise inversion operator (``~``) on bool is deprecated. It will throw "
"an error in Python 3.16. Use ``not`` for logical negation of bools instead. "
"In the rare case that you really need the bitwise inversion of the "
"underlying ``int``, convert to int explicitly: ``~int(x)``. (Contributed by "
"Tim Hoffmann in :gh:`103487`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1327
msgid ""
"Accessing :attr:`~codeobject.co_lnotab` on code objects was deprecated in "
"Python 3.10 via :pep:`626`, but it only got a proper :exc:"
"`DeprecationWarning` in 3.12, therefore it will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.13.rst:2
msgid "Pending Removal in Python 3.13"
msgstr "Python 3.13 中待移除的項目"

#: ../../deprecations/pending-removal-in-3.13.rst:4
msgid "Modules (see :pep:`594`):"
msgstr "模組（請見 :pep:`594`）："

#: ../../deprecations/pending-removal-in-3.13.rst:6
msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc`"

#: ../../deprecations/pending-removal-in-3.13.rst:7
msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

#: ../../deprecations/pending-removal-in-3.13.rst:8
msgid ":mod:`!cgi`"
msgstr ":mod:`!cgi`"

#: ../../deprecations/pending-removal-in-3.13.rst:9
msgid ":mod:`!cgitb`"
msgstr ":mod:`!cgitb`"

#: ../../deprecations/pending-removal-in-3.13.rst:10
msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

#: ../../deprecations/pending-removal-in-3.13.rst:11
msgid ":mod:`!crypt`"
msgstr ":mod:`!crypt`"

#: ../../deprecations/pending-removal-in-3.13.rst:12
msgid ":mod:`!imghdr`"
msgstr ":mod:`!imghdr`"

#: ../../deprecations/pending-removal-in-3.13.rst:13
msgid ":mod:`!mailcap`"
msgstr ":mod:`!mailcap`"

#: ../../deprecations/pending-removal-in-3.13.rst:14
msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

#: ../../deprecations/pending-removal-in-3.13.rst:15
msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

#: ../../deprecations/pending-removal-in-3.13.rst:16
msgid ":mod:`!nntplib`"
msgstr ":mod:`!nntplib`"

#: ../../deprecations/pending-removal-in-3.13.rst:17
msgid ":mod:`!ossaudiodev`"
msgstr ":mod:`!ossaudiodev`"

#: ../../deprecations/pending-removal-in-3.13.rst:18
msgid ":mod:`!pipes`"
msgstr ":mod:`!pipes`"

#: ../../deprecations/pending-removal-in-3.13.rst:19
msgid ":mod:`!sndhdr`"
msgstr ":mod:`!sndhdr`"

#: ../../deprecations/pending-removal-in-3.13.rst:20
msgid ":mod:`!spwd`"
msgstr ":mod:`!spwd`"

#: ../../deprecations/pending-removal-in-3.13.rst:21
msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

#: ../../deprecations/pending-removal-in-3.13.rst:22
msgid ":mod:`!telnetlib`"
msgstr ":mod:`!telnetlib`"

#: ../../deprecations/pending-removal-in-3.13.rst:23
msgid ":mod:`!uu`"
msgstr ":mod:`!uu`"

#: ../../deprecations/pending-removal-in-3.13.rst:24
msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

#: ../../deprecations/pending-removal-in-3.13.rst:26
msgid "Other modules:"
msgstr "其他模組："

#: ../../deprecations/pending-removal-in-3.13.rst:28
msgid ":mod:`!lib2to3`, and the :program:`2to3` program (:gh:`84540`)"
msgstr ":mod:`!lib2to3` 和 :program:`2to3` 程式 (:gh:`84540`)"

#: ../../deprecations/pending-removal-in-3.13.rst:30
msgid "APIs:"
msgstr "API："

#: ../../deprecations/pending-removal-in-3.13.rst:32
msgid ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"
msgstr ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"

#: ../../deprecations/pending-removal-in-3.13.rst:33
msgid "``locale.resetlocale()`` (:gh:`90817`)"
msgstr "``locale.resetlocale()`` (:gh:`90817`)"

#: ../../deprecations/pending-removal-in-3.13.rst:34
msgid ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"
msgstr ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:35
msgid ":func:`!unittest.findTestCases` (:gh:`50096`)"
msgstr ":func:`!unittest.findTestCases` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:36
msgid ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"
msgstr ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:37
msgid ":func:`!unittest.makeSuite` (:gh:`50096`)"
msgstr ":func:`!unittest.makeSuite` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:38
msgid ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"
msgstr ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"

#: ../../deprecations/pending-removal-in-3.13.rst:39
msgid ":class:`!webbrowser.MacOSX` (:gh:`86421`)"
msgstr ":class:`!webbrowser.MacOSX` (:gh:`86421`)"

#: ../../deprecations/pending-removal-in-3.13.rst:40
msgid ":class:`classmethod` descriptor chaining (:gh:`89519`)"
msgstr ":class:`classmethod` 描述器鏈接 (:gh:`89519`)"

#: ../../deprecations/pending-removal-in-3.13.rst:41
msgid ":mod:`importlib.resources` deprecated methods:"
msgstr ":mod:`importlib.resources` 的已棄用方法："

#: ../../deprecations/pending-removal-in-3.13.rst:43
msgid "``contents()``"
msgstr "``contents()``"

#: ../../deprecations/pending-removal-in-3.13.rst:44
msgid "``is_resource()``"
msgstr "``is_resource()``"

#: ../../deprecations/pending-removal-in-3.13.rst:45
msgid "``open_binary()``"
msgstr "``open_binary()``"

#: ../../deprecations/pending-removal-in-3.13.rst:46
msgid "``open_text()``"
msgstr "``open_text()``"

#: ../../deprecations/pending-removal-in-3.13.rst:47
msgid "``path()``"
msgstr "``path()``"

#: ../../deprecations/pending-removal-in-3.13.rst:48
msgid "``read_binary()``"
msgstr "``read_binary()``"

#: ../../deprecations/pending-removal-in-3.13.rst:49
msgid "``read_text()``"
msgstr "``read_text()``"

#: ../../deprecations/pending-removal-in-3.13.rst:51
msgid ""
"Use :func:`importlib.resources.files` instead.  Refer to `importlib-"
"resources: Migrating from Legacy <https://importlib-resources.readthedocs.io/"
"en/latest/using.html#migrating-from-legacy>`_ (:gh:`106531`)"
msgstr ""
"請改用 :func:`importlib.resources.files`。請參閱 `importlib-resources: "
"Migrating from Legacy <https://importlib-resources.readthedocs.io/en/latest/"
"using.html#migrating-from-legacy>`_ (:gh:`106531`)"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:2
#: ../../deprecations/pending-removal-in-3.14.rst:2
msgid "Pending Removal in Python 3.14"
msgstr "Python 3.14 中待移除的項目"

#: ../../deprecations/pending-removal-in-3.14.rst:9
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""
":mod:`ast`：自 Python 3.8 起，下列功能已在文件中被棄用，現在在存取或使用時會"
"於 runtime 發出 :exc:`DeprecationWarning`，並將在 Python 3.14 中移除："

#: ../../deprecations/pending-removal-in-3.14.rst:24
msgid ""
"The child watcher classes :class:`~asyncio.MultiLoopChildWatcher`, :class:"
"`~asyncio.FastChildWatcher`, :class:`~asyncio.AbstractChildWatcher` and :"
"class:`~asyncio.SafeChildWatcher` are deprecated and will be removed in "
"Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"已棄用並將在 Python 3.14 中移除的 child watcher 類別：:class:`~asyncio."
"MultiLoopChildWatcher`、:class:`~asyncio.FastChildWatcher`、:class:`~asyncio."
"AbstractChildWatcher` 和 :class:`~asyncio.SafeChildWatcher`。 (由 Kumar "
"Aditya 於 :gh:`94597` 貢獻。)"

#: ../../deprecations/pending-removal-in-3.14.rst:41
msgid ""
":mod:`collections.abc`: Deprecated :class:`~collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""
":mod:`collections.abc`：已棄用 :class:`~collections.abc.ByteString`。請改用 :"
"class:`!Sequence` 或 :class:`~collections.abc.Buffer`。在 typing 中使用時，請"
"改用聯集，如 ``bytes | bytearray``，或 :class:`collections.abc.Buffer`。（由 "
"Shantanu Jain 於 :gh:`91896` 貢獻。）"

#: ../../deprecations/pending-removal-in-3.14.rst:47
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""
":mod:`email`：已棄用 :func:`email.utils.localtime` 中的 *isdst* 參數。（由 "
"Alan Williams 於 :gh:`72346` 貢獻。）"

#: ../../deprecations/pending-removal-in-3.14.rst:50
msgid ""
":mod:`importlib`: ``__package__`` and ``__cached__`` will cease to be set or "
"taken into consideration by the import system (:gh:`97879`)."
msgstr ""
":mod:`importlib`：``__package__`` 和 ``__cached__`` 將不再被設定或被 import "
"系統考慮。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.14.rst:53
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ":mod:`importlib.abc` 的已棄用類別："

#: ../../deprecations/pending-removal-in-3.14.rst:66
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
":mod:`itertools` 有不以文件記錄、效率低下、過去常有 bug 且不一致的 copy、"
"deepcopy 和 pickle 操作支援。將在 3.14 中移除以大幅減少程式碼量和維護負擔。 "
"(由 Raymond Hettinger 於 :gh:`101588` 貢獻。)"

#: ../../deprecations/pending-removal-in-3.14.rst:72
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""
":mod:`multiprocessing`：預設的啟動方法將在 Linux、BSD 和其他非 macOS POSIX 平"
"台上更改為更安全的 方法，目前 ``'fork'`` 是預設值 (:gh:`84559`)。對此增加一"
"個 runtime 警告被認為太過擾人，因為 大多數程式碼不會在意。請使用 :func:"
"`~multiprocessing.get_context` 或 :func:`~multiprocessing.set_start_method` "
"API 來明確指定你的程式碼何時\\ *需要* ``'fork'``。請參閱 :ref:"
"`multiprocessing-start-methods`。"

#: ../../deprecations/pending-removal-in-3.14.rst:80
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""
":mod:`pathlib`：已棄用 :meth:`~pathlib.PurePath.is_relative_to` 和 :meth:"
"`~pathlib.PurePath.relative_to`：額外引數的傳遞已被棄用。"

#: ../../deprecations/pending-removal-in-3.14.rst:84
msgid ""
":mod:`pkgutil`: :func:`~pkgutil.find_loader` and :func:`~pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""
":mod:`pkgutil`：:func:`~pkgutil.find_loader` 和 :func:`~pkgutil.get_loader` "
"現在會引發 :exc:`DeprecationWarning`；請改用 :func:`importlib.util."
"find_spec`。 (由 Nikita Sobolev 於 :gh:`97850` 貢獻。)"

#: ../../deprecations/pending-removal-in-3.14.rst:89
msgid ":mod:`pty`:"
msgstr ":mod:`pty`："

#: ../../deprecations/pending-removal-in-3.14.rst:91
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr "``master_open()``：請用 :func:`pty.openpty`。"

#: ../../deprecations/pending-removal-in-3.14.rst:92
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr "``slave_open()``：請用 :func:`pty.openpty`。"

#: ../../deprecations/pending-removal-in-3.14.rst:96
msgid ":data:`~sqlite3.version` and :data:`~sqlite3.version_info`."
msgstr ":data:`~sqlite3.version` 和 :data:`~sqlite3.version_info`。"

#: ../../deprecations/pending-removal-in-3.14.rst:98
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""
":meth:`~sqlite3.Cursor.execute` 和 :meth:`~sqlite3.Cursor.executemany`，如果"
"使用 :ref:`named placeholders <sqlite3-placeholders>` 且 *parameters* 是序列"
"而不是 :class:`dict`。"

#: ../../deprecations/pending-removal-in-3.14.rst:102
msgid ""
"date and datetime adapter, date and timestamp converter: see the :mod:"
"`sqlite3` documentation for suggested replacement recipes."
msgstr ""
"date 和 datetime 的適配器 (adapter)、date 和 timestamp 轉換器 (converter)：請"
"參閱 :mod:`sqlite3` 文件以獲得建議的替代方案。"

#: ../../deprecations/pending-removal-in-3.14.rst:105
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.14. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`：自 3.10 起，存取 :attr:`~codeobject.co_lnotab` 已"
"在 :pep:`626` 中被棄用，並計劃在 3.12 中移除，但只在 3.12 中於適當時發出 :"
"exc:`DeprecationWarning`。可能在 3.14 中移除。（由 Nikita Sobolev 於 :gh:"
"`101866` 貢獻。）"

#: ../../deprecations/pending-removal-in-3.14.rst:112
msgid ""
":mod:`typing`: :class:`~typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""
":mod:`typing`：自 Python 3.9 起已被棄用的 :class:`~typing.ByteString` 現在在"
"使用時會發出 :exc:`DeprecationWarning`。"

#: ../../deprecations/pending-removal-in-3.14.rst:115
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"
msgstr ""
":mod:`urllib`：:class:`!urllib.parse.Quoter` 已被棄用：它並非預期的公開 API。"
"(由 Gregory P. Smith 於 :gh:`88168` 貢獻。)"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending Removal in Python 3.15"
msgstr "Python 3.15 中待移除的項目"

#: ../../deprecations/pending-removal-in-3.15.rst:4
msgid ""
":class:`http.server.CGIHTTPRequestHandler` will be removed along with its "
"related ``--cgi`` flag to ``python -m http.server``.  It was obsolete and "
"rarely used.  No direct replacement exists.  *Anything* is better than CGI "
"to interface a web server with a request handler."
msgstr ""
":class:`http.server.CGIHTTPRequestHandler` 將會被移除，連同其相關的 ``--"
"cgi`` 旗標到 ``python -m http.server``。它已經過時且很少被使用。沒有直接的替"
"代方案。*任何東西*\\ 都比 CGI 更好的來介接一個帶有請求處理器的網頁伺服器。"

#: ../../deprecations/pending-removal-in-3.15.rst:9
msgid ""
":class:`locale`: :func:`locale.getdefaultlocale` was deprecated in Python "
"3.11 and originally planned for removal in Python 3.13 (:gh:`90817`), but "
"removal has been postponed to Python 3.15. Use :func:`locale.setlocale`, :"
"func:`locale.getencoding` and :func:`locale.getlocale` instead. (Contributed "
"by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
":class:`locale`：:func:`locale.getdefaultlocale` 已在 Python 3.11 中被棄用，"
"原本計劃在 Python 3.13 中移除 (:gh:`90817`)，但被延後至 Python 3.15。請改用 :"
"func:`locale.setlocale`、:func:`locale.getencoding` 和 :func:`locale."
"getlocale`。 (由 Hugo van Kemenade 於 :gh:`111187` 貢獻。)"

#: ../../deprecations/pending-removal-in-3.15.rst:16
msgid ""
":mod:`pathlib`: :meth:`pathlib.PurePath.is_reserved` is deprecated and "
"scheduled for removal in Python 3.15. Use :func:`os.path.isreserved` to "
"detect reserved paths on Windows."
msgstr ""
":mod:`pathlib`：:meth:`pathlib.PurePath.is_reserved` 已被棄用並計劃在 Python "
"3.15 中移除。請用 :func:`os.path.isreserved` 來偵測 Windows 上的保留路徑。"

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ""
":mod:`platform`: :func:`~platform.java_ver` is deprecated and will be "
"removed in 3.15. It was largely untested, had a confusing API, and was only "
"useful for Jython support. (Contributed by Nikita Sobolev in :gh:`116349`.)"
msgstr ""
":mod:`platform`：:func:`~platform.java_ver` 已被棄用並將在 3.15 中移除。它幾"
"乎沒有被測試過，API 令人困惑並且只對 Jython 支援有用。 (由 Nikita Sobolev "
"於 :gh:`116349` 貢獻。)"

#: ../../deprecations/pending-removal-in-3.15.rst:27
msgid ""
":mod:`threading`: Passing any arguments to :func:`threading.RLock` is now "
"deprecated. C version allows any numbers of args and kwargs, but they are "
"just ignored. Python version does not allow any arguments. All arguments "
"will be removed from :func:`threading.RLock` in Python 3.15. (Contributed by "
"Nikita Sobolev in :gh:`102029`.)"
msgstr ""
":mod:`threading`：對 :func:`threading.RLock` 傳遞任何引數現在已被棄用。C 版本"
"允許任意數量的引數和關鍵字引數，但它們會被忽略。Python 版本不允許任何引數。所"
"有引數將在 Python 3.15 中從 :func:`threading.RLock` 中移除。 (由 Nikita "
"Sobolev 於 :gh:`102029` 貢獻。)"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid ":class:`typing.NamedTuple`:"
msgstr ":class:`typing.NamedTuple`："

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ""
"The undocumented keyword argument syntax for creating :class:`!NamedTuple` "
"classes (``NT = NamedTuple(\"NT\", x=int)``) is deprecated, and will be "
"disallowed in 3.15. Use the class-based syntax or the functional syntax "
"instead."
msgstr ""
"用於建立 :class:`!NamedTuple` 類別的未以文件記錄之關鍵字引數語法 (``NT = "
"NamedTuple(\"NT\", x=int)``) 已棄用，並將在 3.15 中被禁止。請改用基於類別的語"
"法或函式語法 (functional syntax)。"

#: ../../deprecations/pending-removal-in-3.15.rst:40
msgid ""
"When using the functional syntax to create a :class:`!NamedTuple` class, "
"failing to pass a value to the *fields* parameter (``NT = "
"NamedTuple(\"NT\")``) is deprecated. Passing ``None`` to the *fields* "
"parameter (``NT = NamedTuple(\"NT\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a :class:`!NamedTuple` class with 0 "
"fields, use ``class NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", "
"[])``."
msgstr ""
"當使用函式語法來建立 :class:`!NamedTuple` 類別時，沒將值傳遞給 *fields* 參數"
"的方式 (``NT = NamedTuple(\"NT\")``) 已被棄用，將 ``None`` 傳遞給 *fields* 參"
"數（``NT = NamedTuple(\"NT\", None)``）也已被棄用。這兩者將在 Python 3.15 中"
"會被禁止。要建立一個沒有欄位的 :class:`!NamedTuple` 類別，請使用 ``class "
"NT(NamedTuple): pass`` 或 ``NT = NamedTuple(\"NT\", [])``。"

#: ../../deprecations/pending-removal-in-3.15.rst:47
msgid ""
":class:`typing.TypedDict`: When using the functional syntax to create a :"
"class:`!TypedDict` class, failing to pass a value to the *fields* parameter "
"(``TD = TypedDict(\"TD\")``) is deprecated. Passing ``None`` to the *fields* "
"parameter (``TD = TypedDict(\"TD\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a :class:`!TypedDict` class with 0 "
"fields, use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
msgstr ""
":class:`typing.TypedDict`：當使用函式語法來建立 :class:`!TypedDict` 類別時，"
"沒將值傳遞給 *fields* 參數的方式（``TD = TypedDict(\"TD\")``）已被棄用，將 "
"``None`` 傳遞給 *fields* 參數（``TD = TypedDict(\"TD\", None)``）也已被棄用。"
"這兩者將在 Python 3.15 中會被禁止。要建立一個沒有欄位的 :class:`!TypedDict` "
"類別，請使用 ``class TD(TypedDict): pass`` 或 ``TD = TypedDict(\"TD\", "
"{})``。"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":mod:`wave`: Deprecate the ``getmark()``, ``setmark()`` and ``getmarkers()`` "
"methods of the :class:`wave.Wave_read` and :class:`wave.Wave_write` classes. "
"They will be removed in Python 3.15. (Contributed by Victor Stinner in :gh:"
"`105096`.)"
msgstr ""
":mod:`wave`：已棄用 :class:`wave.Wave_read` 和 :class:`wave.Wave_write` 類別"
"的 ``getmark()``、``setmark()`` 和 ``getmarkers()`` 方法。它們將在 Python "
"3.15 中被移除。 (由 Victor Stinner 於 :gh:`105096` 貢獻。)"

#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending Removal in Python 3.16"
msgstr "Python 3.16 中待移除的項目"

#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid ""
":mod:`array`: :class:`array.array` ``'u'`` type (:c:type:`wchar_t`): use the "
"``'w'`` type instead (``Py_UCS4``)."
msgstr ""
":mod:`array`：:class:`array.array` ``'u'`` 型別 (:c:type:`wchar_t`)：請改用 "
"``'w'`` 型別 (``Py_UCS4``)。"

#: ../../deprecations/pending-removal-in-3.16.rst:8
msgid ":mod:`builtins`: ``~bool``, bitwise inversion on bool."
msgstr ":mod:`builtins`：``~bool``，對 bool 進行位元反轉。"

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ""
":mod:`symtable`: Deprecate :meth:`symtable.Class.get_methods` due to the "
"lack of interest. (Contributed by Bénédikt Tran in :gh:`119698`.)"
msgstr ""
":mod:`symtable`：由於並沒有太多關注，已棄用 :meth:`symtable.Class."
"get_methods`。 (由 Bénédikt Tran 於 :gh:`119698` 貢獻。)"

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending Removal in Future Versions"
msgstr "未來版本中的待移除項目"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr "以下 API 將在未來被移除，雖然目前尚未安排移除日期。"

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ""
":mod:`argparse`: Nesting argument groups and nesting mutually exclusive "
"groups are deprecated."
msgstr ":mod:`argparse`：已棄用巢狀引數群組和巢狀互斥群組。"

#: ../../deprecations/pending-removal-in-future.rst:10
msgid ":mod:`array`'s ``'u'`` format code (:gh:`57281`)"
msgstr ":mod:`array` 的 ``'u'`` 格式碼 (:gh:`57281`)"

#: ../../deprecations/pending-removal-in-future.rst:12
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`："

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``。"

#: ../../deprecations/pending-removal-in-future.rst:15
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"產生器：``throw(type, exc, tb)`` 和 ``athrow(type, exc, tb)`` 簽名已被棄用："
"請改用 ``throw(exc)`` 和 ``athrow(exc)``，為單引數簽名。"

#: ../../deprecations/pending-removal-in-future.rst:18
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""
"目前 Python 接受數值字面值後面立即接關鍵字，例如 ``0in x``、``1or x``、``0if "
"1else 2``。它讓表達式模糊且容易混淆，如 ``[0x1for x in y]``\\ （可以解釋為 "
"``[0x1 for x in y]`` 或 ``[0x1f or x in y]``）。如果數值字面值後立即接 :"
"keyword:`and`、:keyword:`else`、:keyword:`for`、:keyword:`if`、:keyword:"
"`in`、:keyword:`is` 和 :keyword:`or` 之一的關鍵字，則會引發語法警告。在未來版"
"本中，它將被更改為語法錯誤。(:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:26
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"``__index__()`` 和 ``__int__()`` 方法回傳非 int 型別的支援：這些方法將需要回"
"傳 :class:`int` 的嚴格子類別實例。"

#: ../../deprecations/pending-removal-in-future.rst:29
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""
"回傳 :class:`float` 嚴格子類別 ``__float__()`` 方法的支援：這些方法將需要回"
"傳 :class:`float` 的實例。"

#: ../../deprecations/pending-removal-in-future.rst:32
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""
"回傳 :class:`complex` 嚴格子類別 ``__complex__()`` 方法的支援：這些方法將需要"
"回傳 :class:`complex` 的實例。"

#: ../../deprecations/pending-removal-in-future.rst:35
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "將 ``int()`` 委派給 ``__trunc__()`` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""
"在 :func:`complex` 建構子中將複數作為 *real* 或 *imag* 引數傳遞現在已被棄用；"
"它應該只作為單個位置引數傳遞。 (由 Serhiy Storchaka 於 :gh:`109218` 貢獻。)"

#: ../../deprecations/pending-removal-in-future.rst:46
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""
":attr:`codeobject.co_lnotab`：請改用 :meth:`codeobject.co_lines` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:49
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`："

#: ../../deprecations/pending-removal-in-future.rst:51
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`：請改用 ``datetime.datetime."
"now(tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:53
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`：請改用 ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:56
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`：複數值必須是整數。"

#: ../../deprecations/pending-removal-in-future.rst:58
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`："

#: ../../deprecations/pending-removal-in-future.rst:60
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` method：請改用 ``exec_module()``。"

#: ../../deprecations/pending-removal-in-future.rst:61
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` *debug_override* 參數已被棄用：請改"
"用 *optimization* 參數。"

#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`："

#: ../../deprecations/pending-removal-in-future.rst:66
msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` 元組介面。"

#: ../../deprecations/pending-removal-in-future.rst:67
msgid "Implicit ``None`` on return values."
msgstr "回傳值上的隱式 ``None``。"

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:72
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""
":mod:`mailbox`：已棄用 StringIO 輸入和文本模式，請改用 BytesIO 和二進位模式。"

#: ../../deprecations/pending-removal-in-future.rst:75
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`：在多執行緒行程中呼叫 :func:`os.register_at_fork`。"

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`：*exc_info* 參數的元組值已被棄用，請用例外"
"實例。"

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`：現在對正規表示式中的數值群組參照和群組名稱用了更嚴格的規則。現在只"
"有 ASCII 數碼序列被接受作為數值參照。位元組模式和替換字串中的群組名稱現在只能"
"包含 ASCII 字母、數碼和底線。（由 Serhiy Storchaka 於 :gh:`91760` 貢獻。）"

#: ../../deprecations/pending-removal-in-future.rst:87
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ":mod:`!sre_compile`、:mod:`!sre_constants` 和 :mod:`!sre_parse` 模組。"

#: ../../deprecations/pending-removal-in-future.rst:89
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`：:func:`~shutil.rmtree` 的 *onerror* 參數在 Python 3.12 中已被"
"棄用；請改用 *onexc* 參數。"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` 選項和協定："

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr "不帶協定引數的 :class:`ssl.SSLContext` 已被棄用。"

#: ../../deprecations/pending-removal-in-future.rst:95
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`：:meth:`~ssl.SSLContext.set_npn_protocols` 和 :meth:"
"`!selected_npn_protocol` 已被棄用：請改用 ALPN。"

#: ../../deprecations/pending-removal-in-future.rst:98
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` 選項"

#: ../../deprecations/pending-removal-in-future.rst:99
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` 選項"

#: ../../deprecations/pending-removal-in-future.rst:100
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:101
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:102
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid ""
":func:`sysconfig.is_python_build` *check_home* parameter is deprecated and "
"ignored."
msgstr ""
":func:`sysconfig.is_python_build` 的 *check_home* 參數已被棄用並被忽略。"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` 方法："

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`：請用 :meth:`~threading.Condition."
"notify_all`。"

#: ../../deprecations/pending-removal-in-future.rst:115
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ":meth:`!threading.Event.isSet`：請用 :meth:`~threading.Event.is_set`。"

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`、:meth:`threading.Thread.setDaemon`：請"
"用 :attr:`threading.Thread.daemon` 屬性。"

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`、:meth:`threading.Thread.setName`：請用 :"
"attr:`threading.Thread.name` 屬性。"

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`：請用 :meth:`threading.current_thread`。"

#: ../../deprecations/pending-removal-in-future.rst:121
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`：請用 :meth:`threading.active_count`。"

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)。"

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`：從測試案例中回傳非 ``None`` 的值已"
"被棄用。"

#: ../../deprecations/pending-removal-in-future.rst:128
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""
":mod:`urllib.parse` 已棄用函式：請改用 :func:`~urllib.parse.urlparse`。"

#: ../../deprecations/pending-removal-in-future.rst:130
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:131
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:132
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:133
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:134
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:135
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:136
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid ""
":mod:`urllib.request`: :class:`~urllib.request.URLopener` and :class:"
"`~urllib.request.FancyURLopener` style of invoking requests is deprecated. "
"Use newer :func:`~urllib.request.urlopen` functions and methods."
msgstr ""
":mod:`urllib.request`：呼叫請求的 :class:`~urllib.request.URLopener` 和 :"
"class:`~urllib.request.FancyURLopener` 風格已被棄用。請改用更新的 :func:"
"`~urllib.request.urlopen` 函式和方法。"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ":mod:`wsgiref`：``SimpleHandler.stdout.write()`` 不應該進行部分寫入。"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""
":mod:`xml.etree.ElementTree`：已棄用對 :class:`~xml.etree.ElementTree."
"Element` 的真值測試。在未來版本中，它將始終回傳 ``True``。請改用明確的 "
"``len(elem)`` 或 ``elem is not None`` 測試。"

#: ../../deprecations/pending-removal-in-future.rst:154
msgid ""
":meth:`zipimport.zipimporter.load_module` is deprecated: use :meth:"
"`~zipimport.zipimporter.exec_module` instead."
msgstr ""
":meth:`zipimport.zipimporter.load_module` 已被棄用：請改用 :meth:`~zipimport."
"zipimporter.exec_module`。"

#: ../../whatsnew/3.12.rst:1344 ../../whatsnew/3.12.rst:2222
msgid "Removed"
msgstr "已移除"

#: ../../whatsnew/3.12.rst:1347
msgid "asynchat and asyncore"
msgstr "asynchat 和 asyncore"

#: ../../whatsnew/3.12.rst:1349
msgid ""
"These two modules have been removed according to the schedule in :pep:`594`, "
"having been deprecated in Python 3.6. Use :mod:`asyncio` instead. "
"(Contributed by Nikita Sobolev in :gh:`96580`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1356
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.12.rst:1358
msgid ""
"Several names deprecated in the :mod:`configparser` way back in 3.2 have "
"been removed per :gh:`89336`:"
msgstr ""

#: ../../whatsnew/3.12.rst:1361
msgid ""
":class:`configparser.ParsingError` no longer has a ``filename`` attribute or "
"argument. Use the ``source`` attribute and argument instead."
msgstr ""
":class:`configparser.ParsingError` 不再具有 ``filename`` 屬性或引數。請改用 "
"``source`` 屬性和引數。"

#: ../../whatsnew/3.12.rst:1363
msgid ""
":mod:`configparser` no longer has a ``SafeConfigParser`` class. Use the "
"shorter :class:`~configparser.ConfigParser` name instead."
msgstr ""

#: ../../whatsnew/3.12.rst:1365
msgid ""
":class:`configparser.ConfigParser` no longer has a ``readfp`` method. Use :"
"meth:`~configparser.ConfigParser.read_file` instead."
msgstr ""

#: ../../whatsnew/3.12.rst:1369
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.12.rst:1371
msgid ""
"Remove the :py:mod:`!distutils` package. It was deprecated in Python 3.10 "
"by :pep:`632` \"Deprecate distutils module\". For projects still using "
"``distutils`` and cannot be updated to something else, the ``setuptools`` "
"project can be installed: it still provides ``distutils``. (Contributed by "
"Victor Stinner in :gh:`92584`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1378
msgid "ensurepip"
msgstr "ensurepip"

#: ../../whatsnew/3.12.rst:1380
msgid ""
"Remove the bundled setuptools wheel from :mod:`ensurepip`, and stop "
"installing setuptools in environments created by :mod:`venv`."
msgstr ""

#: ../../whatsnew/3.12.rst:1383
msgid ""
"``pip (>= 22.1)`` does not require setuptools to be installed in the "
"environment. ``setuptools``-based (and ``distutils``-based) packages can "
"still be used with ``pip install``, since pip will provide ``setuptools`` in "
"the build environment it uses for building a package."
msgstr ""

#: ../../whatsnew/3.12.rst:1389
msgid ""
"``easy_install``, ``pkg_resources``, ``setuptools`` and ``distutils`` are no "
"longer provided by default in environments created with ``venv`` or "
"bootstrapped with ``ensurepip``, since they are part of the ``setuptools`` "
"package. For projects relying on these at runtime, the ``setuptools`` "
"project should be declared as a dependency and installed separately "
"(typically, using pip)."
msgstr ""

#: ../../whatsnew/3.12.rst:1396
msgid "(Contributed by Pradyun Gedam in :gh:`95299`.)"
msgstr "（由 Pradyun Gedam 於 :gh:`95299` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1399
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.12.rst:1401
msgid ""
"Remove :mod:`enum`'s ``EnumMeta.__getattr__``, which is no longer needed for "
"enum attribute access. (Contributed by Ethan Furman in :gh:`95083`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1406
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.12.rst:1408
msgid ""
"Remove :mod:`ftplib`'s ``FTP_TLS.ssl_version`` class attribute: use the "
"*context* parameter instead. (Contributed by Victor Stinner in :gh:`94172`.)"
msgstr ""
"移除 :mod:`ftplib` 的 ``FTP_TLS.ssl_version`` 類別屬性：請改用 *context* 參"
"數。（由 Victor Stinner 於 :gh:`94172` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1413
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.12.rst:1415
msgid ""
"Remove the ``filename`` attribute of :mod:`gzip`'s :class:`gzip.GzipFile`, "
"deprecated since Python 2.6, use the :attr:`~gzip.GzipFile.name` attribute "
"instead. In write mode, the ``filename`` attribute added ``'.gz'`` file "
"extension if it was not present. (Contributed by Victor Stinner in :gh:"
"`94196`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1422
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.12.rst:1424
msgid ""
"Remove the pure Python implementation of :mod:`hashlib`'s :func:`hashlib."
"pbkdf2_hmac`, deprecated in Python 3.10. Python 3.10 and newer requires "
"OpenSSL 1.1.1 (:pep:`644`): this OpenSSL version provides a C implementation "
"of :func:`~hashlib.pbkdf2_hmac` which is faster. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1431 ../../whatsnew/3.12.rst:1458
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.12.rst:1433
msgid ""
"Many previously deprecated cleanups in :mod:`importlib` have now been "
"completed:"
msgstr "現已完成清理 :mod:`importlib` 中許多過去已經棄用的東西："

#: ../../whatsnew/3.12.rst:1436
msgid ""
"References to, and support for :meth:`!module_repr` has been removed. "
"(Contributed by Barry Warsaw in :gh:`97850`.)"
msgstr ""
"對 :meth:`!module_repr` 的參照和支援已刪除。（由 Barry Warsaw 在 :gh:`97850` "
"中貢獻。）"

#: ../../whatsnew/3.12.rst:1439
msgid ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` and "
"``importlib.util.module_for_loader`` have all been removed. (Contributed by "
"Brett Cannon and Nikita Sobolev in :gh:`65961` and :gh:`97850`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1443
msgid ""
"Support for ``find_loader()`` and ``find_module()`` APIs have been removed.  "
"(Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1446
msgid ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter``, and ``pkgutil.ImpLoader`` "
"have been removed.  (Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1450 ../../whatsnew/3.12.rst:1458
msgid "imp"
msgstr "imp"

#: ../../whatsnew/3.12.rst:1452
msgid ""
"The :mod:`!imp` module has been removed.  (Contributed by Barry Warsaw in :"
"gh:`98040`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1455
msgid "To migrate, consult the following correspondence table:"
msgstr ""

#: ../../whatsnew/3.12.rst:1460
msgid "``imp.NullImporter``"
msgstr "``imp.NullImporter``"

#: ../../whatsnew/3.12.rst:1460
msgid "Insert ``None`` into ``sys.path_importer_cache``"
msgstr "將 ``None`` 插入 ``sys.path_importer_cache``"

#: ../../whatsnew/3.12.rst:1461
msgid "``imp.cache_from_source()``"
msgstr "``imp.cache_from_source()``"

#: ../../whatsnew/3.12.rst:1461
msgid ":func:`importlib.util.cache_from_source`"
msgstr ":func:`importlib.util.cache_from_source`"

#: ../../whatsnew/3.12.rst:1462
msgid "``imp.find_module()``"
msgstr "``imp.find_module()``"

#: ../../whatsnew/3.12.rst:1462
msgid ":func:`importlib.util.find_spec`"
msgstr ":func:`importlib.util.find_spec`"

#: ../../whatsnew/3.12.rst:1463
msgid "``imp.get_magic()``"
msgstr "``imp.get_magic()``"

#: ../../whatsnew/3.12.rst:1463
msgid ":attr:`importlib.util.MAGIC_NUMBER`"
msgstr ":attr:`importlib.util.MAGIC_NUMBER`"

#: ../../whatsnew/3.12.rst:1464
msgid "``imp.get_suffixes()``"
msgstr "``imp.get_suffixes()``"

#: ../../whatsnew/3.12.rst:1464
msgid ""
":attr:`importlib.machinery.SOURCE_SUFFIXES`, :attr:`importlib.machinery."
"EXTENSION_SUFFIXES`, and :attr:`importlib.machinery.BYTECODE_SUFFIXES`"
msgstr ""

#: ../../whatsnew/3.12.rst:1465
msgid "``imp.get_tag()``"
msgstr "``imp.get_tag()``"

#: ../../whatsnew/3.12.rst:1465
msgid ":attr:`sys.implementation.cache_tag <sys.implementation>`"
msgstr ":attr:`sys.implementation.cache_tag <sys.implementation>`"

#: ../../whatsnew/3.12.rst:1466
msgid "``imp.load_module()``"
msgstr "``imp.load_module()``"

#: ../../whatsnew/3.12.rst:1466
msgid ":func:`importlib.import_module`"
msgstr ":func:`importlib.import_module`"

#: ../../whatsnew/3.12.rst:1467
msgid "``imp.new_module(name)``"
msgstr "``imp.new_module(name)``"

#: ../../whatsnew/3.12.rst:1467
msgid "``types.ModuleType(name)``"
msgstr "``types.ModuleType(name)``"

#: ../../whatsnew/3.12.rst:1468
msgid "``imp.reload()``"
msgstr "``imp.reload()``"

#: ../../whatsnew/3.12.rst:1468
msgid ":func:`importlib.reload`"
msgstr ":func:`importlib.reload`"

#: ../../whatsnew/3.12.rst:1469
msgid "``imp.source_from_cache()``"
msgstr "``imp.source_from_cache()``"

#: ../../whatsnew/3.12.rst:1469
msgid ":func:`importlib.util.source_from_cache`"
msgstr ":func:`importlib.util.source_from_cache`"

#: ../../whatsnew/3.12.rst:1470
msgid "``imp.load_source()``"
msgstr "``imp.load_source()``"

#: ../../whatsnew/3.12.rst:1470
msgid "*See below*"
msgstr "*見下文*"

#: ../../whatsnew/3.12.rst:1473
msgid "Replace ``imp.load_source()`` with::"
msgstr "用以下取代 ``imp.load_source()``： ::"

#: ../../whatsnew/3.12.rst:1475
msgid ""
"import importlib.util\n"
"import importlib.machinery\n"
"\n"
"def load_source(modname, filename):\n"
"    loader = importlib.machinery.SourceFileLoader(modname, filename)\n"
"    spec = importlib.util.spec_from_file_location(modname, filename, "
"loader=loader)\n"
"    module = importlib.util.module_from_spec(spec)\n"
"    # The module is always executed and not cached in sys.modules.\n"
"    # Uncomment the following line to cache the module.\n"
"    # sys.modules[module.__name__] = module\n"
"    loader.exec_module(module)\n"
"    return module"
msgstr ""

#: ../../whatsnew/3.12.rst:1488
msgid "Remove :mod:`!imp` functions and attributes with no replacements:"
msgstr "移除 :mod:`!imp` 函式和屬性、沒有替代方案："

#: ../../whatsnew/3.12.rst:1490
msgid "Undocumented functions:"
msgstr "未以文件記錄的函式："

#: ../../whatsnew/3.12.rst:1492
msgid "``imp.init_builtin()``"
msgstr "``imp.init_builtin()``"

#: ../../whatsnew/3.12.rst:1493
msgid "``imp.load_compiled()``"
msgstr "``imp.load_compiled()``"

#: ../../whatsnew/3.12.rst:1494
msgid "``imp.load_dynamic()``"
msgstr "``imp.load_dynamic()``"

#: ../../whatsnew/3.12.rst:1495
msgid "``imp.load_package()``"
msgstr "``imp.load_package()``"

#: ../../whatsnew/3.12.rst:1497
msgid ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: the "
"locking scheme has changed in Python 3.3 to per-module locks."
msgstr ""

#: ../../whatsnew/3.12.rst:1499
msgid ""
"``imp.find_module()`` constants: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."
msgstr ""
"``imp.find_module()`` 常數：``SEARCH_ERROR``、``PY_SOURCE``、"
"``PY_COMPILED``、``C_EXTENSION``、``PY_RESOURCE``、``PKG_DIRECTORY``、"
"``C_BUILTIN``、``PY_FROZEN``、``PY_CODERESOURCE``、``IMP_HOOK``。"

#: ../../whatsnew/3.12.rst:1504
msgid "io"
msgstr "io"

#: ../../whatsnew/3.12.rst:1506
msgid ""
"Remove :mod:`io`'s ``io.OpenWrapper`` and ``_pyio.OpenWrapper``, deprecated "
"in Python 3.10: just use :func:`open` instead. The :func:`open` (:func:`io."
"open`) function is a built-in function. Since Python 3.10, :func:`!_pyio."
"open` is also a static method. (Contributed by Victor Stinner in :gh:"
"`94169`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1513
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.12.rst:1515
msgid ""
"Remove :mod:`locale`'s :func:`!locale.format` function, deprecated in Python "
"3.7: use :func:`locale.format_string` instead. (Contributed by Victor "
"Stinner in :gh:`94226`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1520
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.12.rst:1522
msgid ""
"The ``smtpd`` module has been removed according to the schedule in :pep:"
"`594`, having been deprecated in Python 3.4.7 and 3.5.4. Use the :pypi:"
"`aiosmtpd` PyPI module or any other :mod:`asyncio`-based server instead. "
"(Contributed by Oleg Iarygin in :gh:`93243`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1531
msgid ""
"The following undocumented :mod:`sqlite3` features, deprecated in Python "
"3.10, are now removed:"
msgstr ""

#: ../../whatsnew/3.12.rst:1534
msgid "``sqlite3.enable_shared_cache()``"
msgstr "``sqlite3.enable_shared_cache()``"

#: ../../whatsnew/3.12.rst:1535
msgid "``sqlite3.OptimizedUnicode``"
msgstr "``sqlite3.OptimizedUnicode``"

#: ../../whatsnew/3.12.rst:1537
msgid ""
"If a shared cache must be used, open the database in URI mode using the "
"``cache=shared`` query parameter."
msgstr ""

#: ../../whatsnew/3.12.rst:1540
msgid ""
"The ``sqlite3.OptimizedUnicode`` text factory has been an alias for :class:"
"`str` since Python 3.3. Code that previously set the text factory to "
"``OptimizedUnicode`` can either use ``str`` explicitly, or rely on the "
"default value which is also ``str``."
msgstr ""

#: ../../whatsnew/3.12.rst:1545
msgid "(Contributed by Erlend E. Aasland in :gh:`92548`.)"
msgstr "（由 Erlend E. Aasland 於 :gh:`92548` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1548
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.12.rst:1550
msgid ""
"Remove :mod:`ssl`'s :func:`!ssl.RAND_pseudo_bytes` function, deprecated in "
"Python 3.6: use :func:`os.urandom` or :func:`ssl.RAND_bytes` instead. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1554
msgid ""
"Remove the :func:`!ssl.match_hostname` function. It was deprecated in Python "
"3.7. OpenSSL performs hostname matching since Python 3.7, Python no longer "
"uses the :func:`!ssl.match_hostname` function. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1560
msgid ""
"Remove the :func:`!ssl.wrap_socket` function, deprecated in Python 3.7: "
"instead, create a :class:`ssl.SSLContext` object and call its :class:`ssl."
"SSLContext.wrap_socket` method. Any package that still uses :func:`!ssl."
"wrap_socket` is broken and insecure. The function neither sends a SNI TLS "
"extension nor validates the server hostname. Code is subject to :cwe:`295` "
"(Improper Certificate Validation). (Contributed by Victor Stinner in :gh:"
"`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1571
msgid "Remove many long-deprecated :mod:`unittest` features:"
msgstr "移除許多 :mod:`unittest` 中被棄用已久的功能："

#: ../../whatsnew/3.12.rst:1575
msgid "A number of :class:`~unittest.TestCase` method aliases:"
msgstr "許多 :class:`~unittest.TestCase` 方法別名："

#: ../../whatsnew/3.12.rst:1578
msgid "Deprecated alias"
msgstr "已棄用的別名"

#: ../../whatsnew/3.12.rst:1578
msgid "Method Name"
msgstr "方法名稱"

#: ../../whatsnew/3.12.rst:1578
msgid "Deprecated in"
msgstr "已棄用於"

#: ../../whatsnew/3.12.rst:1580
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.12.rst:1580 ../../whatsnew/3.12.rst:1587
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.12.rst:1580 ../../whatsnew/3.12.rst:1581
#: ../../whatsnew/3.12.rst:1582 ../../whatsnew/3.12.rst:1583
#: ../../whatsnew/3.12.rst:1584 ../../whatsnew/3.12.rst:1585
#: ../../whatsnew/3.12.rst:1586
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.12.rst:1581
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.12.rst:1581
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.12.rst:1582
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.12.rst:1582 ../../whatsnew/3.12.rst:1588
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.12.rst:1583
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.12.rst:1583 ../../whatsnew/3.12.rst:1589
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.12.rst:1584
msgid "``failUnlessAlmostEqual``"
msgstr "``failUnlessAlmostEqual``"

#: ../../whatsnew/3.12.rst:1584 ../../whatsnew/3.12.rst:1590
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.12.rst:1585
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.12.rst:1585 ../../whatsnew/3.12.rst:1591
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.12.rst:1586
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.12.rst:1586
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.12.rst:1587
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.12.rst:1587 ../../whatsnew/3.12.rst:1588
#: ../../whatsnew/3.12.rst:1589 ../../whatsnew/3.12.rst:1590
#: ../../whatsnew/3.12.rst:1591 ../../whatsnew/3.12.rst:1592
#: ../../whatsnew/3.12.rst:1593
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.12.rst:1588
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.12.rst:1589
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.12.rst:1590
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.12.rst:1591
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.12.rst:1592
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.12.rst:1592
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.12.rst:1593
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.12.rst:1593
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.12.rst:1594
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.12.rst:1594
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.12.rst:1594
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.12.rst:1597
msgid ""
"You can use https://github.com/isidentical/teyit to automatically modernise "
"your unit tests."
msgstr ""

#: ../../whatsnew/3.12.rst:1600
msgid ""
"Undocumented and broken :class:`~unittest.TestCase` method "
"``assertDictContainsSubset`` (deprecated in Python 3.2)."
msgstr ""

#: ../../whatsnew/3.12.rst:1603
msgid ""
"Undocumented :meth:`TestLoader.loadTestsFromModule <unittest.TestLoader."
"loadTestsFromModule>` parameter *use_load_tests* (deprecated and ignored "
"since Python 3.5)."
msgstr ""

#: ../../whatsnew/3.12.rst:1607
msgid ""
"An alias of the :class:`~unittest.TextTestResult` class: ``_TextTestResult`` "
"(deprecated in Python 3.2)."
msgstr ""

#: ../../whatsnew/3.12.rst:1610
msgid "(Contributed by Serhiy Storchaka in :gh:`89325`.)"
msgstr "（由 Serhiy Storchaka 於 :gh:`89325` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1613
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.12.rst:1615
msgid ""
"Remove support for obsolete browsers from :mod:`webbrowser`. The removed "
"browsers include: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, "
"Firebird, and Firefox versions 35 and below (:gh:`102871`)."
msgstr ""

#: ../../whatsnew/3.12.rst:1620
msgid "xml.etree.ElementTree"
msgstr "xml.etree.ElementTree"

#: ../../whatsnew/3.12.rst:1622
msgid ""
"Remove the ``ElementTree.Element.copy()`` method of the pure Python "
"implementation, deprecated in Python 3.10, use the :func:`copy.copy` "
"function instead.  The C implementation of :mod:`xml.etree.ElementTree` has "
"no ``copy()`` method, only a ``__copy__()`` method. (Contributed by Victor "
"Stinner in :gh:`94383`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1629
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.12.rst:1631
msgid ""
"Remove :mod:`zipimport`'s ``find_loader()`` and ``find_module()`` methods, "
"deprecated in Python 3.10: use the ``find_spec()`` method instead.  See :pep:"
"`451` for the rationale. (Contributed by Victor Stinner in :gh:`94379`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1637
msgid "Others"
msgstr "其他"

#: ../../whatsnew/3.12.rst:1639
msgid ""
"Remove the ``suspicious`` rule from the documentation :file:`Makefile` and :"
"file:`Doc/tools/rstlint.py`, both in favor of `sphinx-lint <https://github."
"com/sphinx-contrib/sphinx-lint>`_. (Contributed by Julien Palard in :gh:"
"`98179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1644
msgid ""
"Remove the *keyfile* and *certfile* parameters from the :mod:`ftplib`, :mod:"
"`imaplib`, :mod:`poplib` and :mod:`smtplib` modules, and the *key_file*, "
"*cert_file* and *check_hostname* parameters from the :mod:`http.client` "
"module, all deprecated since Python 3.6. Use the *context* parameter "
"(*ssl_context* in :mod:`imaplib`) instead. (Contributed by Victor Stinner "
"in :gh:`94172`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1652
msgid ""
"Remove ``Jython`` compatibility hacks from several stdlib modules and tests. "
"(Contributed by Nikita Sobolev in :gh:`99482`.)"
msgstr ""
"移除數個標準函式庫模組與測試中的 ``Jython`` 相容性修補程式。（由 Nikita "
"Sobolev 於 :gh:`99482` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1655
msgid ""
"Remove ``_use_broken_old_ctypes_structure_semantics_`` flag from :mod:"
"`ctypes` module. (Contributed by Nikita Sobolev in :gh:`99285`.)"
msgstr ""
"移除 :mod:`ctypes` 模組中的 ``_use_broken_old_ctypes_structure_semantics_`` "
"旗標。（由 Nikita Sobolev 於 :gh:`99285` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1663 ../../whatsnew/3.12.rst:1987
msgid "Porting to Python 3.12"
msgstr ""

#: ../../whatsnew/3.12.rst:1665
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""

#: ../../whatsnew/3.12.rst:1669
msgid "Changes in the Python API"
msgstr "Python API 的變更"

#: ../../whatsnew/3.12.rst:1671
msgid ""
"More strict rules are now applied for numerical group references and group "
"names in regular expressions. Only sequence of ASCII digits is now accepted "
"as a numerical reference. The group name in bytes patterns and replacement "
"strings can now only contain ASCII letters and digits and underscore. "
"(Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1678
msgid ""
"Remove ``randrange()`` functionality deprecated since Python 3.10.  "
"Formerly, ``randrange(10.0)`` losslessly converted to ``randrange(10)``. "
"Now, it raises a :exc:`TypeError`. Also, the exception raised for non-"
"integer values such as ``randrange(10.5)`` or ``randrange('10')`` has been "
"changed from :exc:`ValueError` to :exc:`TypeError`.  This also prevents bugs "
"where ``randrange(1e25)`` would silently select from a larger range than "
"``randrange(10**25)``. (Originally suggested by Serhiy Storchaka :gh:"
"`86388`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1686
msgid ""
":class:`argparse.ArgumentParser` changed encoding and error handler for "
"reading arguments from file (e.g. ``fromfile_prefix_chars`` option) from "
"default text encoding (e.g. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`) to :term:`filesystem encoding and error "
"handler`. Argument files should be encoded in UTF-8 instead of ANSI Codepage "
"on Windows."
msgstr ""

#: ../../whatsnew/3.12.rst:1692
msgid ""
"Remove the ``asyncore``-based ``smtpd`` module deprecated in Python 3.4.7 "
"and 3.5.4.  A recommended replacement is the :mod:`asyncio`-based :pypi:"
"`aiosmtpd` PyPI module."
msgstr ""

#: ../../whatsnew/3.12.rst:1696
msgid ""
":func:`shlex.split`: Passing ``None`` for *s* argument now raises an "
"exception, rather than reading :data:`sys.stdin`. The feature was deprecated "
"in Python 3.9. (Contributed by Victor Stinner in :gh:`94352`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1701
msgid ""
"The :mod:`os` module no longer accepts bytes-like paths, like :class:"
"`bytearray` and :class:`memoryview` types: only the exact :class:`bytes` "
"type is accepted for bytes strings. (Contributed by Victor Stinner in :gh:"
"`98393`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1706
msgid ""
":func:`syslog.openlog` and :func:`syslog.closelog` now fail if used in "
"subinterpreters. :func:`syslog.syslog` may still be used in subinterpreters, "
"but now only if :func:`syslog.openlog` has already been called in the main "
"interpreter. These new restrictions do not apply to the main interpreter, so "
"only a very small set of users might be affected. This change helps with "
"interpreter isolation.  Furthermore, :mod:`syslog` is a wrapper around "
"process-global resources, which are best managed from the main interpreter. "
"(Contributed by Donghee Na in :gh:`99127`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1715
msgid ""
"The undocumented locking behavior of :func:`~functools.cached_property` is "
"removed, because it locked across all instances of the class, leading to "
"high lock contention. This means that a cached property getter function "
"could now run more than once for a single instance, if two threads race. For "
"most simple cached properties (e.g. those that are idempotent and simply "
"calculate a value based on other attributes of the instance) this will be "
"fine.  If synchronization is needed, implement locking within the cached "
"property getter function or around multi-threaded access points."
msgstr ""

#: ../../whatsnew/3.12.rst:1728
msgid ""
"When extracting tar files using :mod:`tarfile` or :func:`shutil."
"unpack_archive`, pass the *filter* argument to limit features that may be "
"surprising or dangerous. See :ref:`tarfile-extraction-filter` for details."
msgstr ""

#: ../../whatsnew/3.12.rst:1733
msgid ""
"The output of the :func:`tokenize.tokenize` and :func:`tokenize."
"generate_tokens` functions is now changed due to the changes introduced in :"
"pep:`701`. This means that ``STRING`` tokens are not emitted any more for f-"
"strings and the tokens described in :pep:`701` are now produced instead: "
"``FSTRING_START``, ``FSTRING_MIDDLE`` and ``FSTRING_END`` are now emitted "
"for f-string \"string\" parts in addition to the appropriate tokens for the "
"tokenization in the expression components. For example for the f-string "
"``f\"start {1+1} end\"`` the old version of the tokenizer emitted::"
msgstr ""

#: ../../whatsnew/3.12.rst:1742
msgid "1,0-1,18:           STRING         'f\"start {1+1} end\"'"
msgstr "1,0-1,18:           STRING         'f\"start {1+1} end\"'"

#: ../../whatsnew/3.12.rst:1744
msgid "while the new version emits::"
msgstr ""

#: ../../whatsnew/3.12.rst:1746
msgid ""
"1,0-1,2:            FSTRING_START  'f\"'\n"
"1,2-1,8:            FSTRING_MIDDLE 'start '\n"
"1,8-1,9:            OP             '{'\n"
"1,9-1,10:           NUMBER         '1'\n"
"1,10-1,11:          OP             '+'\n"
"1,11-1,12:          NUMBER         '1'\n"
"1,12-1,13:          OP             '}'\n"
"1,13-1,17:          FSTRING_MIDDLE ' end'\n"
"1,17-1,18:          FSTRING_END    '\"'"
msgstr ""
"1,0-1,2:            FSTRING_START  'f\"'\n"
"1,2-1,8:            FSTRING_MIDDLE 'start '\n"
"1,8-1,9:            OP             '{'\n"
"1,9-1,10:           NUMBER         '1'\n"
"1,10-1,11:          OP             '+'\n"
"1,11-1,12:          NUMBER         '1'\n"
"1,12-1,13:          OP             '}'\n"
"1,13-1,17:          FSTRING_MIDDLE ' end'\n"
"1,17-1,18:          FSTRING_END    '\"'"

#: ../../whatsnew/3.12.rst:1756
msgid ""
"Additionally, there may be some minor behavioral changes as a consequence of "
"the changes required to support :pep:`701`. Some of these changes include:"
msgstr ""

#: ../../whatsnew/3.12.rst:1759
msgid ""
"The ``type`` attribute of the tokens emitted when tokenizing some invalid "
"Python characters such as ``!`` has changed from ``ERRORTOKEN`` to ``OP``."
msgstr ""

#: ../../whatsnew/3.12.rst:1762
msgid ""
"Incomplete single-line strings now also raise :exc:`tokenize.TokenError` as "
"incomplete multiline strings do."
msgstr ""

#: ../../whatsnew/3.12.rst:1765
msgid ""
"Some incomplete or invalid Python code now raises :exc:`tokenize.TokenError` "
"instead of returning arbitrary ``ERRORTOKEN`` tokens when tokenizing it."
msgstr ""

#: ../../whatsnew/3.12.rst:1768
msgid ""
"Mixing tabs and spaces as indentation in the same file is not supported "
"anymore and will raise a :exc:`TabError`."
msgstr ""

#: ../../whatsnew/3.12.rst:1771
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an ``_is_main_interpreter`` attribute.  It is a function with no arguments "
"that returns ``True`` if the current interpreter is the main interpreter."
msgstr ""

#: ../../whatsnew/3.12.rst:1776
msgid ""
"Any library or application that provides a custom ``_thread`` module should "
"provide ``_is_main_interpreter()``. (See :gh:`112826`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1781
msgid "Build Changes"
msgstr "建置變更"

#: ../../whatsnew/3.12.rst:1783
msgid ""
"Python no longer uses :file:`setup.py` to build shared C extension modules. "
"Build parameters like headers and libraries are detected in ``configure`` "
"script. Extensions are built by :file:`Makefile`. Most extensions use ``pkg-"
"config`` and fall back to manual detection. (Contributed by Christian Heimes "
"in :gh:`93939`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1789
msgid ""
"``va_start()`` with two parameters, like ``va_start(args, format),`` is now "
"required to build Python. ``va_start()`` is no longer called with a single "
"parameter. (Contributed by Kumar Aditya in :gh:`93207`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1794
msgid ""
"CPython now uses the ThinLTO option as the default link time optimization "
"policy if the Clang compiler accepts the flag. (Contributed by Donghee Na "
"in :gh:`89536`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1798
msgid ""
"Add ``COMPILEALL_OPTS`` variable in :file:`Makefile` to override :mod:"
"`compileall` options (default: ``-j0``) in ``make install``. Also merged the "
"3 ``compileall`` commands into a single command to build .pyc files for all "
"optimization levels (0, 1, 2) at once. (Contributed by Victor Stinner in :gh:"
"`99289`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1804
msgid "Add platform triplets for 64-bit LoongArch:"
msgstr ""

#: ../../whatsnew/3.12.rst:1806
msgid "loongarch64-linux-gnusf"
msgstr "loongarch64-linux-gnusf"

#: ../../whatsnew/3.12.rst:1807
msgid "loongarch64-linux-gnuf32"
msgstr "loongarch64-linux-gnuf32"

#: ../../whatsnew/3.12.rst:1808
msgid "loongarch64-linux-gnu"
msgstr "loongarch64-linux-gnu"

#: ../../whatsnew/3.12.rst:1810
msgid "(Contributed by Zhang Na in :gh:`90656`.)"
msgstr "（由 Zhang Na 於 :gh:`90656` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1812
msgid "``PYTHON_FOR_REGEN`` now require Python 3.10 or newer."
msgstr ""

#: ../../whatsnew/3.12.rst:1814
msgid ""
"Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate :file:`!"
"configure`. (Contributed by Christian Heimes in :gh:`89886`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1818
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr ""

#: ../../whatsnew/3.12.rst:1822
msgid "C API Changes"
msgstr "C API 變更"

#: ../../whatsnew/3.12.rst:1829
msgid ""
":pep:`697`: Introduce the :ref:`Unstable C API tier <unstable-c-api>`, "
"intended for low-level tools like debuggers and JIT compilers. This API may "
"change in each minor release of CPython without deprecation warnings. Its "
"contents are marked by the ``PyUnstable_`` prefix in names."
msgstr ""

#: ../../whatsnew/3.12.rst:1835
msgid "Code object constructors:"
msgstr "程式碼物件建構函式："

#: ../../whatsnew/3.12.rst:1837
msgid "``PyUnstable_Code_New()`` (renamed from ``PyCode_New``)"
msgstr "``PyUnstable_Code_New()``\\ （自 ``PyCode_New`` 重新命名）"

#: ../../whatsnew/3.12.rst:1838
msgid ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (renamed from "
"``PyCode_NewWithPosOnlyArgs``)"
msgstr ""
"``PyUnstable_Code_NewWithPosOnlyArgs()``\\ （自 "
"``PyCode_NewWithPosOnlyArgs`` 重新命名）"

#: ../../whatsnew/3.12.rst:1840
msgid "Extra storage for code objects (:pep:`523`):"
msgstr "程式碼物件的額外儲存 (:pep:`523`)："

#: ../../whatsnew/3.12.rst:1842
msgid ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (renamed from "
"``_PyEval_RequestCodeExtraIndex``)"
msgstr ""
"``PyUnstable_Eval_RequestCodeExtraIndex()``\\ （自 "
"``_PyEval_RequestCodeExtraIndex`` 重新命名）"

#: ../../whatsnew/3.12.rst:1843
msgid "``PyUnstable_Code_GetExtra()`` (renamed from ``_PyCode_GetExtra``)"
msgstr "``PyUnstable_Code_GetExtra()``\\ （自 ``_PyCode_GetExtra`` 重新命名）"

#: ../../whatsnew/3.12.rst:1844
msgid "``PyUnstable_Code_SetExtra()`` (renamed from ``_PyCode_SetExtra``)"
msgstr "``PyUnstable_Code_SetExtra()``\\ （自 ``_PyCode_SetExtra`` 重新命名）"

#: ../../whatsnew/3.12.rst:1846
msgid ""
"The original names will continue to be available until the respective API "
"changes."
msgstr "原始名稱將可繼續使用，直到相應的 API 發生變更。"

#: ../../whatsnew/3.12.rst:1849
msgid "(Contributed by Petr Viktorin in :gh:`101101`.)"
msgstr "（由 Petr Viktorin 於 :gh:`101101` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1851
msgid ""
":pep:`697`: Add an API for extending types whose instance memory layout is "
"opaque:"
msgstr ""

#: ../../whatsnew/3.12.rst:1854
msgid ""
":c:member:`PyType_Spec.basicsize` can be zero or negative to specify "
"inheriting or extending the base class size."
msgstr ""
":c:member:`PyType_Spec.basicsize` 可以為零或負數來指定繼承或擴充基底類別大"
"小。"

#: ../../whatsnew/3.12.rst:1856
msgid ""
":c:func:`PyObject_GetTypeData` and :c:func:`PyType_GetTypeDataSize` added to "
"allow access to subclass-specific instance data."
msgstr ""

#: ../../whatsnew/3.12.rst:1858
msgid ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` and :c:func:`PyObject_GetItemData` added "
"to allow safely extending certain variable-sized types, including :c:var:"
"`PyType_Type`."
msgstr ""

#: ../../whatsnew/3.12.rst:1861
msgid ""
":c:macro:`Py_RELATIVE_OFFSET` added to allow defining :c:type:`members "
"<PyMemberDef>` in terms of a subclass-specific struct."
msgstr ""

#: ../../whatsnew/3.12.rst:1864
msgid "(Contributed by Petr Viktorin in :gh:`103509`.)"
msgstr "（由 Petr Viktorin 於 :gh:`103509` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1866
msgid ""
"Add the new :ref:`limited C API <limited-c-api>` function :c:func:"
"`PyType_FromMetaclass`, which generalizes the existing :c:func:"
"`PyType_FromModuleAndSpec` using an additional metaclass argument. "
"(Contributed by Wenzel Jakob in :gh:`93012`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1871
msgid ""
"API for creating objects that can be called using :ref:`the vectorcall "
"protocol <vectorcall>` was added to the :ref:`Limited API <stable>`:"
msgstr ""

#: ../../whatsnew/3.12.rst:1875
msgid ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"
msgstr ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"

#: ../../whatsnew/3.12.rst:1876
msgid ":c:func:`PyVectorcall_NARGS`"
msgstr ":c:func:`PyVectorcall_NARGS`"

#: ../../whatsnew/3.12.rst:1877
msgid ":c:func:`PyVectorcall_Call`"
msgstr ":c:func:`PyVectorcall_Call`"

#: ../../whatsnew/3.12.rst:1878
msgid ":c:type:`vectorcallfunc`"
msgstr ":c:type:`vectorcallfunc`"

#: ../../whatsnew/3.12.rst:1880
msgid ""
"The :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` flag is now removed from a class "
"when the class's :py:meth:`~object.__call__` method is reassigned. This "
"makes vectorcall safe to use with mutable types (i.e. heap types without the "
"immutable flag, :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). Mutable types that do "
"not override :c:member:`~PyTypeObject.tp_call` now inherit the "
"``Py_TPFLAGS_HAVE_VECTORCALL`` flag. (Contributed by Petr Viktorin in :gh:"
"`93274`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1888
msgid ""
"The :c:macro:`Py_TPFLAGS_MANAGED_DICT` and :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` flags have been added. This allows extensions "
"classes to support object ``__dict__`` and weakrefs with less bookkeeping, "
"using less memory and with faster access."
msgstr ""

#: ../../whatsnew/3.12.rst:1893
msgid ""
"API for performing calls using :ref:`the vectorcall protocol <vectorcall>` "
"was added to the :ref:`Limited API <stable>`:"
msgstr ""

#: ../../whatsnew/3.12.rst:1897
msgid ":c:func:`PyObject_Vectorcall`"
msgstr ":c:func:`PyObject_Vectorcall`"

#: ../../whatsnew/3.12.rst:1898
msgid ":c:func:`PyObject_VectorcallMethod`"
msgstr ":c:func:`PyObject_VectorcallMethod`"

#: ../../whatsnew/3.12.rst:1899
msgid ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"
msgstr ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"

#: ../../whatsnew/3.12.rst:1901
msgid ""
"This means that both the incoming and outgoing ends of the vector call "
"protocol are now available in the :ref:`Limited API <stable>`. (Contributed "
"by Wenzel Jakob in :gh:`98586`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1905
msgid ""
"Add two new public functions, :c:func:`PyEval_SetProfileAllThreads` and :c:"
"func:`PyEval_SetTraceAllThreads`, that allow to set tracing and profiling "
"functions in all running threads in addition to the calling one. "
"(Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1911
msgid ""
"Add new function :c:func:`PyFunction_SetVectorcall` to the C API which sets "
"the vectorcall field of a given :c:type:`PyFunctionObject`. (Contributed by "
"Andrew Frost in :gh:`92257`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1915
msgid ""
"The C API now permits registering callbacks via :c:func:"
"`PyDict_AddWatcher`, :c:func:`PyDict_Watch` and related APIs to be called "
"whenever a dictionary is modified. This is intended for use by optimizing "
"interpreters, JIT compilers, or debuggers. (Contributed by Carl Meyer in :gh:"
"`91052`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1921
msgid ""
"Add :c:func:`PyType_AddWatcher` and :c:func:`PyType_Watch` API to register "
"callbacks to receive notification on changes to a type. (Contributed by Carl "
"Meyer in :gh:`91051`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1925
msgid ""
"Add :c:func:`PyCode_AddWatcher` and :c:func:`PyCode_ClearWatcher` APIs to "
"register callbacks to receive notification on creation and destruction of "
"code objects. (Contributed by Itamar Oren in :gh:`91054`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1930
msgid ""
"Add :c:func:`PyFrame_GetVar` and :c:func:`PyFrame_GetVarString` functions to "
"get a frame variable by its name. (Contributed by Victor Stinner in :gh:"
"`91248`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1934
msgid ""
"Add :c:func:`PyErr_GetRaisedException` and :c:func:"
"`PyErr_SetRaisedException` for saving and restoring the current exception. "
"These functions return and accept a single exception object, rather than the "
"triple arguments of the now-deprecated :c:func:`PyErr_Fetch` and :c:func:"
"`PyErr_Restore`. This is less error prone and a bit more efficient. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1942
msgid ""
"Add ``_PyErr_ChainExceptions1``, which takes an exception instance, to "
"replace the legacy-API ``_PyErr_ChainExceptions``, which is now deprecated. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1946
msgid ""
"Add :c:func:`PyException_GetArgs` and :c:func:`PyException_SetArgs` as "
"convenience functions for retrieving and modifying the :attr:`~BaseException."
"args` passed to the exception's constructor. (Contributed by Mark Shannon "
"in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1951
msgid ""
"Add :c:func:`PyErr_DisplayException`, which takes an exception instance, to "
"replace the legacy-api :c:func:`!PyErr_Display`. (Contributed by Irit "
"Katriel in :gh:`102755`)."
msgstr ""

#: ../../whatsnew/3.12.rst:1957
msgid ""
":pep:`683`: Introduce *Immortal Objects*, which allows objects to bypass "
"reference counts, and related changes to the C-API:"
msgstr ""

#: ../../whatsnew/3.12.rst:1960
msgid "``_Py_IMMORTAL_REFCNT``: The reference count that defines an object"
msgstr "``_Py_IMMORTAL_REFCNT``：定義物件的參照計數"

#: ../../whatsnew/3.12.rst:1961
msgid "as immortal."
msgstr ""

#: ../../whatsnew/3.12.rst:1962
msgid ""
"``_Py_IsImmortal`` Checks if an object has the immortal reference count."
msgstr ""

#: ../../whatsnew/3.12.rst:1963
msgid "``PyObject_HEAD_INIT`` This will now initialize reference count to"
msgstr "``PyObject_HEAD_INIT`` 這現在將初始化參照計數"

#: ../../whatsnew/3.12.rst:1964
msgid "``_Py_IMMORTAL_REFCNT`` when used with ``Py_BUILD_CORE``."
msgstr "``_Py_IMMORTAL_REFCNT``\\ （與 ``Py_BUILD_CORE`` 一起使用時）。"

#: ../../whatsnew/3.12.rst:1965
msgid "``SSTATE_INTERNED_IMMORTAL`` An identifier for interned unicode objects"
msgstr ""

#: ../../whatsnew/3.12.rst:1966
msgid "that are immortal."
msgstr ""

#: ../../whatsnew/3.12.rst:1967
msgid "``SSTATE_INTERNED_IMMORTAL_STATIC`` An identifier for interned unicode"
msgstr ""

#: ../../whatsnew/3.12.rst:1968
msgid "objects that are immortal and static"
msgstr ""

#: ../../whatsnew/3.12.rst:1969
msgid "``sys.getunicodeinternedsize`` This returns the total number of unicode"
msgstr ""

#: ../../whatsnew/3.12.rst:1970
msgid ""
"objects that have been interned. This is now needed for :file:`refleak.py` "
"to correctly track reference counts and allocated blocks"
msgstr ""

#: ../../whatsnew/3.12.rst:1973
msgid "(Contributed by Eddie Elizondo in :gh:`84436`.)"
msgstr "（由 Eddie Elizondo 於 :gh:`84436` 中貢獻。）"

#: ../../whatsnew/3.12.rst:1975
msgid ""
":pep:`684`: Add the new :c:func:`Py_NewInterpreterFromConfig` function and :"
"c:type:`PyInterpreterConfig`, which may be used to create sub-interpreters "
"with their own GILs. (See :ref:`whatsnew312-pep684` for more info.) "
"(Contributed by Eric Snow in :gh:`104110`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1981
msgid ""
"In the limited C API version 3.12, :c:func:`Py_INCREF` and :c:func:"
"`Py_DECREF` functions are now implemented as opaque function calls to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`105387`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:1989
msgid ""
"Legacy Unicode APIs based on ``Py_UNICODE*`` representation has been "
"removed. Please migrate to APIs based on UTF-8 or ``wchar_t*``."
msgstr ""

#: ../../whatsnew/3.12.rst:1992
msgid ""
"Argument parsing functions like :c:func:`PyArg_ParseTuple` doesn't support "
"``Py_UNICODE*`` based format (e.g. ``u``, ``Z``) anymore. Please migrate to "
"other formats for Unicode like ``s``, ``z``, ``es``, and ``U``."
msgstr ""

#: ../../whatsnew/3.12.rst:1996
msgid ""
"``tp_weaklist`` for all static builtin types is always ``NULL``. This is an "
"internal-only field on ``PyTypeObject`` but we're pointing out the change in "
"case someone happens to be accessing the field directly anyway.  To avoid "
"breakage, consider using the existing public C-API instead, or, if "
"necessary, the (internal-only) ``_PyObject_GET_WEAKREFS_LISTPTR()`` macro."
msgstr ""

#: ../../whatsnew/3.12.rst:2003
msgid ""
"This internal-only :c:member:`PyTypeObject.tp_subclasses` may now not be a "
"valid object pointer.  Its type was changed to :c:expr:`void *` to reflect "
"this.  We mention this in case someone happens to be accessing the internal-"
"only field directly."
msgstr ""

#: ../../whatsnew/3.12.rst:2008
msgid ""
"To get a list of subclasses, call the Python method :py:meth:`~class."
"__subclasses__` (using :c:func:`PyObject_CallMethod`, for example)."
msgstr ""

#: ../../whatsnew/3.12.rst:2012
msgid ""
"Add support of more formatting options (left aligning, octals, uppercase "
"hexadecimals, :c:type:`intmax_t`, :c:type:`ptrdiff_t`, :c:type:`wchar_t` C "
"strings, variable width and precision) in :c:func:`PyUnicode_FromFormat` "
"and :c:func:`PyUnicode_FromFormatV`. (Contributed by Serhiy Storchaka in :gh:"
"`98836`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2018
msgid ""
"An unrecognized format character in :c:func:`PyUnicode_FromFormat` and :c:"
"func:`PyUnicode_FromFormatV` now sets a :exc:`SystemError`. In previous "
"versions it caused all the rest of the format string to be copied as-is to "
"the result string, and any extra arguments discarded. (Contributed by Serhiy "
"Storchaka in :gh:`95781`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2024
msgid ""
"Fix wrong sign placement in :c:func:`PyUnicode_FromFormat` and :c:func:"
"`PyUnicode_FromFormatV`. (Contributed by Philip Georgi in :gh:`95504`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2028
msgid ""
"Extension classes wanting to add a ``__dict__`` or weak reference slot "
"should use :c:macro:`Py_TPFLAGS_MANAGED_DICT` and :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` instead of ``tp_dictoffset`` and "
"``tp_weaklistoffset``, respectively. The use of ``tp_dictoffset`` and "
"``tp_weaklistoffset`` is still supported, but does not fully support "
"multiple inheritance (:gh:`95589`), and performance may be worse. Classes "
"declaring :c:macro:`Py_TPFLAGS_MANAGED_DICT` must call :c:func:`!"
"_PyObject_VisitManagedDict` and :c:func:`!_PyObject_ClearManagedDict` to "
"traverse and clear their instance's dictionaries. To clear weakrefs, call :c:"
"func:`PyObject_ClearWeakRefs`, as before."
msgstr ""

#: ../../whatsnew/3.12.rst:2040
msgid ""
"The :c:func:`PyUnicode_FSDecoder` function no longer accepts bytes-like "
"paths, like :class:`bytearray` and :class:`memoryview` types: only the "
"exact :class:`bytes` type is accepted for bytes strings. (Contributed by "
"Victor Stinner in :gh:`98393`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2045
msgid ""
"The :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` and :c:macro:`Py_XSETREF` "
"macros now only evaluate their arguments once. If an argument has side "
"effects, these side effects are no longer duplicated. (Contributed by Victor "
"Stinner in :gh:`98724`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2050
msgid ""
"The interpreter's error indicator is now always normalized. This means that :"
"c:func:`PyErr_SetObject`, :c:func:`PyErr_SetString` and the other functions "
"that set the error indicator now normalize the exception before storing it. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2055
msgid ""
"``_Py_RefTotal`` is no longer authoritative and only kept around for ABI "
"compatibility.  Note that it is an internal global and only available on "
"debug builds.  If you happen to be using it then you'll need to start using "
"``_Py_GetGlobalRefTotal()``."
msgstr ""

#: ../../whatsnew/3.12.rst:2060
msgid ""
"The following functions now select an appropriate metaclass for the newly "
"created type:"
msgstr ""

#: ../../whatsnew/3.12.rst:2063
msgid ":c:func:`PyType_FromSpec`"
msgstr ":c:func:`PyType_FromSpec`"

#: ../../whatsnew/3.12.rst:2064
msgid ":c:func:`PyType_FromSpecWithBases`"
msgstr ":c:func:`PyType_FromSpecWithBases`"

#: ../../whatsnew/3.12.rst:2065
msgid ":c:func:`PyType_FromModuleAndSpec`"
msgstr ":c:func:`PyType_FromModuleAndSpec`"

#: ../../whatsnew/3.12.rst:2067
msgid ""
"Creating classes whose metaclass overrides :c:member:`~PyTypeObject.tp_new` "
"is deprecated, and in Python 3.14+ it will be disallowed. Note that these "
"functions ignore ``tp_new`` of the metaclass, possibly allowing incomplete "
"initialization."
msgstr ""

#: ../../whatsnew/3.12.rst:2072
msgid ""
"Note that :c:func:`PyType_FromMetaclass` (added in Python 3.12) already "
"disallows creating classes whose metaclass overrides ``tp_new`` (:meth:"
"`~object.__new__` in Python)."
msgstr ""

#: ../../whatsnew/3.12.rst:2076
msgid ""
"Since ``tp_new`` overrides almost everything ``PyType_From*`` functions do, "
"the two are incompatible with each other. The existing behavior -- ignoring "
"the metaclass for several steps of type creation -- is unsafe in general, "
"since (meta)classes assume that ``tp_new`` was called. There is no simple "
"general workaround. One of the following may work for you:"
msgstr ""

#: ../../whatsnew/3.12.rst:2083
msgid "If you control the metaclass, avoid using ``tp_new`` in it:"
msgstr ""

#: ../../whatsnew/3.12.rst:2085
msgid ""
"If initialization can be skipped, it can be done in :c:member:`~PyTypeObject."
"tp_init` instead."
msgstr ""

#: ../../whatsnew/3.12.rst:2087
msgid ""
"If the metaclass doesn't need to be instantiated from Python, set its "
"``tp_new`` to ``NULL`` using the :c:macro:"
"`Py_TPFLAGS_DISALLOW_INSTANTIATION` flag. This makes it acceptable for "
"``PyType_From*`` functions."
msgstr ""

#: ../../whatsnew/3.12.rst:2092
msgid ""
"Avoid ``PyType_From*`` functions: if you don't need C-specific features "
"(slots or setting the instance size), create types by :ref:`calling <call>` "
"the metaclass."
msgstr ""

#: ../../whatsnew/3.12.rst:2096
msgid ""
"If you *know* the ``tp_new`` can be skipped safely, filter the deprecation "
"warning out using :func:`warnings.catch_warnings` from Python."
msgstr ""

#: ../../whatsnew/3.12.rst:2099
msgid ""
":c:var:`PyOS_InputHook` and :c:var:`PyOS_ReadlineFunctionPointer` are no "
"longer called in :ref:`subinterpreters <sub-interpreter-support>`. This is "
"because clients generally rely on process-wide global state (since these "
"callbacks have no way of recovering extension module state)."
msgstr ""

#: ../../whatsnew/3.12.rst:2104
msgid ""
"This also avoids situations where extensions may find themselves running in "
"a subinterpreter that they don't support (or haven't yet been loaded in). "
"See :gh:`104668` for more info."
msgstr ""

#: ../../whatsnew/3.12.rst:2108
msgid ""
":c:struct:`PyLongObject` has had its internals changed for better "
"performance. Although the internals of :c:struct:`PyLongObject` are private, "
"they are used by some extension modules. The internal fields should no "
"longer be accessed directly, instead the API functions beginning ``PyLong_..."
"`` should be used instead. Two new *unstable* API functions are provided for "
"efficient access to the value of :c:struct:`PyLongObject`\\s which fit into "
"a single machine word:"
msgstr ""

#: ../../whatsnew/3.12.rst:2116
msgid ":c:func:`PyUnstable_Long_IsCompact`"
msgstr ":c:func:`PyUnstable_Long_IsCompact`"

#: ../../whatsnew/3.12.rst:2117
msgid ":c:func:`PyUnstable_Long_CompactValue`"
msgstr ":c:func:`PyUnstable_Long_CompactValue`"

#: ../../whatsnew/3.12.rst:2119
msgid ""
"Custom allocators, set via :c:func:`PyMem_SetAllocator`, are now required to "
"be thread-safe, regardless of memory domain.  Allocators that don't have "
"their own state, including \"hooks\", are not affected. If your custom "
"allocator is not already thread-safe and you need guidance then please "
"create a new GitHub issue and CC ``@ericsnowcurrently``."
msgstr ""

#: ../../whatsnew/3.12.rst:2129
msgid ""
"In accordance with :pep:`699`, the ``ma_version_tag`` field in :c:type:"
"`PyDictObject` is deprecated for extension modules. Accessing this field "
"will generate a compiler warning at compile time. This field will be removed "
"in Python 3.14. (Contributed by Ramvikrams and Kumar Aditya in :gh:`101193`. "
"PEP by Ken Jin.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2134
msgid "Deprecate global configuration variable:"
msgstr "棄用全域配置變數："

#: ../../whatsnew/3.12.rst:2136
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ":c:var:`Py_DebugFlag`: 請改用 :c:member:`PyConfig.parser_debug`"

#: ../../whatsnew/3.12.rst:2137
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ":c:var:`Py_VerboseFlag`: 請改用 :c:member:`PyConfig.verbose`"

#: ../../whatsnew/3.12.rst:2138
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ":c:var:`Py_QuietFlag`: 請改用 :c:member:`PyConfig.quiet`"

#: ../../whatsnew/3.12.rst:2139
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ":c:var:`Py_InteractiveFlag`: 請改用 :c:member:`PyConfig.interactive`"

#: ../../whatsnew/3.12.rst:2140
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ":c:var:`Py_InspectFlag`: 請改用 :c:member:`PyConfig.inspect`"

#: ../../whatsnew/3.12.rst:2141
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ""
":c:var:`Py_OptimizeFlag`: 請改用 :c:member:`PyConfig.optimization_level`"

#: ../../whatsnew/3.12.rst:2142
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ":c:var:`Py_NoSiteFlag`: 請改用 :c:member:`PyConfig.site_import`"

#: ../../whatsnew/3.12.rst:2143
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ""
":c:var:`Py_BytesWarningFlag`: 請改用 :c:member:`PyConfig.bytes_warning`"

#: ../../whatsnew/3.12.rst:2144
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ""
":c:var:`Py_FrozenFlag`: 請改用 :c:member:`PyConfig.pathconfig_warnings`"

#: ../../whatsnew/3.12.rst:2145
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment`"
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: 請改用 :c:member:`PyConfig."
"use_environment`"

#: ../../whatsnew/3.12.rst:2146
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: 請改用 :c:member:`PyConfig.write_bytecode`"

#: ../../whatsnew/3.12.rst:2147
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use :c:member:`PyConfig.user_site_directory`"
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: 請改用 :c:member:`PyConfig."
"user_site_directory`"

#: ../../whatsnew/3.12.rst:2148
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: 請改用 :c:member:`PyConfig.buffered_stdio`"

#: ../../whatsnew/3.12.rst:2149
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed`"
msgstr ""
":c:var:`Py_HashRandomizationFlag`: 請改用 :c:member:`PyConfig.use_hash_seed` "
"和 :c:member:`PyConfig.hash_seed`"

#: ../../whatsnew/3.12.rst:2151
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ":c:var:`Py_IsolatedFlag`: 請改用 :c:member:`PyConfig.isolated`"

#: ../../whatsnew/3.12.rst:2152
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: 請改用 :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"

#: ../../whatsnew/3.12.rst:2153
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use :c:member:`PyConfig."
"legacy_windows_stdio`"
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: 請改用 :c:member:`PyConfig."
"legacy_windows_stdio`"

#: ../../whatsnew/3.12.rst:2154
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`: 請改用 :c:member:`PyConfig."
"filesystem_encoding`"

#: ../../whatsnew/3.12.rst:2155
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: 請改用 :c:member:`PyConfig."
"filesystem_encoding`"

#: ../../whatsnew/3.12.rst:2156
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use :c:member:`PyConfig."
"filesystem_errors`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: 請改用 :c:member:`PyConfig."
"filesystem_errors`"

#: ../../whatsnew/3.12.rst:2157
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: 請改用 :c:member:`PyPreConfig.utf8_mode`\\ （參見 :c:"
"func:`Py_PreInitialize`）"

#: ../../whatsnew/3.12.rst:2159
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead. (Contributed by Victor Stinner in :gh:`77782`.)"
msgstr ""
":c:func:`Py_InitializeFromConfig` API 應改為與 :c:type:`PyConfig` 一起使用。"
"（由 Victor Stinner 於 :gh:`77782` 中貢獻。）"

#: ../../whatsnew/3.12.rst:2163
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases is deprecated and will be disabled in Python 3.14. (:gh:`95388`)"
msgstr ""

#: ../../whatsnew/3.12.rst:2166
msgid ""
"The :file:`structmember.h` header is deprecated, though it continues to be "
"available and there are no plans to remove it."
msgstr ":file:`structmember.h` 標頭已棄用，但仍可使用，且還沒有移除它的計畫。"

#: ../../whatsnew/3.12.rst:2169
msgid ""
"Its contents are now available just by including :file:`Python.h`, with a "
"``Py`` prefix added if it was missing:"
msgstr ""

#: ../../whatsnew/3.12.rst:2172
msgid ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` and :c:func:"
"`PyMember_SetOne`"
msgstr ""
":c:struct:`PyMemberDef`、:c:func:`PyMember_GetOne` 和 :c:func:"
"`PyMember_SetOne`"

#: ../../whatsnew/3.12.rst:2174
msgid ""
"Type macros like :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE`, etc. "
"(previously ``T_INT``, ``T_DOUBLE``, etc.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2176
msgid ""
"The flags :c:macro:`Py_READONLY` (previously ``READONLY``) and :c:macro:"
"`Py_AUDIT_READ` (previously all uppercase)"
msgstr ""
":c:macro:`Py_READONLY`\\ （先前為 ``READONLY``）和 :c:macro:"
"`Py_AUDIT_READ`\\ （先前全大寫）旗標"

#: ../../whatsnew/3.12.rst:2179
msgid "Several items are not exposed from :file:`Python.h`:"
msgstr "數個項目不再從 :file:`Python.h` 中公開："

#: ../../whatsnew/3.12.rst:2181
msgid ":c:macro:`T_OBJECT` (use :c:macro:`Py_T_OBJECT_EX`)"
msgstr ":c:macro:`T_OBJECT`\\ （請改用 :c:macro:`Py_T_OBJECT_EX`）"

#: ../../whatsnew/3.12.rst:2182
msgid ":c:macro:`T_NONE` (previously undocumented, and pretty quirky)"
msgstr ":c:macro:`T_NONE`\\ （先前未記錄於文件上，且相當古怪）"

#: ../../whatsnew/3.12.rst:2183
msgid "The macro ``WRITE_RESTRICTED`` which does nothing."
msgstr "不做任何事的巨集 ``WRITE_RESTRICTED``。"

#: ../../whatsnew/3.12.rst:2184
msgid ""
"The macros ``RESTRICTED`` and ``READ_RESTRICTED``, equivalents of :c:macro:"
"`Py_AUDIT_READ`."
msgstr ""
"``RESTRICTED`` 和 ``READ_RESTRICTED`` 這兩個巨集，相當於 :c:macro:"
"`Py_AUDIT_READ`。"

#: ../../whatsnew/3.12.rst:2186
msgid ""
"In some configurations, ``<stddef.h>`` is not included from :file:`Python."
"h`. It should be included manually when using ``offsetof()``."
msgstr ""

#: ../../whatsnew/3.12.rst:2189
msgid ""
"The deprecated header continues to provide its original contents under the "
"original names. Your old code can stay unchanged, unless the extra include "
"and non-namespaced macros bother you greatly."
msgstr ""

#: ../../whatsnew/3.12.rst:2194
msgid ""
"(Contributed in :gh:`47146` by Petr Viktorin, based on earlier work by "
"Alexander Belopolsky and Matthias Braun.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2197
msgid ""
":c:func:`PyErr_Fetch` and :c:func:`PyErr_Restore` are deprecated. Use :c:"
"func:`PyErr_GetRaisedException` and :c:func:`PyErr_SetRaisedException` "
"instead. (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2202
msgid ""
":c:func:`!PyErr_Display` is deprecated. Use :c:func:`PyErr_DisplayException` "
"instead. (Contributed by Irit Katriel in :gh:`102755`)."
msgstr ""
":c:func:`!PyErr_Display` 已棄用，請改用 :c:func:`PyErr_DisplayException`。"
"（由 Irit Katriel 於 :gh:`102755` 中貢獻。）"

#: ../../whatsnew/3.12.rst:2205
msgid ""
"``_PyErr_ChainExceptions`` is deprecated. Use ``_PyErr_ChainExceptions1`` "
"instead. (Contributed by Irit Katriel in :gh:`102192`.)"
msgstr ""
"``_PyErr_ChainExceptions`` 已棄用，請改用 ``_PyErr_ChainExceptions1``。（由 "
"Irit Katriel 於 :gh:`102192` 中貢獻。）"

#: ../../whatsnew/3.12.rst:2208
msgid ""
"Using :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` or :c:"
"func:`PyType_FromModuleAndSpec` to create a class whose metaclass overrides :"
"c:member:`~PyTypeObject.tp_new` is deprecated. Call the metaclass instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:4
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules "
"(:pep:`699`; :gh:`101193`)."
msgstr ""
":c:type:`PyDictObject` 中的 ``ma_version_tag`` 欄位，用於擴充模組 (:pep:"
"`699`；:gh:`101193`)。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:7
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""
"使用可變基底建立\\ :c:data:`不可變型別 <Py_TPFLAGS_IMMUTABLETYPE>` (:gh:"
"`95388`)。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:10
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr "設定 Python 初始化的函式，Python 3.11 中已被棄用："

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:12
msgid "``PySys_SetArgvEx()``: set :c:member:`PyConfig.argv` instead."
msgstr "``PySys_SetArgvEx()``：請改以 :c:member:`PyConfig.argv` 設定。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:13
msgid "``PySys_SetArgv()``: set :c:member:`PyConfig.argv` instead."
msgstr "``PySys_SetArgv()``：請改以 :c:member:`PyConfig.argv` 設定。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:14
msgid "``Py_SetProgramName()``: set :c:member:`PyConfig.program_name` instead."
msgstr ""
"``Py_SetProgramName()``：請改以 :c:member:`PyConfig.program_name` 設定。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:15
msgid "``Py_SetPythonHome()``: set :c:member:`PyConfig.home` instead."
msgstr "``Py_SetPythonHome()``：請改以 :c:member:`PyConfig.home` 設定。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:17
#: ../../deprecations/c-api-pending-removal-in-3.14.rst:45
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
":c:func:`Py_InitializeFromConfig` API 應該與 :c:type:`PyConfig` 一起使用。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:20
msgid "Global configuration variables:"
msgstr "全域設定變數："

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:22
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug` instead."
msgstr ":c:var:`Py_DebugFlag`：請改用 :c:member:`PyConfig.parser_debug`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:23
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose` instead."
msgstr ":c:var:`Py_VerboseFlag`：請改用 :c:member:`PyConfig.verbose`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:24
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet` instead."
msgstr ":c:var:`Py_QuietFlag`：請改用 :c:member:`PyConfig.quiet`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:25
msgid ""
":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive` instead."
msgstr ":c:var:`Py_InteractiveFlag`：請改用 :c:member:`PyConfig.interactive`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:26
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect` instead."
msgstr ":c:var:`Py_InspectFlag`：請改用 :c:member:`PyConfig.inspect`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:27
msgid ""
":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level` "
"instead."
msgstr ""
":c:var:`Py_OptimizeFlag`：請改用 :c:member:`PyConfig.optimization_level`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:28
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import` instead."
msgstr ":c:var:`Py_NoSiteFlag`：請改用 :c:member:`PyConfig.site_import`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:29
msgid ""
":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`：請改用 :c:member:`PyConfig.bytes_warning`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:30
msgid ""
":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings` instead."
msgstr ""
":c:var:`Py_FrozenFlag`：請改用 :c:member:`PyConfig.pathconfig_warnings`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:31
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment` "
"instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`：請改用 :c:member:`PyConfig."
"use_environment`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:32
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode` "
"instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`：請改用 :c:member:`PyConfig."
"write_bytecode`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:33
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use :c:member:`PyConfig."
"user_site_directory` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`：請改用 :c:member:`PyConfig."
"user_site_directory`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:34
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio` "
"instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`：請改用 :c:member:`PyConfig.buffered_stdio`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:35
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`：請改用 :c:member:`PyConfig.use_hash_seed` "
"和 :c:member:`PyConfig.hash_seed`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:37
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated` instead."
msgstr ":c:var:`Py_IsolatedFlag`：請改用 :c:member:`PyConfig.isolated`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:38
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`：請改用 :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:39
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use :c:member:`PyConfig."
"legacy_windows_stdio` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`：請改用 :c:member:`PyConfig."
"legacy_windows_stdio`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:40
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`：請改用 :c:member:`PyConfig."
"filesystem_encoding`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:41
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding` instead."
msgstr ""
":c:var:`!Py_HasFileSystemDefaultEncoding`：請改用 :c:member:`PyConfig."
"filesystem_encoding`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:42
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use :c:member:`PyConfig."
"filesystem_errors` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`：請改用 :c:member:`PyConfig."
"filesystem_errors`。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:43
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` instead. (see :"
"c:func:`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`：請改用 :c:member:`PyPreConfig.utf8_mode`。（請見 :c:"
"func:`Py_PreInitialize`）"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid "The bundled copy of ``libmpdecimal``."
msgstr "``libmpdecimal`` 的打包副本 (bundled copy)。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:5
msgid ""
":c:func:`PyImport_ImportModuleNoBlock`: use :c:func:`PyImport_ImportModule` "
"instead."
msgstr ""
":c:func:`PyImport_ImportModuleNoBlock`：請改用 :c:func:"
"`PyImport_ImportModule`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ":c:func:`PyWeakref_GET_OBJECT`: use :c:func:`PyWeakref_GetRef` instead."
msgstr ":c:func:`PyWeakref_GET_OBJECT`：請改用 :c:func:`PyWeakref_GetRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:7
msgid ":c:func:`PyWeakref_GetObject`: use :c:func:`PyWeakref_GetRef` instead."
msgstr ":c:func:`PyWeakref_GetObject`：請改用 :c:func:`PyWeakref_GetRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:8
msgid ":c:type:`!Py_UNICODE_WIDE` type: use :c:type:`wchar_t` instead."
msgstr ":c:type:`!Py_UNICODE_WIDE` type：請改用 :c:type:`wchar_t`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:9
msgid ":c:type:`Py_UNICODE` type: use :c:type:`wchar_t` instead."
msgstr ":c:type:`Py_UNICODE` type：請改用 :c:type:`wchar_t`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid "Python initialization functions:"
msgstr "Python 初始化函式："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`PySys_ResetWarnOptions`: clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`：請改為清除 :data:`sys.warnoptions` 和 :"
"data:`!warnings.filters`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ":c:func:`Py_GetExecPrefix`: get :data:`sys.exec_prefix` instead."
msgstr ":c:func:`Py_GetExecPrefix`：請改用 :data:`sys.exec_prefix`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:15
msgid ":c:func:`Py_GetPath`: get :data:`sys.path` instead."
msgstr ":c:func:`Py_GetPath`：請改用 :data:`sys.path`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:16
msgid ":c:func:`Py_GetPrefix`: get :data:`sys.prefix` instead."
msgstr ":c:func:`Py_GetPrefix`：請改用 :data:`sys.prefix`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ":c:func:`Py_GetProgramFullPath`: get :data:`sys.executable` instead."
msgstr ":c:func:`Py_GetProgramFullPath`：請改用 :data:`sys.executable`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:18
msgid ":c:func:`Py_GetProgramName`: get :data:`sys.executable` instead."
msgstr ":c:func:`Py_GetProgramName`：請改用 :data:`sys.executable`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`Py_GetPythonHome`: get :c:member:`PyConfig.home` or the :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`：請改用 :c:member:`PyConfig.home` 或 :envvar:"
"`PYTHONHOME` 環境變數。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr "下列 API 已被棄用並將會被移除，不過目前尚未訂定移除日期。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`：自 Python 3.8 起不再需要"

#: ../../deprecations/c-api-pending-removal-in-future.rst:8
msgid ":c:func:`PyErr_Fetch`: use :c:func:`PyErr_GetRaisedException` instead."
msgstr ":c:func:`PyErr_Fetch`：請改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ""
":c:func:`PyErr_NormalizeException`: use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`：請改用 :c:func:"
"`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:10
msgid ""
":c:func:`PyErr_Restore`: use :c:func:`PyErr_SetRaisedException` instead."
msgstr ":c:func:`PyErr_Restore`：請改用 :c:func:`PyErr_SetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyModule_GetFilename`: use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`：請改用 :c:func:`PyModule_GetFilenameObject`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:12
msgid ":c:func:`PyOS_AfterFork`: use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ":c:func:`PyOS_AfterFork`：請改用 :c:func:`PyOS_AfterFork_Child`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PySlice_GetIndicesEx`: use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`：請改用 :c:func:`PySlice_Unpack` 和 :c:func:"
"`PySlice_AdjustIndices`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:14
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedObject`：請改用 :c:func:`PyCodec_Decode`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`：請改用 :c:func:`PyCodec_Decode`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:16
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedObject`：請改用 :c:func:`PyCodec_Encode`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`：請改用 :c:func:`PyCodec_Encode`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:18
msgid ":c:func:`PyUnicode_READY`: unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`：自 Python 3.12 起不再需要"

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ":c:func:`!PyErr_Display`: use :c:func:`PyErr_DisplayException` instead."
msgstr ":c:func:`!PyErr_Display`：請改用 :c:func:`PyErr_DisplayException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:20
msgid ""
":c:func:`!_PyErr_ChainExceptions`: use ``_PyErr_ChainExceptions1`` instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`：請改用 ``_PyErr_ChainExceptions1``。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""
":c:member:`!PyBytesObject.ob_shash` 成員：請改為呼叫 :c:func:"
"`PyObject_Hash`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ":c:member:`!PyDictObject.ma_version_tag` member."
msgstr ":c:member:`!PyDictObject.ma_version_tag` 成員。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:24
msgid "Thread Local Storage (TLS) API:"
msgstr "執行緒局部儲存 (Thread Local Storage, TLS) API："

#: ../../deprecations/c-api-pending-removal-in-future.rst:26
msgid ""
":c:func:`PyThread_create_key`: use :c:func:`PyThread_tss_alloc` instead."
msgstr ":c:func:`PyThread_create_key`：請改用 :c:func:`PyThread_tss_alloc`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ":c:func:`PyThread_delete_key`: use :c:func:`PyThread_tss_free` instead."
msgstr ":c:func:`PyThread_delete_key`：請改用 :c:func:`PyThread_tss_free`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:28
msgid ""
":c:func:`PyThread_set_key_value`: use :c:func:`PyThread_tss_set` instead."
msgstr ":c:func:`PyThread_set_key_value`：請改用 :c:func:`PyThread_tss_set`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid ""
":c:func:`PyThread_get_key_value`: use :c:func:`PyThread_tss_get` instead."
msgstr ":c:func:`PyThread_get_key_value`：請改用 :c:func:`PyThread_tss_get`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:30
msgid ""
":c:func:`PyThread_delete_key_value`: use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`：請改用 :c:func:`PyThread_tss_delete`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ":c:func:`PyThread_ReInitTLS`: unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`：自 Python 3.7 起不再需要。"

#: ../../whatsnew/3.12.rst:2224
msgid ""
"Remove the :file:`token.h` header file. There was never any public tokenizer "
"C API. The :file:`token.h` header file was only designed to be used by "
"Python internals. (Contributed by Victor Stinner in :gh:`92651`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:2229
msgid "Legacy Unicode APIs have been removed. See :pep:`623` for detail."
msgstr ""

#: ../../whatsnew/3.12.rst:2231
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`!PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.12.rst:2232
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.12.rst:2233
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: ../../whatsnew/3.12.rst:2234
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.12.rst:2235
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: ../../whatsnew/3.12.rst:2236
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: ../../whatsnew/3.12.rst:2237
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.12.rst:2238
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: ../../whatsnew/3.12.rst:2239
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.12.rst:2241
msgid ""
"Remove the ``PyUnicode_InternImmortal()`` function macro. (Contributed by "
"Victor Stinner in :gh:`85858`.)"
msgstr ""
"移除 ``PyUnicode_InternImmortal()`` 函式巨集。（由 Victor Stinner 於 :gh:"
"`85858` 中貢獻。）"

#~ msgid "Notable changes in 3.12.4"
#~ msgstr "3.12.4 中的顯著變更"

#~ msgid "ipaddress"
#~ msgstr "ipaddress"

#~ msgid ""
#~ "Fixed ``is_global`` and ``is_private`` behavior in ``IPv4Address``, "
#~ "``IPv6Address``, ``IPv4Network`` and ``IPv6Network``."
#~ msgstr ""
#~ "修正 ``IPv4Address``、``IPv6Address``、``IPv4Network`` 和 ``IPv6Network`` "
#~ "中的 ``is_global`` 和 ``is_private`` 行為。"

#~ msgid "Notable changes in 3.12.5"
#~ msgstr "3.12.5 中的顯著變更"

#~ msgid "email"
#~ msgstr "email"

#~ msgid "Notable changes in 3.12.6"
#~ msgstr "3.12.6 中的顯著變更"
