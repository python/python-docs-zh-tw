# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-01 22:24+0800\n"
"PO-Revision-Date: 2023-06-26 03:02+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.3.1\n"

#: ../../whatsnew/3.10.rst:3
msgid "What's New In Python 3.10"
msgstr "Python 3.10 有什麼新功能"

#: ../../whatsnew/3.10.rst:0
msgid "Editor"
msgstr "編輯者"

#: ../../whatsnew/3.10.rst:5
msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

#: ../../whatsnew/3.10.rst:47
msgid ""
"This article explains the new features in Python 3.10, compared to 3.9. "
"Python 3.10 was released on October 4, 2021. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"本文介紹了 Python 3.10 與 3.9 相比的新功能。Python 3.10 於 2021 年 10 月 4 日"
"發布。有關完整詳細資訊，請參閱 :ref:`changelog <changelog>`。"

#: ../../whatsnew/3.10.rst:52
msgid "Summary -- Release highlights"
msgstr "摘要 -- 發布重點"

#: ../../whatsnew/3.10.rst:60
msgid "New syntax features:"
msgstr "新增語法特性："

#: ../../whatsnew/3.10.rst:62
msgid ":pep:`634`, Structural Pattern Matching: Specification"
msgstr ":pep:`634`，結構模式匹配 (Structural Pattern Matching)：規範"

#: ../../whatsnew/3.10.rst:63
msgid ":pep:`635`, Structural Pattern Matching: Motivation and Rationale"
msgstr ":pep:`635`，結構模式匹配：動機和基本原理"

#: ../../whatsnew/3.10.rst:64
msgid ":pep:`636`, Structural Pattern Matching: Tutorial"
msgstr ":pep:`636`，結構模式匹配：教學"

#: ../../whatsnew/3.10.rst:65
msgid ""
":issue:`12782`, Parenthesized context managers are now officially allowed."
msgstr ":issue:`12782`，現在正式允許帶括號的情境管理器 (context manager)。"

#: ../../whatsnew/3.10.rst:67
msgid "New features in the standard library:"
msgstr "標準函式庫中的新功能："

#: ../../whatsnew/3.10.rst:69
msgid ":pep:`618`, Add Optional Length-Checking To zip."
msgstr ":pep:`618`，新增可選的長度檢查到 zip。"

#: ../../whatsnew/3.10.rst:71
msgid "Interpreter improvements:"
msgstr "直譯器改進："

#: ../../whatsnew/3.10.rst:73
msgid ":pep:`626`, Precise line numbers for debugging and other tools."
msgstr ":pep:`626`，用於除錯和其他工具的精確列號。"

#: ../../whatsnew/3.10.rst:75
msgid "New typing features:"
msgstr "新的 typing 功能："

#: ../../whatsnew/3.10.rst:77
msgid ":pep:`604`, Allow writing union types as X | Y"
msgstr ":pep:`604`，允許將聯集型別 (union types) 寫為 X | Y"

#: ../../whatsnew/3.10.rst:78
msgid ":pep:`612`, Parameter Specification Variables"
msgstr ":pep:`612`，參數規範變數 (Parameter Specification Variables)"

#: ../../whatsnew/3.10.rst:79
msgid ":pep:`613`, Explicit Type Aliases"
msgstr ":pep:`613`，顯式型別別名 (Explicit Type Aliases)"

#: ../../whatsnew/3.10.rst:80
msgid ":pep:`647`, User-Defined Type Guards"
msgstr ":pep:`647`，使用者定義的型別防護 (User-Defined Type Guards)"

#: ../../whatsnew/3.10.rst:82
msgid "Important deprecations, removals or restrictions:"
msgstr "重要的棄用、刪除或限制："

#: ../../whatsnew/3.10.rst:84
msgid ":pep:`644`, Require OpenSSL 1.1.1 or newer"
msgstr ":pep:`644`，需要 OpenSSL 1.1.1 或更高版本"

#: ../../whatsnew/3.10.rst:85
msgid ":pep:`632`, Deprecate distutils module."
msgstr ":pep:`632`，棄用 distutils 模組。"

#: ../../whatsnew/3.10.rst:86
msgid ""
":pep:`623`, Deprecate and prepare for the removal of the wstr member in "
"PyUnicodeObject."
msgstr ":pep:`623`，棄用並準備刪除 PyUnicodeObject 中的 wstr 成員。"

#: ../../whatsnew/3.10.rst:87
msgid ":pep:`624`, Remove Py_UNICODE encoder APIs"
msgstr ":pep:`624`，刪除 Py_UNICODE 編碼器 API"

#: ../../whatsnew/3.10.rst:88
msgid ":pep:`597`, Add optional EncodingWarning"
msgstr ":pep:`597`，新增可選的 EncodingWarning"

#: ../../whatsnew/3.10.rst:92 ../../whatsnew/3.10.rst:2053
msgid "New Features"
msgstr "新功能"

#: ../../whatsnew/3.10.rst:97
msgid "Parenthesized context managers"
msgstr "帶括號的情境管理器"

#: ../../whatsnew/3.10.rst:99
msgid ""
"Using enclosing parentheses for continuation across multiple lines in "
"context managers is now supported. This allows formatting a long collection "
"of context managers in multiple lines in a similar way as it was previously "
"possible with import statements. For instance, all these examples are now "
"valid:"
msgstr ""
"現在支援使用成對的括號來將多個情境管理器以數行表示。這允許了與過去的引入陳述"
"式 (import statement) 類似的方法來格式化一組多行的情境管理器集合。例如，以下"
"範例現在都是有效的："

#: ../../whatsnew/3.10.rst:105
msgid ""
"with (CtxManager() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1(),\n"
"    CtxManager2()\n"
"):\n"
"    ...\n"
"\n"
"with (CtxManager1() as example,\n"
"      CtxManager2()):\n"
"    ...\n"
"\n"
"with (CtxManager1(),\n"
"      CtxManager2() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2\n"
"):\n"
"    ..."
msgstr ""
"with (CtxManager() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1(),\n"
"    CtxManager2()\n"
"):\n"
"    ...\n"
"\n"
"with (CtxManager1() as example,\n"
"      CtxManager2()):\n"
"    ...\n"
"\n"
"with (CtxManager1(),\n"
"      CtxManager2() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2\n"
"):\n"
"    ..."

#: ../../whatsnew/3.10.rst:130
msgid ""
"it is also possible to use a trailing comma at the end of the enclosed group:"
msgstr "也可以在封閉群組的末尾使用逗號："

#: ../../whatsnew/3.10.rst:133
msgid ""
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2,\n"
"    CtxManager3() as example3,\n"
"):\n"
"    ..."
msgstr ""
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2,\n"
"    CtxManager3() as example3,\n"
"):\n"
"    ..."

#: ../../whatsnew/3.10.rst:142
msgid ""
"This new syntax uses the non LL(1) capacities of the new parser. Check :pep:"
"`617` for more details."
msgstr ""
"此新語法使用新剖析器的非 LL(1) 功能。檢查 :pep:`617` 了解更多詳細資訊。"

#: ../../whatsnew/3.10.rst:145
msgid ""
"(Contributed by Guido van Rossum, Pablo Galindo and Lysandros Nikolaou in :"
"issue:`12782` and :issue:`40334`.)"
msgstr ""
"（由 Guido van Rossum、Pablo Galindo 和 Lysandros Nikolaou 在 :issue:`12782` "
"和 :issue:`40334` 中貢獻。）"

#: ../../whatsnew/3.10.rst:150
msgid "Better error messages"
msgstr "更好的錯誤訊息"

#: ../../whatsnew/3.10.rst:153
msgid "SyntaxErrors"
msgstr "SyntaxErrors"

#: ../../whatsnew/3.10.rst:155
msgid ""
"When parsing code that contains unclosed parentheses or brackets the "
"interpreter now includes the location of the unclosed bracket of parentheses "
"instead of displaying *SyntaxError: unexpected EOF while parsing* or "
"pointing to some incorrect location. For instance, consider the following "
"code (notice the unclosed '{'):"
msgstr ""
"當剖析包含未成對括號或方括號的程式碼時，直譯器現在會包含未成對括號的位置，而"
"不是顯示 *SyntaxError: unexpected EOF while parsing* 或指向某些不正確的位置。"
"例如，以下程式碼（注意未閉合的 ``{`` ）："

#: ../../whatsnew/3.10.rst:160
msgid ""
"expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"            38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6,\n"
"some_other_code = foo()"
msgstr ""
"expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"            38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6,\n"
"some_other_code = foo()"

#: ../../whatsnew/3.10.rst:166
msgid ""
"Previous versions of the interpreter reported confusing places as the "
"location of the syntax error:"
msgstr "以前版本的直譯器會在奇怪的地方顯示有語法錯誤："

#: ../../whatsnew/3.10.rst:169
msgid ""
"File \"example.py\", line 3\n"
"    some_other_code = foo()\n"
"                    ^\n"
"SyntaxError: invalid syntax"
msgstr ""
"File \"example.py\", line 3\n"
"    some_other_code = foo()\n"
"                    ^\n"
"SyntaxError: invalid syntax"

#: ../../whatsnew/3.10.rst:176
msgid "but in Python 3.10 a more informative error is emitted:"
msgstr "但在 Python 3.10 中，會發出一個資訊更豐富的錯誤："

#: ../../whatsnew/3.10.rst:178
msgid ""
"File \"example.py\", line 1\n"
"    expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"               ^\n"
"SyntaxError: '{' was never closed"
msgstr ""
"File \"example.py\", line 1\n"
"    expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"               ^\n"
"SyntaxError: '{' was never closed"

#: ../../whatsnew/3.10.rst:186
msgid ""
"In a similar way, errors involving unclosed string literals (single and "
"triple quoted) now point to the start of the string instead of reporting EOF/"
"EOL."
msgstr ""
"同樣地，涉及未成對字串字面值（單引號和三引號）的錯誤現在會指向字串的開頭，而"
"不是報告 EOF/EOL。"

#: ../../whatsnew/3.10.rst:189
msgid ""
"These improvements are inspired by previous work in the PyPy interpreter."
msgstr "這些改進是受到 PyPy 直譯器的啟發。"

#: ../../whatsnew/3.10.rst:191
msgid ""
"(Contributed by Pablo Galindo in :issue:`42864` and Batuhan Taskaya in :"
"issue:`40176`.)"
msgstr ""
"（由 Pablo Galindo 在 :issue:`42864` 和 Batuhan Taskaya 在 :issue:`40176` 中"
"貢獻。）"

#: ../../whatsnew/3.10.rst:194
msgid ""
":exc:`SyntaxError` exceptions raised by the interpreter will now highlight "
"the full error range of the expression that constitutes the syntax error "
"itself, instead of just where the problem is detected. In this way, instead "
"of displaying (before Python 3.10):"
msgstr ""
"直譯器引發的 :exc:`SyntaxError` 例外現在會突顯 (highlight) 構成語法錯誤之運算"
"式的完整錯誤範圍，而不僅是檢測到問題的位置。如此一來，過去（像 Python 3.10 之"
"前）的："

#: ../../whatsnew/3.10.rst:199
msgid ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^\n"
"SyntaxError: Generator expression must be parenthesized"
msgstr ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^\n"
"SyntaxError: Generator expression must be parenthesized"

#: ../../whatsnew/3.10.rst:207
msgid "now Python 3.10 will display the exception as:"
msgstr "現在 Python 3.10 則會將例外顯示為："

#: ../../whatsnew/3.10.rst:209
msgid ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^^^^^^^^^^^^^^^^^^^^\n"
"SyntaxError: Generator expression must be parenthesized"
msgstr ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^^^^^^^^^^^^^^^^^^^^\n"
"SyntaxError: Generator expression must be parenthesized"

#: ../../whatsnew/3.10.rst:217
msgid "This improvement was contributed by Pablo Galindo in :issue:`43914`."
msgstr "此改進由 Pablo Galindo 在 :issue:`43914` 中貢獻。"

#: ../../whatsnew/3.10.rst:219
msgid ""
"A considerable amount of new specialized messages for :exc:`SyntaxError` "
"exceptions have been incorporated. Some of the most notable ones are as "
"follows:"
msgstr ""
"已合併了大量針對 :exc:`SyntaxError` 例外的新專用訊息。一些最值得注意的如下："

#: ../../whatsnew/3.10.rst:222
msgid "Missing ``:`` before blocks:"
msgstr "在區塊之前缺少 ``:``:"

#: ../../whatsnew/3.10.rst:224
msgid ""
">>> if rocket.position > event_horizon\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position > event_horizon\n"
"                                      ^\n"
"SyntaxError: expected ':'"
msgstr ""
">>> if rocket.position > event_horizon\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position > event_horizon\n"
"                                      ^\n"
"SyntaxError: expected ':'"

#: ../../whatsnew/3.10.rst:232
msgid "(Contributed by Pablo Galindo in :issue:`42997`.)"
msgstr "（由 Pablo Galindo 在 :issue:`42997` 中貢獻。）"

#: ../../whatsnew/3.10.rst:234
msgid "Unparenthesised tuples in comprehensions targets:"
msgstr "綜合運算目標中未加括號的元組："

#: ../../whatsnew/3.10.rst:236
msgid ""
">>> {x,y for x,y in zip('abcd', '1234')}\n"
"  File \"<stdin>\", line 1\n"
"    {x,y for x,y in zip('abcd', '1234')}\n"
"     ^\n"
"SyntaxError: did you forget parentheses around the comprehension target?"
msgstr ""
">>> {x,y for x,y in zip('abcd', '1234')}\n"
"  File \"<stdin>\", line 1\n"
"    {x,y for x,y in zip('abcd', '1234')}\n"
"     ^\n"
"SyntaxError: did you forget parentheses around the comprehension target?"

#: ../../whatsnew/3.10.rst:244
msgid "(Contributed by Pablo Galindo in :issue:`43017`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43017` 中貢獻。）"

#: ../../whatsnew/3.10.rst:246
msgid "Missing commas in collection literals and between expressions:"
msgstr "容器字面值 (collection literals) 中和運算式之間缺少逗號："

#: ../../whatsnew/3.10.rst:248
msgid ""
">>> items = {\n"
"... x: 1,\n"
"... y: 2\n"
"... z: 3,\n"
"  File \"<stdin>\", line 3\n"
"    y: 2\n"
"       ^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
">>> items = {\n"
"... x: 1,\n"
"... y: 2\n"
"... z: 3,\n"
"  File \"<stdin>\", line 3\n"
"    y: 2\n"
"       ^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"

#: ../../whatsnew/3.10.rst:259
msgid "(Contributed by Pablo Galindo in :issue:`43822`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43822` 中貢獻。）"

#: ../../whatsnew/3.10.rst:261
msgid "Multiple Exception types without parentheses:"
msgstr "不帶括號的多個例外型別："

#: ../../whatsnew/3.10.rst:263
msgid ""
">>> try:\n"
"...     build_dyson_sphere()\n"
"... except NotEnoughScienceError, NotEnoughResourcesError:\n"
"  File \"<stdin>\", line 3\n"
"    except NotEnoughScienceError, NotEnoughResourcesError:\n"
"           ^\n"
"SyntaxError: multiple exception types must be parenthesized"
msgstr ""
">>> try:\n"
"...     build_dyson_sphere()\n"
"... except NotEnoughScienceError, NotEnoughResourcesError:\n"
"  File \"<stdin>\", line 3\n"
"    except NotEnoughScienceError, NotEnoughResourcesError:\n"
"           ^\n"
"SyntaxError: multiple exception types must be parenthesized"

#: ../../whatsnew/3.10.rst:273
msgid "(Contributed by Pablo Galindo in :issue:`43149`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43149` 中貢獻。）"

#: ../../whatsnew/3.10.rst:275
msgid "Missing ``:`` and values in dictionary literals:"
msgstr "字典字面值中缺少 ``:`` 和值："

#: ../../whatsnew/3.10.rst:277
msgid ""
">>> values = {\n"
"... x: 1,\n"
"... y: 2,\n"
"... z:\n"
"... }\n"
"  File \"<stdin>\", line 4\n"
"    z:\n"
"     ^\n"
"SyntaxError: expression expected after dictionary key and ':'\n"
"\n"
">>> values = {x:1, y:2, z w:3}\n"
"  File \"<stdin>\", line 1\n"
"    values = {x:1, y:2, z w:3}\n"
"                        ^\n"
"SyntaxError: ':' expected after dictionary key"
msgstr ""
">>> values = {\n"
"... x: 1,\n"
"... y: 2,\n"
"... z:\n"
"... }\n"
"  File \"<stdin>\", line 4\n"
"    z:\n"
"     ^\n"
"SyntaxError: expression expected after dictionary key and ':'\n"
"\n"
">>> values = {x:1, y:2, z w:3}\n"
"  File \"<stdin>\", line 1\n"
"    values = {x:1, y:2, z w:3}\n"
"                        ^\n"
"SyntaxError: ':' expected after dictionary key"

#: ../../whatsnew/3.10.rst:295
msgid "(Contributed by Pablo Galindo in :issue:`43823`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43823` 中貢獻。）"

#: ../../whatsnew/3.10.rst:297
msgid "``try`` blocks without ``except`` or ``finally`` blocks:"
msgstr "沒有 ``except`` 或 ``finally`` 區塊的 ``try`` 區塊："

#: ../../whatsnew/3.10.rst:299
msgid ""
">>> try:\n"
"...     x = 2\n"
"... something = 3\n"
"  File \"<stdin>\", line 3\n"
"    something  = 3\n"
"    ^^^^^^^^^\n"
"SyntaxError: expected 'except' or 'finally' block"
msgstr ""
">>> try:\n"
"...     x = 2\n"
"... something = 3\n"
"  File \"<stdin>\", line 3\n"
"    something  = 3\n"
"    ^^^^^^^^^\n"
"SyntaxError: expected 'except' or 'finally' block"

#: ../../whatsnew/3.10.rst:309
msgid "(Contributed by Pablo Galindo in :issue:`44305`.)"
msgstr "（由 Pablo Galindo 在 :issue:`44305` 中貢獻。）"

#: ../../whatsnew/3.10.rst:311
msgid "Usage of ``=`` instead of ``==`` in comparisons:"
msgstr "於比較中使用 ``=`` 而非 ``==``："

#: ../../whatsnew/3.10.rst:313
msgid ""
">>> if rocket.position = event_horizon:\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position = event_horizon:\n"
"                       ^\n"
"SyntaxError: cannot assign to attribute here. Maybe you meant '==' instead "
"of '='?"
msgstr ""
">>> if rocket.position = event_horizon:\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position = event_horizon:\n"
"                       ^\n"
"SyntaxError: cannot assign to attribute here. Maybe you meant '==' instead "
"of '='?"

#: ../../whatsnew/3.10.rst:321
msgid "(Contributed by Pablo Galindo in :issue:`43797`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43797` 中貢獻。）"

#: ../../whatsnew/3.10.rst:323
msgid "Usage of ``*`` in f-strings:"
msgstr "f 字串中使用 ``*``："

#: ../../whatsnew/3.10.rst:325
msgid ""
">>> f\"Black holes {*all_black_holes} and revelations\"\n"
"  File \"<stdin>\", line 1\n"
"    (*all_black_holes)\n"
"     ^\n"
"SyntaxError: f-string: cannot use starred expression here"
msgstr ""
">>> f\"Black holes {*all_black_holes} and revelations\"\n"
"  File \"<stdin>\", line 1\n"
"    (*all_black_holes)\n"
"     ^\n"
"SyntaxError: f-string: cannot use starred expression here"

#: ../../whatsnew/3.10.rst:333
msgid "(Contributed by Pablo Galindo in :issue:`41064`.)"
msgstr "（由 Pablo Galindo 在 :issue:`41064` 中貢獻。）"

#: ../../whatsnew/3.10.rst:336
msgid "IndentationErrors"
msgstr "IndentationErrors"

#: ../../whatsnew/3.10.rst:338
msgid ""
"Many :exc:`IndentationError` exceptions now have more context regarding what "
"kind of block was expecting an indentation, including the location of the "
"statement:"
msgstr ""
"許多 :exc:`IndentationError` 例外現在支援更多關於哪種區塊需要縮進的情境，包括"
"陳述式的位置："

#: ../../whatsnew/3.10.rst:341
msgid ""
">>> def foo():\n"
"...    if lel:\n"
"...    x = 2\n"
"  File \"<stdin>\", line 3\n"
"    x = 2\n"
"    ^\n"
"IndentationError: expected an indented block after 'if' statement in line 2"
msgstr ""
">>> def foo():\n"
"...    if lel:\n"
"...    x = 2\n"
"  File \"<stdin>\", line 3\n"
"    x = 2\n"
"    ^\n"
"IndentationError: expected an indented block after 'if' statement in line 2"

#: ../../whatsnew/3.10.rst:353
msgid "AttributeErrors"
msgstr "AttributeErrors"

#: ../../whatsnew/3.10.rst:355
msgid ""
"When printing :exc:`AttributeError`, :c:func:`!PyErr_Display` will offer "
"suggestions of similar attribute names in the object that the exception was "
"raised from:"
msgstr ""
"當印出 :exc:`AttributeError` 時，:c:func:`!PyErr_Display` 將提供引發例外的物"
"件中類似屬性名稱的建議："

#: ../../whatsnew/3.10.rst:359
msgid ""
">>> collections.namedtoplo\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: module 'collections' has no attribute 'namedtoplo'. Did you "
"mean: namedtuple?"
msgstr ""
">>> collections.namedtoplo\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: module 'collections' has no attribute 'namedtoplo'. Did you "
"mean: namedtuple?"

#: ../../whatsnew/3.10.rst:366 ../../whatsnew/3.10.rst:388
msgid "(Contributed by Pablo Galindo in :issue:`38530`.)"
msgstr "（由 Pablo Galindo 在 :issue:`38530` 中貢獻。）"

#: ../../whatsnew/3.10.rst:369
msgid ""
"Notice this won't work if :c:func:`!PyErr_Display` is not called to display "
"the error which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"請注意，如果未呼叫 :c:func:`!PyErr_Display` 來顯示錯誤（可能為了要使用其他自"
"定義錯誤顯示函式），則此操作將不起作用。這是 IPython 等某些 REPL 中的常見狀"
"況。"

#: ../../whatsnew/3.10.rst:374
msgid "NameErrors"
msgstr "NameErrors"

#: ../../whatsnew/3.10.rst:376
msgid ""
"When printing :exc:`NameError` raised by the interpreter, :c:func:`!"
"PyErr_Display` will offer suggestions of similar variable names in the "
"function that the exception was raised from:"
msgstr ""
"當印出直譯器引發的 :exc:`NameError` 時，:c:func:`!PyErr_Display` 將在引發例外"
"的函式中提供類似變數名稱的建議："

#: ../../whatsnew/3.10.rst:380
msgid ""
">>> schwarzschild_black_hole = None\n"
">>> schwarschild_black_hole\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"NameError: name 'schwarschild_black_hole' is not defined. Did you mean: "
"schwarzschild_black_hole?"
msgstr ""
">>> schwarzschild_black_hole = None\n"
">>> schwarschild_black_hole\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"NameError: name 'schwarschild_black_hole' is not defined. Did you mean: "
"schwarzschild_black_hole?"

#: ../../whatsnew/3.10.rst:391
msgid ""
"Notice this won't work if :c:func:`!PyErr_Display` is not called to display "
"the error, which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"請注意，如果未呼叫 :c:func:`!PyErr_Display` 來顯示錯誤，則此操作將不起作用，"
"如果使用其他自定義錯誤顯示函式，則可能會發生這種情況。這是 IPython 等某些 "
"REPL 中的常見場景。"

#: ../../whatsnew/3.10.rst:397
msgid "PEP 626: Precise line numbers for debugging and other tools"
msgstr "PEP 626：用於除錯和其他工具的精確列號"

#: ../../whatsnew/3.10.rst:399
msgid ""
"PEP 626 brings more precise and reliable line numbers for debugging, "
"profiling and coverage tools. Tracing events, with the correct line number, "
"are generated for all lines of code executed and only for lines of code that "
"are executed."
msgstr ""
"PEP 626 為除錯、分析 (profiling) 和覆蓋 (coverage) 工具帶來了更精確、更可靠的"
"列號 (line numbers)。為所有已執行的程式碼列且僅針對已執行的程式碼行產生具有正"
"確列號的追蹤事件。"

#: ../../whatsnew/3.10.rst:402
msgid ""
"The :attr:`~frame.f_lineno` attribute of frame objects will always contain "
"the expected line number."
msgstr "影格 (frame) 物件的 :attr:`~frame.f_lineno` 屬性總會包含預期的列號。"

#: ../../whatsnew/3.10.rst:405
msgid ""
"The :attr:`~codeobject.co_lnotab` attribute of :ref:`code objects <code-"
"objects>` is deprecated and will be removed in 3.12. Code that needs to "
"convert from offset to line number should use the new :meth:`~codeobject."
"co_lines` method instead."
msgstr ""
":ref:`程式碼物件 <code-objects>`\\ 的 :attr:`~codeobject.co_lnotab` 屬性已棄"
"用，並將在 3.12 中刪除。需要從偏移量轉換為列號的程式碼應使用新的 :meth:"
"`~codeobject.co_lines` 方法。"

#: ../../whatsnew/3.10.rst:412
msgid "PEP 634: Structural Pattern Matching"
msgstr "PEP 634：結構模式匹配"

#: ../../whatsnew/3.10.rst:414
msgid ""
"Structural pattern matching has been added in the form of a *match "
"statement* and *case statements* of patterns with associated actions. "
"Patterns consist of sequences, mappings, primitive data types as well as "
"class instances. Pattern matching enables programs to extract information "
"from complex data types, branch on the structure of data, and apply specific "
"actions based on different forms of data."
msgstr ""
"已新增結構模式匹配 (structural pattern matching)，其形式為具有關聯操作之模式"
"的 *match 陳述式* 和 *case 陳述式*。模式由序列、對映、原始資料型別 "
"(primitive data types) 以及類別實例組成。模式匹配使程式能夠從複雜的資料型別中"
"提取資訊，在資料結構上進行分支，並根據不同形式的資料應用特定的操作。"

#: ../../whatsnew/3.10.rst:422
msgid "Syntax and operations"
msgstr "語法和操作"

#: ../../whatsnew/3.10.rst:424
msgid "The generic syntax of pattern matching is::"
msgstr "模式匹配的通用語法是： ::"

#: ../../whatsnew/3.10.rst:426
msgid ""
"match subject:\n"
"    case <pattern_1>:\n"
"        <action_1>\n"
"    case <pattern_2>:\n"
"        <action_2>\n"
"    case <pattern_3>:\n"
"        <action_3>\n"
"    case _:\n"
"        <action_wildcard>"
msgstr ""
"match subject:\n"
"    case <pattern_1>:\n"
"        <action_1>\n"
"    case <pattern_2>:\n"
"        <action_2>\n"
"    case <pattern_3>:\n"
"        <action_3>\n"
"    case _:\n"
"        <action_wildcard>"

#: ../../whatsnew/3.10.rst:436
msgid ""
"A match statement takes an expression and compares its value to successive "
"patterns given as one or more case blocks.  Specifically, pattern matching "
"operates by:"
msgstr ""
"match 陳述式採用一個運算式，並將其值與作為一個或多個 case 區塊給出的連續模式"
"進行比較。具體來說，模式匹配是透過以下方式進行操作："

#: ../../whatsnew/3.10.rst:440
msgid "using data with type and shape (the ``subject``)"
msgstr "使用具有型態 (type) 和特徵 (shape) 的資料 (主語 ``subject``)"

#: ../../whatsnew/3.10.rst:441
msgid "evaluating the ``subject`` in the ``match`` statement"
msgstr "``match`` 陳述式中 ``subject`` 的求值 (evaluating)"

#: ../../whatsnew/3.10.rst:442
msgid ""
"comparing the subject with each pattern in a ``case`` statement from top to "
"bottom until a match is confirmed."
msgstr "從上到下將主語與 ``case`` 陳述式中的每個模式進行比較，直到確認匹配。"

#: ../../whatsnew/3.10.rst:444
msgid "executing the action associated with the pattern of the confirmed match"
msgstr "執行與已確認匹配模式對應的操作"

#: ../../whatsnew/3.10.rst:446
msgid ""
"If an exact match is not confirmed, the last case, a wildcard ``_``, if "
"provided, will be used as the matching case. If an exact match is not "
"confirmed and a wildcard case does not exist, the entire match block is a no-"
"op."
msgstr ""
"如果未確認完全匹配，則最後一種情況，即萬用字元 ``_`` （如果有提供）將作為匹配"
"到的情況。如未有任何匹配且不存在萬用字元的 case，則整個 match 區塊會是個無操"
"作 (no-op)。"

#: ../../whatsnew/3.10.rst:452
msgid "Declarative approach"
msgstr "宣告式方法 (Declarative approach)"

#: ../../whatsnew/3.10.rst:454
msgid ""
"Readers may be aware of pattern matching through the simple example of "
"matching a subject (data object) to a literal (pattern) with the switch "
"statement found in C, Java or JavaScript (and many other languages). Often "
"the switch statement is used for comparison of an object/expression with "
"case statements containing literals."
msgstr ""
"讀者可能會透過使用 C、Java 或 JavaScript（以及許多其他語言）中的 switch 陳述"
"式將主語（資料物件）與字面值 (literal)（模式）進行匹配的簡單範例來了解模式匹"
"配。 switch 語句通常用於將物件/運算式與包含字面值的 case 陳述式進行比較。"

#: ../../whatsnew/3.10.rst:460
msgid ""
"More powerful examples of pattern matching can be found in languages such as "
"Scala and Elixir. With structural pattern matching, the approach is "
"\"declarative\" and explicitly states the conditions (the patterns) for data "
"to match."
msgstr ""
"更強大的模式匹配範例可以在 Scala 和 Elixir 等語言中找到。對於結構模式匹配，該"
"方法是「宣告式的 (declarative)」，並且明確地說明了資料匹配的條件（模式）。"

#: ../../whatsnew/3.10.rst:464
msgid ""
"While an \"imperative\" series of instructions using nested \"if\" "
"statements could be used to accomplish something similar to structural "
"pattern matching, it is less clear than the \"declarative\" approach. "
"Instead the \"declarative\" approach states the conditions to meet for a "
"match and is more readable through its explicit patterns. While structural "
"pattern matching can be used in its simplest form comparing a variable to a "
"literal in a case statement, its true value for Python lies in its handling "
"of the subject's type and shape."
msgstr ""
"雖然使用巢狀 \"if\" 陳述式的「命令式 (imperative)」指令系列可用於完成類似於結"
"構模式匹配的操作，但它不如「聲明式 (declarative)」方法清晰。相反地，「聲明"
"式」方法規定了匹配所需滿足的條件，並且因其明確表達模式而更具可讀性。雖然結構"
"模式匹配可以用其最簡單的形式達成，將變數與 case 陳述式中的字面值進行比較，但"
"它對 Python 的真正價值在於它對主語的型態和特徵的處理。"

#: ../../whatsnew/3.10.rst:473
msgid "Simple pattern: match to a literal"
msgstr "簡單模式：與字面值匹配"

#: ../../whatsnew/3.10.rst:475
msgid ""
"Let's look at this example as pattern matching in its simplest form: a "
"value, the subject, being matched to several literals, the patterns. In the "
"example below, ``status`` is the subject of the match statement. The "
"patterns are each of the case statements, where literals represent request "
"status codes. The associated action to the case is executed after a match::"
msgstr ""
"讓我們將此範例視為最簡單形式的模式匹配：一個值（主語）與多個文字（模式）匹"
"配。在下面的範例中，``status`` 是匹配陳述式的主語。這些模式是每個 case 陳述"
"式，其中文字表示請求狀態程式碼。與案例相關的操作在匹配後執行： ::"

#: ../../whatsnew/3.10.rst:481
msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""
msgstr ""

#: ../../whatsnew/3.10.rst:492
msgid ""
"If the above function is passed a ``status`` of 418, \"I'm a teapot\" is "
"returned. If the above function is passed a ``status`` of 500, the case "
"statement with ``_`` will match as a wildcard, and \"Something's wrong with "
"the internet\" is returned. Note the last block: the variable name, ``_``, "
"acts as a *wildcard* and insures the subject will always match. The use of "
"``_`` is optional."
msgstr ""
"如果上面的函式傳遞了 418 ``status``，則回傳 \"I'm a teapot\"。如果上面的函式"
"傳遞了 500 ``status``，則帶有 ``_`` 的 case 語句將作為萬用字元進行匹配，並回"
"傳 \"Something's wrong with the internet\"。請注意最後一個區塊：變數名稱 "
"``_`` 充當 *萬用字元* 並確保主語始終匹配。``_`` 的使用是可選的。"

#: ../../whatsnew/3.10.rst:499
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr "你可以使用 ``|`` (\"or\") 將多個字面值組合在一個模式中： ::"

#: ../../whatsnew/3.10.rst:501
msgid ""
"case 401 | 403 | 404:\n"
"    return \"Not allowed\""
msgstr ""

#: ../../whatsnew/3.10.rst:505
msgid "Behavior without the wildcard"
msgstr "沒有萬用字元 (wildcard) 的行為"

#: ../../whatsnew/3.10.rst:507
msgid ""
"If we modify the above example by removing the last case block, the example "
"becomes::"
msgstr "如果我們透過刪除最後一個 case 區塊來修改上面的範例，則範例將變為： ::"

#: ../../whatsnew/3.10.rst:510
msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\""
msgstr ""

#: ../../whatsnew/3.10.rst:519
msgid ""
"Without the use of ``_`` in a case statement, a match may not exist. If no "
"match exists, the behavior is a no-op. For example, if ``status`` of 500 is "
"passed, a no-op occurs."
msgstr ""
"如果在 case 陳述式中不使用 ``_``，則可能不存在匹配項目。如果不存在匹配項目，"
"則該行為是無操作 (no-op)。例如，如果 ``status`` 為 500，則不會有任何操作。"

#: ../../whatsnew/3.10.rst:524
msgid "Patterns with a literal and variable"
msgstr "具有字面值和變數的模式"

#: ../../whatsnew/3.10.rst:526
msgid ""
"Patterns can look like unpacking assignments, and a pattern may be used to "
"bind variables. In this example, a data point can be unpacked to its x-"
"coordinate and y-coordinate::"
msgstr ""
"模式看起來就像解包賦值 (unpacking assignment)，並且模式可用於繫結 (bind) 變"
"數。在此範例中，可以將資料點解包為其 x 坐標和 y 坐標： ::"

#: ../../whatsnew/3.10.rst:530
msgid ""
"# point is an (x, y) tuple\n"
"match point:\n"
"    case (0, 0):\n"
"        print(\"Origin\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Not a point\")"
msgstr ""

#: ../../whatsnew/3.10.rst:543
msgid ""
"The first pattern has two literals, ``(0, 0)``, and may be thought of as an "
"extension of the literal pattern shown above. The next two patterns combine "
"a literal and a variable, and the variable *binds* a value from the subject "
"(``point``).  The fourth pattern captures two values, which makes it "
"conceptually similar to the unpacking assignment ``(x, y) = point``."
msgstr ""
"第一個模式有兩個字面值 ``(0, 0)``，並且可以被認為是上面顯示的字面值模式的擴"
"充。接下來的兩個模式組合了一個字面值和一個變數，並且變數\\ *繫結*\\ 來自主語"
"（``point``）的值。第四個模式捕獲兩個值，這使得它在概念上類似於解包賦值 "
"``(x, y) = point``。"

#: ../../whatsnew/3.10.rst:550
msgid "Patterns and classes"
msgstr "模式和類別"

#: ../../whatsnew/3.10.rst:552
msgid ""
"If you are using classes to structure your data, you can use as a pattern "
"the class name followed by an argument list resembling a constructor. This "
"pattern has the ability to capture class attributes into variables::"
msgstr ""
"如果你使用類別來建構資料，則可以用類別名稱與後面的引數列表組合成的建構函式作"
"為模式。該模式能夠將類別屬性捕獲到變數中： ::"

#: ../../whatsnew/3.10.rst:556
msgid ""
"class Point:\n"
"    x: int\n"
"    y: int\n"
"\n"
"def location(point):\n"
"    match point:\n"
"        case Point(x=0, y=0):\n"
"            print(\"Origin is the point's location.\")\n"
"        case Point(x=0, y=y):\n"
"            print(f\"Y={y} and the point is on the y-axis.\")\n"
"        case Point(x=x, y=0):\n"
"            print(f\"X={x} and the point is on the x-axis.\")\n"
"        case Point():\n"
"            print(\"The point is located somewhere else on the plane.\")\n"
"        case _:\n"
"            print(\"Not a point\")"
msgstr ""

#: ../../whatsnew/3.10.rst:574
msgid "Patterns with positional parameters"
msgstr "具有位置參數的模式"

#: ../../whatsnew/3.10.rst:576
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"你可以將位置參數與一些會為其屬性排序的內建類別（例如 dataclasses）一起使用。"
"你還可以通過在類別中設定 ``__match_args__`` 特殊屬性來定義模式中屬性的特定位"
"置。如果它被設定為 (\"x\", \"y\")，則以下模式都是等效的（且都將 ``y`` 屬性繫"
"結到 ``var`` 變數）： ::"

#: ../../whatsnew/3.10.rst:582
msgid ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"
msgstr ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"

#: ../../whatsnew/3.10.rst:588
msgid "Nested patterns"
msgstr "巢狀模式"

#: ../../whatsnew/3.10.rst:590
msgid ""
"Patterns can be arbitrarily nested.  For example, if our data is a short "
"list of points, it could be matched like this::"
msgstr ""
"模式可以任意巢套。例如，如果我們的資料是一個簡短的座標點列表，則可以這樣匹"
"配： ::"

#: ../../whatsnew/3.10.rst:593
msgid ""
"match points:\n"
"    case []:\n"
"        print(\"No points in the list.\")\n"
"    case [Point(0, 0)]:\n"
"        print(\"The origin is the only point in the list.\")\n"
"    case [Point(x, y)]:\n"
"        print(f\"A single point {x}, {y} is in the list.\")\n"
"    case [Point(0, y1), Point(0, y2)]:\n"
"        print(f\"Two points on the Y axis at {y1}, {y2} are in the list.\")\n"
"    case _:\n"
"        print(\"Something else is found in the list.\")"
msgstr ""

#: ../../whatsnew/3.10.rst:606
msgid "Complex patterns and the wildcard"
msgstr "複雜模式和萬用字元"

#: ../../whatsnew/3.10.rst:608
msgid ""
"To this point, the examples have used ``_`` alone in the last case "
"statement. A wildcard can be used in more complex patterns, such as "
"``('error', code, _)``. For example::"
msgstr ""
"到目前為止，範例在最後一個 case 陳述式中單獨使用了 ``_``。萬用字元可以用在更"
"複雜的模式中，像是 ``('error', code, _)``。例如： ::"

#: ../../whatsnew/3.10.rst:612
msgid ""
"match test_variable:\n"
"    case ('warning', code, 40):\n"
"        print(\"A warning has been received.\")\n"
"    case ('error', code, _):\n"
"        print(f\"An error {code} occurred.\")"
msgstr ""

#: ../../whatsnew/3.10.rst:618
msgid ""
"In the above case, ``test_variable`` will match for ('error', code, 100) and "
"('error', code, 800)."
msgstr ""
"在上述情況下，值像是 ('error', code, 100) 和 ('error', code, 800) 的 "
"``test_variable`` 將會成功匹配。"

#: ../../whatsnew/3.10.rst:622
msgid "Guard"
msgstr "Guard"

#: ../../whatsnew/3.10.rst:624
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"我們可以在模式中新增一個 ``if`` 子句，稱為 \"guard\"。如果 guard 為 false，"
"則 ``match`` 會繼續嘗試下一個 case 區塊。請注意，值的捕獲發生在 guard 的求值 "
"(evaluate) 之前： ::"

#: ../../whatsnew/3.10.rst:628
msgid ""
"match point:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"The point is located on the diagonal Y=X at {x}.\")\n"
"    case Point(x, y):\n"
"        print(f\"Point is not on the diagonal.\")"
msgstr ""

#: ../../whatsnew/3.10.rst:635
msgid "Other Key Features"
msgstr "其他主要功能"

#: ../../whatsnew/3.10.rst:637
msgid "Several other key features:"
msgstr "其他幾個主要功能："

#: ../../whatsnew/3.10.rst:639
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences. Technically, the subject "
"must be a sequence. Therefore, an important exception is that patterns don't "
"match iterators. Also, to prevent a common mistake, sequence patterns don't "
"match strings."
msgstr ""
"與賦值的解包一樣，tuple 和 list 模式具有完全相同的含義，並且實際上匹配任意序"
"列。從技術上來說，主語必須是一個序列。因此，一個重要的例外是模式不會去匹配疊"
"代器。另外，為了防止常常出錯，序列模式也不會去匹配字串。"

#: ../../whatsnew/3.10.rst:645
msgid ""
"Sequence patterns support wildcards: ``[x, y, *rest]`` and ``(x, y, *rest)`` "
"work similar to wildcards in unpacking assignments.  The name after ``*`` "
"may also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two "
"items without binding the remaining items."
msgstr ""
"序列模式支援萬用字元：``[x, y, *rest]`` 和 ``(x, y, *rest)`` 與解包賦值中的萬"
"用字元類似。 ``*`` 後面的名稱也可能是 ``_``，因此 ``(x, y, *_)`` 會匹配至少兩"
"個項目的序列，且不繫結其餘項目。"

#: ../../whatsnew/3.10.rst:650
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dict.  Unlike sequence "
"patterns, extra keys are ignored.  A wildcard ``**rest`` is also supported.  "
"(But ``**_`` would be redundant, so is not allowed.)"
msgstr ""
"對映模式： ``{\"bandwidth\": b, \"latency\": l}`` 從字典中捕獲 "
"``\"bandwidth\"`` 和 ``\"latency\"`` 值。與序列模式不同，額外的鍵將被忽略。也"
"支援萬用字元 ``**rest``。（但是 ``**_`` 是多餘的，所以是不允許的。）"

#: ../../whatsnew/3.10.rst:655
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "可以使用 ``as`` 關鍵字捕獲子模式： ::"

#: ../../whatsnew/3.10.rst:657
msgid "case (Point(x1, y1), Point(x2, y2) as p2): ..."
msgstr "case (Point(x1, y1), Point(x2, y2) as p2): ..."

#: ../../whatsnew/3.10.rst:659
msgid ""
"This binds x1, y1, x2, y2 like you would expect without the ``as`` clause, "
"and p2 to the entire second item of the subject."
msgstr ""
"這將繫結 x1、y1、x2、y2，如同沒有 ``as`` 子句的情況下所預期的，並將 p2 繫結到"
"主語的整個第二項目。"

#: ../../whatsnew/3.10.rst:662
msgid ""
"Most literals are compared by equality. However, the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"大多數字面值都是通過相等進行比較的。然而，單例 ``True``、``False`` 和 "
"``None`` 是按標識值 (identity) 來進行比較的。"

#: ../../whatsnew/3.10.rst:665
msgid ""
"Named constants may be used in patterns.  These named constants must be "
"dotted names to prevent the constant from being interpreted as a capture "
"variable::"
msgstr ""
"附名常數 (named constant) 可以在模式中使用。這些附名常數必須有帶有點的名稱 "
"(dotted name)，以防止常數被直譯為捕獲的變數： ::"

#: ../../whatsnew/3.10.rst:669
msgid ""
"from enum import Enum\n"
"class Color(Enum):\n"
"    RED = 0\n"
"    GREEN = 1\n"
"    BLUE = 2\n"
"\n"
"color = Color.GREEN\n"
"match color:\n"
"    case Color.RED:\n"
"        print(\"I see red!\")\n"
"    case Color.GREEN:\n"
"        print(\"Grass is green\")\n"
"    case Color.BLUE:\n"
"        print(\"I'm feeling the blues :(\")"
msgstr ""

#: ../../whatsnew/3.10.rst:684
msgid ""
"For the full specification see :pep:`634`.  Motivation and rationale are in :"
"pep:`635`, and a longer tutorial is in :pep:`636`."
msgstr ""
"有關完整規範，請參閱 :pep:`634`。動機和基本原理位於 :pep:`635` 中，較完整的教"
"學位於 :pep:`636` 中。"

#: ../../whatsnew/3.10.rst:691
msgid "Optional ``EncodingWarning`` and ``encoding=\"locale\"`` option"
msgstr "可選的 ``EncodingWarning`` 和 ``encoding=\"locale\"`` 選項"

#: ../../whatsnew/3.10.rst:693
msgid ""
"The default encoding of :class:`~io.TextIOWrapper` and :func:`open` is "
"platform and locale dependent. Since UTF-8 is used on most Unix platforms, "
"omitting ``encoding`` option when opening UTF-8 files (e.g. JSON, YAML, "
"TOML, Markdown) is a very common bug. For example::"
msgstr ""
":class:`~io.TextIOWrapper` 和 :func:`open` 的預設編碼取決於平台和區域設定。由"
"於大多數 Unix 平台都使用 UTF-8，因此在打開 UTF-8 檔案（例如 JSON、YAML、"
"TOML、Markdown）時省略 ``encoding`` 選項是個常見的 bug，例如： ::"

#: ../../whatsnew/3.10.rst:698
msgid ""
"# BUG: \"rb\" mode or encoding=\"utf-8\" should be used.\n"
"with open(\"data.json\") as f:\n"
"    data = json.load(f)"
msgstr ""

#: ../../whatsnew/3.10.rst:702
msgid ""
"To find this type of bug, an optional ``EncodingWarning`` is added. It is "
"emitted when :data:`sys.flags.warn_default_encoding <sys.flags>` is true and "
"locale-specific default encoding is used."
msgstr ""
"為了發現這種錯誤，新增了一個可選的 ``EncodingWarning``。當 :data:`sys.flags."
"warn_default_encoding <sys.flags>` 為 true 且使用特定於語言環境的預設編碼時，"
"會發出該信號。"

#: ../../whatsnew/3.10.rst:706
msgid ""
"``-X warn_default_encoding`` option and :envvar:`PYTHONWARNDEFAULTENCODING` "
"are added to enable the warning."
msgstr ""
"新增 ``-X warn_default_encoding`` 選項和 :envvar:`PYTHONWARNDEFAULTENCODING` "
"來啟用警告。"

#: ../../whatsnew/3.10.rst:709
msgid "See :ref:`io-text-encoding` for more information."
msgstr "更多資訊請見 :ref:`io-text-encoding`。"

#: ../../whatsnew/3.10.rst:714
msgid "New Features Related to Type Hints"
msgstr "與型別提示相關的新功能"

#: ../../whatsnew/3.10.rst:716
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr "本節介紹影響 :pep:`484` 型別提示和 :mod:`typing` 模組的主要更改。"

#: ../../whatsnew/3.10.rst:721
msgid "PEP 604: New Type Union Operator"
msgstr "PEP 604：新型聯集運算子"

#: ../../whatsnew/3.10.rst:723
msgid ""
"A new type union operator was introduced which enables the syntax ``X | Y``. "
"This provides a cleaner way of expressing 'either type X or type Y' instead "
"of using :data:`typing.Union`, especially in type hints."
msgstr ""
"引入了一種新的聯集運算子，該運算子啟用像是 ``X | Y`` 的語法。這提供了一種在型"
"別提示中更清晰的方式來表達「型別 X 或型別 Y」，來取代使用 :data:`typing."
"Union`。"

#: ../../whatsnew/3.10.rst:727
msgid ""
"In previous versions of Python, to apply a type hint for functions accepting "
"arguments of multiple types, :data:`typing.Union` was used::"
msgstr ""
"在以前版本的 Python 中，要使用接受多種型別參數之型別提示的函式，要使用 :data:"
"`typing.Union`： ::"

#: ../../whatsnew/3.10.rst:730
msgid ""
"def square(number: Union[int, float]) -> Union[int, float]:\n"
"    return number ** 2"
msgstr ""
"def square(number: Union[int, float]) -> Union[int, float]:\n"
"    return number ** 2"

#: ../../whatsnew/3.10.rst:734
msgid "Type hints can now be written in a more succinct manner::"
msgstr "現在可以用更簡潔的方式編寫型別提示： ::"

#: ../../whatsnew/3.10.rst:736
msgid ""
"def square(number: int | float) -> int | float:\n"
"    return number ** 2"
msgstr ""
"def square(number: int | float) -> int | float:\n"
"    return number ** 2"

#: ../../whatsnew/3.10.rst:740
msgid ""
"This new syntax is also accepted as the second argument to :func:"
"`isinstance` and :func:`issubclass`::"
msgstr ""
"這種新語法也接受作為 :func:`isinstance` 和 :func:`issubclass` 的第二個引"
"數： ::"

#: ../../whatsnew/3.10.rst:743
msgid ""
">>> isinstance(1, int | str)\n"
"True"
msgstr ""
">>> isinstance(1, int | str)\n"
"True"

#: ../../whatsnew/3.10.rst:746
msgid "See :ref:`types-union` and :pep:`604` for more details."
msgstr "更多資訊請見 :ref:`types-union` 與 :pep:`604`。"

#: ../../whatsnew/3.10.rst:748
msgid ""
"(Contributed by Maggie Moss and Philippe Prados in :issue:`41428`, with "
"additions by Yurii Karabas and Serhiy Storchaka in :issue:`44490`.)"
msgstr ""
"（由 Maggie Moss 和 Philippe Prados 在 :issue:`41428` 中貢獻，由 Yurii "
"Karabas 和 Serhiy Storchaka 在 :issue:`44490` 中補充。）"

#: ../../whatsnew/3.10.rst:753
msgid "PEP 612: Parameter Specification Variables"
msgstr "PEP 612：參數規範變數"

#: ../../whatsnew/3.10.rst:755
msgid ""
"Two new options to improve the information provided to static type checkers "
"for :pep:`484`\\ 's ``Callable`` have been added to the :mod:`typing` module."
msgstr ""
":mod:`typing` 模組中新增了兩個新選項，用於改進為 :pep:`484` ``Callable`` 的靜"
"態型別檢查器 (static type checker) 所提供的資訊。"

#: ../../whatsnew/3.10.rst:758
msgid ""
"The first is the parameter specification variable.  They are used to forward "
"the parameter types of one callable to another callable -- a pattern "
"commonly found in higher order functions and decorators.  Examples of usage "
"can be found in :class:`typing.ParamSpec`. Previously, there was no easy way "
"to type annotate dependency of parameter types in such a precise manner."
msgstr ""
"第一個是參數規範變數 (parameter specification variable)。它們用於將一個可呼叫"
"物件的參數型別轉發到另一個可呼叫物件 -- 這是高階函式和裝飾器中常見的模式。使"
"用範例可以在 :class:`typing.ParamSpec` 中找到。在過去是沒有簡單的方法可以如此"
"精確地來為參數型別的依賴關係做型別註釋。"

#: ../../whatsnew/3.10.rst:764
msgid ""
"The second option is the new ``Concatenate`` operator. It's used in "
"conjunction with parameter specification variables to type annotate a higher "
"order callable which adds or removes parameters of another callable.  "
"Examples of usage can be found in :class:`typing.Concatenate`."
msgstr ""
"第二個選項是新的 ``Concatenate`` 運算子。它與參數規範變數結合使用，來對一個高"
"階、會新增或刪除另一個可呼叫物件參數的可呼叫物件進行型別註釋。使用範例可以"
"在 :class:`typing.Concatenate` 中找到。"

#: ../../whatsnew/3.10.rst:769
msgid ""
"See :class:`typing.Callable`, :class:`typing.ParamSpec`, :class:`typing."
"Concatenate`, :class:`typing.ParamSpecArgs`, :class:`typing."
"ParamSpecKwargs`, and :pep:`612` for more details."
msgstr ""
"請參閱 :class:`typing.Callable`、:class:`typing.ParamSpec`、:class:`typing."
"Concatenate`、:class:`typing.ParamSpecArgs`、:class:`typing.ParamSpecKwargs` "
"和 :pep:`612` 以了解更多詳情。"

#: ../../whatsnew/3.10.rst:773
msgid ""
"(Contributed by Ken Jin in :issue:`41559`, with minor enhancements by Jelle "
"Zijlstra in :issue:`43783`.  PEP written by Mark Mendoza.)"
msgstr ""
"（由 Ken Jin 在 :issue:`41559` 中貢獻、Jelle Zijlstra 在 :issue:`43783` 中進"
"行了小幅改進。PEP 由 Mark Mendoza 編寫。）"

#: ../../whatsnew/3.10.rst:778
msgid "PEP 613: TypeAlias"
msgstr "PEP 613：型別別名 (TypeAlias)"

#: ../../whatsnew/3.10.rst:780
msgid ""
":pep:`484` introduced the concept of type aliases, only requiring them to be "
"top-level unannotated assignments. This simplicity sometimes made it "
"difficult for type checkers to distinguish between type aliases and ordinary "
"assignments, especially when forward references or invalid types were "
"involved. Compare::"
msgstr ""
":pep:`484` 引入了型別別名 (type aliases) 的概念，只要求它們是最高階、未註釋的"
"賦值 (top-level unannotated assignments)。這種簡單性有時使型別檢查器難以區分"
"型別別名和普通賦值，尤其是在涉及傳遞參照 (reference) 或無效型別時。比較如"
"下： ::"

#: ../../whatsnew/3.10.rst:785
msgid ""
"StrCache = 'Cache[str]'  # a type alias\n"
"LOG_PREFIX = 'LOG[DEBUG]'  # a module constant"
msgstr ""

#: ../../whatsnew/3.10.rst:788
msgid ""
"Now the :mod:`typing` module has a special value :data:`~typing.TypeAlias` "
"which lets you declare type aliases more explicitly::"
msgstr ""
"現在 :mod:`typing` 模組有一個特殊值 :data:`~typing.TypeAlias`，它可以讓你更明"
"確地宣告型別別名： ::"

#: ../../whatsnew/3.10.rst:791
msgid ""
"StrCache: TypeAlias = 'Cache[str]'  # a type alias\n"
"LOG_PREFIX = 'LOG[DEBUG]'  # a module constant"
msgstr ""

#: ../../whatsnew/3.10.rst:794
msgid "See :pep:`613` for more details."
msgstr "更多資訊請見 :pep:`613`。"

#: ../../whatsnew/3.10.rst:796
msgid "(Contributed by Mikhail Golubev in :issue:`41923`.)"
msgstr "（由 Mikhail Golubev 在 :issue:`41923` 中貢獻。）"

#: ../../whatsnew/3.10.rst:799
msgid "PEP 647: User-Defined Type Guards"
msgstr "PEP 647：使用者定義的型別防護"

#: ../../whatsnew/3.10.rst:801
msgid ""
":data:`~typing.TypeGuard` has been added to the :mod:`typing` module to "
"annotate type guard functions and improve information provided to static "
"type checkers during type narrowing.  For more information, please see :data:"
"`~typing.TypeGuard`\\ 's documentation, and :pep:`647`."
msgstr ""
":data:`~typing.TypeGuard`\\ （型別防護）已新增到 :mod:`typing` 模組中，用以註"
"釋型別防護函式並改進在型別窄縮 (type narrowing) 期間提供給靜態型別檢查器的資"
"訊。有關更多資訊，請參閱 :data:`~typing.TypeGuard` 的文件和 :pep:`647`。"

#: ../../whatsnew/3.10.rst:806
msgid ""
"(Contributed by Ken Jin and Guido van Rossum in :issue:`43766`. PEP written "
"by Eric Traut.)"
msgstr ""
"（由 Ken Jin 和 Guido van Rossum 在 :issue:`43766` 中貢獻。PEP 由 Eric Traut "
"編寫。）"

#: ../../whatsnew/3.10.rst:810
msgid "Other Language Changes"
msgstr "其他語言更動"

#: ../../whatsnew/3.10.rst:812
msgid ""
"The :class:`int` type has a new method :meth:`int.bit_count`, returning the "
"number of ones in the binary expansion of a given integer, also known as the "
"population count. (Contributed by Niklas Fiekas in :issue:`29882`.)"
msgstr ""
":class:`int` 型別有一個新方法 :meth:`int.bit_count`，回傳給定整數的二進位展開"
"式中 1 的數量，也稱為總體計數 (population count)。（由 Niklas Fiekas 在 :"
"issue:`29882` 中貢獻。）"

#: ../../whatsnew/3.10.rst:816
msgid ""
"The views returned by :meth:`dict.keys`, :meth:`dict.values` and :meth:`dict."
"items` now all have a ``mapping`` attribute that gives a :class:`types."
"MappingProxyType` object wrapping the original dictionary. (Contributed by "
"Dennis Sweeney in :issue:`40890`.)"
msgstr ""
":meth:`dict.keys`、:meth:`dict.values` 和 :meth:`dict.items` 回傳的視圖 "
"(view) 現在都有一個 ``mapping`` 屬性，該屬性提供 :class:`types."
"MappingProxyType` 包裝原始的字典物件。（由 Dennis Sweeney 在 :issue:`40890` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:821
msgid ""
":pep:`618`: The :func:`zip` function now has an optional ``strict`` flag, "
"used to require that all the iterables have an equal length."
msgstr ""
":pep:`618`：:func:`zip` 函式現在有一個可選的 ``strict`` 旗標，用於要求所有可"
"疊代物件具有相同的長度。"

#: ../../whatsnew/3.10.rst:824
msgid ""
"Builtin and extension functions that take integer arguments no longer "
"accept :class:`~decimal.Decimal`\\ s, :class:`~fractions.Fraction`\\ s and "
"other objects that can be converted to integers only with a loss (e.g. that "
"have the :meth:`~object.__int__` method but do not have the :meth:`~object."
"__index__` method). (Contributed by Serhiy Storchaka in :issue:`37999`.)"
msgstr ""
"採用整數引數的內建函式和擴充函式不再接受 :class:`~decimal.Decimal`、:class:"
"`~fractions.Fraction` 以及其他只能在有損失的情況下轉換為整數的物件（例如有 :"
"meth:`~object.__int__` 方法，但沒有 :meth:`~object.__index__` 方法）。（由 "
"Serhiy Storchaka 在 :issue:`37999` 中貢獻。）"

#: ../../whatsnew/3.10.rst:831
msgid ""
"If :func:`object.__ipow__` returns :data:`NotImplemented`, the operator will "
"correctly fall back to :func:`object.__pow__` and :func:`object.__rpow__` as "
"expected. (Contributed by Alex Shkop in :issue:`38302`.)"
msgstr ""
"如果 :func:`object.__ipow__` 回傳 :data:`NotImplemented`，則該運算子將按預期"
"正確回退到 :func:`object.__pow__` 和 :func:`object.__rpow__` 。（由 Alex "
"Shkop 在 :issue:`38302` 中貢獻。）"

#: ../../whatsnew/3.10.rst:835
msgid ""
"Assignment expressions can now be used unparenthesized within set literals "
"and set comprehensions, as well as in sequence indexes (but not slices)."
msgstr ""
"現在可以在集合字面值 (set literals) 和集合綜合運算 (set comprehensions) 以及"
"序列索引（但不能是切片）中使用不帶括號的賦值運算式 (assignment expressions)。"

#: ../../whatsnew/3.10.rst:838
msgid ""
"Functions have a new ``__builtins__`` attribute which is used to look for "
"builtin symbols when a function is executed, instead of looking into "
"``__globals__['__builtins__']``. The attribute is initialized from "
"``__globals__[\"__builtins__\"]`` if it exists, else from the current "
"builtins. (Contributed by Mark Shannon in :issue:`42990`.)"
msgstr ""
"函式有一個新的 ``__builtins__`` 屬性，用於在執行函式時查找內建符號，而不是查"
"找 ``__globals__['__builtins__']`` 。如果 ``__globals__[\"__builtins__\"]`` "
"存在，則屬性會以此做初始化，否則從當前內建物件 (builtins) 初始化。（由 Mark "
"Shannon 在 :issue:`42990` 中貢獻。）"

#: ../../whatsnew/3.10.rst:844
msgid ""
"Two new builtin functions -- :func:`aiter` and :func:`anext` have been added "
"to provide asynchronous counterparts to :func:`iter` and :func:`next`, "
"respectively. (Contributed by Joshua Bronson, Daniel Pope, and Justin Wang "
"in :issue:`31861`.)"
msgstr ""
"新增兩個內建函式 -- :func:`aiter` 和 :func:`anext`，分別為 :func:`iter` 和 :"
"func:`next` 提供非同步的對應函式。（由 Joshua Bronson、Daniel Pope 和 Justin "
"Wang 在 :issue:`31861` 中貢獻。）"

#: ../../whatsnew/3.10.rst:849
msgid ""
"Static methods (:func:`@staticmethod <staticmethod>`) and class methods (:"
"func:`@classmethod <classmethod>`) now inherit the method attributes "
"(``__module__``, ``__name__``, ``__qualname__``, ``__doc__``, "
"``__annotations__``) and have a new ``__wrapped__`` attribute. Moreover, "
"static methods are now callable as regular functions. (Contributed by Victor "
"Stinner in :issue:`43682`.)"
msgstr ""
"靜態方法 (:func:`@staticmethod <staticmethod>`) 和類別方法 (:func:"
"`@classmethod <classmethod>`) 現在繼承方法屬性 (``__module__``, "
"``__name__``, ``__qualname__``, ``__doc__``, ``__annotations__``) 並有一個新"
"的 ``__wrapped__`` 屬性。此外，靜態方法現在可以像是常規函式般呼叫。（由 "
"Victor Stinner 在 :issue:`43682` 中貢獻。）"

#: ../../whatsnew/3.10.rst:856
msgid ""
"Annotations for complex targets (everything beside ``simple name`` targets "
"defined by :pep:`526`) no longer cause any runtime effects with ``from "
"__future__ import annotations``. (Contributed by Batuhan Taskaya in :issue:"
"`42737`.)"
msgstr ""
"複雜目標（除 :pep:`526` 定義的 ``simple name`` 目標之外的所有內容）的註釋不再"
"使用 ``from __future__ import comments`` 造成任何執行環境 (runtime) 影響。"
"（由 Batuhan Taskaya 在 :issue:`42737` 中貢獻。）"

#: ../../whatsnew/3.10.rst:860
msgid ""
"Class and module objects now lazy-create empty annotations dicts on demand. "
"The annotations dicts are stored in the object’s ``__dict__`` for backwards "
"compatibility.  This improves the best practices for working with "
"``__annotations__``; for more information, please see :ref:`annotations-"
"howto`. (Contributed by Larry Hastings in :issue:`43901`.)"
msgstr ""
"類別和模組物件現在會根據需求來延遲建立 (lazy-create) 空的註釋字典 "
"(annotations dicts)。註釋字典存儲在物件的 ``__dict__`` 中以達成向後相容性。這"
"改進了 ``__annotations__`` 使用方式的最佳實踐方法；有關更多資訊，請參閱 :ref:"
"`annotations-howto`。（由 Larry Hastings 在 :issue:`43901` 中貢獻。）"

#: ../../whatsnew/3.10.rst:867
msgid ""
"Annotations consist of ``yield``, ``yield from``, ``await`` or named "
"expressions are now forbidden under ``from __future__ import annotations`` "
"due to their side effects. (Contributed by Batuhan Taskaya in :issue:"
"`42725`.)"
msgstr ""
"附名運算式或由 ``yield``、``yield from``、``await`` 組成的註釋現在在 ``from "
"__future__ import comments`` 下被禁止，因為它們有些不預期的行為。（由 "
"Batuhan Taskaya 在 :issue:`42725` 中貢獻。）"

#: ../../whatsnew/3.10.rst:872
msgid ""
"Usage of unbound variables, ``super()`` and other expressions that might "
"alter the processing of symbol table as annotations are now rendered "
"effectless under ``from __future__ import annotations``. (Contributed by "
"Batuhan Taskaya in :issue:`42725`.)"
msgstr ""
"未繫結變數 (unbound variable)、``super()`` 和其他可能會改變處理註釋之符號表 "
"(symbol table) 的運算式，現在在 ``from __future__ import comments`` 下變得無"
"效。（由 Batuhan Taskaya 在 :issue:`42725` 中貢獻。）"

#: ../../whatsnew/3.10.rst:877
msgid ""
"Hashes of NaN values of both :class:`float` type and :class:`decimal."
"Decimal` type now depend on object identity. Formerly, they always hashed to "
"``0`` even though NaN values are not equal to one another. This caused "
"potentially quadratic runtime behavior due to excessive hash collisions when "
"creating dictionaries and sets containing multiple NaNs. (Contributed by "
"Raymond Hettinger in :issue:`43475`.)"
msgstr ""
":class:`float` 型別和 :class:`decimal.Decimal` 型別的 NaN 值的雜湊值現在取決"
"於物件的標識值 (identity)。以前即使 NaN 值彼此不相等，它們也總是被雜湊為 "
"``0``。由於在建立包含多個 NaN 的字典和集合時出現過多的雜湊衝突 (hash "
"collision)，可能導致潛在的二次方執行環境行為 (quadratic runtime behavior)。"
"（由 Raymond Hettinger 在 :issue:`43475` 中貢獻。）"

#: ../../whatsnew/3.10.rst:884
msgid ""
"A :exc:`SyntaxError` (instead of a :exc:`NameError`) will be raised when "
"deleting the :const:`__debug__` constant.  (Contributed by Donghee Na in :"
"issue:`45000`.)"
msgstr ""
"刪除 :const:`__debug__` 常數時將引發 :exc:`SyntaxError` （而不是 :exc:"
"`NameError`）。（由 Donghee Na 在 :issue:`45000` 中貢獻。）"

#: ../../whatsnew/3.10.rst:887
msgid ""
":exc:`SyntaxError` exceptions now have ``end_lineno`` and ``end_offset`` "
"attributes.  They will be ``None`` if not determined. (Contributed by Pablo "
"Galindo in :issue:`43914`.)"
msgstr ""
":exc:`SyntaxError` 例外現在具有 ``end_lineno`` 和 ``end_offset`` 屬性。如果未"
"被決定，它們將會是 ``None``。（由 Pablo Galindo 在 :issue:`43914` 中貢獻。）"

#: ../../whatsnew/3.10.rst:892
msgid "New Modules"
msgstr "新模組"

#: ../../whatsnew/3.10.rst:894
msgid "None."
msgstr "無。"

#: ../../whatsnew/3.10.rst:898
msgid "Improved Modules"
msgstr "改進的模組"

#: ../../whatsnew/3.10.rst:901
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.10.rst:903
msgid ""
"Add missing :meth:`~asyncio.events.AbstractEventLoop."
"connect_accepted_socket` method. (Contributed by Alex Grönholm in :issue:"
"`41332`.)"
msgstr ""
"新增缺少的 :meth:`~asyncio.events.AbstractEventLoop.connect_accepted_socket` "
"方法。（由 Alex Grönholm 在 :issue:`41332` 中貢獻。）"

#: ../../whatsnew/3.10.rst:908
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.10.rst:910
msgid ""
"Misleading phrase \"optional arguments\" was replaced with \"options\" in "
"argparse help. Some tests might require adaptation if they rely on exact "
"output match. (Contributed by Raymond Hettinger in :issue:`9694`.)"
msgstr ""
"argparse 幫助中的誤導性用詞「可選引數 (optional arguments)」已被替換為「選項 "
"(options)」。某些依賴於精確輸出匹配的測試可能需要進行調整。（由 Raymond "
"Hettinger 在 :issue:`9694` 中貢獻。）"

#: ../../whatsnew/3.10.rst:914
msgid "array"
msgstr "array"

#: ../../whatsnew/3.10.rst:916
msgid ""
"The :meth:`~array.array.index` method of :class:`array.array` now has "
"optional *start* and *stop* parameters. (Contributed by Anders Lorentsen and "
"Zackery Spytz in :issue:`31956`.)"
msgstr ""
":class:`array.array` 的 :meth:`~array.array.index` 方法現在具有可選的 "
"*start* 和 *stop* 參數。（由 Anders Lorentsen 和 Zackery Spytz 在 :issue:"
"`31956` 中貢獻。）"

#: ../../whatsnew/3.10.rst:921
msgid "asynchat, asyncore, smtpd"
msgstr "asynchat, asyncore, smtpd"

#: ../../whatsnew/3.10.rst:922
msgid ""
"These modules have been marked as deprecated in their module documentation "
"since Python 3.6.  An import-time :class:`DeprecationWarning` has now been "
"added to all three of these modules."
msgstr ""
"自 Python 3.6 起，這些模組在其文件中被標記為已棄用。引入時的 :class:"
"`DeprecationWarning` 現已新增到這三個模組中。"

#: ../../whatsnew/3.10.rst:927
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.10.rst:929
msgid ""
"Add :func:`base64.b32hexencode` and :func:`base64.b32hexdecode` to support "
"the Base32 Encoding with Extended Hex Alphabet."
msgstr ""
"新增 :func:`base64.b32hexencode` 和 :func:`base64.b32hexdecode` 以支援擴充十"
"六進位字母的 Base32 編碼 (Base32 Encoding with Extended Hex Alphabet)。"

#: ../../whatsnew/3.10.rst:933
msgid "bdb"
msgstr "bdb"

#: ../../whatsnew/3.10.rst:935
msgid ""
"Add :meth:`~bdb.Breakpoint.clearBreakpoints` to reset all set breakpoints. "
"(Contributed by Irit Katriel in :issue:`24160`.)"
msgstr ""
"新增 :meth:`~bdb.Breakpoint.clearBreakpoints` 來重置所有設定的斷點。（由 "
"Irit Katriel 在 :issue:`24160` 中貢獻。）"

#: ../../whatsnew/3.10.rst:939
msgid "bisect"
msgstr "bisect"

#: ../../whatsnew/3.10.rst:941
msgid ""
"Added the possibility of providing a *key* function to the APIs in the :mod:"
"`bisect` module. (Contributed by Raymond Hettinger in :issue:`4356`.)"
msgstr ""
"新增向 :mod:`bisect` 模組 API 提供 *key* 函式的可能性。（由 Raymond "
"Hettinger 在 :issue:`4356` 中貢獻。）"

#: ../../whatsnew/3.10.rst:945
msgid "codecs"
msgstr "codecs"

#: ../../whatsnew/3.10.rst:947
msgid ""
"Add a :func:`codecs.unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"新增 :func:`codecs.unregister` 函式來取消註冊 (unregister) 一個編解碼器的搜索"
"功能。（Hai Shi 在 :issue:`41842` 中貢獻。）"

#: ../../whatsnew/3.10.rst:951
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.10.rst:953
msgid ""
"The ``__args__`` of the :ref:`parameterized generic <types-genericalias>` "
"for :class:`collections.abc.Callable` are now consistent with :data:`typing."
"Callable`. :class:`collections.abc.Callable` generic now flattens type "
"parameters, similar to what :data:`typing.Callable` currently does.  This "
"means that ``collections.abc.Callable[[int, str], str]`` will have "
"``__args__`` of ``(int, str, str)``; previously this was ``([int, str], "
"str)``.  To allow this change, :class:`types.GenericAlias` can now be "
"subclassed, and a subclass will be returned when subscripting the :class:"
"`collections.abc.Callable` type.  Note that a :exc:`TypeError` may be raised "
"for invalid forms of parameterizing :class:`collections.abc.Callable` which "
"may have passed silently in Python 3.9. (Contributed by Ken Jin in :issue:"
"`42195`.)"
msgstr ""
":class:`collections.abc.Callable` 的\\ :ref:`參數化泛型 (parameterized "
"generic) <types-genericalias>` 的 ``__args__`` 現在與 :data:`typing."
"Callable` 一致。:class:`collections.abc.Callable` 泛型現在會將型別參數攤平，"
"類似於 :data:`typing.Callable` 目前的做法。這意味著 ``collections.abc."
"Callable[[int, str], str]`` 將具有 ``(int, str, str)`` 的 ``__args__``；在以"
"前這是 ``([int, str], str)``。為了允許此更改，現在可以對 :class:`types."
"GenericAlias` 進行子類別化，並且在下標 (subscript) :class:`collections.abc."
"Callable` 型別時將回傳子類別。請注意，對於無效形式的 :class:`collections.abc."
"Callable` 參數化可能會引發 :exc:`TypeError`，而在 Python 3.9 中該參數可能會無"
"引發例外地傳遞。（由 Ken Jin 在 :issue:`42195` 中貢獻。）"

#: ../../whatsnew/3.10.rst:966
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.10.rst:968
msgid ""
"Add a :func:`contextlib.aclosing` context manager to safely close async "
"generators and objects representing asynchronously released resources. "
"(Contributed by Joongi Kim and John Belmonte in :issue:`41229`.)"
msgstr ""
"新增 :func:`contextlib.aclosing` 情境管理器以安全地關閉非同步產生器和表示非同"
"步釋放資源的物件。（由 Joongi Kim 和 John Belmonte 在 :issue:`41229` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:972
msgid ""
"Add asynchronous context manager support to :func:`contextlib.nullcontext`. "
"(Contributed by Tom Gringauz in :issue:`41543`.)"
msgstr ""
"向 :func:`contextlib.nullcontext` 新增非同步情境管理器支援。（由 Tom "
"Gringauz 在 :issue:`41543` 中貢獻。）"

#: ../../whatsnew/3.10.rst:975
msgid ""
"Add :class:`~contextlib.AsyncContextDecorator`, for supporting usage of "
"async context managers as decorators."
msgstr ""
"新增 :class:`~contextlib.AsyncContextDecorator`，用於支援將非同步情境管理器作"
"為裝飾器使用。"

#: ../../whatsnew/3.10.rst:979
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.10.rst:981
msgid ""
"The extended color functions added in ncurses 6.1 will be used transparently "
"by :func:`curses.color_content`, :func:`curses.init_color`, :func:`curses."
"init_pair`, and :func:`curses.pair_content`. A new function, :func:`curses."
"has_extended_color_support`, indicates whether extended color support is "
"provided by the underlying ncurses library. (Contributed by Jeffrey "
"Kintscher and Hans Petter Jansson in :issue:`36982`.)"
msgstr ""
"ncurses 6.1 中新增的擴充顏色函式將由 :func:`curses.color_content`、:func:"
"`curses.init_color`、:func:`curses.init_pair` 和 :func:`curses.pair_content` "
"透明地使用。新函式 :func:`curses.has_extended_color_support` 表示了底層的 "
"ncurses 函式庫是否支援擴充顏色。（由 Jeffrey Kintscher 和 Hans Petter "
"Jansson 在 :issue:`36982` 中貢獻。）"

#: ../../whatsnew/3.10.rst:988
msgid ""
"The ``BUTTON5_*`` constants are now exposed in the :mod:`curses` module if "
"they are provided by the underlying curses library. (Contributed by Zackery "
"Spytz in :issue:`39273`.)"
msgstr ""
"如果 ``BUTTON5_*`` 常數是由底層 :mod:`curses` 函式庫提供的，那麼它們現在會在 "
"curses 模組中公開。（由 Zackery Spytz 在 :issue:`39273` 中貢獻。）"

#: ../../whatsnew/3.10.rst:993
msgid "dataclasses"
msgstr "dataclasses"

#: ../../whatsnew/3.10.rst:996
msgid "__slots__"
msgstr "__slots__"

#: ../../whatsnew/3.10.rst:998
msgid ""
"Added ``slots`` parameter in :func:`dataclasses.dataclass` decorator. "
"(Contributed by Yurii Karabas in :issue:`42269`)"
msgstr ""
"在 :func:`dataclasses.dataclass` 裝飾器中新增了 ``slots`` 參數。（由 Yurii "
"Karabas 在 :issue:`42269` 中貢獻）"

#: ../../whatsnew/3.10.rst:1002
msgid "Keyword-only fields"
msgstr "僅限關鍵字欄位 (Keyword-only fields)"

#: ../../whatsnew/3.10.rst:1004
msgid ""
"dataclasses now supports fields that are keyword-only in the generated "
"__init__ method.  There are a number of ways of specifying keyword-only "
"fields."
msgstr ""
"dataclasses 現在支援在產生的 __init__ 方法中包含僅限關鍵字的欄位。有多種方法"
"可以指定僅限關鍵字欄位。"

#: ../../whatsnew/3.10.rst:1008
msgid "You can say that every field is keyword-only:"
msgstr "你可以說每個欄位都是關鍵字："

#: ../../whatsnew/3.10.rst:1010
msgid ""
"from dataclasses import dataclass\n"
"\n"
"@dataclass(kw_only=True)\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date"
msgstr ""
"from dataclasses import dataclass\n"
"\n"
"@dataclass(kw_only=True)\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date"

#: ../../whatsnew/3.10.rst:1019
msgid ""
"Both ``name`` and ``birthday`` are keyword-only parameters to the generated "
"__init__ method."
msgstr "``name`` 和 ``birthday`` 都是產生的 __init__ 方法的僅限關鍵字參數。"

#: ../../whatsnew/3.10.rst:1022
msgid "You can specify keyword-only on a per-field basis:"
msgstr "你可以在每個欄位的基礎上指定僅限關鍵字："

#: ../../whatsnew/3.10.rst:1024
msgid ""
"from dataclasses import dataclass, field\n"
"\n"
"@dataclass\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date = field(kw_only=True)"
msgstr ""
"from dataclasses import dataclass, field\n"
"\n"
"@dataclass\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date = field(kw_only=True)"

#: ../../whatsnew/3.10.rst:1033
msgid ""
"Here only ``birthday`` is keyword-only.  If you set ``kw_only`` on "
"individual fields, be aware that there are rules about re-ordering fields "
"due to keyword-only fields needing to follow non-keyword-only fields.  See "
"the full dataclasses documentation for details."
msgstr ""
"這裡只有 ``birthday`` 是僅限關鍵字。如果你在各個欄位上設定 ``kw_only``，請注"
"意，由於僅限關鍵字欄位需要遵循非僅限關鍵字欄位，因此會有欄位重新排序的相關規"
"則。詳細資訊請參閱完整的 dataclasses 文件。"

#: ../../whatsnew/3.10.rst:1038
msgid ""
"You can also specify that all fields following a KW_ONLY marker are keyword-"
"only.  This will probably be the most common usage:"
msgstr ""
"你還可以指定 KW_ONLY 標記後面的所有欄位均為僅限關鍵字欄位。這可能是最常見的用"
"法："

#: ../../whatsnew/3.10.rst:1041
msgid ""
"from dataclasses import dataclass, KW_ONLY\n"
"\n"
"@dataclass\n"
"class Point:\n"
"    x: float\n"
"    y: float\n"
"    _: KW_ONLY\n"
"    z: float = 0.0\n"
"    t: float = 0.0"
msgstr ""
"from dataclasses import dataclass, KW_ONLY\n"
"\n"
"@dataclass\n"
"class Point:\n"
"    x: float\n"
"    y: float\n"
"    _: KW_ONLY\n"
"    z: float = 0.0\n"
"    t: float = 0.0"

#: ../../whatsnew/3.10.rst:1053
msgid ""
"Here, ``z`` and ``t`` are keyword-only parameters, while ``x`` and ``y`` are "
"not. (Contributed by Eric V. Smith in :issue:`43532`.)"
msgstr ""
"這裡的 ``z`` 和 ``t`` 是僅限關鍵字參數，而 ``x`` 和 ``y`` 則不是。（由 Eric "
"V. Smith 在 :issue:`43532` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1060
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.10.rst:1062
msgid ""
"The entire ``distutils`` package is deprecated, to be removed in Python "
"3.12. Its functionality for specifying package builds has already been "
"completely replaced by third-party packages ``setuptools`` and "
"``packaging``, and most other commonly used APIs are available elsewhere in "
"the standard library (such as :mod:`platform`, :mod:`shutil`, :mod:"
"`subprocess` or :mod:`sysconfig`). There are no plans to migrate any other "
"functionality from ``distutils``, and applications that are using other "
"functions should plan to make private copies of the code. Refer to :pep:"
"`632` for discussion."
msgstr ""
"整個 ``distutils`` 套件已被棄用，將在 Python 3.12 中刪除。它指定套件建置的功"
"能已經完全被第三方套件 ``setuptools`` 和 ``packaging`` 所取代，並且大多數其他"
"常用的 API 都可以在標準函式庫的其他地方被找到（例如 :mod:`platform` 、:mod:"
"`shutil`、:mod:`subprocess` 或 :mod:`sysconfig`）。目前沒有將 ``distutils`` "
"遷移任何其他地方的計畫，且使用其他功能的應用程式應該開始規劃如何取得程式碼的"
"私有副本。請參閱 :pep:`632` 的討論。"

#: ../../whatsnew/3.10.rst:1072
msgid ""
"The ``bdist_wininst`` command deprecated in Python 3.8 has been removed. The "
"``bdist_wheel`` command is now recommended to distribute binary packages on "
"Windows. (Contributed by Victor Stinner in :issue:`42802`.)"
msgstr ""
"Python 3.8 中不推薦使用的 ``bdist_wininst`` 命令已被刪除。現在建議使用 "
"``bdist_wheel`` 命令來在 Windows 上發布二進位套件。（由 Victor Stinner 在 :"
"issue:`42802` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1078
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.10.rst:1080 ../../whatsnew/3.10.rst:1215
#: ../../whatsnew/3.10.rst:1242 ../../whatsnew/3.10.rst:1341
msgid ""
"When a module does not define ``__loader__``, fall back to ``__spec__."
"loader``. (Contributed by Brett Cannon in :issue:`42133`.)"
msgstr ""
"當模組未定義 ``__loader__`` 時，回退到 ``__spec__.loader`` 。（由 Brett "
"Cannon 在 :issue:`42133` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1084
msgid "encodings"
msgstr "encodings"

#: ../../whatsnew/3.10.rst:1086
msgid ""
":func:`encodings.normalize_encoding` now ignores non-ASCII characters. "
"(Contributed by Hai Shi in :issue:`39337`.)"
msgstr ""
":func:`encodings.normalize_encoding` 現在會忽略非 ASCII 字元。（Hai Shi 在 :"
"issue:`39337` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1090
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.10.rst:1092
msgid ""
":class:`~enum.Enum` :func:`~object.__repr__` now returns ``enum_name."
"member_name`` and :func:`~object.__str__` now returns ``member_name``.  "
"Stdlib enums available as module constants have a :func:`repr` of "
"``module_name.member_name``. (Contributed by Ethan Furman in :issue:`40066`.)"
msgstr ""
":class:`~enum.Enum` :func:`~object.__repr__` 現在會回傳 ``enum_name."
"member_name`` 、:func:`~object.__str__` 現在會回傳 ``member_name`` 。可用作模"
"組常數的標準函式庫列舉會有 ``module_name.member_name`` 的 :func:`repr`。（由 "
"Ethan Furman 在 :issue:`40066` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1097
msgid ""
"Add :class:`enum.StrEnum` for enums where all members are strings. "
"(Contributed by Ethan Furman in :issue:`41816`.)"
msgstr ""
"新增 :class:`enum.StrEnum`，為所有成員都是字串的列舉。（由 Ethan Furman 在 :"
"issue:`41816` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1101
msgid "fileinput"
msgstr "fileinput"

#: ../../whatsnew/3.10.rst:1103
msgid ""
"Add *encoding* and *errors* parameters in :func:`fileinput.input` and :class:"
"`fileinput.FileInput`. (Contributed by Inada Naoki in :issue:`43712`.)"
msgstr ""
"在 :func:`fileinput.input` 和 :class:`fileinput.FileInput` 中新增 *encoding* "
"和 *errors* 參數。（由 Inada Naoki 在 :issue:`43712` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1107
msgid ""
":func:`fileinput.hook_compressed` now returns :class:`~io.TextIOWrapper` "
"object when *mode* is \"r\" and file is compressed, like uncompressed files. "
"(Contributed by Inada Naoki in :issue:`5758`.)"
msgstr ""
"當 *mode* 為 \"r\" 並且檔案有被壓縮時，:func:`fileinput.hook_compressed` 現在"
"會回傳 :class:`~io.TextIOWrapper` 物件（和未壓縮檔案一樣）。（由 Inada Naoki "
"在 :issue:`5758` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1112
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.10.rst:1114
msgid ""
"The :mod:`faulthandler` module now detects if a fatal error occurs during a "
"garbage collector collection. (Contributed by Victor Stinner in :issue:"
"`44466`.)"
msgstr ""
":mod:`faulthandler` 模組現在可以檢測垃圾收集器 (garbage collector) 在收集期間"
"是否發生嚴重錯誤。（由 Victor Stinner 在 :issue:`44466` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1119
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.10.rst:1121
msgid ""
"Add audit hooks for :func:`gc.get_objects`, :func:`gc.get_referrers` and :"
"func:`gc.get_referents`. (Contributed by Pablo Galindo in :issue:`43439`.)"
msgstr ""
"為 :func:`gc.get_objects`、:func:`gc.get_referrers` 和 :func:`gc."
"get_referents` 新增稽核掛鉤 (audit hooks)。（由 Pablo Galindo 在 :issue:"
"`43439` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1125
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.10.rst:1127
msgid ""
"Add the *root_dir* and *dir_fd* parameters in :func:`~glob.glob` and :func:"
"`~glob.iglob` which allow to specify the root directory for searching. "
"(Contributed by Serhiy Storchaka in :issue:`38144`.)"
msgstr ""
"在 :func:`~glob.glob` 和 :func:`~glob.iglob` 中新增 *root_dir* 和 *dir_fd* 參"
"數，允許指定搜索的根目錄。（由 Serhiy Storchaka 在 :issue:`38144` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1132
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.10.rst:1134
msgid ""
"The hashlib module requires OpenSSL 1.1.1 or newer. (Contributed by "
"Christian Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"hashlib 模組需要 OpenSSL 1.1.1 或更高版本。（由 Christian Heimes 在 :pep:"
"`644` 和 :issue:`43669` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1137
msgid ""
"The hashlib module has preliminary support for OpenSSL 3.0.0. (Contributed "
"by Christian Heimes in :issue:`38820` and other issues.)"
msgstr ""
"hashlib 模組初步支援 OpenSSL 3.0.0。（由 Christian Heimes 在 :issue:`38820` "
"和其他問題中貢獻。）"

#: ../../whatsnew/3.10.rst:1140
msgid ""
"The pure-Python fallback of :func:`~hashlib.pbkdf2_hmac` is deprecated. In "
"the future PBKDF2-HMAC will only be available when Python has been built "
"with OpenSSL support. (Contributed by Christian Heimes in :issue:`43880`.)"
msgstr ""
"純 Python 的 :func:`~hashlib.pbkdf2_hmac` 回退已被棄用。將來只有在有 OpenSSL "
"支援的建置 Python 中才能夠使用 PBKDF2-HMAC。（由 Christian Heimes 在 :issue:"
"`43880` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1146
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.10.rst:1148
msgid ""
"The hmac module now uses OpenSSL's HMAC implementation internally. "
"(Contributed by Christian Heimes in :issue:`40645`.)"
msgstr ""
"hmac 模組現在在內部使用 OpenSSL 的 HMAC 實作。（由 Christian Heimes 在 :"
"issue:`40645` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1152
msgid "IDLE and idlelib"
msgstr "IDLE 和 idlelib"

#: ../../whatsnew/3.10.rst:1154
msgid ""
"Make IDLE invoke :func:`sys.excepthook` (when started without '-n'). User "
"hooks were previously ignored.  (Contributed by Ken Hilton in :issue:"
"`43008`.)"
msgstr ""
"讓 IDLE 調用 :func:`sys.excepthook` （在沒有 ``-n`` 的情況下啟動時）。使用者"
"掛鉤 (user hooks) 在以前是被忽略的。（由 Ken Hilton 在 :issue:`43008` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:1158
msgid ""
"Rearrange the settings dialog.  Split the General tab into Windows and Shell/"
"Ed tabs.  Move help sources, which extend the Help menu, to the Extensions "
"tab.  Make space for new options and shorten the dialog. The latter makes "
"the dialog better fit small screens.  (Contributed by Terry Jan Reedy in :"
"issue:`40468`.)  Move the indent space setting from the Font tab to the new "
"Windows tab.  (Contributed by Mark Roseman and Terry Jan Reedy in :issue:"
"`33962`.)"
msgstr ""
"重新排列設定對話框。將 General 分頁拆分為 Windows 和 Shell/Ed 分頁。將擴充 "
"Help 選單的幫助來源移至 Extensions 分頁。為新選項騰出空間並縮短對話框，而後者"
"使對話框更好地適應較小的螢幕。（由 Terry Jan Reedy 在 :issue:`40468` 中貢"
"獻。）將縮排空間設定從 Font 分頁移至新的 Windows 分頁。（由 Mark Roseman 和 "
"Terry Jan Reedy 在 :issue:`33962` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1166
msgid "The changes above were backported to a 3.9 maintenance release."
msgstr "上述更改已向後移植到 3.9 維護版本。"

#: ../../whatsnew/3.10.rst:1168
msgid ""
"Add a Shell sidebar.  Move the primary prompt ('>>>') to the sidebar. Add "
"secondary prompts ('...') to the sidebar.  Left click and optional drag "
"selects one or more lines of text, as with the editor line number sidebar.  "
"Right click after selecting text lines displays a context menu with 'copy "
"with prompts'.  This zips together prompts from the sidebar with lines from "
"the selected text.  This option also appears on the context menu for the "
"text.  (Contributed by Tal Einat in :issue:`37903`.)"
msgstr ""
"新增 Shell 側邊欄。將主要提示字元 (``>>>``) 移至側邊欄。將輔助提示字元（``..."
"``）新增到側邊欄。點擊左鍵再拖動能夠選擇一行或多行文字，和編輯器列號側邊欄操"
"作一樣。選擇文字列後點擊右鍵會顯示帶有「一併複製提示字元 (copy with "
"prompts)」的情境選單，這會將側邊欄中提示字元與所選文字並排，此選項也會出現在"
"文字的情境選單上。（由 Tal Einat 在 :issue:`37903` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1177
msgid ""
"Use spaces instead of tabs to indent interactive code.  This makes "
"interactive code entries 'look right'.  Making this feasible was a major "
"motivation for adding the shell sidebar.  (Contributed by Terry Jan Reedy "
"in :issue:`37892`.)"
msgstr ""
"使用空格而不是製表符號 (tab) 來縮進交互式程式碼。這能夠使交互式程式碼條目「看"
"起來正確」。新增 shell 側邊欄的主要動機是實現這一點。（由 Terry Jan Reedy "
"在 :issue:`37892` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1182
msgid ""
"Highlight the new :ref:`soft keywords <soft-keywords>` :keyword:`match`, :"
"keyword:`case <match>`, and :keyword:`_ <wildcard-patterns>` in pattern-"
"matching statements. However, this highlighting is not perfect and will be "
"incorrect in some rare cases, including some ``_``-s in ``case`` patterns.  "
"(Contributed by Tal Einat in :issue:`44010`.)"
msgstr ""
"突顯 (highlight) 模式匹配陳述式中的新\\ :ref:`軟關鍵字 (soft keywords) <soft-"
"keywords>` :keyword:`match`、:keyword:`case <match>` 和 :keyword:`_ "
"<wildcard-patterns>`。然而這種突顯並不完美，並且在某些罕見的情況下會出錯，包"
"括 ``case`` 模式中的一些 ``_``。（由 Tal Einat 在 :issue:`44010` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1188
msgid "New in 3.10 maintenance releases."
msgstr "3.10 維護版本中的新增功能。"

#: ../../whatsnew/3.10.rst:1190
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"將語法突顯 (syntax highlighting) 應用於 ``.pyi`` 檔案。（由 Alex Waygood 和 "
"Terry Jan Reedy 在 :issue:`45447` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1193
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr ""
"保存帶有輸入和輸出的 Shell 時，會包含提示字元。（由 Terry Jan Reedy 在 :gh:"
"`95191` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1197
msgid "importlib.metadata"
msgstr "importlib.metadata"

#: ../../whatsnew/3.10.rst:1199
msgid ""
"Feature parity with ``importlib_metadata`` 4.6 (`history <https://importlib-"
"metadata.readthedocs.io/en/latest/history.html>`_)."
msgstr ""
"與 ``importlib_metadata`` 4.6 功能相同（`歷史 <https://importlib-metadata."
"readthedocs.io/en/latest/history.html>`_）。"

#: ../../whatsnew/3.10.rst:1202
msgid ""
":ref:`importlib.metadata entry points <entry-points>` now provide a nicer "
"experience for selecting entry points by group and name through a new :ref:"
"`importlib.metadata.EntryPoints <entry-points>` class. See the Compatibility "
"Note in the docs for more info on the deprecation and usage."
msgstr ""
":ref:`importlib.metadata 入口點 <entry-points>`\\ 現在透過新的 :ref:"
"`importlib.metadata.EntryPoints <entry-points>` 類別提供了以群組和名稱選擇入"
"口點的更好體驗。有關棄用與用法的更多資訊，請參閱文件中的相容性說明。"

#: ../../whatsnew/3.10.rst:1208
msgid ""
"Added :ref:`importlib.metadata.packages_distributions() <package-"
"distributions>` for resolving top-level Python modules and packages to "
"their :ref:`importlib.metadata.Distribution <distributions>`."
msgstr ""
"新增了 :ref:`importlib.metadata.packages_distributions() <package-"
"distributions>` 用於將頂階 Python 模組和套件解析出 :ref:`importlib.metadata."
"Distribution <distributions>`。"

#: ../../whatsnew/3.10.rst:1213
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.10.rst:1218
msgid ""
"Add :func:`inspect.get_annotations`, which safely computes the annotations "
"defined on an object. It works around the quirks of accessing the "
"annotations on various types of objects, and makes very few assumptions "
"about the object it examines. :func:`inspect.get_annotations` can also "
"correctly un-stringize stringized annotations.  :func:`inspect."
"get_annotations` is now considered best practice for accessing the "
"annotations dict defined on any Python object; for more information on best "
"practices for working with annotations, please see :ref:`annotations-howto`. "
"Relatedly, :func:`inspect.signature`, :func:`inspect.Signature."
"from_callable`, and :func:`!inspect.Signature.from_function` now call :func:"
"`inspect.get_annotations` to retrieve annotations. This means :func:`inspect."
"signature` and :func:`inspect.Signature.from_callable` can also now un-"
"stringize stringized annotations. (Contributed by Larry Hastings in :issue:"
"`43817`.)"
msgstr ""
"新增 :func:`inspect.get_annotations`，它可以安全地計算物件上定義的註釋。它是"
"存取各種型別物件註釋的怪作法 (quirks) 的變通解法 (work around)，並且對其檢查"
"的物件做出很少的假設。 :func:`inspect.get_annotations` 也可以正確地取消字串化"
"註釋 (stringized annotations)。 :func:`inspect.get_annotations` 現在被認為是"
"存取任何 Python 物件上定義的註釋字典的最佳實踐；有關使用註釋的最佳實踐的更多"
"資訊，請參閱 :ref:`annotations-howto`。相關地，:func:`inspect.signature`、:"
"func:`inspect.Signature.from_callable` 和 :func:`!inspect.Signature."
"from_function` 現在呼叫 :func:`inspect.get_annotations` 來檢索註釋。這意味"
"著 :func:`inspect.signature` 和 :func:`inspect.Signature.from_callable` 現在"
"也可以取消字串化註釋。（由 Larry Hastings 在 :issue:`43817` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1234
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.10.rst:1236
msgid ""
"Add :func:`itertools.pairwise`. (Contributed by Raymond Hettinger in :issue:"
"`38200`.)"
msgstr ""
"新增 :func:`itertools.pairwise`。（由 Raymond Hettinger 在 :issue:`38200` 中"
"貢獻。）"

#: ../../whatsnew/3.10.rst:1240
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.10.rst:1246
msgid "os"
msgstr "os"

#: ../../whatsnew/3.10.rst:1248
msgid ""
"Add :func:`os.cpu_count` support for VxWorks RTOS. (Contributed by Peixing "
"Xin in :issue:`41440`.)"
msgstr ""
"為 VxWorks RTOS 新增 :func:`os.cpu_count` 支援。（由 Peixing Xin 在 :issue:"
"`41440` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1251
msgid ""
"Add a new function :func:`os.eventfd` and related helpers to wrap the "
"``eventfd2`` syscall on Linux. (Contributed by Christian Heimes in :issue:"
"`41001`.)"
msgstr ""
"新增函式 :func:`os.eventfd` 和相關幫助程式來包裝 Linux 上的 ``eventfd2`` 系統"
"呼叫。（由 Christian Heimes 在 :issue:`41001` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1255
msgid ""
"Add :func:`os.splice` that allows to move data between two file descriptors "
"without copying between kernel address space and user address space, where "
"one of the file descriptors must refer to a pipe. (Contributed by Pablo "
"Galindo in :issue:`41625`.)"
msgstr ""
"新增 :func:`os.splice` 以允許在兩個檔案描述器 (file descriptor) 之間移動資"
"料，而無需在核心地址空間 (kernel address space) 和使用者地址空間 (user "
"address space) 之間進行複製，其中檔案描述器之一必須是個 pipe。（由 Pablo "
"Galindo 在 :issue:`41625` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1260
msgid ""
"Add :const:`~os.O_EVTONLY`, :const:`~os.O_FSYNC`, :const:`~os.O_SYMLINK` "
"and :const:`~os.O_NOFOLLOW_ANY` for macOS. (Contributed by Donghee Na in :"
"issue:`43106`.)"
msgstr ""
"為 macOS 新增 :const:`~os.O_EVTONLY`、:const:`~os.O_FSYNC`、:const:`~os."
"O_SYMLINK` 和 :const:`~os.O_NOFOLLOW_ANY`。（由 Donghee Na 在 :issue:`43106` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1265
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.10.rst:1267
msgid ""
":func:`os.path.realpath` now accepts a *strict* keyword-only argument. When "
"set to ``True``, :exc:`OSError` is raised if a path doesn't exist or a "
"symlink loop is encountered. (Contributed by Barney Gale in :issue:`43757`.)"
msgstr ""
":func:`os.path.realpath` 現在接受一個 *strict* 僅限關鍵字引數。當設定為 "
"``True`` 時，如果路徑不存在或遇到符號鏈接循環 (symlink loop)，則會引發 :exc:"
"`OSError`。（由 Barney Gale 在 :issue:`43757` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1273
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.10.rst:1275
msgid ""
"Add slice support to :attr:`PurePath.parents <pathlib.PurePath.parents>`. "
"(Contributed by Joshua Cannon in :issue:`35498`.)"
msgstr ""
"新增 :attr:`PurePath.parents <pathlib.PurePath.parents>` 對於切片的支援。 "
"（由 Joshua Cannon 在 :issue:`35498` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1278
msgid ""
"Add negative indexing support to :attr:`PurePath.parents <pathlib.PurePath."
"parents>`. (Contributed by Yaroslav Pankovych in :issue:`21041`.)"
msgstr ""
"向 :attr:`PurePath.parents <pathlib.PurePath.parents>` 新增負索引支援。（由 "
"Yaroslav Pankovych 在 :issue:`21041` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1282
msgid ""
"Add :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>` method that "
"supersedes :meth:`!link_to`. The new method has the same argument order as :"
"meth:`~pathlib.Path.symlink_to`. (Contributed by Barney Gale in :issue:"
"`39950`.)"
msgstr ""
"新增替代 :meth:`!link_to` 的 :meth:`Path.hardlink_to <pathlib.Path."
"hardlink_to>` 方法。新方法與 :meth:`~pathlib.Path.symlink_to` 具有相同的引數"
"順序。（由 Barney Gale 在 :issue:`39950` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1287
msgid ""
":meth:`pathlib.Path.stat` and :meth:`~pathlib.Path.chmod` now accept a "
"*follow_symlinks* keyword-only argument for consistency with corresponding "
"functions in the :mod:`os` module. (Contributed by Barney Gale in :issue:"
"`39906`.)"
msgstr ""
":meth:`pathlib.Path.stat` 和 :meth:`~pathlib.Path.chmod` 現在接受 "
"*follow_symlinks* 僅限關鍵字引數，以與 :mod:`os` 模組中的相應函式保持一致。"
"（由 Barney Gale 在 :issue:`39906` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1293
msgid "platform"
msgstr "platform"

#: ../../whatsnew/3.10.rst:1295
#, fuzzy
msgid ""
"Add :func:`platform.freedesktop_os_release` to retrieve operation system "
"identification from `freedesktop.org os-release <https://www.freedesktop.org/"
"software/systemd/man/os-release.html>`_ standard file. (Contributed by "
"Christian Heimes in :issue:`28468`.)"
msgstr ""
"新增 :func:`platform.freedesktop_os_release()` 以從 `freedesktop.org os-"
"release <https://www.freedesktop.org/software/systemd/man/os-release.html>`_ "
"標準檔案中檢索出作業系統標識。（由 Christian Heimes 在 :issue:`28468` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:1301
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.10.rst:1303
msgid ""
":func:`pprint.pprint` now accepts a new ``underscore_numbers`` keyword "
"argument. (Contributed by sblondon in :issue:`42914`.)"
msgstr ""
":func:`pprint.pprint` 現在接受新的 ``underscore_numbers`` 關鍵字引數。（由 "
"sblondon 在 :issue:`42914` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1306
msgid ""
":mod:`pprint` can now pretty-print :class:`dataclasses.dataclass` instances. "
"(Contributed by Lewis Gaul in :issue:`43080`.)"
msgstr ""
":mod:`pprint` 現在可以漂亮地印出 :class:`dataclasses.dataclass` 實例。（由 "
"Lewis Gaul 在 :issue:`43080` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1310
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.10.rst:1312
msgid ""
"Add ``--quiet`` option to command-line interface of :mod:`py_compile`. "
"(Contributed by Gregory Schevchenko in :issue:`38731`.)"
msgstr ""
"將 ``--quiet`` 選項新增到 :mod:`py_compile` 的命令列界面。（由 Gregory "
"Schevchenko 在 :issue:`38731` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1316
msgid "pyclbr"
msgstr "pyclbr"

#: ../../whatsnew/3.10.rst:1318
msgid ""
"Add an ``end_lineno`` attribute to the ``Function`` and ``Class`` objects in "
"the tree returned by :func:`pyclbr.readmodule` and :func:`pyclbr."
"readmodule_ex`.  It matches the existing (start) ``lineno``. (Contributed by "
"Aviral Srivastava in :issue:`38307`.)"
msgstr ""
"將 ``end_lineno`` 屬性新增到 :func:`pyclbr.readmodule` 和 :func:`pyclbr."
"readmodule_ex` 回傳的樹中的 ``Function`` 和 ``Class`` 物件。它與現有的（開"
"始） ``lineno`` 匹配。（由 Aviral Srivastava 在 :issue:`38307` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1324
msgid "shelve"
msgstr "shelve"

#: ../../whatsnew/3.10.rst:1326
msgid ""
"The :mod:`shelve` module now uses :const:`pickle.DEFAULT_PROTOCOL` by "
"default instead of :mod:`pickle` protocol ``3`` when creating shelves. "
"(Contributed by Zackery Spytz in :issue:`34204`.)"
msgstr ""
"現在，:mod:`shelve` 模組在建立 shelve 時預設使用 :const:`pickle."
"DEFAULT_PROTOCOL`，而不是 :mod:`pickle` 的協議 ``3``。（由 Zackery Spytz 在 :"
"issue:`34204` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1331
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.10.rst:1333
msgid ""
"Add :func:`~statistics.covariance`, Pearson's :func:`~statistics."
"correlation`, and simple :func:`~statistics.linear_regression` functions. "
"(Contributed by Tymoteusz Wołodźko in :issue:`38490`.)"
msgstr ""
"新增 :func:`~statistics.covariance`、Pearson :func:`~statistics.correlation` "
"和簡單 :func:`~statistics.linear_regression` 函式。（由 Tymoteusz Wołodźko "
"在 :issue:`38490` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1339
msgid "site"
msgstr "site"

#: ../../whatsnew/3.10.rst:1345
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.10.rst:1347
msgid ""
"The exception :exc:`socket.timeout` is now an alias of :exc:`TimeoutError`. "
"(Contributed by Christian Heimes in :issue:`42413`.)"
msgstr ""
":exc:`socket.timeout` 例外現在是 :exc:`TimeoutError` 的別名。（由 Christian "
"Heimes 在 :issue:`42413` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1350
msgid ""
"Add option to create MPTCP sockets with ``IPPROTO_MPTCP`` (Contributed by "
"Rui Cunha in :issue:`43571`.)"
msgstr ""
"新增使用 ``IPPROTO_MPTCP`` 建立 MPTCP socket 的選項（由 Rui Cunha 在 :issue:"
"`43571` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1353
msgid ""
"Add ``IP_RECVTOS`` option to receive the type of service (ToS) or DSCP/ECN "
"fields (Contributed by Georg Sauthoff in :issue:`44077`.)"
msgstr ""
"新增 ``IP_RECVTOS`` 選項以接收服務型別 (type of service, ToS) 或 DSCP/ECN 欄"
"位（由 Georg Sauthoff 在 44077 中貢獻。）"

#: ../../whatsnew/3.10.rst:1357
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.10.rst:1359
msgid ""
"The ssl module requires OpenSSL 1.1.1 or newer. (Contributed by Christian "
"Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"ssl 模組需要 OpenSSL 1.1.1 或更高版本。（由 Christian Heimes 在 :pep:`644` "
"和 :issue:`43669` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1362
msgid ""
"The ssl module has preliminary support for OpenSSL 3.0.0 and new option :"
"const:`~ssl.OP_IGNORE_UNEXPECTED_EOF`. (Contributed by Christian Heimes in :"
"issue:`38820`, :issue:`43794`, :issue:`43788`, :issue:`43791`, :issue:"
"`43799`, :issue:`43920`, :issue:`43789`, and :issue:`43811`.)"
msgstr ""
"ssl 模組初步支援 OpenSSL 3.0.0 和新選項 :const:`~ssl."
"OP_IGNORE_UNEXPECTED_EOF`。（由 Christian Heimes 於 :issue:`38820`、:issue:"
"`43794`、:issue:`43788`、:issue:`43791`、:issue:`43799`、:issue:`43920`、:"
"issue:`43789` 和 :issue:`43811` 貢獻。)"

#: ../../whatsnew/3.10.rst:1368
msgid ""
"Deprecated function and use of deprecated constants now result in a :exc:"
"`DeprecationWarning`. :attr:`ssl.SSLContext.options` has :data:`~ssl."
"OP_NO_SSLv2` and :data:`~ssl.OP_NO_SSLv3` set by default and therefore "
"cannot warn about setting the flag again. The :ref:`deprecation section "
"<whatsnew310-deprecated>` has a list of deprecated features. (Contributed by "
"Christian Heimes in :issue:`43880`.)"
msgstr ""
"已棄用函式和使用已棄用常數現在會導致 :exc:`DeprecationWarning`。 :attr:`ssl."
"SSLContext.options` 預設設定有 :data:`~ssl.OP_NO_SSLv2` 和 :data:`~ssl."
"OP_NO_SSLv3`，因此無法再次發出設定該旗標的警告。:ref:`棄用部分 <whatsnew310-"
"deprecated>`\\ 包含已棄用功能的列表。（由 Christian Heimes 在 :issue:`43880` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1376
msgid ""
"The ssl module now has more secure default settings. Ciphers without forward "
"secrecy or SHA-1 MAC are disabled by default. Security level 2 prohibits "
"weak RSA, DH, and ECC keys with less than 112 bits of security. :class:`~ssl."
"SSLContext` defaults to minimum protocol version TLS 1.2. Settings are based "
"on Hynek Schlawack's research. (Contributed by Christian Heimes in :issue:"
"`43998`.)"
msgstr ""
"ssl 模組現在具有更安全的預設設定。預設情況下禁用沒有前向保密或 SHA-1 MAC 的密"
"碼。安全級別 2 禁止安全性低於 112 位元的弱 RSA、DH 和 ECC 密鑰。 :class:"
"`~ssl.SSLContext` 預設為最低協議版本 TLS 1.2。設定基於 Hynek Schlawack 的研"
"究。（由 Christian Heimes 在 :issue:`43998` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1383
msgid ""
"The deprecated protocols SSL 3.0, TLS 1.0, and TLS 1.1 are no longer "
"officially supported. Python does not block them actively. However OpenSSL "
"build options, distro configurations, vendor patches, and cipher suites may "
"prevent a successful handshake."
msgstr ""
"不再正式支援已棄用的協議 SSL 3.0、TLS 1.0 和 TLS 1.1。 Python 不會主動阻止它"
"們。然而，OpenSSL 建置選項、發行版配置、發行商補丁和密碼套件可能會阻止交握的"
"成功。"

#: ../../whatsnew/3.10.rst:1388
msgid ""
"Add a *timeout* parameter to the :func:`ssl.get_server_certificate` "
"function. (Contributed by Zackery Spytz in :issue:`31870`.)"
msgstr ""
"向 :func:`ssl.get_server_certificate` 函式新增 *timeout* 參數。（由 Zackery "
"Spytz 在 :issue:`31870` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1391
msgid ""
"The ssl module uses heap-types and multi-phase initialization. (Contributed "
"by Christian Heimes in :issue:`42333`.)"
msgstr ""
"ssl 模組使用堆疊類型 (heap-types) 和多階段初始化 (multi-phase "
"initialization)。（由 Christian Heimes 在 :issue:`42333` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1394
msgid ""
"A new verify flag :const:`~ssl.VERIFY_X509_PARTIAL_CHAIN` has been added. "
"(Contributed by l0x in :issue:`40849`.)"
msgstr ""
"新增驗證旗標 :const:`~ssl.VERIFY_X509_PARTIAL_CHAIN`。（由 l0x 在 :issue:"
"`40849` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1398
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.10.rst:1400
msgid ""
"Add audit events for :func:`~sqlite3.connect/handle`, :meth:`~sqlite3."
"Connection.enable_load_extension`, and :meth:`~sqlite3.Connection."
"load_extension`. (Contributed by Erlend E. Aasland in :issue:`43762`.)"
msgstr ""
"新增 :func:`~sqlite3.connect/handle`、:meth:`~sqlite3.Connection."
"enable_load_extension` 和 :meth:`~sqlite3.Connection.load_extension` 的稽核事"
"件。（由 Erlend E. Aasland 在 :issue:`43762` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1406
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.10.rst:1408
msgid ""
"Add :data:`sys.orig_argv` attribute: the list of the original command line "
"arguments passed to the Python executable. (Contributed by Victor Stinner "
"in :issue:`23427`.)"
msgstr ""
"新增 :data:`sys.orig_argv` 屬性：傳遞給 Python 可執行檔案的原始命令列引數列"
"表。（由 Victor Stinner 在 :issue:`23427` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1412
msgid ""
"Add :data:`sys.stdlib_module_names`, containing the list of the standard "
"library module names. (Contributed by Victor Stinner in :issue:`42955`.)"
msgstr ""
"新增 :data:`sys.stdlib_module_names`，其中包含標準函式庫模組的名稱列表。 "
"（由 Victor Stinner 在 :issue:`42955` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1417
msgid "_thread"
msgstr "_thread"

#: ../../whatsnew/3.10.rst:1419
msgid ""
":func:`_thread.interrupt_main` now takes an optional signal number to "
"simulate (the default is still :const:`signal.SIGINT`). (Contributed by "
"Antoine Pitrou in :issue:`43356`.)"
msgstr ""
":func:`_thread.interrupt_main` 現在需要一個可選的信號編號來進行模擬（預設值仍"
"然是 :const:`signal.SIGINT`）。（由 Antoine Pitrou 在 :issue:`43356` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:1424
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.10.rst:1426
msgid ""
"Add :func:`threading.gettrace` and :func:`threading.getprofile` to retrieve "
"the functions set by :func:`threading.settrace` and :func:`threading."
"setprofile` respectively. (Contributed by Mario Corchero in :issue:`42251`.)"
msgstr ""
"新增 :func:`threading.gettrace` 和 :func:`threading.getprofile` 分別取得 :"
"func:`threading.settrace` 和 :func:`threading.setprofile` 設定的函式。（由 "
"Mario Corchero 在 :issue:`42251` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1431
msgid ""
"Add :data:`threading.__excepthook__` to allow retrieving the original value "
"of :func:`threading.excepthook` in case it is set to a broken or a different "
"value. (Contributed by Mario Corchero in :issue:`42308`.)"
msgstr ""
"新增 :data:`threading.__excepthook__` 以允許取得 :func:`threading."
"excepthook` 的原始值，以防它被設定為損壞或不同的值。（由 Mario Corchero 在 :"
"issue:`42308` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1437
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.10.rst:1439
msgid ""
"The :func:`~traceback.format_exception`, :func:`~traceback."
"format_exception_only`, and :func:`~traceback.print_exception` functions can "
"now take an exception object as a positional-only argument. (Contributed by "
"Zackery Spytz and Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
":func:`~traceback.format_exception`、:func:`~traceback."
"format_exception_only` 和 :func:`~traceback.print_exception` 函式現在可以將例"
"外物件作為僅限位置引數。（由 Zackery Spytz 和 Matthias Bussonnier 在 :issue:"
"`26389` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1446
msgid "types"
msgstr "types"

#: ../../whatsnew/3.10.rst:1448
msgid ""
"Reintroduce the :data:`types.EllipsisType`, :data:`types.NoneType` and :data:"
"`types.NotImplementedType` classes, providing a new set of types readily "
"interpretable by type checkers. (Contributed by Bas van Beek in :issue:"
"`41810`.)"
msgstr ""
"重新引入 :data:`types.EllipsisType`、:data:`types.NoneType` 和 :data:`types."
"NotImplementedType` 類別，提供一組易於型別檢查器直譯的新型別。（由 Bas van "
"Beek 在 :issue:`41810` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1454
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.10.rst:1456
msgid "For major changes, see :ref:`new-feat-related-type-hints`."
msgstr "有關重大更改，請參閱\\ :ref:`new-feat-related-type-hints`。"

#: ../../whatsnew/3.10.rst:1458
msgid ""
"The behavior of :class:`typing.Literal` was changed to conform with :pep:"
"`586` and to match the behavior of static type checkers specified in the PEP."
msgstr ""
":class:`typing.Literal` 的行為已更改為符合 :pep:`586` 並匹配 PEP 中指定的靜態"
"型別檢查器的行為。"

#: ../../whatsnew/3.10.rst:1461
msgid "``Literal`` now de-duplicates parameters."
msgstr "``Literal`` 現在可以刪除重複參數。"

#: ../../whatsnew/3.10.rst:1462
msgid ""
"Equality comparisons between ``Literal`` objects are now order independent."
msgstr "``Literal`` 物件之間的相等性比較現在與順序無關。"

#: ../../whatsnew/3.10.rst:1463
msgid ""
"``Literal`` comparisons now respect types.  For example, ``Literal[0] == "
"Literal[False]`` previously evaluated to ``True``.  It is now ``False``.  To "
"support this change, the internally used type cache now supports "
"differentiating types."
msgstr ""
"現在型別的比較會優先於 ``Literal`` 的比較。例如，``Literal[0] == "
"Literal[False]`` 先前之求值為 ``True``，但現在它是 ``False``。為了支援此更"
"改，內部使用的型別快取現在支援了型別的辨認。"

#: ../../whatsnew/3.10.rst:1467
msgid ""
"``Literal`` objects will now raise a :exc:`TypeError` exception during "
"equality comparisons if any of their parameters are not :term:`hashable`. "
"Note that declaring ``Literal`` with unhashable parameters will not throw an "
"error::"
msgstr ""
"如果 ``Literal`` 物件的任ㄧ參數不是\\ :term:`可雜湊的 <hashable>`，那麼它們現"
"在將在相等性比較期間引發 :exc:`TypeError` 例外。請注意，使用不可雜湊的參數宣"
"告 ``Literal`` 不會引發錯誤： ::"

#: ../../whatsnew/3.10.rst:1472
msgid ""
">>> from typing import Literal\n"
">>> Literal[{0}]\n"
">>> Literal[{0}] == Literal[{False}]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: unhashable type: 'set'"
msgstr ""
">>> from typing import Literal\n"
">>> Literal[{0}]\n"
">>> Literal[{0}] == Literal[{False}]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: unhashable type: 'set'"

#: ../../whatsnew/3.10.rst:1479
msgid "(Contributed by Yurii Karabas in :issue:`42345`.)"
msgstr "（由 Yurii Karabas 在 :issue:`42345` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1481
msgid ""
"Add new function :func:`typing.is_typeddict` to introspect if an annotation "
"is a :class:`typing.TypedDict`. (Contributed by Patrick Reader in :issue:"
"`41792`.)"
msgstr ""
"新增函式 :func:`typing.is_typeddict` 來自我審查 (introspect) 註釋是否為 :"
"class:`typing.TypedDict`。（由 Patrick Reader 在 :issue:`41792` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1485
msgid ""
"Subclasses of ``typing.Protocol`` which only have data variables declared "
"will now raise a ``TypeError`` when checked with ``isinstance`` unless they "
"are decorated with :func:`~typing.runtime_checkable`.  Previously, these "
"checks passed silently.  Users should decorate their subclasses with the :"
"func:`!runtime_checkable` decorator if they want runtime protocols. "
"(Contributed by Yurii Karabas in :issue:`38908`.)"
msgstr ""
"僅宣告了資料變數的 ``typing.Protocol`` 子類別現在在使用 ``isinstance`` 檢查時"
"會引發 ``TypeError`` ，除非它們用 :func:`~typing.runtime_checkable` 裝飾。此"
"前，這些檢查都是悄無聲息地通過的。如果使用者需要執行環境協議 (runtime "
"protocol)，則應該使用 :func:`!runtime_checkable` 裝飾器來裝飾其子類別。（由 "
"Yurii Karabas 在 :issue:`38908` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1493
msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit :"
"exc:`DeprecationWarning`.  These submodules have been deprecated since "
"Python 3.8 and will be removed in a future version of Python.  Anything "
"belonging to those submodules should be imported directly from :mod:`typing` "
"instead. (Contributed by Sebastian Rittau in :issue:`38291`.)"
msgstr ""
"從 ``typing.io`` 和 ``typing.re`` 子模組引入現在將發出 :exc:"
"`DeprecationWarning`。這些子模組自 Python 3.8 起已被棄用，並將在未來版本的 "
"Python 中刪除。屬於這些子模組的任何內容都應該直接從 :mod:`typing` 引入。 "
"（由 Sebastian Rittau 在 :issue:`38291` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1501
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.10.rst:1503
msgid ""
"Add new method :meth:`~unittest.TestCase.assertNoLogs` to complement the "
"existing :meth:`~unittest.TestCase.assertLogs`. (Contributed by Kit Yan Choi "
"in :issue:`39385`.)"
msgstr ""
"新增方法 :meth:`~unittest.TestCase.assertNoLogs` 以補足現有的 :meth:"
"`~unittest.TestCase.assertLogs`。（由 Kit Yan Choi 在 :issue:`39385` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:1508
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.10.rst:1510
msgid ""
"Python versions earlier than Python 3.10 allowed using both ``;`` and ``&`` "
"as query parameter separators in :func:`urllib.parse.parse_qs` and :func:"
"`urllib.parse.parse_qsl`.  Due to security concerns, and to conform with "
"newer W3C recommendations, this has been changed to allow only a single "
"separator key, with ``&`` as the default.  This change also affects :func:"
"`cgi.parse` and :func:`cgi.parse_multipart` as they use the affected "
"functions internally.  For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin "
"in :issue:`42967`.)"
msgstr ""
"Python 3.10 之前的 Python 版本允許在 :func:`urllib.parse.parse_qs` 和 :func:"
"`urllib.parse.parse_qsl` 中使用 ``;`` 和 ``&`` 作為查詢參數 (query "
"parameter) 的分隔符號。出於安全考慮，並且為了符合更新的 W3C 建議，已將其更改"
"為僅允許單個分隔符號鍵，預設為 ``&``。此更改還會影響 :func:`cgi.parse` 和 :"
"func:`cgi.parse_multipart`，因為它們在內部使用受影響的函式。有關更多詳細資"
"訊，請參閱各自的文件。（由 Adam Goldschmidt、Senthil Kumaran 和 Ken Jin 在 :"
"issue:`42967` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1520
msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates :rfc:"
"`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are "
"stripped from the URL by the parser in :mod:`urllib.parse` preventing such "
"attacks. The removal characters are controlled by a new module level "
"variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :gh:`88048`)"
msgstr ""

#: ../../whatsnew/3.10.rst:1528
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.10.rst:1530
msgid ""
"Add a :class:`~xml.sax.handler.LexicalHandler` class to the :mod:`xml.sax."
"handler` module. (Contributed by Jonathan Gossage and Zackery Spytz in :"
"issue:`35018`.)"
msgstr ""
"新增 :class:`~xml.sax.handler.LexicalHandler` 類別到 :mod:`xml.sax.handler` "
"模組。（由 Jonathan Gossage 和 Zackery Spytz 在 :issue:`35018` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1535
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.10.rst:1536
msgid ""
"Add methods related to :pep:`451`: :meth:`~zipimport.zipimporter."
"find_spec`, :meth:`zipimport.zipimporter.create_module`, and :meth:"
"`zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon in :issue:"
"`42131`.)"
msgstr ""
"新增與 :pep:`451` 相關的方法：:meth:`~zipimport.zipimporter.find_spec`、:"
"meth:`zipimport.zipimporter.create_module` 和 :meth:`zipimport.zipimporter."
"exec_module`。（由 Brett Cannon 在 :issue:`42131` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1541
msgid ""
"Add :meth:`~zipimport.zipimporter.invalidate_caches` method. (Contributed by "
"Desmond Cheong in :issue:`14678`.)"
msgstr ""
"新增 :meth:`~zipimport.zipimporter.invalidate_caches` 方法。（由 Desmond "
"Cheong 在 :issue:`14678` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1546
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.10.rst:1548
msgid ""
"Constructors :func:`str`, :func:`bytes` and :func:`bytearray` are now faster "
"(around 30--40% for small objects). (Contributed by Serhiy Storchaka in :"
"issue:`41334`.)"
msgstr ""
"建構函式 :func:`str`、:func:`bytes` 和 :func:`bytearray` 現在更快了（對於小型"
"物件大約快了 30--40%）。（由 Serhiy Storchaka 在 :issue:`41334` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1552
msgid ""
"The :mod:`runpy` module now imports fewer modules. The ``python3 -m module-"
"name`` command startup time is 1.4x faster in average. On Linux, ``python3 -"
"I -m module-name`` imports 69 modules on Python 3.9, whereas it only imports "
"51 modules (-18) on Python 3.10. (Contributed by Victor Stinner in :issue:"
"`41006` and :issue:`41718`.)"
msgstr ""
":mod:`runpy` 模組現在引入更少的模組。``python3 -m module-name`` 指令啟動時間"
"平均快了 1.4 倍。在 Linux 上，``python3 -I -m module-name`` 在 Python 3.9 上"
"引入 69 個模組，而在 Python 3.10 上僅引入 51 個模組 (-18)。（由 Victor "
"Stinner 在 :issue:`41006` 和 :issue:`41718` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1558
msgid ""
"The ``LOAD_ATTR`` instruction now uses new \"per opcode cache\" mechanism.  "
"It is about 36% faster now for regular attributes and 44% faster for slots. "
"(Contributed by Pablo Galindo and Yury Selivanov in :issue:`42093` and Guido "
"van Rossum in :issue:`42927`, based on ideas implemented originally in PyPy "
"and MicroPython.)"
msgstr ""
"``LOAD_ATTR`` 指令現在使用新的「操作碼快取 (per opcode cache)」機制。現在一般"
"屬性的速度提高了約 36%，槽位 (slot) 的速度提高了 44%。（由 Pablo Galindo 和 "
"Yury Selivanov 在 :issue:`42093` 中以及 Guido van Rossum 在 :issue:`42927` 中"
"貢獻，基於最初在 PyPy 和 MicroPython 中實作的想法。）"

#: ../../whatsnew/3.10.rst:1564
msgid ""
"When building Python with :option:`--enable-optimizations` now ``-fno-"
"semantic-interposition`` is added to both the compile and link line. This "
"speeds builds of the Python interpreter created with :option:`--enable-"
"shared` with ``gcc`` by up to 30%. See `this article <https://developers."
"redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-"
"python-3-8-run-speeds/>`_ for more details. (Contributed by Victor Stinner "
"and Pablo Galindo in :issue:`38980`.)"
msgstr ""
"當使用 :option:`--enable-optimizations` 建置 Python 時，現在 ``-fno-semantic-"
"interposition`` 被新增到編譯和鏈接列 (link line) 中。這使得使用 :option:`--"
"enable-shared` 和 ``gcc`` 建立的 Python 直譯器的建置速度提高了 30%。請參閱\\ "
"`本文 <https://developers.redhat.com/blog/2020/06/25/red-hat-enterprise-"
"linux-8-2-brings-faster-python-3-8-run-speeds/>`_ 以了解詳情。（由 Victor "
"Stinner 和 Pablo Galindo 在 :issue:`38980` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1572
msgid ""
"Use a new output buffer management code for :mod:`bz2` / :mod:`lzma` / :mod:"
"`zlib` modules, and add ``.readall()`` function to ``_compression."
"DecompressReader`` class. bz2 decompression is now 1.09x ~ 1.17x faster, "
"lzma decompression 1.20x ~ 1.32x faster, ``GzipFile.read(-1)`` 1.11x ~ 1.18x "
"faster. (Contributed by Ma Lin, reviewed by Gregory P. Smith, in :issue:"
"`41486`)"
msgstr ""
"對 :mod:`bz2` / :mod:`lzma` / :mod:`zlib` 模組使用新的輸出緩衝區管理程式碼，"
"並將 ``.readall()`` 函式新增到 ``_compression.DecompressReader`` 類別。 bz2 "
"解壓縮速度提高了 1.09x ~ 1.17x，lzma 解壓縮速度提高了 1.20x ~ 1.32x，"
"``GzipFile.read(-1)`` 速度提高了 1.11x ~ 1.18x。（由 Ma Lin 於 :issue:"
"`41486` 貢獻、由 Gregory P. Smith 審閱）"

#: ../../whatsnew/3.10.rst:1578
msgid ""
"When using stringized annotations, annotations dicts for functions are no "
"longer created when the function is created.  Instead, they are stored as a "
"tuple of strings, and the function object lazily converts this into the "
"annotations dict on demand.  This optimization cuts the CPU time needed to "
"define an annotated function by half. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"使用字串化註釋時，建立函式時不再建立函式的註釋字典。取而代之的是它們被存儲為"
"字串元組，且函式物件會根據需求才將其延遲轉換 (lazily convert) 為註釋字典。此"
"最佳化將定義帶有註釋的函式所需的 CPU 時間減少了一半。（由 Yurii Karabas 和 "
"Inada Naoki 在 :issue:`42202` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1585
msgid ""
"Substring search functions such as ``str1 in str2`` and ``str2.find(str1)`` "
"now sometimes use Crochemore & Perrin's \"Two-Way\" string searching "
"algorithm to avoid quadratic behavior on long strings.  (Contributed by "
"Dennis Sweeney in :issue:`41972`)"
msgstr ""
"像是 ``str1 in str2`` 和 ``str2.find(str1)`` 之類的子字串搜索函式現在有時會使"
"用 Crochemore & Perrin 的「雙向」字串搜索演算法來避免作用於長字串上時發生二次"
"方行為 (quadratic behavior)。（由 Dennis Sweeney 在 :issue:`41972` 中貢獻）"

#: ../../whatsnew/3.10.rst:1590
msgid ""
"Add micro-optimizations to ``_PyType_Lookup()`` to improve type attribute "
"cache lookup performance in the common case of cache hits. This makes the "
"interpreter 1.04 times faster on average. (Contributed by Dino Viehland in :"
"issue:`43452`.)"
msgstr ""
"向 ``_PyType_Lookup()`` 新增微最佳化以提高快取命中的常見情況下的型別屬性快取"
"查找性能。這使得直譯器平均速度提高了 1.04 倍。（由 Dino Viehland 在 :issue:"
"`43452` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1594
msgid ""
"The following built-in functions now support the faster :pep:`590` "
"vectorcall calling convention: :func:`map`, :func:`filter`, :func:"
"`reversed`, :func:`bool` and :func:`float`. (Contributed by Donghee Na and "
"Jeroen Demeyer in :issue:`43575`, :issue:`43287`, :issue:`41922`, :issue:"
"`41873` and :issue:`41870`.)"
msgstr ""
"以下內建函式現在支援更快的 :pep:`590` vectorcall 呼叫慣例：:func:`map`、:"
"func:`filter`、:func:`reversed`、:func:`bool` 和 :func:`float`。（由 Donghee "
"Na 和 Jeroen Demeyer 在 :issue:`43575`、:issue:`43287`、:issue:`41922`、:"
"issue:`41873` 和 :issue:`41870` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1598
msgid ""
":class:`~bz2.BZ2File` performance is improved by removing internal "
"``RLock``. This makes :class:`!BZ2File` thread unsafe in the face of "
"multiple simultaneous readers or writers, just like its equivalent classes "
"in :mod:`gzip` and :mod:`lzma` have always been.  (Contributed by Inada "
"Naoki in :issue:`43785`.)"
msgstr ""
"通過刪除內部 ``RLock``，:class:`~bz2.BZ2File` 的性能得到了改進。這使得 :"
"class:`!BZ2File` 在面對多個同時的讀取器或寫入器時執行緒不安全，就像 :mod:"
"`gzip` 和 :mod:`lzma` 中的等效類別一樣。（由 Inada Naoki 在 :issue:`43785` 中"
"貢獻。）"

#: ../../whatsnew/3.10.rst:1606 ../../whatsnew/3.10.rst:2212
msgid "Deprecated"
msgstr "已棄用"

#: ../../whatsnew/3.10.rst:1608
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  Starting in this release, a "
"deprecation warning is raised if the numeric literal is immediately followed "
"by one of keywords :keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:"
"`if`, :keyword:`in`, :keyword:`is` and :keyword:`or`. In future releases it "
"will be changed to syntax warning, and finally to syntax error. (Contributed "
"by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"目前 Python 接受緊跟關鍵字的數字字面值 (numeric literals)，例如 ``0in x``、"
"``1or x``、``0if 1else 2``。它允許了令人困惑和不明確的運算式，例如 ``[0x1for "
"x in y]`` （可以直譯為 ``[0x1 for x in y]`` 或 ``[0x1f or x in y]`` ）。從此"
"版本開始，如果數字字面值後緊跟關鍵字 :keyword:`and`、:keyword:`else`、:"
"keyword:`for`、:keyword:`if`、:keyword:`in`、:keyword:`is` 與 :keyword:`or` "
"其中之一，則會引發棄用警告。在未來的版本中，它將被變更為語法警告，最後成為為"
"語法錯誤。（由 Serhiy Storchaka 在 :issue:`43833` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1619
msgid ""
"Starting in this release, there will be a concerted effort to begin cleaning "
"up old import semantics that were kept for Python 2.7 compatibility. "
"Specifically, :meth:`!find_loader`/:meth:`!find_module` (superseded by :meth:"
"`~importlib.abc.MetaPathFinder.find_spec`), :meth:`~importlib.abc.Loader."
"load_module` (superseded by :meth:`~importlib.abc.Loader.exec_module`), :"
"meth:`!module_repr` (which the import system takes care of for you), the "
"``__package__`` attribute (superseded by ``__spec__.parent``), the "
"``__loader__`` attribute (superseded by ``__spec__.loader``), and the "
"``__cached__`` attribute (superseded by ``__spec__.cached``) will slowly be "
"removed (as well as other classes and methods in :mod:`importlib`). :exc:"
"`ImportWarning` and/or :exc:`DeprecationWarning` will be raised as "
"appropriate to help identify code which needs updating during this "
"transition."
msgstr ""
"從這個版本開始，我們將齊心協力開始清理為相容 Python 2.7 而保留的舊引入語義。"
"具體來說， :meth:`!find_loader`/:meth:`!find_module` （被 :meth:`~importlib."
"abc.MetaPathFinder.find_spec` 取代）、:meth:`~importlib.abc.Loader."
"load_module` （被 :meth:`~importlib.abc.Loader.exec_module` 取代）、 :meth:`!"
"module_repr` （引入系統負責處理你）、``__package__`` 屬性（由 ``__spec__."
"parent`` 取代）、 ``__loader__`` 屬性（由 ``__spec__.loader`` 取代）和 "
"``__cached__`` 屬性（由 ``__spec__.cached`` 取代）將慢慢被刪除（以及 :mod:"
"`importlib` 中的其他類別和方法）。將酌情引發 :exc:`ImportWarning` 和/或 :exc:"
"`DeprecationWarning` 以幫助識別在此轉換期間需要更新的程式碼。"

#: ../../whatsnew/3.10.rst:1636
msgid ""
"The entire ``distutils`` namespace is deprecated, to be removed in Python "
"3.12. Refer to the :ref:`module changes <distutils-deprecated>` section for "
"more information."
msgstr ""
"整個 ``distutils`` 命名空間已棄用，將在 Python 3.12 中刪除。請參閱\\ :ref:`模"
"組更改 <distutils-deprecated>` 以獲取更多資訊。"

#: ../../whatsnew/3.10.rst:1640
msgid ""
"Non-integer arguments to :func:`random.randrange` are deprecated. The :exc:"
"`ValueError` is deprecated in favor of a :exc:`TypeError`. (Contributed by "
"Serhiy Storchaka and Raymond Hettinger in :issue:`37319`.)"
msgstr ""
":func:`random.randrange` 的非整數引數已棄用。:exc:`ValueError` 已被棄用，取而"
"代之的是 :exc:`TypeError`。（由 Serhiy Storchaka 和 Raymond Hettinger 在 :"
"issue:`37319` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1644
msgid ""
"The various ``load_module()`` methods of :mod:`importlib` have been "
"documented as deprecated since Python 3.6, but will now also trigger a :exc:"
"`DeprecationWarning`. Use :meth:`~importlib.abc.Loader.exec_module` instead. "
"(Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
":mod:`importlib` 的各種 ``load_module()`` 方法自 Python 3.6 起已被記錄為已棄"
"用，但現在也會觸發 :exc:`DeprecationWarning`。請改用 :meth:`~importlib.abc."
"Loader.exec_module`。（由 Brett Cannon 在 :issue:`26131` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1650
msgid ""
":meth:`!zimport.zipimporter.load_module` has been deprecated in preference "
"for :meth:`~zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon "
"in :issue:`26131`.)"
msgstr ""
":meth:`!zimport.zipimporter.load_module` 已被棄用，請用 :meth:`~zipimport."
"zipimporter.exec_module`。（由 Brett Cannon 在 :issue:`26131` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1654
msgid ""
"The use of :meth:`~importlib.abc.Loader.load_module` by the import system "
"now triggers an :exc:`ImportWarning` as :meth:`~importlib.abc.Loader."
"exec_module` is preferred. (Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
"引入系統使用 :meth:`~importlib.abc.Loader.load_module` 現在會觸發 :exc:"
"`ImportWarning`，因為 :meth:`~importlib.abc.Loader.exec_module` 是當前首選。"
"（由 Brett Cannon 在 :issue:`26131` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1659
msgid ""
"The use of :meth:`!importlib.abc.MetaPathFinder.find_module` and :meth:`!"
"importlib.abc.PathEntryFinder.find_module` by the import system now trigger "
"an :exc:`ImportWarning` as :meth:`importlib.abc.MetaPathFinder.find_spec` "
"and :meth:`importlib.abc.PathEntryFinder.find_spec` are preferred, "
"respectively. You can use :func:`importlib.util.spec_from_loader` to help in "
"porting. (Contributed by Brett Cannon in :issue:`42134`.)"
msgstr ""
"引入系統使用 :meth:`!importlib.abc.MetaPathFinder.find_module` 和 :meth:`!"
"importlib.abc.PathEntryFinder.find_module` 現在會觸發 :exc:`ImportWarning`，"
"因為 :meth:`importlib.abc.MetaPathFinder.find_spec` 和 :meth:`importlib.abc."
"PathEntryFinder.find_spec` 分別是替代方案的首選。你可以使用 :func:`importlib."
"util.spec_from_loader` 來幫助移植。（由 Brett Cannon 在 :issue:`42134` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:1668
msgid ""
"The use of :meth:`!importlib.abc.PathEntryFinder.find_loader` by the import "
"system now triggers an :exc:`ImportWarning` as :meth:`importlib.abc."
"PathEntryFinder.find_spec` is preferred. You can use :func:`importlib.util."
"spec_from_loader` to help in porting. (Contributed by Brett Cannon in :issue:"
"`43672`.)"
msgstr ""
"引入系統使用 :meth:`!importlib.abc.PathEntryFinder.find_loader` 現在會觸發 :"
"exc:`ImportWarning`，因為 :meth:`importlib.abc.PathEntryFinder.find_spec` 是"
"首選。你可以使用 :func:`importlib.util.spec_from_loader` 來幫助移植。（由 "
"Brett Cannon 在 :issue:`43672` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1674
msgid ""
"The various implementations of :meth:`!importlib.abc.MetaPathFinder."
"find_module` ( :meth:`!importlib.machinery.BuiltinImporter.find_module`, :"
"meth:`!importlib.machinery.FrozenImporter.find_module`, :meth:`!importlib."
"machinery.WindowsRegistryFinder.find_module`, :meth:`!importlib.machinery."
"PathFinder.find_module`, :meth:`!importlib.abc.MetaPathFinder."
"find_module` ), :meth:`!importlib.abc.PathEntryFinder.find_module` ( :meth:`!"
"importlib.machinery.FileFinder.find_module` ), and :meth:`!importlib.abc."
"PathEntryFinder.find_loader` ( :meth:`!importlib.machinery.FileFinder."
"find_loader` ) now raise :exc:`DeprecationWarning` and are slated for "
"removal in Python 3.12 (previously they were documented as deprecated in "
"Python 3.4). (Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
":meth:`!importlib.abc.MetaPathFinder.find_module` 的各種實作（:meth:`!"
"importlib.machinery.BuiltinImporter.find_module`、:meth:`!importlib."
"machinery.FrozenImporter.find_module`、:meth:`!importlib.machinery."
"WindowsRegistryFinder.find_module`、:meth:`!importlib.machinery.PathFinder."
"find_module`、:meth:`!importlib.abc.MetaPathFinder.find_module` )、:meth:`!"
"importlib.abc.PathEntryFinder.find_module` (:meth:`!importlib.machinery."
"FileFinder.find_module` ) 和 :meth:`!importlib.abc.PathEntryFinder."
"find_loader` (:meth:`!importlib.machinery.FileFinder.find_loader` ) 現在引"
"發 :exc:`DeprecationWarning` 並計劃在 Python 3.12 中刪除（之前它們已在 "
"Python 3.4 中被記錄為已棄用）。（由 Brett Cannon 在 :issue:`42135` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1689
msgid ""
":class:`!importlib.abc.Finder` is deprecated (including its sole method, :"
"meth:`!find_module`). Both :class:`importlib.abc.MetaPathFinder` and :class:"
"`importlib.abc.PathEntryFinder` no longer inherit from the class. Users "
"should inherit from one of these two classes as appropriate instead. "
"(Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
":class:`!importlib.abc.Finder` 已被棄用（包括其唯一方法 :meth:`!"
"find_module`）。:class:`importlib.abc.MetaPathFinder` 和 :class:`importlib."
"abc.PathEntryFinder` 都不再從該類別繼承。使用者應該根據需求來選擇其一以繼承。"
"（由 Brett Cannon 在 :issue:`42135` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1696
msgid ""
"The deprecations of :mod:`!imp`, :func:`!importlib.find_loader`, :func:`!"
"importlib.util.set_package_wrapper`, :func:`!importlib.util."
"set_loader_wrapper`, :func:`!importlib.util.module_for_loader`, :class:`!"
"pkgutil.ImpImporter`, and :class:`!pkgutil.ImpLoader` have all been updated "
"to list Python 3.12 as the slated version of removal (they began raising :"
"exc:`DeprecationWarning` in previous versions of Python). (Contributed by "
"Brett Cannon in :issue:`43720`.)"
msgstr ""
"棄用 :mod:`!imp`、:func:`!importlib.find_loader`、:func:`!importlib.util."
"set_package_wrapper`、:func:`!importlib.util.set_loader_wrapper`、:func:`!"
"importlib.util.module_for_loader`、:class:`!pkgutil.ImpImporter` 和 :class:`!"
"pkgutil.ImpLoader` 均已更新，將於 Python 3.12 列為預定的刪除版本（它們開始在"
"過去版本的 Python 中引發 :exc:`DeprecationWarning`） 。（由 Brett Cannon 在 :"
"issue:`43720` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1706
msgid ""
"The import system now uses the ``__spec__`` attribute on modules before "
"falling back on :meth:`!module_repr` for a module's ``__repr__()`` method. "
"Removal of the use of ``module_repr()`` is scheduled for Python 3.12. "
"(Contributed by Brett Cannon in :issue:`42137`.)"
msgstr ""
"引入系統現在在模組上使用 ``__spec__`` 屬性，然後才會回退使用 :meth:`!"
"module_repr` 作為模組的 ``__repr__()`` 方法。計劃在 Python 3.12 中刪除 "
"``module_repr()`` 的使用。（由 Brett Cannon 在 :issue:`42137` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1712
msgid ""
":meth:`!importlib.abc.Loader.module_repr`, :meth:`!importlib.machinery."
"FrozenLoader.module_repr`, and :meth:`!importlib.machinery.BuiltinLoader."
"module_repr` are deprecated and slated for removal in Python 3.12. "
"(Contributed by Brett Cannon in :issue:`42136`.)"
msgstr ""
":meth:`!importlib.abc.Loader.module_repr`、:meth:`!importlib.machinery."
"FrozenLoader.module_repr` 和 :meth:`!importlib.machinery.BuiltinLoader."
"module_repr` 已棄用並計劃在 Python 3.12 中刪除。（由 Brett Cannon 在 :issue:"
"`42136` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1718
msgid ""
"``sqlite3.OptimizedUnicode`` has been undocumented and obsolete since Python "
"3.3, when it was made an alias to :class:`str`.  It is now deprecated, "
"scheduled for removal in Python 3.12. (Contributed by Erlend E. Aasland in :"
"issue:`42264`.)"
msgstr ""
"自 Python 3.3 起，``sqlite3.OptimizedUnicode`` 就沒有文件記錄並且已過時，當時"
"它被用作 :class:`str` 的別名。它現已被棄用，並計劃在 Python 3.12 中刪除。"
"（由 Erlend E. Aasland 在 :issue:`42264` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1723
msgid ""
"The undocumented built-in function ``sqlite3.enable_shared_cache`` is now "
"deprecated, scheduled for removal in Python 3.12.  Its use is strongly "
"discouraged by the SQLite3 documentation.  See `the SQLite3 docs <https://"
"sqlite.org/c3ref/enable_shared_cache.html>`_ for more details. If a shared "
"cache must be used, open the database in URI mode using the ``cache=shared`` "
"query parameter. (Contributed by Erlend E. Aasland in :issue:`24464`.)"
msgstr ""
"未記錄於說明文件的內建函式 ``sqlite3.enable_shared_cache`` 現已棄用，計劃在 "
"Python 3.12 中刪除。SQLite3 文件強烈建議不去使用它。有關更多詳細資訊，請參閱 "
"`SQLite3 文件 <https://sqlite.org/c3ref/enable_shared_cache.html>`_。如果必須"
"使用共享快取，請使用 ``cache=shared`` 查詢參數以 URI 模式打開資料庫。（由 "
"Erlend E. Aasland 在 :issue:`24464` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1731
msgid "The following ``threading`` methods are now deprecated:"
msgstr "以下 ``threading`` 方法現已棄用："

#: ../../whatsnew/3.10.rst:1733
msgid "``threading.currentThread`` => :func:`threading.current_thread`"
msgstr "``threading.currentThread`` => :func:`threading.current_thread`"

#: ../../whatsnew/3.10.rst:1735
msgid "``threading.activeCount`` => :func:`threading.active_count`"
msgstr "``threading.activeCount`` => :func:`threading.active_count`"

#: ../../whatsnew/3.10.rst:1737
msgid ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"
msgstr ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"

#: ../../whatsnew/3.10.rst:1740
msgid "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"
msgstr "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"

#: ../../whatsnew/3.10.rst:1742
msgid "``threading.Thread.setName`` => :attr:`threading.Thread.name`"
msgstr "``threading.Thread.setName`` => :attr:`threading.Thread.name`"

#: ../../whatsnew/3.10.rst:1744
msgid "``threading.thread.getName`` => :attr:`threading.Thread.name`"
msgstr "``threading.thread.getName`` => :attr:`threading.Thread.name`"

#: ../../whatsnew/3.10.rst:1746
msgid "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"

#: ../../whatsnew/3.10.rst:1748
msgid "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"

#: ../../whatsnew/3.10.rst:1750
msgid "(Contributed by Jelle Zijlstra in :gh:`87889`.)"
msgstr "（由 Jelle Zijlstra 在 :gh:`87889` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1752
msgid ""
":meth:`!pathlib.Path.link_to` is deprecated and slated for removal in Python "
"3.12. Use :meth:`pathlib.Path.hardlink_to` instead. (Contributed by Barney "
"Gale in :issue:`39950`.)"
msgstr ""
":meth:`!pathlib.Path.link_to` 已棄用並計劃在 Python 3.12 中刪除。請改用 :"
"meth:`pathlib.Path.hardlink_to`。（由 Barney Gale 在 :issue:`39950` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:1756
msgid ""
"``cgi.log()`` is deprecated and slated for removal in Python 3.12. "
"(Contributed by Inada Naoki in :issue:`41139`.)"
msgstr ""
"``cgi.log()`` 已棄用並計劃在 Python 3.12 中刪除。（由 Inada Naoki 在 :issue:"
"`41139` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1759
msgid ""
"The following :mod:`ssl` features have been deprecated since Python 3.6, "
"Python 3.7, or OpenSSL 1.1.0 and will be removed in 3.11:"
msgstr ""
"自 Python 3.6、Python 3.7 或 OpenSSL 1.1.0 起，以下 :mod:`ssl` 功能已被棄用，"
"並將在 3.11 中刪除："

#: ../../whatsnew/3.10.rst:1762
msgid ""
":data:`!OP_NO_SSLv2`, :data:`!OP_NO_SSLv3`, :data:`!OP_NO_TLSv1`, :data:`!"
"OP_NO_TLSv1_1`, :data:`!OP_NO_TLSv1_2`, and :data:`!OP_NO_TLSv1_3` are "
"replaced by :attr:`~ssl.SSLContext.minimum_version` and :attr:`~ssl."
"SSLContext.maximum_version`."
msgstr ""
":data:`!OP_NO_SSLv2`、:data:`!OP_NO_SSLv3`、:data:`!OP_NO_TLSv1`、:data:`!"
"OP_NO_TLSv1_1`、:data:`!OP_NO_TLSv1_2`、和 :data:`!OP_NO_TLSv1_3` 已被替換"
"為 :attr:`~ssl.sslSSLContext.minimum_version` 和 :attr:`~ssl.sslSSLContext."
"maximum_version`。"

#: ../../whatsnew/3.10.rst:1768
msgid ""
":data:`!PROTOCOL_SSLv2`, :data:`!PROTOCOL_SSLv3`, :data:`!PROTOCOL_SSLv23`, :"
"data:`!PROTOCOL_TLSv1`, :data:`!PROTOCOL_TLSv1_1`, :data:`!"
"PROTOCOL_TLSv1_2`, and :const:`!PROTOCOL_TLS` are deprecated in favor of :"
"const:`~ssl.PROTOCOL_TLS_CLIENT` and :const:`~ssl.PROTOCOL_TLS_SERVER`"
msgstr ""
":data:`!PROTOCOL_SSLv2`、:data:`!PROTOCOL_SSLv3`、:data:`!PROTOCOL_SSLv23`、:"
"data:`!PROTOCOL_TLSv1`、:data:`!PROTOCOL_TLSv1_1`、:data:`!PROTOCOL_TLSv1_2` "
"和 :const:`!PROTOCOL_TLS` 已棄用，取而代之的是 :const:`~ssl."
"PROTOCOL_TLS_CLIENT` 和 :const:`~ssl.PROTOCOL_TLS_SERVER`"

#: ../../whatsnew/3.10.rst:1774
msgid ":func:`!wrap_socket` is replaced by :meth:`ssl.SSLContext.wrap_socket`"
msgstr ":func:`!wrap_socket` 被替換為 :meth:`ssl.SSLContext.wrap_socket`"

#: ../../whatsnew/3.10.rst:1776
msgid ":func:`!match_hostname`"
msgstr ":func:`!match_hostname`"

#: ../../whatsnew/3.10.rst:1778
msgid ":func:`!RAND_pseudo_bytes`, :func:`!RAND_egd`"
msgstr ":func:`!RAND_pseudo_bytes`, :func:`!RAND_egd`"

#: ../../whatsnew/3.10.rst:1780
msgid ""
"NPN features like :meth:`ssl.SSLSocket.selected_npn_protocol` and :meth:`ssl."
"SSLContext.set_npn_protocols` are replaced by ALPN."
msgstr ""
"NPN 功能如 :meth:`ssl.SSLSocket.selected_npn_protocol` 和 :meth:`ssl."
"SSLContext.set_npn_protocols` 已被 ALPN 取代。"

#: ../../whatsnew/3.10.rst:1783
msgid ""
"The threading debug (:envvar:`!PYTHONTHREADDEBUG` environment variable) is "
"deprecated in Python 3.10 and will be removed in Python 3.12. This feature "
"requires a :ref:`debug build of Python <debug-build>`. (Contributed by "
"Victor Stinner in :issue:`44584`.)"
msgstr ""
"執行緒除錯（:envvar:`!PYTHONTHREADDEBUG` 環境變數）在 Python 3.10 中已棄用，"
"並將在 Python 3.12 中刪除。此功能需要一個 :ref:`Python 的除錯用建置版本 "
"<debug-build>`。（由 Victor Stinner 在 :issue:`44584` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1788
msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit :"
"exc:`DeprecationWarning`.  These submodules will be removed in a future "
"version of Python.  Anything belonging to these submodules should be "
"imported directly from :mod:`typing` instead. (Contributed by Sebastian "
"Rittau in :issue:`38291`.)"
msgstr ""
"從 ``typing.io`` 和 ``typing.re`` 子模組引入現在將發出 :exc:"
"`DeprecationWarning`。這些子模組將在 Python 的未來版本中刪除。屬於這些子模組"
"的任何內容都應該直接從 :mod:`typing` 引入。（由 Sebastian Rittau 在 :issue:"
"`38291` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1797 ../../whatsnew/3.10.rst:2220
msgid "Removed"
msgstr "已刪除"

#: ../../whatsnew/3.10.rst:1799
msgid ""
"Removed special methods ``__int__``, ``__float__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__rfloordiv__``, ``__rmod__`` and "
"``__rdivmod__`` of the :class:`complex` class.  They always raised a :exc:"
"`TypeError`. (Contributed by Serhiy Storchaka in :issue:`41974`.)"
msgstr ""
"刪除了 :class:`complex` 類別的特殊方法 ``__int__``、``__float__``、"
"``__floordiv__``、``__mod__``、``__divmod__``、``__rfloordiv__``、"
"``__rmod__`` 和 ``__rdivmod__`` 。它們都會引發 :exc:`TypeError`。（由 Serhiy "
"Storchaka 在 :issue:`41974` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1805
msgid ""
"The ``ParserBase.error()`` method from the private and undocumented "
"``_markupbase`` module has been removed.  :class:`html.parser.HTMLParser` is "
"the only subclass of ``ParserBase`` and its ``error()`` implementation was "
"already removed in Python 3.5. (Contributed by Berker Peksag in :issue:"
"`31844`.)"
msgstr ""
"``_markupbase`` 模組中私有、未於文件記錄的 ``ParserBase.error()`` 方法已被刪"
"除。:class:`html.parser.HTMLParser` 是 ``ParserBase`` 的唯一子類別，它的 "
"``error()`` 實作已在 Python 3.5 中刪除。（由 Berker Peksag 在 :issue:`31844` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1811
msgid ""
"Removed the ``unicodedata.ucnhash_CAPI`` attribute which was an internal "
"PyCapsule object. The related private ``_PyUnicode_Name_CAPI`` structure was "
"moved to the internal C API. (Contributed by Victor Stinner in :issue:"
"`42157`.)"
msgstr ""
"刪除了 ``unicodedata.ucnhash_CAPI`` 屬性，該屬性是內部 PyCapsule 物件。相關的"
"私有 ``_PyUnicode_Name_CAPI`` 結構已移至內部 C API。（由 Victor Stinner 在 :"
"issue:`42157` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1816
msgid ""
"Removed the ``parser`` module, which was deprecated in 3.9 due to the switch "
"to the new PEG parser, as well as all the C source and header files that "
"were only being used by the old parser, including ``node.h``, ``parser.h``, "
"``graminit.h`` and ``grammar.h``."
msgstr ""
"刪除了由於切換到新的 PEG 剖析器而在 3.9 中被棄用的 ``parser`` 模組。僅由舊剖"
"析器使用的所有 C 原始碼和標頭檔也已被刪除，包括 ``node.h``、``parser.h``、"
"``graminit.h`` 和 ``grammar.h``。"

#: ../../whatsnew/3.10.rst:1821
msgid ""
"Removed the Public C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags`` and ``PyNode_Compile`` that were "
"deprecated in 3.9 due to the switch to the new PEG parser."
msgstr ""
"刪除了公開 C API 函式 ``PyParser_SimpleParseStringFlags``、"
"``PyParser_SimpleParseStringFlagsFilename``、"
"``PyParser_SimpleParseFileFlags`` 和 ``PyNode_Compile``，這些函式由於切換到新"
"的 PEG 剖析器而在 3.9 中被棄用。"

#: ../../whatsnew/3.10.rst:1826
msgid ""
"Removed the ``formatter`` module, which was deprecated in Python 3.4. It is "
"somewhat obsolete, little used, and not tested. It was originally scheduled "
"to be removed in Python 3.6, but such removals were delayed until after "
"Python 2.7 EOL. Existing users should copy whatever classes they use into "
"their code. (Contributed by Donghee Na and Terry J. Reedy in :issue:`42299`.)"
msgstr ""
"刪除了 ``formatter`` 模組，該模組在 Python 3.4 中已棄用。它有些過時、很少被使"
"用，也沒有經過測試。它最初計劃在 Python 3.6 中刪除，但此類別的刪除被推遲到 "
"Python 2.7 EOL 之後。現有使用者應該將他們使用的任何類別複製到他們的程式碼中。"
"（由 Donghee Na 和 Terry J. Reedy 在 :issue:`42299` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1833
msgid ""
"Removed the :c:func:`!PyModule_GetWarningsModule` function that was useless "
"now due to the :mod:`!_warnings` module was converted to a builtin module in "
"2.6. (Contributed by Hai Shi in :issue:`42599`.)"
msgstr ""
"刪除了 :c:func:`!PyModule_GetWarningsModule` 函式，該函式現在無用，因為 :mod:"
"`!_warnings` 模組在 2.6 中已轉換為內建模組。（由 Hai Shi 在 :issue:`42599` 中"
"貢獻。）"

#: ../../whatsnew/3.10.rst:1837
msgid ""
"Remove deprecated aliases to :ref:`collections-abstract-base-classes` from "
"the :mod:`collections` module. (Contributed by Victor Stinner in :issue:"
"`37324`.)"
msgstr ""
"從 :mod:`collections` 模組中刪除已棄用的、對 :ref:`collections-abstract-base-"
"classes` 的別名。（由 Victor Stinner 在 :issue:`37324` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1841
msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's :"
"doc:`high-level API <../library/asyncio-api-index>` following deprecation in "
"Python 3.8.  The motivation behind this change is multifold:"
msgstr ""
"在 Python 3.8 中棄用後，``loop`` 參數已從大多數 :mod:`asyncio` 的\\ :doc:`高"
"階 API <../library/asyncio-api-index>` 中刪除。這一變化的背後動機是多方面的："

#: ../../whatsnew/3.10.rst:1845
msgid "This simplifies the high-level API."
msgstr "這簡化了高階 API。"

#: ../../whatsnew/3.10.rst:1846
msgid ""
"The functions in the high-level API have been implicitly getting the current "
"thread's running event loop since Python 3.7.  There isn't a need to pass "
"the event loop to the API in most normal use cases."
msgstr ""
"自 Python 3.7 以來，高階 API 中的函式一直隱式獲取當前執行緒正在運行的事件循"
"環。在大多數正常用例中，不需要將事件循環傳遞給 API。"

#: ../../whatsnew/3.10.rst:1849
msgid ""
"Event loop passing is error-prone especially when dealing with loops running "
"in different threads."
msgstr "事件循環的傳遞很容易出錯，尤其是在處理在不同執行緒中運行的循環時。"

#: ../../whatsnew/3.10.rst:1852
msgid ""
"Note that the low-level API will still accept ``loop``. See :ref:`changes-"
"python-api` for examples of how to replace existing code."
msgstr ""
"請注意，低階 API 仍會接受 ``loop``。有關如何替換現有程式碼的範例，請參閱 :"
"ref:`changes-python-api`。"

#: ../../whatsnew/3.10.rst:1855 ../../whatsnew/3.10.rst:1927
msgid ""
"(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle "
"Stanley in :issue:`42392`.)"
msgstr ""
"（由 Yurii Karabas、Andrew Svetlov、Yury Selivanov 和 Kyle Stanley 在 :issue:"
"`42392` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1860 ../../whatsnew/3.10.rst:2147
msgid "Porting to Python 3.10"
msgstr "移植到 Python 3.10"

#: ../../whatsnew/3.10.rst:1862
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本節列出了前面描述的更改以及可能需要更改程式碼的其他錯誤修復。"

#: ../../whatsnew/3.10.rst:1867
msgid "Changes in the Python syntax"
msgstr "Python 語法的變化"

#: ../../whatsnew/3.10.rst:1869
msgid ""
"Deprecation warning is now emitted when compiling previously valid syntax if "
"the numeric literal is immediately followed by a keyword (like in ``0in "
"x``). In future releases it will be changed to syntax warning, and finally "
"to a syntax error.  To get rid of the warning and make the code compatible "
"with future releases just add a space between the numeric literal and the "
"following keyword. (Contributed by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"如果數字字面值後面緊跟關鍵字（如 ``0in x``），在以前是有效的語法，但現在在編"
"譯時會發出棄用警告。在未來的版本中，它將更改為語法警告，最後更改為語法錯誤。"
"要消除警告並使程式碼與未來版本相容，只需在數字字面值和以下關鍵字之間新增一個"
"空格即可。（由 Serhiy Storchaka 在 :issue:`43833` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1880
msgid "Changes in the Python API"
msgstr "Python API 的變化"

#: ../../whatsnew/3.10.rst:1882
msgid ""
"The *etype* parameters of the :func:`~traceback.format_exception`, :func:"
"`~traceback.format_exception_only`, and :func:`~traceback.print_exception` "
"functions in the :mod:`traceback` module have been renamed to *exc*. "
"(Contributed by Zackery Spytz and Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
":func:`~traceback.format_exception`、:func:`~traceback."
"format_exception_only` 和 :mod:`traceback` 模組中的 :func:`~traceback."
"print_exception` 函式的 *etype* 參數已重命名為 *exc*。（由 Zackery Spytz 和 "
"Matthias Bussonnier 在 :issue:`26389` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1888
msgid ""
":mod:`atexit`: At Python exit, if a callback registered with :func:`atexit."
"register` fails, its exception is now logged. Previously, only some "
"exceptions were logged, and the last exception was always silently ignored. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ""
":mod:`atexit`：在 Python 退出時，如果一個使用 :func:`atexit.register` 註冊的"
"回呼 (callback) 失敗，該例外現在會被記錄下來。在以前只記錄一些例外，並且最後"
"一個例外總是被默默地忽略。（由 Victor Stinner 在 :issue:`42639` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1894
msgid ""
":class:`collections.abc.Callable` generic now flattens type parameters, "
"similar to what :data:`typing.Callable` currently does.  This means that "
"``collections.abc.Callable[[int, str], str]`` will have ``__args__`` of "
"``(int, str, str)``; previously this was ``([int, str], str)``.  Code which "
"accesses the arguments via :func:`typing.get_args` or ``__args__`` need to "
"account for this change.  Furthermore, :exc:`TypeError` may be raised for "
"invalid forms of parameterizing :class:`collections.abc.Callable` which may "
"have passed silently in Python 3.9. (Contributed by Ken Jin in :issue:"
"`42195`.)"
msgstr ""
":class:`collections.abc.Callable` 泛型現在會攤平型別參數，類似於 :data:"
"`typing.Callable` 目前的做法。這意味著 ``collections.abc.Callable[[int, "
"str], str]`` 將具有 ``(int, str, str)`` 的 ``__args__``；以前這是 ``([int, "
"str], str)``。透過 :func:`typing.get_args` 或 ``__args__`` 存取參數的程式碼需"
"要考慮此變更。此外，對於無效形式的參數化 :class:`collections.abc.Callable`，"
"可能會引發 :exc:`TypeError`，而在 Python 3.9 中，該參數可能已被默默地傳遞。"
"（由 Ken Jin 在 :issue:`42195` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1904
msgid ""
":meth:`socket.htons` and :meth:`socket.ntohs` now raise :exc:`OverflowError` "
"instead of :exc:`DeprecationWarning` if the given parameter will not fit in "
"a 16-bit unsigned integer. (Contributed by Erlend E. Aasland in :issue:"
"`42393`.)"
msgstr ""
"如果給定參數不適合 16 位元無符號整數 (16-bit unsigned integer)，:meth:"
"`socket.htons` 和 :meth:`socket.ntohs` 現在會引發 :exc:`OverflowError` 而不"
"是 :exc:`DeprecationWarning`。（由 Erlend E. Aasland 在 :issue:`42393` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:1909
msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's :"
"doc:`high-level API <../library/asyncio-api-index>` following deprecation in "
"Python 3.8."
msgstr ""
"在 Python 3.8 中棄用後，``loop`` 參數已從大多數 :mod:`asyncio` 的\\ :doc:`高"
"階 API <../library/asyncio-api-index>` 中刪除。"

#: ../../whatsnew/3.10.rst:1913
msgid "A coroutine that currently looks like this::"
msgstr "目前如下所示的協程： ::"

#: ../../whatsnew/3.10.rst:1915
msgid ""
"async def foo(loop):\n"
"    await asyncio.sleep(1, loop=loop)"
msgstr ""
"async def foo(loop):\n"
"    await asyncio.sleep(1, loop=loop)"

#: ../../whatsnew/3.10.rst:1918
msgid "Should be replaced with this::"
msgstr "應替換為： ::"

#: ../../whatsnew/3.10.rst:1920
msgid ""
"async def foo():\n"
"    await asyncio.sleep(1)"
msgstr ""
"async def foo():\n"
"    await asyncio.sleep(1)"

#: ../../whatsnew/3.10.rst:1923
msgid ""
"If ``foo()`` was specifically designed *not* to run in the current thread's "
"running event loop (e.g. running in another thread's event loop), consider "
"using :func:`asyncio.run_coroutine_threadsafe` instead."
msgstr ""
"如果 ``foo()`` 被專門設計為 *不* 在當前執行緒的事件循環中運行（例如在另一個執"
"行緒的事件循環中運行），請考慮改用 :func:`asyncio.run_coroutine_threadsafe`。"

#: ../../whatsnew/3.10.rst:1930
msgid ""
"The :data:`types.FunctionType` constructor now inherits the current builtins "
"if the *globals* dictionary has no ``\"__builtins__\"`` key, rather than "
"using ``{\"None\": None}`` as builtins: same behavior as :func:`eval` and :"
"func:`exec` functions.  Defining a function with ``def function(...): ...`` "
"in Python is not affected, globals cannot be overridden with this syntax: it "
"also inherits the current builtins. (Contributed by Victor Stinner in :issue:"
"`42990`.)"
msgstr ""
"如果 *globals* 字典沒有 ``\"__builtins__\"`` 鍵，則 :data:`types."
"FunctionType` 建構函式現在會繼承當前的內建物件，而不是使用 ``{\"None\": None}"
"``：相同行為如 :func:`eval` 和 :func:`exec` 函式。在 Python 中使用 ``def "
"function(...): ...`` 定義函式不受影響，全域變數不能用此語法覆蓋：它也繼承當前"
"的內建物件。（由 Victor Stinner 在 :issue:`42990` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1939
msgid "Changes in the C API"
msgstr "C API 中的改動"

#: ../../whatsnew/3.10.rst:1941
msgid ""
"The C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags``, ``PyNode_Compile`` and the type used by "
"these functions, ``struct _node``, were removed due to the switch to the new "
"PEG parser."
msgstr ""
"由於切換到新的 PEG 剖析器，C API 函式 ``PyParser_SimpleParseStringFlags``、"
"``PyParser_SimpleParseStringFlagsFilename``、"
"``PyParser_SimpleParseFileFlags``、``PyNode_Compile`` 和被這些函式使用的型別 "
"``struct _node`` 被刪除。"

#: ../../whatsnew/3.10.rst:1947
msgid ""
"Source should be now be compiled directly to a code object using, for "
"example, :c:func:`Py_CompileString`. The resulting code object can then be "
"evaluated using, for example, :c:func:`PyEval_EvalCode`."
msgstr ""
"現在應該將源程式碼直接（例如透過 :c:func:`Py_CompileString`）編譯為程式碼物"
"件。然後可以（例如透過 :c:func:`PyEval_EvalCode`）為產生的程式碼物件求值 "
"(evaluated)。"

#: ../../whatsnew/3.10.rst:1951
msgid "Specifically:"
msgstr "具體來說："

#: ../../whatsnew/3.10.rst:1953
msgid ""
"A call to ``PyParser_SimpleParseStringFlags`` followed by ``PyNode_Compile`` "
"can be replaced by calling :c:func:`Py_CompileString`."
msgstr ""
"後跟有 ``PyNode_Compile`` 呼叫的 ``PyParser_SimpleParseStringFlags`` 呼叫，可"
"以替換為呼叫 :c:func:`Py_CompileString`。"

#: ../../whatsnew/3.10.rst:1956
msgid ""
"There is no direct replacement for ``PyParser_SimpleParseFileFlags``. To "
"compile code from a ``FILE *`` argument, you will need to read the file in C "
"and pass the resulting buffer to :c:func:`Py_CompileString`."
msgstr ""
"沒有 ``PyParser_SimpleParseFileFlags`` 的直接替代品。要從 ``FILE *`` 引數編譯"
"程式碼，你需要用 C 讀取檔案並將結果緩衝區傳遞給 :c:func:`Py_CompileString`。"

#: ../../whatsnew/3.10.rst:1960
msgid ""
"To compile a file given a ``char *`` filename, explicitly open the file, "
"read it and compile the result. One way to do this is using the :py:mod:`io` "
"module with :c:func:`PyImport_ImportModule`, :c:func:`PyObject_CallMethod`, :"
"c:func:`PyBytes_AsString` and :c:func:`Py_CompileString`, as sketched below. "
"(Declarations and error handling are omitted.) ::"
msgstr ""
"要編譯給定 ``char *`` 檔案名稱的檔案，請顯式打開該檔案，讀取它並編譯結果。一"
"種方法是使用 :py:mod:`io` 模組和 :c:func:`PyImport_ImportModule`、:c:func:"
"`PyObject_CallMethod`、:c:func:`PyBytes_AsString` 和 :c:func:"
"`Py_CompileString`，如下所示。（宣告和錯誤處理在此被省略。）： ::"

#: ../../whatsnew/3.10.rst:1966
msgid ""
"io_module = Import_ImportModule(\"io\");\n"
"fileobject = PyObject_CallMethod(io_module, \"open\", \"ss\", filename, "
"\"rb\");\n"
"source_bytes_object = PyObject_CallMethod(fileobject, \"read\", \"\");\n"
"result = PyObject_CallMethod(fileobject, \"close\", \"\");\n"
"source_buf = PyBytes_AsString(source_bytes_object);\n"
"code = Py_CompileString(source_buf, filename, Py_file_input);"
msgstr ""
"io_module = Import_ImportModule(\"io\");\n"
"fileobject = PyObject_CallMethod(io_module, \"open\", \"ss\", filename, "
"\"rb\");\n"
"source_bytes_object = PyObject_CallMethod(fileobject, \"read\", \"\");\n"
"result = PyObject_CallMethod(fileobject, \"close\", \"\");\n"
"source_buf = PyBytes_AsString(source_bytes_object);\n"
"code = Py_CompileString(source_buf, filename, Py_file_input);"

#: ../../whatsnew/3.10.rst:1973
msgid ""
"For ``FrameObject`` objects, the :attr:`~frame.f_lasti` member now "
"represents a wordcode offset instead of a simple offset into the bytecode "
"string. This means that this number needs to be multiplied by 2 to be used "
"with APIs that expect a byte offset instead (like :c:func:`PyCode_Addr2Line` "
"for example). Notice as well that the :attr:`!f_lasti` member of "
"``FrameObject`` objects is not considered stable: please use :c:func:"
"`PyFrame_GetLineNumber` instead."
msgstr ""
"對於 ``FrameObject`` 物件，:attr:`~frame.f_lasti` 成員現在表示了字碼偏移量 "
"(wordcode offset)，而不是位元組碼字串的簡單偏移量。這意味著這個數字需要乘以 "
"2 才能與需要位元組偏移量的 API 一起使用（例如 :c:func:`PyCode_Addr2Line`）。"
"還要注意，``FrameObject`` 物件的 :attr:`!f_lasti` 成員不被認為是穩定的：請改"
"用 :c:func:`PyFrame_GetLineNumber`。"

#: ../../whatsnew/3.10.rst:1981
msgid "CPython bytecode changes"
msgstr "CPython 位元組碼變更"

#: ../../whatsnew/3.10.rst:1983
msgid ""
"The ``MAKE_FUNCTION`` instruction now accepts either a dict or a tuple of "
"strings as the function's annotations. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"``MAKE_FUNCTION`` 指令現在接受字典或字串元組作為函式的註釋。（由 Yurii "
"Karabas 和 Inada Naoki 在 :issue:`42202` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1988
msgid "Build Changes"
msgstr "建置變更"

#: ../../whatsnew/3.10.rst:1990
msgid ""
":pep:`644`: Python now requires OpenSSL 1.1.1 or newer. OpenSSL 1.0.2 is no "
"longer supported. (Contributed by Christian Heimes in :issue:`43669`.)"
msgstr ""
":pep:`644`：Python 現在需要 OpenSSL 1.1.1 或更高版本。不再支援 OpenSSL "
"1.0.2。（由 Christian Heimes 在 :issue:`43669` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1994
msgid ""
"The C99 functions :c:func:`snprintf` and :c:func:`vsnprintf` are now "
"required to build Python. (Contributed by Victor Stinner in :issue:`36020`.)"
msgstr ""
"現在需要 C99 函式 :c:func:`snprintf` 和 :c:func:`vsnprintf` 來建置 Python。 "
"（由 Victor Stinner 在 :issue:`36020` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1998
msgid ""
":mod:`sqlite3` requires SQLite 3.7.15 or higher. (Contributed by Sergey "
"Fedoseev and Erlend E. Aasland in :issue:`40744` and :issue:`40810`.)"
msgstr ""
":mod:`sqlite3` 需要 SQLite 3.7.15 或更新版本。（由 Sergey Fedoseev 和 Erlend "
"E. Aasland 在 :issue:`40744` 和 :issue:`40810` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2001
msgid ""
"The :mod:`atexit` module must now always be built as a built-in module. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ""
":mod:`atexit` 模組現在必須都被建置為內建模組。（由 Victor Stinner 在 :issue:"
"`42639` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2004
msgid ""
"Add :option:`--disable-test-modules` option to the ``configure`` script: "
"don't build nor install test modules. (Contributed by Xavier de Gaye, Thomas "
"Petazzoni and Peixing Xin in :issue:`27640`.)"
msgstr ""
"將 :option:`--disable-test-modules` 選項新增到 ``configure`` 腳本中：不建置也"
"不安裝測試模組。（由 Xavier de Gaye、Thomas Petazzoni 和 Peixing Xin 在 :"
"issue:`27640` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2008
msgid ""
"Add :option:`--with-wheel-pkg-dir=PATH option <--with-wheel-pkg-dir>` to the "
"``./configure`` script. If specified, the :mod:`ensurepip` module looks for "
"``setuptools`` and ``pip`` wheel packages in this directory: if both are "
"present, these wheel packages are used instead of ensurepip bundled wheel "
"packages."
msgstr ""
"將 :option:`--with-wheel-pkg-dir=PATH 選項 <--with-wheel-pkg-dir>` 新增到 "
"``./configure`` 腳本中。如果有指定，:mod:`ensurepip` 模組會在此目錄中查找 "
"``setuptools`` 和 ``pip`` wheel 套件：如果兩者都存在，則使用這些 wheel 套件而"
"不是 ensurepip 捆綁的 wheel 套件。"

#: ../../whatsnew/3.10.rst:2014
msgid ""
"Some Linux distribution packaging policies recommend against bundling "
"dependencies. For example, Fedora installs wheel packages in the ``/usr/"
"share/python-wheels/`` directory and don't install the ``ensurepip."
"_bundled`` package."
msgstr ""
"一些 Linux 發行版的打包策略建議不要一併包入依賴項目。例如，Fedora 在 ``/usr/"
"share/python-wheels/`` 目錄中安裝 wheel 套件，並且不安裝 ``ensurepip."
"_bundled`` 套件。"

#: ../../whatsnew/3.10.rst:2019
msgid "(Contributed by Victor Stinner in :issue:`42856`.)"
msgstr "（由 Victor Stinner 在 :issue:`42856` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2021
msgid ""
"Add a new :option:`configure --without-static-libpython option <--without-"
"static-libpython>` to not build the ``libpythonMAJOR.MINOR.a`` static "
"library and not install the ``python.o`` object file."
msgstr ""
"新增 :option:`configure --without-static-libpython 選項 <--without-static-"
"libpython>` 以不建置 ``libpythonMAJOR.MINOR.a`` 靜態函式庫且不安裝 ``python."
"o`` 目標檔案。"

#: ../../whatsnew/3.10.rst:2025
msgid "(Contributed by Victor Stinner in :issue:`43103`.)"
msgstr "（由 Victor Stinner 在 :issue:`43103` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2027
msgid ""
"The ``configure`` script now uses the ``pkg-config`` utility, if available, "
"to detect the location of Tcl/Tk headers and libraries.  As before, those "
"locations can be explicitly specified with the ``--with-tcltk-includes`` and "
"``--with-tcltk-libs`` configuration options. (Contributed by Manolis "
"Stamatogiannakis in :issue:`42603`.)"
msgstr ""
"如果可用，``configure`` 腳本現在使用 ``pkg-config`` 工具程式 (utility) 來檢"
"測 Tcl/Tk 標頭檔和函式庫的位置。和以前一樣，可以使用 ``--with-tcltk-"
"includes`` 和 ``--with-tcltk-libs`` 配置選項顯式指定這些位置。（由 Manolis "
"Stamatogiannakis 在 :issue:`42603` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2033
msgid ""
"Add :option:`--with-openssl-rpath` option to ``configure`` script. The "
"option simplifies building Python with a custom OpenSSL installation, e.g. "
"``./configure --with-openssl=/path/to/openssl --with-openssl-rpath=auto``. "
"(Contributed by Christian Heimes in :issue:`43466`.)"
msgstr ""
"將 :option:`--with-openssl-rpath` 選項新增到 ``configure`` 腳本中。該選項簡化"
"了使用自定義 OpenSSL 安裝建置 Python 的過程，例如 ``./configure --with-"
"openssl=/path/to/openssl --with-openssl-rpath=auto``。（由 Christian Heimes "
"在 :issue:`43466` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2040
msgid "C API Changes"
msgstr "C API 變更"

#: ../../whatsnew/3.10.rst:2043
msgid "PEP 652: Maintaining the Stable ABI"
msgstr "PEP 652：維護穩定 ABI"

#: ../../whatsnew/3.10.rst:2045
msgid ""
"The Stable ABI (Application Binary Interface) for extension modules or "
"embedding Python is now explicitly defined. :ref:`stable` describes C API "
"and ABI stability guarantees along with best practices for using the Stable "
"ABI."
msgstr ""
"用於擴充模組或嵌入 Python 的穩定 ABI（應用程式二進位介面）現已明確定義。 :"
"ref:`stable` 描述了 C API 和 ABI 穩定性保證以及使用穩定 ABI 的最佳實踐。"

#: ../../whatsnew/3.10.rst:2050
msgid "(Contributed by Petr Viktorin in :pep:`652` and :issue:`43795`.)"
msgstr "（由 Petr Viktorin 在 :pep:`652` 和 :issue:`43795` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2055
msgid ""
"The result of :c:func:`PyNumber_Index` now always has exact type :class:"
"`int`. Previously, the result could have been an instance of a subclass of "
"``int``. (Contributed by Serhiy Storchaka in :issue:`40792`.)"
msgstr ""
":c:func:`PyNumber_Index` 的結果現在都具有精確的 :class:`int` 型別。在以前，結"
"果可能是 ``int`` 子類別的實例。（由 Serhiy Storchaka 在 :issue:`40792` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:2059
msgid ""
"Add a new :c:member:`~PyConfig.orig_argv` member to the :c:type:`PyConfig` "
"structure: the list of the original command line arguments passed to the "
"Python executable. (Contributed by Victor Stinner in :issue:`23427`.)"
msgstr ""
"將新的 :c:member:`~PyConfig.orig_argv` 成員新增到 :c:type:`PyConfig` 結構：傳"
"遞給 Python 可執行檔案的原始命令列參數列表。（由 Victor Stinner 在 :issue:"
"`23427` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2064
msgid ""
"The :c:func:`PyDateTime_DATE_GET_TZINFO` and :c:func:"
"`PyDateTime_TIME_GET_TZINFO` macros have been added for accessing the "
"``tzinfo`` attributes of :class:`datetime.datetime` and :class:`datetime."
"time` objects. (Contributed by Zackery Spytz in :issue:`30155`.)"
msgstr ""
"新增了 :c:func:`PyDateTime_DATE_GET_TZINFO` 和 :c:func:"
"`PyDateTime_TIME_GET_TZINFO` 巨集，用於存取 :class:`datetime.datetime` 和 :"
"class:`datetime.time` 物件的 ``tzinfo`` 屬性。（由 Zackery Spytz 在 :issue:"
"`30155` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2070
msgid ""
"Add a :c:func:`PyCodec_Unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"新增 :c:func:`PyCodec_Unregister` 函式來取消註冊編解碼器搜索函式。（由 Hai "
"Shi 在 :issue:`41842` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2074
msgid ""
"The :c:func:`PyIter_Send` function was added to allow sending value into "
"iterator without raising ``StopIteration`` exception. (Contributed by "
"Vladimir Matveev in :issue:`41756`.)"
msgstr ""
"新增了 :c:func:`PyIter_Send` 函式，以允許將值發送到疊代器中，而不會引發 "
"``StopIteration`` 例外。（由 Vladimir Matveev 在 :issue:`41756` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2078
msgid ""
"Add :c:func:`PyUnicode_AsUTF8AndSize` to the limited C API. (Contributed by "
"Alex Gaynor in :issue:`41784`.)"
msgstr ""
"將 :c:func:`PyUnicode_AsUTF8AndSize` 新增到受限 C API (limited C API) 中。"
"（由 Alex Gaynor 在 :issue:`41784` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2081
msgid ""
"Add :c:func:`PyModule_AddObjectRef` function: similar to :c:func:"
"`PyModule_AddObject` but don't steal a reference to the value on success. "
"(Contributed by Victor Stinner in :issue:`1635741`.)"
msgstr ""
"新增 :c:func:`PyModule_AddObjectRef` 函式：類似於 :c:func:"
"`PyModule_AddObject` 但成功時不竊取對值的參照。（由 Victor Stinner 在 :issue:"
"`1635741` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2086
msgid ""
"Add :c:func:`Py_NewRef` and :c:func:`Py_XNewRef` functions to increment the "
"reference count of an object and return the object. (Contributed by Victor "
"Stinner in :issue:`42262`.)"
msgstr ""
"新增 :c:func:`Py_NewRef` 和 :c:func:`Py_XNewRef` 函式來增加物件的參照計數並回"
"傳物件。（由 Victor Stinner 在 :issue:`42262` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2090
msgid ""
"The :c:func:`PyType_FromSpecWithBases` and :c:func:"
"`PyType_FromModuleAndSpec` functions now accept a single class as the "
"*bases* argument. (Contributed by Serhiy Storchaka in :issue:`42423`.)"
msgstr ""
":c:func:`PyType_FromSpecWithBases` 和 :c:func:`PyType_FromModuleAndSpec` 函式"
"現在接受單個類別作為 *bases* 引數。（由 Serhiy Storchaka 在 :issue:`42423` 中"
"貢獻。）"

#: ../../whatsnew/3.10.rst:2094
msgid ""
"The :c:func:`PyType_FromModuleAndSpec` function now accepts NULL ``tp_doc`` "
"slot. (Contributed by Hai Shi in :issue:`41832`.)"
msgstr ""
":c:func:`PyType_FromModuleAndSpec` 函式現在接受 NULL ``tp_doc`` 槽位。（由 "
"Hai Shi 在 :issue:`41832` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2098
msgid ""
"The :c:func:`PyType_GetSlot` function can accept :ref:`static types <static-"
"types>`. (Contributed by Hai Shi and Petr Viktorin in :issue:`41073`.)"
msgstr ""
":c:func:`PyType_GetSlot` 函式可以接受\\ :ref:`靜態型別 (static type) <static-"
"types>`。（由 Hai Shi 和 Petr Viktorin 在 :issue:`41073` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2102
msgid ""
"Add a new :c:func:`PySet_CheckExact` function to the C-API to check if an "
"object is an instance of :class:`set` but not an instance of a subtype. "
"(Contributed by Pablo Galindo in :issue:`43277`.)"
msgstr ""
"向 C-API 新增 :c:func:`PySet_CheckExact` 函式，以檢查物件是否是 :class:`set` "
"的實例而不是子型別的實例。（由 Pablo Galindo 在 :issue:`43277` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2106
msgid ""
"Add :c:func:`PyErr_SetInterruptEx` which allows passing a signal number to "
"simulate. (Contributed by Antoine Pitrou in :issue:`43356`.)"
msgstr ""
"新增 :c:func:`PyErr_SetInterruptEx`，它允許傳遞信號編號來進行模擬。（由 "
"Antoine Pitrou 在 :issue:`43356` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2110
msgid ""
"The limited C API is now supported if :ref:`Python is built in debug mode "
"<debug-build>` (if the ``Py_DEBUG`` macro is defined). In the limited C API, "
"the :c:func:`Py_INCREF` and :c:func:`Py_DECREF` functions are now "
"implemented as opaque function calls, rather than accessing directly the :c:"
"member:`PyObject.ob_refcnt` member, if Python is built in debug mode and the "
"``Py_LIMITED_API`` macro targets Python 3.10 or newer. It became possible to "
"support the limited C API in debug mode because the :c:type:`PyObject` "
"structure is the same in release and debug mode since Python 3.8 (see :issue:"
"`36465`)."
msgstr ""
"如 :ref:`Python 是在除錯模式 (debug mode) <debug-build>` 下建置的（如果有定"
"義 ``Py_DEBUG`` 巨集），現在會支援受限 C API。在受限 C API 中，如果 Python 是"
"在除錯模式下建置的，並且 ``Py_LIMITED_API`` 巨集的目標是 Python 3.10 或更新版"
"本，:c:func:`Py_INCREF` 和 :c:func:`Py_DECREF` 函式現在的實作是不透明函式呼"
"叫，而不是直接存取 :c:member:`PyObject.ob_refcnt` 成員。在除錯模式下支援受限 "
"C API 成為可能，因為自 Python 3.8 以來，:c:type:`PyObject` 結構在發布和除錯模"
"式下是相同的（請參閱:issue:`36465`）。"

#: ../../whatsnew/3.10.rst:2120
msgid ""
"The limited C API is still not supported in the :option:`--with-trace-refs` "
"special build (``Py_TRACE_REFS`` macro). (Contributed by Victor Stinner in :"
"issue:`43688`.)"
msgstr ""
":option:`--with-trace-refs` 特殊建置（``Py_TRACE_REFS`` 巨集）仍不支援受限 C "
"API。（由 Victor Stinner 在 :issue:`43688` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2124
msgid ""
"Add the :c:func:`Py_Is(x, y) <Py_Is>` function to test if the *x* object is "
"the *y* object, the same as ``x is y`` in Python. Add also the :c:func:"
"`Py_IsNone`, :c:func:`Py_IsTrue`, :c:func:`Py_IsFalse` functions to test if "
"an object is, respectively, the ``None`` singleton, the ``True`` singleton "
"or the ``False`` singleton. (Contributed by Victor Stinner in :issue:"
"`43753`.)"
msgstr ""
"新增 :c:func:`Py_Is(x, y) <Py_Is>` 函式來測試 *x* 物件是否為 *y* 物件，與 "
"Python 中的 ``x is y`` 相同。還新增 :c:func:`Py_IsNone`、:c:func:"
"`Py_IsTrue`、:c:func:`Py_IsFalse` 函式來分別測試物件是否為 ``None`` 單例、 "
"``True`` 單例或 ``False`` 單例。（由 Victor Stinner 在 :issue:`43753` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:2131
msgid ""
"Add new functions to control the garbage collector from C code: :c:func:"
"`PyGC_Enable()`, :c:func:`PyGC_Disable()`, :c:func:`PyGC_IsEnabled()`. These "
"functions allow to activate, deactivate and query the state of the garbage "
"collector from C code without having to import the :mod:`gc` module."
msgstr ""
"新增函式以從 C 程式碼控制垃圾收集器：:c:func:`PyGC_Enable()`、:c:func:"
"`PyGC_Disable()`、:c:func:`PyGC_IsEnabled()`。這些函式使得能夠從 C 程式碼啟"
"用、停用和查詢垃圾收集器的狀態，而無需引入 :mod:`gc` 模組。"

#: ../../whatsnew/3.10.rst:2138
msgid ""
"Add a new :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` type flag to disallow "
"creating type instances. (Contributed by Victor Stinner in :issue:`43916`.)"
msgstr ""
"新增 :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` 型別旗標以禁止建立型別實"
"例。（由 Victor Stinner 在 :issue:`43916` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2142
msgid ""
"Add a new :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` type flag for creating "
"immutable type objects: type attributes cannot be set nor deleted. "
"(Contributed by Victor Stinner and Erlend E. Aasland in :issue:`43908`.)"
msgstr ""
"新增 :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` 型別旗標用於建立不可變型別物件：無法"
"設定或刪除型別屬性。（由 Victor Stinner 和 Erlend E. Aasland 在 :issue:"
"`43908` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2149
msgid ""
"The ``PY_SSIZE_T_CLEAN`` macro must now be defined to use :c:func:"
"`PyArg_ParseTuple` and :c:func:`Py_BuildValue` formats which use ``#``: "
"``es#``, ``et#``, ``s#``, ``u#``, ``y#``, ``z#``, ``U#`` and ``Z#``. See :"
"ref:`arg-parsing` and :pep:`353`. (Contributed by Victor Stinner in :issue:"
"`40943`.)"
msgstr ""
"現在必須定義 ``PY_SSIZE_T_CLEAN`` 巨集以使用 :c:func:`PyArg_ParseTuple` 和 :"
"c:func:`Py_BuildValue` 格式，這些格式使用 ``#``: ``es#``, ``et#``、``s#``、"
"``u#``、``y#``、``z#``、``U#`` 和 ``Z#``。請參閱 :ref:`arg-parsing` 和 :pep:"
"`353`。（由 Victor Stinner 在 :issue:`40943` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2155
msgid ""
"Since :c:func:`Py_REFCNT()` is changed to the inline static function, "
"``Py_REFCNT(obj) = new_refcnt`` must be replaced with ``Py_SET_REFCNT(obj, "
"new_refcnt)``: see :c:func:`Py_SET_REFCNT()` (available since Python 3.9). "
"For backward compatibility, this macro can be used::"
msgstr ""
"由於 :c:func:`Py_REFCNT()` 更改為行內靜態函式 (inline static function)，因此 "
"``Py_REFCNT(obj) = new_refcnt`` 必須替換為 ``Py_SET_REFCNT(obj, "
"new_refcnt)`` ：參見 :c:func:`Py_SET_REFCNT()` （自 Python 3.9 起可用）。為了"
"向後相容，可以使用該巨集： ::"

#: ../../whatsnew/3.10.rst:2160
msgid ""
"#if PY_VERSION_HEX < 0x030900A4\n"
"#  define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4\n"
"#  define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0)\n"
"#endif"

#: ../../whatsnew/3.10.rst:2164
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "（由 Victor Stinner 在 :issue:`39573` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2166
msgid ""
"Calling :c:func:`PyDict_GetItem` without :term:`GIL` held had been allowed "
"for historical reason. It is no longer allowed. (Contributed by Victor "
"Stinner in :issue:`40839`.)"
msgstr ""
"由於過去的種種原因，過去在不持有 :term:`GIL` 的情況下呼叫 :c:func:"
"`PyDict_GetItem` 是被允許的。目前已被禁止。（由 Victor Stinner 在 :issue:"
"`40839` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2170
msgid ""
"``PyUnicode_FromUnicode(NULL, size)`` and "
"``PyUnicode_FromStringAndSize(NULL, size)`` raise ``DeprecationWarning`` "
"now.  Use :c:func:`PyUnicode_New` to allocate Unicode object without initial "
"data. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"``PyUnicode_FromUnicode(NULL, size)`` 和 ``PyUnicode_FromStringAndSize(NULL, "
"size)`` 現在會引發 ``DeprecationWarning``。請改用 :c:func:`PyUnicode_New` 來"
"分配沒有初始資料的 Unicode 物件。（由 Inada Naoki 在 :issue:`36346` 中貢"
"獻。）"

#: ../../whatsnew/3.10.rst:2175
msgid ""
"The private ``_PyUnicode_Name_CAPI`` structure of the PyCapsule API "
"``unicodedata.ucnhash_CAPI`` has been moved to the internal C API. "
"(Contributed by Victor Stinner in :issue:`42157`.)"
msgstr ""
"PyCapsule API ``unicodedata.ucnhash_CAPI`` 的私有 ``_PyUnicode_Name_CAPI`` 結"
"構已移至內部 C API。（由 Victor Stinner 在 :issue:`42157` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2179
msgid ""
":c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:"
"func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome` and :c:func:"
"`Py_GetProgramName` functions now return ``NULL`` if called before :c:func:"
"`Py_Initialize` (before Python is initialized). Use the new :ref:`init-"
"config` API to get the :ref:`init-path-config`. (Contributed by Victor "
"Stinner in :issue:`42260`.)"
msgstr ""
"如果在 :c:func:`Py_Initialize` 之前（Python 初始化之前）被呼叫，:c:func:"
"`Py_GetPath`、:c:func:`Py_GetPrefix`、:c:func:`Py_GetExecPrefix`、:c:func:"
"`Py_GetProgramFullPath`、:c:func:`Py_GetPythonHome` 和 :c:func:"
"`Py_GetProgramName` 現在會回傳 ``NULL``。使用新的 :ref:`init-config` API 來獲"
"取 :ref:`init-path-config`。（由 Victor Stinner 在 :issue:`42260` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2186
msgid ""
":c:func:`PyList_SET_ITEM`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyCell_SET` macros can no longer be used as l-value or r-value. For "
"example, ``x = PyList_SET_ITEM(a, b, c)`` and ``PyList_SET_ITEM(a, b, c) = "
"x`` now fail with a compiler error. It prevents bugs like ``if "
"(PyList_SET_ITEM (a, b, c) < 0) ...`` test. (Contributed by Zackery Spytz "
"and Victor Stinner in :issue:`30459`.)"
msgstr ""
":c:func:`PyList_SET_ITEM`、:c:func:`PyTuple_SET_ITEM` 和 :c:func:"
"`PyCell_SET` 巨集不能再用作左值 (l-value) 或右值 (r-value)。例如，``x = "
"PyList_SET_ITEM(a, b, c)`` 和 ``PyList_SET_ITEM(a, b, c) = x`` 現在會失敗並出"
"現編譯器錯誤。它可以防止如 ``if (PyList_SET_ITEM (a, b, c) < 0) ...`` 測試之"
"類的錯誤。（由 Zackery Spytz 和 Victor Stinner 在 :issue:`30459` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2193
msgid ""
"The non-limited API files ``odictobject.h``, ``parser_interface.h``, "
"``picklebufobject.h``, ``pyarena.h``, ``pyctype.h``, ``pydebug.h``, ``pyfpe."
"h``, and ``pytime.h`` have been moved to the ``Include/cpython`` directory. "
"These files must not be included directly, as they are already included in "
"``Python.h``; see :ref:`api-includes`. If they have been included directly, "
"consider including ``Python.h`` instead. (Contributed by Nicholas Sim in :"
"issue:`35134`.)"
msgstr ""
"非受限 API 檔案 ``odictobject.h``、``parser_interface.h``、``picklebufobject."
"h``、``pyarena.h``、``pyctype.h``、``pydebug.h``、``pyfpe.h`` 和 ``pytime."
"h`` 已移至 ``Include/cpython`` 目錄。這些檔案不得直接被引入，因為它們已於 "
"``Python.h`` 中引入；請參閱 :ref:`api-includes`。如果直接引入它們，請考慮改為"
"引入 ``Python.h``。（由 Nicholas Sim 在 :issue:`35134` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2201
msgid ""
"Use the :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` type flag to create immutable "
"type objects. Do not rely on :c:macro:`Py_TPFLAGS_HEAPTYPE` to decide if a "
"type object is mutable or not; check if :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` "
"is set instead. (Contributed by Victor Stinner and Erlend E. Aasland in :"
"issue:`43908`.)"
msgstr ""
"使用 :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` 型別旗標來建立不可變型別物件。不要依"
"賴 :c:macro:`Py_TPFLAGS_HEAPTYPE` 來決定型別物件是否可變；應改為檢查是否設定"
"了 :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`。（由 Victor Stinner 和 Erlend E. "
"Aasland 在 :issue:`35134` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2207
msgid ""
"The undocumented function ``Py_FrozenMain`` has been removed from the "
"limited API. The function is mainly useful for custom builds of Python. "
"(Contributed by Petr Viktorin in :issue:`26241`.)"
msgstr ""
"未以說明文件記錄的函式 ``Py_FrozenMain`` 已從受限 API 中刪除。該函式主要用於 "
"Python 的自定義建置。（由 Petr Viktorin 在 :issue:`26241` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2214
msgid ""
"The ``PyUnicode_InternImmortal()`` function is now deprecated and will be "
"removed in Python 3.12: use :c:func:`PyUnicode_InternInPlace` instead. "
"(Contributed by Victor Stinner in :issue:`41692`.)"
msgstr ""
"``PyUnicode_InternImmortal()`` 函式現已棄用，並將在 Python 3.12 中刪除：請改"
"用 :c:func:`PyUnicode_InternInPlace`。（由 Victor Stinner 在 :issue:`41692` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2222
msgid ""
"Removed ``Py_UNICODE_str*`` functions manipulating ``Py_UNICODE*`` strings. "
"(Contributed by Inada Naoki in :issue:`41123`.)"
msgstr ""
"刪除了操作 ``Py_UNICODE*`` 字串的 ``Py_UNICODE_str*`` 函式。（由 Inada Naoki "
"在 :issue:`41123` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2225
msgid ""
"``Py_UNICODE_strlen``: use :c:func:`PyUnicode_GetLength` or :c:macro:"
"`PyUnicode_GET_LENGTH`"
msgstr ""
"``Py_UNICODE_strlen``：使用 :c:func:`PyUnicode_GetLength` 或 :c:macro:"
"`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.10.rst:2227
msgid ""
"``Py_UNICODE_strcat``: use :c:func:`PyUnicode_CopyCharacters` or :c:func:"
"`PyUnicode_FromFormat`"
msgstr ""
"``Py_UNICODE_strcat``：使用 :c:func:`PyUnicode_CopyCharacters` 或 :c:func:"
"`PyUnicode_FromFormat`"

#: ../../whatsnew/3.10.rst:2229
msgid ""
"``Py_UNICODE_strcpy``, ``Py_UNICODE_strncpy``: use :c:func:"
"`PyUnicode_CopyCharacters` or :c:func:`PyUnicode_Substring`"
msgstr ""
"``Py_UNICODE_strcpy``、``Py_UNICODE_strncpy``：使用 :c:func:"
"`PyUnicode_CopyCharacters` 或 :c:func:`PyUnicode_Substring`"

#: ../../whatsnew/3.10.rst:2231
msgid "``Py_UNICODE_strcmp``: use :c:func:`PyUnicode_Compare`"
msgstr "``Py_UNICODE_strcmp``：使用 :c:func:`PyUnicode_Compare`"

#: ../../whatsnew/3.10.rst:2232
msgid "``Py_UNICODE_strncmp``: use :c:func:`PyUnicode_Tailmatch`"
msgstr "``Py_UNICODE_strncmp``：使用 :c:func:`PyUnicode_Tailmatch`"

#: ../../whatsnew/3.10.rst:2233
msgid ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``: use :c:func:"
"`PyUnicode_FindChar`"
msgstr ""
"``Py_UNICODE_strchr``、``Py_UNICODE_strrchr``：使用 :c:func:"
"`PyUnicode_FindChar`"

#: ../../whatsnew/3.10.rst:2236
msgid ""
"Removed ``PyUnicode_GetMax()``. Please migrate to new (:pep:`393`) APIs. "
"(Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"刪除了 ``PyUnicode_GetMax()``。請改用新的 (:pep:`393`) API。（由 Inada Naoki "
"在 :issue:`41103` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2239
msgid ""
"Removed ``PyLong_FromUnicode()``. Please migrate to :c:func:"
"`PyLong_FromUnicodeObject`. (Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"刪除了 ``PyLong_FromUnicode()``。請改用 :c:func:`PyLong_FromUnicodeObject`。"
"（由 Inada Naoki 在 :issue:`41103` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2242
msgid ""
"Removed ``PyUnicode_AsUnicodeCopy()``. Please use :c:func:"
"`PyUnicode_AsUCS4Copy` or :c:func:`PyUnicode_AsWideCharString` (Contributed "
"by Inada Naoki in :issue:`41103`.)"
msgstr ""
"刪除了 ``PyUnicode_AsUnicodeCopy()``。請改用 :c:func:`PyUnicode_AsUCS4Copy` "
"或 :c:func:`PyUnicode_AsWideCharString` （由 Inada Naoki 在 :issue:`41103` 中"
"貢獻。）"

#: ../../whatsnew/3.10.rst:2246
msgid ""
"Removed ``_Py_CheckRecursionLimit`` variable: it has been replaced by "
"``ceval.recursion_limit`` of the :c:type:`PyInterpreterState` structure. "
"(Contributed by Victor Stinner in :issue:`41834`.)"
msgstr ""
"刪除了 ``_Py_CheckRecursionLimit`` 變數：它已被 :c:type:`PyInterpreterState` "
"結構的 ``ceval.recursion_limit`` 取代。（由 Victor Stinner 在 :issue:`41834` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2250
msgid ""
"Removed undocumented macros ``Py_ALLOW_RECURSION`` and "
"``Py_END_ALLOW_RECURSION`` and the ``recursion_critical`` field of the :c:"
"type:`PyInterpreterState` structure. (Contributed by Serhiy Storchaka in :"
"issue:`41936`.)"
msgstr ""
"刪除了未被說明文件記錄的巨集 ``Py_ALLOW_RECURSION`` 和 "
"``Py_END_ALLOW_RECURSION`` 以及 :c:type:`PyInterpreterState` 結構的 "
"``recursion_ritic`` 欄位。（由 Serhiy Storchaka 在 :issue:`41936` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2255
msgid ""
"Removed the undocumented ``PyOS_InitInterrupts()`` function. Initializing "
"Python already implicitly installs signal handlers: see :c:member:`PyConfig."
"install_signal_handlers`. (Contributed by Victor Stinner in :issue:`41713`.)"
msgstr ""
"刪除了未被說明文件記錄的 ``PyOS_InitInterrupts()`` 函式。初始化 Python 已經隱"
"式安裝信號處理程式：請參閱 :c:member:`PyConfig.install_signal_handlers`。"
"（由 Victor Stinner 在 :issue:`41713` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2260
msgid ""
"Remove the ``PyAST_Validate()`` function. It is no longer possible to build "
"a AST object (``mod_ty`` type) with the public C API. The function was "
"already excluded from the limited C API (:pep:`384`). (Contributed by Victor "
"Stinner in :issue:`43244`.)"
msgstr ""
"刪除 ``PyAST_Validate()`` 函式。不再可能使用公開 C API 來建置 AST 物件"
"（``mod_ty`` 類型）。該函式已被排除在受限 C API 之外 (:pep:`384`)。（由 "
"Victor Stinner 在 :issue:`43244` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2265
msgid "Remove the ``symtable.h`` header file and the undocumented functions:"
msgstr "刪除 ``symtable.h`` 標頭檔和未被說明文件記錄的函式："

#: ../../whatsnew/3.10.rst:2267
msgid "``PyST_GetScope()``"
msgstr "``PyST_GetScope()``"

#: ../../whatsnew/3.10.rst:2268
msgid "``PySymtable_Build()``"
msgstr "``PySymtable_Build()``"

#: ../../whatsnew/3.10.rst:2269
msgid "``PySymtable_BuildObject()``"
msgstr "``PySymtable_BuildObject()``"

#: ../../whatsnew/3.10.rst:2270
msgid "``PySymtable_Free()``"
msgstr "``PySymtable_Free()``"

#: ../../whatsnew/3.10.rst:2271
msgid "``Py_SymtableString()``"
msgstr "``Py_SymtableString()``"

#: ../../whatsnew/3.10.rst:2272
msgid "``Py_SymtableStringObject()``"
msgstr "``Py_SymtableStringObject()``"

#: ../../whatsnew/3.10.rst:2274
msgid ""
"The ``Py_SymtableString()`` function was part the stable ABI by mistake but "
"it could not be used, because the ``symtable.h`` header file was excluded "
"from the limited C API."
msgstr ""
"``Py_SymtableString()`` 函式錯誤地成為穩定 ABI 的一部分，但它因為 ``symtable."
"h`` 標頭檔被排除在受限 C API 之外而無法使用。"

#: ../../whatsnew/3.10.rst:2278
msgid ""
"Use Python :mod:`symtable` module instead. (Contributed by Victor Stinner "
"in :issue:`43244`.)"
msgstr ""
"請改用 Python :mod:`symtable` 模組。（由 Victor Stinner 在 :issue:`43244` 中"
"貢獻。）"

#: ../../whatsnew/3.10.rst:2281
msgid ""
"Remove :c:func:`PyOS_ReadlineFunctionPointer` from the limited C API headers "
"and from ``python3.dll``, the library that provides the stable ABI on "
"Windows. Since the function takes a ``FILE*`` argument, its ABI stability "
"cannot be guaranteed. (Contributed by Petr Viktorin in :issue:`43868`.)"
msgstr ""
"從受限 C API 標頭和 ``python3.dll`` （在 Windows 上提供穩定 ABI 的函式庫）中"
"刪除 :c:func:`PyOS_ReadlineFunctionPointer`。由於該函式採用 FILE* 引數，因此"
"無法保證其 ABI 穩定性。（由 Petr Viktorin 在 :issue:`43868` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2287
msgid ""
"Remove ``ast.h``, ``asdl.h``, and ``Python-ast.h`` header files. These "
"functions were undocumented and excluded from the limited C API. Most names "
"defined by these header files were not prefixed by ``Py`` and so could "
"create names conflicts. For example, ``Python-ast.h`` defined a ``Yield`` "
"macro which was conflict with the ``Yield`` name used by the Windows "
"``<winbase.h>`` header. Use the Python :mod:`ast` module instead. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr ""
"刪除 ``ast.h``、``asdl.h`` 和 ``Python-ast.h`` 標頭檔。這些函式沒有文件記錄，"
"並且被排除在受限 C API 之外。這些標頭檔定義的大多數名稱都沒有前綴 ``Py``，因"
"此可能會產生名稱衝突。例如，``Python-ast.h`` 定義了一個 ``Yield`` 巨集，它與 "
"Windows ``<winbase.h>`` 標頭使用的 ``Yield`` 有名稱衝突。請改用 Python :mod:"
"`ast` 模組。（由 Victor Stinner 在 :issue:`43244` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2295
msgid ""
"Remove the compiler and parser functions using ``struct _mod`` type, because "
"the public AST C API was removed:"
msgstr ""
"刪除編譯器和使用 ``struct _mod`` 的剖析器函式，因為公開 AST C API 已被刪除："

#: ../../whatsnew/3.10.rst:2298
msgid "``PyAST_Compile()``"
msgstr "``PyAST_Compile()``"

#: ../../whatsnew/3.10.rst:2299
msgid "``PyAST_CompileEx()``"
msgstr "``PyAST_CompileEx()``"

#: ../../whatsnew/3.10.rst:2300
msgid "``PyAST_CompileObject()``"
msgstr "``PyAST_CompileObject()``"

#: ../../whatsnew/3.10.rst:2301
msgid "``PyFuture_FromAST()``"
msgstr "``PyFuture_FromAST()``"

#: ../../whatsnew/3.10.rst:2302
msgid "``PyFuture_FromASTObject()``"
msgstr "``PyFuture_FromASTObject()``"

#: ../../whatsnew/3.10.rst:2303
msgid "``PyParser_ASTFromFile()``"
msgstr "``PyParser_ASTFromFile()``"

#: ../../whatsnew/3.10.rst:2304
msgid "``PyParser_ASTFromFileObject()``"
msgstr "``PyParser_ASTFromFileObject()``"

#: ../../whatsnew/3.10.rst:2305
msgid "``PyParser_ASTFromFilename()``"
msgstr "``PyParser_ASTFromFilename()``"

#: ../../whatsnew/3.10.rst:2306
msgid "``PyParser_ASTFromString()``"
msgstr "``PyParser_ASTFromString()``"

#: ../../whatsnew/3.10.rst:2307
msgid "``PyParser_ASTFromStringObject()``"
msgstr "``PyParser_ASTFromStringObject()``"

#: ../../whatsnew/3.10.rst:2309
msgid ""
"These functions were undocumented and excluded from the limited C API. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr ""
"這些函式沒有文件記錄，並且被排除在受限 C API 之外。（由 Victor Stinner 在 :"
"issue:`43244` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2312
msgid "Remove the ``pyarena.h`` header file with functions:"
msgstr "刪除包含以下函式的 ``pyarena.h`` 標頭檔："

#: ../../whatsnew/3.10.rst:2314
msgid "``PyArena_New()``"
msgstr "``PyArena_New()``"

#: ../../whatsnew/3.10.rst:2315
msgid "``PyArena_Free()``"
msgstr "``PyArena_Free()``"

#: ../../whatsnew/3.10.rst:2316
msgid "``PyArena_Malloc()``"
msgstr "``PyArena_Malloc()``"

#: ../../whatsnew/3.10.rst:2317
msgid "``PyArena_AddPyObject()``"
msgstr "``PyArena_AddPyObject()``"

#: ../../whatsnew/3.10.rst:2319
msgid ""
"These functions were undocumented, excluded from the limited C API, and were "
"only used internally by the compiler. (Contributed by Victor Stinner in :"
"issue:`43244`.)"
msgstr ""
"這些函式沒有文件記錄、被排除在受限 C API 之外，並僅被編譯器於內部使用。（由 "
"Victor Stinner 在 :issue:`43244` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2323
msgid ""
"The ``PyThreadState.use_tracing`` member has been removed to optimize "
"Python. (Contributed by Mark Shannon in :issue:`43760`.)"
msgstr ""
"為了 Python 最佳化，已刪除 ``PyThreadState.use_tracing`` 成員。（由 Mark "
"Shannon 在 :issue:`43760` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2328
msgid "Notable security feature in 3.10.7"
msgstr ""

#: ../../whatsnew/3.10.rst:2330
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""

#: ../../whatsnew/3.10.rst:2341
msgid "Notable security feature in 3.10.8"
msgstr ""

#: ../../whatsnew/3.10.rst:2343
msgid ""
"The deprecated :mod:`!mailcap` module now refuses to inject unsafe text "
"(filenames, MIME types, parameters) into shell commands. Instead of using "
"such text, it will warn and act as if a match was not found (or for test "
"commands, as if the test failed). (Contributed by Petr Viktorin in :gh:"
"`98966`.)"
msgstr ""

#: ../../whatsnew/3.10.rst:2350
msgid "Notable changes in 3.10.12"
msgstr ""

#: ../../whatsnew/3.10.rst:2353
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.10.rst:2355
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12, "
"use without the *filter* argument will show a :exc:`DeprecationWarning`. In "
"Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
