# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Translators:
# Matt Wang <mattwang44@gmail.com>, 2022
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2022-12-26 19:43+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../whatsnew/3.11.rst:3
msgid "What's New In Python 3.11"
msgstr "Python 3.11 有什麼新功能"

#: ../../whatsnew/3.11.rst:0
msgid "Release"
msgstr "發行版本"

#: ../../whatsnew/3.11.rst:5
msgid "|release|"
msgstr "|release|"

#: ../../whatsnew/3.11.rst:0
msgid "Date"
msgstr "日期"

#: ../../whatsnew/3.11.rst:6
msgid "|today|"
msgstr "|today|"

#: ../../whatsnew/3.11.rst:0
msgid "Editor"
msgstr "編輯者"

#: ../../whatsnew/3.11.rst:7
msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

#: ../../whatsnew/3.11.rst:49
msgid ""
"This article explains the new features in Python 3.11, compared to 3.10."
msgstr "此文章解釋了 Python 3.11 和 3.10 相比多了哪些新特性。"

#: ../../whatsnew/3.11.rst:51
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr "若想了解完整細節，請見\\ :ref:`更動日誌 <changelog>`。"

#: ../../whatsnew/3.11.rst:57
msgid "Summary -- Release highlights"
msgstr "發布重點摘要"

#: ../../whatsnew/3.11.rst:62
msgid ""
"Python 3.11 is between 10-60% faster than Python 3.10. On average, we "
"measured a 1.25x speedup on the standard benchmark suite. See :ref:"
"`whatsnew311-faster-cpython` for details."
msgstr ""
"Python 3.11 比 Python 3.10 快了 10-60%。我們使用了標準基準量測套裝軟體 "
"(benchmark suite) 測得平均加速了 1.25x。細節請見\\ :ref:`whatsnew311-faster-"
"cpython`。"

#: ../../whatsnew/3.11.rst:68
msgid "New syntax features:"
msgstr "新增語法特性："

#: ../../whatsnew/3.11.rst:70
msgid ":ref:`whatsnew311-pep654`"
msgstr ":ref:`whatsnew311-pep654`"

#: ../../whatsnew/3.11.rst:72
msgid "New built-in features:"
msgstr "新增內建特性："

#: ../../whatsnew/3.11.rst:74
msgid ":ref:`whatsnew311-pep678`"
msgstr ":ref:`whatsnew311-pep678`"

#: ../../whatsnew/3.11.rst:76
msgid "New standard library modules:"
msgstr "新增標準函式庫模組："

#: ../../whatsnew/3.11.rst:78
msgid ""
":pep:`680`: :mod:`tomllib` — Support for parsing `TOML <https://toml.io/>`_ "
"in the Standard Library"
msgstr ""
":pep:`680`：\\ :mod:`tomllib` — 在標準函式庫中支援 `TOML <https://toml.io/"
">`_ 檔案的剖析"

#: ../../whatsnew/3.11.rst:81
msgid "Interpreter improvements:"
msgstr "直譯器的改進："

#: ../../whatsnew/3.11.rst:83
msgid ":ref:`whatsnew311-pep657`"
msgstr ":ref:`whatsnew311-pep657`"

#: ../../whatsnew/3.11.rst:84
msgid ""
"New :option:`-P` command line option and :envvar:`PYTHONSAFEPATH` "
"environment variable to :ref:`disable automatically prepending potentially "
"unsafe paths <whatsnew311-pythonsafepath>` to :data:`sys.path`"
msgstr ""
"新增 :option:`-P` 命令列選項和 :envvar:`PYTHONSAFEPATH` 環境變數以停用自動"
"於 :data:`sys.path` 的開頭\\ :ref:`加上一個有潛在安全問題的路徑 <whatsnew311-"
"pythonsafepath>`"

#: ../../whatsnew/3.11.rst:88
msgid "New typing features:"
msgstr "新增型別特性："

#: ../../whatsnew/3.11.rst:90
msgid ":ref:`whatsnew311-pep646`"
msgstr ":ref:`whatsnew311-pep646`"

#: ../../whatsnew/3.11.rst:91
msgid ":ref:`whatsnew311-pep655`"
msgstr ":ref:`whatsnew311-pep655`"

#: ../../whatsnew/3.11.rst:92
msgid ":ref:`whatsnew311-pep673`"
msgstr ":ref:`whatsnew311-pep673`"

#: ../../whatsnew/3.11.rst:93
msgid ":ref:`whatsnew311-pep675`"
msgstr ":ref:`whatsnew311-pep675`"

#: ../../whatsnew/3.11.rst:94
msgid ":ref:`whatsnew311-pep681`"
msgstr ":ref:`whatsnew311-pep681`"

#: ../../whatsnew/3.11.rst:96
msgid "Important deprecations, removals and restrictions:"
msgstr "重要的棄用、移除與限制："

#: ../../whatsnew/3.11.rst:98
msgid ""
":pep:`594`: :ref:`Many legacy standard library modules have been deprecated "
"<whatsnew311-pep594>` and will be removed in Python 3.13"
msgstr ""
":pep:`594`：\\ :ref:`許多標準函式庫中的遺留模組已被棄用 <whatsnew311-"
"pep594>`\\ 且將於 Python 3.13 移除"

#: ../../whatsnew/3.11.rst:101
msgid ""
":pep:`624`: :ref:`Py_UNICODE encoder APIs have been removed <whatsnew311-"
"pep624>`"
msgstr ""
":pep:`624`：\\ :ref:`Py_UNICODE 編碼器 API 已被移除 <whatsnew311-pep624>`"

#: ../../whatsnew/3.11.rst:103
msgid ""
":pep:`670`: :ref:`Macros converted to static inline functions <whatsnew311-"
"pep670>`"
msgstr ":pep:`670`：\\ :ref:`轉換為靜態行內函式的巨集 <whatsnew311-pep670>`"

#: ../../whatsnew/3.11.rst:110 ../../whatsnew/3.11.rst:2175
msgid "New Features"
msgstr "新增特性"

#: ../../whatsnew/3.11.rst:115
msgid "PEP 657: Fine-grained error locations in tracebacks"
msgstr "PEP 657：回溯 (traceback) 中更細緻的錯誤位置"

#: ../../whatsnew/3.11.rst:117
msgid ""
"When printing tracebacks, the interpreter will now point to the exact "
"expression that caused the error, instead of just the line. For example:"
msgstr ""
"當要印出回溯，直譯器現在會指出造成錯誤的確切運算式，而非只說明是哪一行。例"
"如："

#: ../../whatsnew/3.11.rst:131
msgid ""
"Previous versions of the interpreter would point to just the line, making it "
"ambiguous which object was ``None``. These enhanced errors can also be "
"helpful when dealing with deeply nested :class:`dict` objects and multiple "
"function calls:"
msgstr ""
"前一版本的直譯器只會標明是哪一行，無法辨認哪一個物件是 ``None``。當處理多層的"
"巢狀 :class:`dict` 物件和多個函式呼叫時，這種強化錯誤提示也可能非常有用："

#: ../../whatsnew/3.11.rst:151
msgid "As well as complex arithmetic expressions:"
msgstr "在複雜的計算運算式中也是："

#: ../../whatsnew/3.11.rst:161
msgid ""
"Additionally, the information used by the enhanced traceback feature is made "
"available via a general API, that can be used to correlate :term:`bytecode` :"
"ref:`instructions <bytecodes>` with source code location. This information "
"can be retrieved using:"
msgstr ""
"此外，強化回溯特性所使用的資訊可以透過一般的 API 來取得，以用來使 :term:"
"`bytecode` :ref:`指示 (instruction) <bytecodes>`\\ 與原始碼位置相互關聯。此項"
"資訊可以用以下方式取得："

#: ../../whatsnew/3.11.rst:166
msgid "The :meth:`codeobject.co_positions` method in Python."
msgstr "Python 中的 :meth:`codeobject.co_positions` 方法。"

#: ../../whatsnew/3.11.rst:167
msgid "The :c:func:`PyCode_Addr2Location` function in the C API."
msgstr "C API 中的 :c:func:`PyCode_Addr2Location` 函式。"

#: ../../whatsnew/3.11.rst:169
msgid ""
"See :pep:`657` for more details. (Contributed by Pablo Galindo, Batuhan "
"Taskaya and Ammar Askar in :issue:`43950`.)"
msgstr ""
"詳情請見 :pep:`657`。（由 Pablo Galindo、Batuhan Taskaya 與 Ammar Askar 於 :"
"issue:`43950` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:173
msgid ""
"This feature requires storing column positions in :ref:`codeobjects`, which "
"may result in a small increase in interpreter memory usage and disk usage "
"for compiled Python files. To avoid storing the extra information and "
"deactivate printing the extra traceback information, use the :option:`-X "
"no_debug_ranges <-X>` command line option or the :envvar:"
"`PYTHONNODEBUGRANGES` environment variable."
msgstr ""
"這個特性必須要將欄的位置 (column position) 儲存於 :ref:`codeobjects`，這可能"
"會導致直譯器用於編譯 Python 檔案的記憶體使用量與硬碟使用量增加。為了避免儲存"
"多餘的資訊且停用印出多餘的回溯資訊，請用 :option:`-X no_debug_ranges <-X>` 命"
"令列選項或是 :envvar:`PYTHONNODEBUGRANGES` 環境變數。"

#: ../../whatsnew/3.11.rst:185
msgid "PEP 654: Exception Groups and ``except*``"
msgstr "PEP 654：例外群組與 ``except*``"

#: ../../whatsnew/3.11.rst:187
msgid ""
":pep:`654` introduces language features that enable a program to raise and "
"handle multiple unrelated exceptions simultaneously. The builtin types :exc:"
"`ExceptionGroup` and :exc:`BaseExceptionGroup` make it possible to group "
"exceptions and raise them together, and the new :keyword:`except* "
"<except_star>` syntax generalizes :keyword:`except` to match subgroups of "
"exception groups."
msgstr ""
":pep:`654` 引入了新的的語言特性，可讓程式同時引發並處理多個相互無關的例外。內"
"建型別 :exc:`ExceptionGroup` 和 :exc:`BaseExceptionGroup` 使得程式可為多個例"
"外組成群組並同時引發，新的 :keyword:`except* <except_star>` 語法也將 :"
"keyword:`except` 泛用化、能夠比對例外群組的子群組。"

#: ../../whatsnew/3.11.rst:194
msgid "See :pep:`654` for more details."
msgstr "詳情請見 :pep:`654`。"

#: ../../whatsnew/3.11.rst:196
msgid ""
"(Contributed by Irit Katriel in :issue:`45292`. PEP written by Irit Katriel, "
"Yury Selivanov and Guido van Rossum.)"
msgstr ""
"（由 Irit Katriel 於 :issue:`45292` 中所貢獻。PEP 由 Irit Katriel、Yury "
"Selivanov 與 Guido van Rossum 撰寫。）"

#: ../../whatsnew/3.11.rst:203
msgid "PEP 678: Exceptions can be enriched with notes"
msgstr "PEP 678：運用例外註解使其更加詳盡"

#: ../../whatsnew/3.11.rst:205
msgid ""
"The :meth:`~BaseException.add_note` method is added to :exc:`BaseException`. "
"It can be used to enrich exceptions with context information that is not "
"available at the time when the exception is raised. The added notes appear "
"in the default traceback."
msgstr ""
"新增 :meth:`~BaseException.add_note` 方法到 :exc:`BaseException`。當上下文資"
"訊在例外被引發時無法被取得，這個方法就可以用來為例外添加更多資訊。被添加的註"
"解會在預設回溯中出現。"

#: ../../whatsnew/3.11.rst:210
msgid "See :pep:`678` for more details."
msgstr "詳情請見 :pep:`678`。"

#: ../../whatsnew/3.11.rst:212
msgid ""
"(Contributed by Irit Katriel in :issue:`45607`. PEP written by Zac Hatfield-"
"Dodds.)"
msgstr ""
"（由 Irit Katriel 於 :issue:`45607` 中所貢獻。PEP 由 Zac Hatfield-Dodds 所撰"
"寫）"

#: ../../whatsnew/3.11.rst:219
msgid "Windows ``py.exe`` launcher improvements"
msgstr "Windows ``py.exe`` 啟動程式 (launcher) 的改進"

#: ../../whatsnew/3.11.rst:221
msgid ""
"The copy of the :ref:`launcher` included with Python 3.11 has been "
"significantly updated. It now supports company/tag syntax as defined in :pep:"
"`514` using the ``-V:<company>/<tag>`` argument instead of the limited ``-"
"<major>.<minor>``. This allows launching distributions other than "
"``PythonCore``, the one hosted on `python.org <https://python.org>`_."
msgstr ""
"Python 3.11 所包含的 :ref:`launcher` 複製品有了顯著的改善。它現在支援 :pep:"
"`514` 所定義的公司/標籤 (tag) 語法，可用 ``-V:<company>/<tag>`` 引數來取代受"
"限的 ``-<major>.<minor>``。這允許了 `python.org <https://python.org>`_ 上的 "
"``PythonCore`` 以外的發行版本發布。"

#: ../../whatsnew/3.11.rst:227
msgid ""
"When using ``-V:`` selectors, either company or tag can be omitted, but all "
"installs will be searched. For example, ``-V:OtherPython/`` will select the "
"\"best\" tag registered for ``OtherPython``, while ``-V:3.11`` or ``-"
"V:/3.11`` will select the \"best\" distribution with tag ``3.11``."
msgstr ""
"使用 ``-V:`` 選擇器時，可以省略公司或標籤，但會搜索所有安裝。例如，``-V:"
"OtherPython/`` 將選擇 ``OtherPython`` 註冊的「最佳」標籤，而 ``-V:3.11`` 或 "
"``-V:/3.11`` 將選擇帶有 ``3.11`` 標籤的「最佳」發行版。"

#: ../../whatsnew/3.11.rst:232
msgid ""
"When using the legacy ``-<major>``, ``-<major>.<minor>``, ``-<major>-"
"<bitness>`` or ``-<major>.<minor>-<bitness>`` arguments, all existing "
"behaviour should be preserved from past versions, and only releases from "
"``PythonCore`` will be selected. However, the ``-64`` suffix now implies "
"\"not 32-bit\" (not necessarily x86-64), as there are multiple supported 64-"
"bit platforms. 32-bit runtimes are detected by checking the runtime's tag "
"for a ``-32`` suffix. All releases of Python since 3.5 have included this in "
"their 32-bit builds."
msgstr ""
"當使用遺留的 ``-<major>``、``-<major>.<minor>``、``-<major>-<bitness>`` 或 "
"``-<major>.<minor>-<bitness>`` 引數時，所有過去版本的行為都應該保留下來，且只"
"有 ``PythonCore`` 中的發布版本會被選用。然而，``-64`` 後綴現在暗示了「非 32-"
"bit」（不用一定要是 x86-64），因為現在有多個支援 64-bit 的平台。32-bit 運行程"
"式會在檢查運行程式之標籤是否帶有 ``-32`` 後綴時被偵測出來。所有 Python 3.5 以"
"後發布版本的 32-bit 建置中都有這個行為。"

#: ../../whatsnew/3.11.rst:246
msgid "New Features Related to Type Hints"
msgstr "型別提示相關的新特性"

#: ../../whatsnew/3.11.rst:248
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr ""
"這個部分涵蓋影響 :pep:`484` 型別提示 (type hints) 與 :mod:`typing` 模組的重大"
"變更。"

#: ../../whatsnew/3.11.rst:255
msgid "PEP 646: Variadic generics"
msgstr "PEP 646：可變參數泛型 (variadic generics)"

#: ../../whatsnew/3.11.rst:257
msgid ""
":pep:`484` previously introduced :data:`~typing.TypeVar`, enabling creation "
"of generics parameterised with a single type. :pep:`646` adds :data:`~typing."
"TypeVarTuple`, enabling parameterisation with an *arbitrary* number of "
"types. In other words, a :data:`~typing.TypeVarTuple` is a *variadic* type "
"variable, enabling *variadic* generics."
msgstr ""
":pep:`484` 先前引入了 :data:`~typing.TypeVar`，開啟了帶有單一型別的泛型參數"
"化。:pep:`646` 新增 :data:`~typing.TypeVarTuple`，開啟了帶有\\ *任意*\\ 數量"
"型別的參數化 (parameterisation)。換句話說，:data:`~typing.TypeVarTuple` 是\\ "
"*可變的*\\ 型別變數，啟用了\\ *可變的*\\ 泛型。"

#: ../../whatsnew/3.11.rst:264
msgid ""
"This enables a wide variety of use cases. In particular, it allows the type "
"of array-like structures in numerical computing libraries such as NumPy and "
"TensorFlow to be parameterised with the array *shape*. Static type checkers "
"will now be able to catch shape-related bugs in code that uses these "
"libraries."
msgstr ""
"這使其有非常多用例，特別是它允許了像是 NumPy 和 Tensorflow 的數值運算函式庫中"
"類似陣列結構的型別可用 *shape* 陣列來被參數化。靜態型別檢查工具現在也能夠為使"
"用這些函式庫的程式捕捉到維度相關的錯誤。"

#: ../../whatsnew/3.11.rst:270
msgid "See :pep:`646` for more details."
msgstr "詳情請見 :pep:`646`。"

#: ../../whatsnew/3.11.rst:272
msgid ""
"(Contributed by Matthew Rahtz in :issue:`43224`, with contributions by "
"Serhiy Storchaka and Jelle Zijlstra. PEP written by Mark Mendoza, Matthew "
"Rahtz, Pradeep Kumar Srinivasan, and Vincent Siles.)"
msgstr ""
"（由 Matthew Rahtz 於 :issue:`43224` 中所貢獻，由 Serhiy Storchaka 與 Jelle "
"Zijlstra 協助。PEP 由 Mark Mendoza、Matthew Rahtz、Pradeep Kumar Srinivasan "
"與 Vincent Siles 所撰寫）"

#: ../../whatsnew/3.11.rst:280
msgid ""
"PEP 655: Marking individual ``TypedDict`` items as required or not-required"
msgstr "PEP 655：標記獨立 ``TypedDict`` 項目為必要或不必要"

#: ../../whatsnew/3.11.rst:282
msgid ""
":data:`~typing.Required` and :data:`~typing.NotRequired` provide a "
"straightforward way to mark whether individual items in a :class:`~typing."
"TypedDict` must be present. Previously, this was only possible using "
"inheritance."
msgstr ""
":data:`~typing.Required` 與 :data:`~typing.NotRequired` 提供了標記一個獨立項"
"目在 :class:`~typing.TypedDict` 中是否必須存在的直覺方法。在這之前，這只有透"
"過繼承才有可能做得到。"

#: ../../whatsnew/3.11.rst:287
msgid ""
"All fields are still required by default, unless the *total* parameter is "
"set to ``False``, in which case all fields are still not-required by "
"default. For example, the following specifies a :class:`!TypedDict` with one "
"required and one not-required key::"
msgstr ""
"所有欄位都預設為是必要的，除非 *total* 參數有被設為 ``False``，那麼所有欄位就"
"會是非必要的。例如，這個範例指定了要有一個必要鍵與一個非必要鍵的 :class:`!"
"TypedDict`："

#: ../../whatsnew/3.11.rst:301
msgid "The following definition is equivalent::"
msgstr ""
"以下定義等同於：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:307
msgid "See :pep:`655` for more details."
msgstr "詳情請見 :pep:`655`。"

#: ../../whatsnew/3.11.rst:309
msgid ""
"(Contributed by David Foster and Jelle Zijlstra in :issue:`47087`. PEP "
"written by David Foster.)"
msgstr ""
"（由 David Foster 與 Jelle Zijlstra 於 :issue:`47087` 中所貢獻。PEP 由 David "
"Foster 所撰寫）"

#: ../../whatsnew/3.11.rst:316
msgid "PEP 673: ``Self`` type"
msgstr "PEP 673：``Self`` 型別"

#: ../../whatsnew/3.11.rst:318
msgid ""
"The new :data:`~typing.Self` annotation provides a simple and intuitive way "
"to annotate methods that return an instance of their class. This behaves the "
"same as the :class:`~typing.TypeVar`-based approach :pep:`specified in PEP "
"484 <484#annotating-instance-and-class-methods>`, but is more concise and "
"easier to follow."
msgstr ""
"新的 :data:`~typing.Self` 標註提供了一種簡單直觀的方法來標註那些會回傳其類別"
"實例的方法。這與 :pep:`PEP 484 <484#annotating-instance-and-class-methods>` "
"中指定的基於 :class:`~typing.TypeVar` 的方法相同，但更簡潔且更易於遵循。"

#: ../../whatsnew/3.11.rst:324
msgid ""
"Common use cases include alternative constructors provided as :func:"
"`classmethod <classmethod>`\\s, and :meth:`~object.__enter__` methods that "
"return ``self``::"
msgstr ""
"常見用例包括作為 :func:`classmethod <classmethod>` 的替代建構函式和會回傳 "
"``self`` 的 :meth:`~object.__enter__` 方法：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:342
msgid ""
":data:`~typing.Self` can also be used to annotate method parameters or "
"attributes of the same type as their enclosing class."
msgstr ""
":data:`~typing.Self` 也可用於標註與其封閉類類別 (enclosing class) 相同的方法"
"參數或屬性。"

#: ../../whatsnew/3.11.rst:345
msgid "See :pep:`673` for more details."
msgstr "詳情請見 :pep:`673`。"

#: ../../whatsnew/3.11.rst:347
msgid ""
"(Contributed by James Hilton-Balfe in :issue:`46534`. PEP written by Pradeep "
"Kumar Srinivasan and James Hilton-Balfe.)"
msgstr ""
"（由 James Hilton-Balfe 於 :issue:`46534` 中所貢獻。PEP 由 Pradeep Kumar "
"Srinivasan 與 James Hilton-Balfe 所撰寫）"

#: ../../whatsnew/3.11.rst:354
msgid "PEP 675: Arbitrary literal string type"
msgstr "PEP 675：任意的文本字串型別 (Arbitrary literal string type)"

#: ../../whatsnew/3.11.rst:356
msgid ""
"The new :data:`~typing.LiteralString` annotation may be used to indicate "
"that a function parameter can be of any literal string type. This allows a "
"function to accept arbitrary literal string types, as well as strings "
"created from other literal strings. Type checkers can then enforce that "
"sensitive functions, such as those that execute SQL statements or shell "
"commands, are called only with static arguments, providing protection "
"against injection attacks."
msgstr ""
"新的 :data:`~typing.LiteralString` 標註可用於標示一個函式參數可為任何文本字串"
"型別 (literal string type)。這允許函式接受任意的文本字串型別，以及從其他文本"
"字串創建的字串。型別檢查器就可以強制需審慎處理的函式（例如會執行 SQL 陳述式"
"或 shell 命令的函式）僅會以靜態引數呼叫，從而提供針對注入攻擊的保護。"

#: ../../whatsnew/3.11.rst:364
msgid "For example, a SQL query function could be annotated as follows::"
msgstr ""
"例如一個 SQL 查詢函式 (query function) 可以被標註為：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:382
msgid "See :pep:`675` for more details."
msgstr "詳情請見 :pep:`675`。"

#: ../../whatsnew/3.11.rst:384
msgid ""
"(Contributed by Jelle Zijlstra in :issue:`47088`. PEP written by Pradeep "
"Kumar Srinivasan and Graham Bleaney.)"
msgstr ""
"（由 Jelle Zijlstra 於 :issue:`47088` 中所貢獻。PEP 由 Pradeep Kumar "
"Srinivasan 與 Graham Bleaney 所撰寫）"

#: ../../whatsnew/3.11.rst:391
msgid "PEP 681: Data class transforms"
msgstr "PEP 681：資料類別轉換 (Data class transforms)"

#: ../../whatsnew/3.11.rst:393
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class, giving it :func:"
"`dataclass <dataclasses.dataclass>`-like behaviors."
msgstr ""
":data:`~typing.dataclass_transform` 可以用來裝飾一個類別、元類別 "
"(metaclass)、或是一個本身就是裝飾器的函式。``@dataclass_transform()`` 的存在"
"會讓一個靜態型別檢查器知道被裝飾物件會在運行程式做出轉換類別的「魔法」，賦予"
"其類似 :func:`dataclass <dataclasses.dataclass>` 的行為。"

#: ../../whatsnew/3.11.rst:399
msgid "For example::"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:417
msgid "See :pep:`681` for more details."
msgstr "詳情請見 :pep:`681`。"

#: ../../whatsnew/3.11.rst:419
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`91860`. PEP written by Erik De Bonte "
"and Eric Traut.)"
msgstr ""
"（由 Jelle Zijlstra 於 :gh:`91860` 中所貢獻。PEP 由 Erik De Bonte 與 Eric "
"Traut 所撰寫）"

#: ../../whatsnew/3.11.rst:426
msgid "PEP 563 may not be the future"
msgstr "PEP 563 可能不是未來"

#: ../../whatsnew/3.11.rst:428
msgid ""
":pep:`563` Postponed Evaluation of Annotations (the ``from __future__ import "
"annotations`` :ref:`future statement <future>`) that was originally planned "
"for release in Python 3.10 has been put on hold indefinitely. See `this "
"message from the Steering Council <https://mail.python.org/archives/list/"
"python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__ for more "
"information."
msgstr ""
":pep:`563` 標註的推遲求值 (Postponed Evaluation of Annotations)（\\ ``from "
"__future__ import annotations`` :ref:`future 陳述式 <future>`\\ ）最初計劃在 "
"Python 3.10 中發布，但已被無限期擱置。請參閱\\ `來自指導委員會 (Steering "
"Counsil) 的訊息 <https://mail.python.org/archives/list/python-dev@python.org/"
"message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__\\ 以獲得更多資訊。"

#: ../../whatsnew/3.11.rst:439
msgid "Other Language Changes"
msgstr "其他語言更動"

#: ../../whatsnew/3.11.rst:441
msgid ""
"Starred unpacking expressions can now be used in :keyword:`for` statements. "
"(See :issue:`46725` for more details.)"
msgstr ""
"星號拆解 (starred unpacking) 運算式現在可以在 :keyword:`for` 陳述式中使用。"
"（詳情請見 :issue:`46725`。）"

#: ../../whatsnew/3.11.rst:444
msgid ""
"Asynchronous :ref:`comprehensions <comprehensions>` are now allowed inside "
"comprehensions in :ref:`asynchronous functions <async def>`. Outer "
"comprehensions implicitly become asynchronous in this case. (Contributed by "
"Serhiy Storchaka in :issue:`33346`.)"
msgstr ""
"非同步\\ :ref:`綜合運算 (comprehension) <comprehensions>` 現在允許在\\ :ref:`"
"非同步函式中的內部綜合運算 (inside comprehension) <async def>`。在這種情況"
"下，外部綜合運算 (outer comprehension) 隱晦地變成了非同步的了。 （由 Serhiy "
"Storchaka 在 :issue:`33346` 中貢獻。）"

#: ../../whatsnew/3.11.rst:449
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in :"
"keyword:`with` statements and :meth:`contextlib.ExitStack.enter_context` for "
"objects that do not support the :term:`context manager` protocol, and in :"
"keyword:`async with` statements and :meth:`contextlib.AsyncExitStack."
"enter_async_context` for objects not supporting the :term:`asynchronous "
"context manager` protocol. (Contributed by Serhiy Storchaka in :issue:"
"`12022` and :issue:`44471`.)"
msgstr ""
"現在在不支援 :term:`context manager` 協議的物件上使用 :keyword:`with` 陳述式"
"和 :meth:`contextlib.ExitStack.enter_context` 或在不支援 :term:`asynchronous "
"context manager` 協議的物件上使用 :keyword:`async with` 陳述式和 :meth:"
"`contextlib.AsyncExitStack.enter_async_context`，會引發 :exc:`TypeError` 而不"
"是 :exc:`AttributeError`。 （由 Serhiy Storchaka 在 :issue:`12022` 和 :issue:"
"`44471` 中貢獻。）"

#: ../../whatsnew/3.11.rst:457
msgid ""
"Added :meth:`object.__getstate__`, which provides the default implementation "
"of the :meth:`!__getstate__` method. :mod:`copy`\\ing and :mod:`pickle`\\ing "
"instances of subclasses of builtin types :class:`bytearray`, :class:`set`, :"
"class:`frozenset`, :class:`collections.OrderedDict`, :class:`collections."
"deque`, :class:`weakref.WeakSet`, and :class:`datetime.tzinfo` now copies "
"and pickles instance attributes implemented as :term:`slots <__slots__>`. "
"(Contributed by Serhiy Storchaka in :issue:`26579`.)"
msgstr ""
"添加了 :meth:`object.__getstate__`，它提供 :meth:`!__getstate__` 方法的預設實"
"作。內建型別 :class:`bytearray`、:class:`set`、:class:`frozenset`、:class:"
"`collections.OrderedDict`、:class:`collections.deque`、:class:`weakref."
"WeakSet` 和 :class:`datetime.tzinfo` 的 :mod:`copy` 和 :mod:`pickle` 實例，現"
"在會以 :term:`slots <__slots__>` 形式複製和 pickle 實例屬性。 （由 Serhiy "
"Storchaka 在 :issue:`26579` 中貢獻。）"

#: ../../whatsnew/3.11.rst:468
msgid ""
"Added a :option:`-P` command line option and a :envvar:`PYTHONSAFEPATH` "
"environment variable, which disable the automatic prepending to :data:`sys."
"path` of the script's directory when running a script, or the current "
"directory when using :option:`-c` and :option:`-m`. This ensures only stdlib "
"and installed modules are picked up by :keyword:`import`, and avoids "
"unintentionally or maliciously shadowing modules with those in a local (and "
"typically user-writable) directory. (Contributed by Victor Stinner in :gh:"
"`57684`.)"
msgstr ""
"新增了一個 :option:`-P` 命令列選項和一個 :envvar:`PYTHONSAFEPATH` 環境變數，"
"它們禁用了當使用 :option:`-c` 和 :option:`-m` 以在運行腳本或當前目錄時自動添"
"加到腳本目錄的 :data:`sys.path`。這確保只有 stdlib 和已安裝的模組會被 :"
"keyword:`import` 取用，以避免不小心或被惡意地將模組與本地（通常是使用者可寫入"
"的）目錄中的模組重疊。 （由 Victor Stinner 在 :gh:`57684` 中貢獻。）"

#: ../../whatsnew/3.11.rst:479
msgid ""
"A ``\"z\"`` option was added to the :ref:`formatspec` that coerces negative "
"to positive zero after rounding to the format precision. See :pep:`682` for "
"more details. (Contributed by John Belmonte in :gh:`90153`.)"
msgstr ""
"``\"z\"`` 選項被新增到 :ref:`formatspec`，它會強迫負的 0 在進位到格式精度後成"
"為正的。更多詳情請見 :pep:`682`。（由 John Belmonte 於 :gh:`90153` 中貢獻。）"

#: ../../whatsnew/3.11.rst:484
msgid ""
"Bytes are no longer accepted on :data:`sys.path`.  Support broke sometime "
"between Python 3.2 and 3.6, with no one noticing until after Python 3.10.0 "
"was released. In addition, bringing back support would be problematic due to "
"interactions between :option:`-b` and :data:`sys.path_importer_cache` when "
"there is a mixture of :class:`str` and :class:`bytes` keys. (Contributed by "
"Thomas Grainger in :gh:`91181`.)"
msgstr ""
":data:`sys.path` 不再接受位元組。支援已在 Python 3.2 和 3.6 之間的某個時間停"
"止，直到 Python 3.10.0 發布後才引起人們的注意。此外，由於混合使用 :class:"
"`str` 和 :class:`bytes` 鍵時 :option:`-b` 和 :data:`sys.path_importer_cache` "
"會出現的交互作用，恢復這項支援會出現問題。（由 Thomas Grainger 在 :gh:"
"`91181` 中貢獻。）"

#: ../../whatsnew/3.11.rst:495
msgid "Other CPython Implementation Changes"
msgstr "其他 CPython 實作更動"

#: ../../whatsnew/3.11.rst:497
msgid ""
"The special methods :meth:`~object.__complex__` for :class:`complex` and :"
"meth:`~object.__bytes__` for :class:`bytes` are implemented to support the :"
"class:`typing.SupportsComplex` and :class:`typing.SupportsBytes` protocols. "
"(Contributed by Mark Dickinson and Dong-hee Na in :issue:`24234`.)"
msgstr ""
"為支援 :class:`typing.SupportsComplex` 與 :class:`typing.SupportsBytes` 協"
"定，實作了 :class:`complex` 與 :class:`bytes` 的特殊方法 :meth:`~object."
"__complex__` 與 :meth:`~object.__bytes__`。（由 Mark Dickinson 和 Dong-hee "
"Na 於 :issue:`24234` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:502
msgid ""
"``siphash13`` is added as a new internal hashing algorithm. It has similar "
"security properties as ``siphash24``, but it is slightly faster for long "
"inputs. :class:`str`, :class:`bytes`, and some other types now use it as the "
"default algorithm for :func:`hash`. :pep:`552` :ref:`hash-based .pyc files "
"<pyc-invalidation>` now use ``siphash13`` too. (Contributed by Inada Naoki "
"in :issue:`29410`.)"
msgstr ""
"新增 ``siphash13`` 以作為內部的雜湊演算法，它有與 ``siphash24`` 相似的安全特"
"性，但是在處理較長的輸入時會更快一些。現在是 :class:`str`、:class:`bytes` 和"
"一些其他型別的 :func:`hash` 預設演算法。:pep:`552` :ref:`基於雜湊的 .pyc 檔"
"案 <pyc-invalidation>` 現在也使用 ``siphash13``。（由 Inada Naoki 於 :issue:"
"`29410` 中貢獻。）"

#: ../../whatsnew/3.11.rst:511
msgid ""
"When an active exception is re-raised by a :keyword:`raise` statement with "
"no parameters, the traceback attached to this exception is now always ``sys."
"exc_info()[1].__traceback__``. This means that changes made to the traceback "
"in the current :keyword:`except` clause are reflected in the re-raised "
"exception. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"當一個仍有效的例外被 :keyword:`raise` 陳述式在沒有參數的情況下重新引發，被附"
"於該例外的追蹤資訊現在都會是 ``sys.exc_info()[1].__traceback__``。這代表對於"
"當前 :keyword:`except` 子句的追蹤上做的改動會反映在被重複引發的例外上。（由 "
"Irit Katriel 於 :issue:`45711` 中貢獻。）"

#: ../../whatsnew/3.11.rst:517
msgid ""
"The interpreter state's representation of handled exceptions (aka "
"``exc_info`` or ``_PyErr_StackItem``) now only has the ``exc_value`` field; "
"``exc_type`` and ``exc_traceback`` have been removed, as they can be derived "
"from ``exc_value``. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"有被處理的例外在直譯器狀態的表示（也就是 ``exc_info`` 或 "
"``_PyErr_StackItem``）現在只會有 ``exc_value`` 欄位；``exc_type`` 和 "
"``exc_traceback`` 已被移除，現在只能透過 ``exc_value`` 來取得它們。（由 Irit "
"Katriel 於 :issue:`45711` 中貢獻。）"

#: ../../whatsnew/3.11.rst:523
msgid ""
"A new :ref:`command line option <install-quiet-option>`, ``AppendPath``, has "
"been added for the Windows installer. It behaves similarly to "
"``PrependPath``, but appends the install and scripts directories instead of "
"prepending them. (Contributed by Bastian Neuburger in :issue:`44934`.)"
msgstr ""
"新增\\ :ref:`命令列選項 <install-quiet-option>` ``AppendPath``，已增加於 "
"Windows 安裝程式。它的行為類似於 ``PrependPath``，但在安裝和腳本目錄後面附加"
"而非新增於它們前面。 （由 Bastian Neuburger 在 :issue:`44934` 中貢獻。）"

#: ../../whatsnew/3.11.rst:529
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to "
"``1`` for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"初始化中若是要用 :c:member:`PyConfig.module_search_paths` 來初始化 :data:"
"`sys.path`，則現在 :c:member:`PyConfig.module_search_paths_set` 必須被設為 "
"1。否則，初始化會重新計算路徑並取代所有被加到 ``module_search_paths`` 的值。"

#: ../../whatsnew/3.11.rst:534
msgid ""
"The output of the :option:`--help` option now fits in 50 lines/80 columns. "
"Information about :ref:`Python environment variables <using-on-envvars>` "
"and :option:`-X` options is now available using the respective :option:`--"
"help-env` and :option:`--help-xoptions` flags, and with the new :option:`--"
"help-all`. (Contributed by Éric Araujo in :issue:`46142`.)"
msgstr ""
":option:`--help` 選項的輸出現在會在 50 列、80 欄的大小之內，:ref:`Python 環境"
"變數 <using-on-envvars>`\\ 和 :option:`-X` 選項的資訊現在能夠分別透過 :"
"option:`--help-env` 和 :option:`--help-xoptions` 旗標與 :option:`--help-all` "
"一起使用來取得。（由 Éric Araujo 於 :issue:`46142` 中貢獻。）"

#: ../../whatsnew/3.11.rst:541
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for `CVE-2020-10735 <https://"
"cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10735>`_. This limit can be "
"configured or disabled by environment variable, command line flag, or :mod:"
"`sys` APIs. See the :ref:`integer string conversion length limitation "
"<int_max_str_digits>` documentation.  The default limit is 4300 digits in "
"string form."
msgstr ""
"在除 2（binary、二進制）、4、8（octal、八進制）、16（hexadecimal、十六進制）"
"或 32 以外的基數中，例如以 10（decimal、十進制）為基數，進行 :class:`int` "
"和 :class:`str` 之間的轉換且字串形式的位數超過限制，現在會引發 :exc:"
"`ValueError`，以避免由於演算法複雜性而導致的潛在阻斷服務攻擊 (denial of "
"service attacks)。這是針對 `CVE-2020-10735 <https://cve.mitre.org/cgi-bin/"
"cvename.cgi?name=CVE-2020-10735>`_ 的緩解措施，可以透過環境變數、命令列旗標"
"或 :mod:`sys` API 來設定或禁用此限制。請參閱\\ :ref:`整數字串轉換長度限制 "
"<int_max_str_digits>` 文件。預設限制為字串形式的 4300 位數字。"

#: ../../whatsnew/3.11.rst:556
msgid "New Modules"
msgstr "新增模組"

#: ../../whatsnew/3.11.rst:558
msgid ""
":mod:`tomllib`: For parsing `TOML <https://toml.io/>`_. See :pep:`680` for "
"more details. (Contributed by Taneli Hukkinen in :issue:`40059`.)"
msgstr ""
":mod:`tomllib`：用於剖析 `TOML <https://toml.io/>`_。詳情請見 :pep:`680`。"
"（由 Taneli Hukkinen 於 :issue:`40059` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:562
msgid ""
":mod:`wsgiref.types`: :pep:`WSGI <3333>`-specific types for static type "
"checking. (Contributed by Sebastian Rittau in :issue:`42012`.)"
msgstr ""
":mod:`wsgiref.types`：\\ :pep:`WSGI <3333>` 限定型別，用於靜態型別檢查。"
"（Sebastian Rittau 於 :issue:`42012` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:570
msgid "Improved Modules"
msgstr "模組改進"

#: ../../whatsnew/3.11.rst:575
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.11.rst:577
msgid ""
"Added the :class:`~asyncio.TaskGroup` class, an :ref:`asynchronous context "
"manager <async-context-managers>` holding a group of tasks that will wait "
"for all of them upon exit. For new code this is recommended over using :func:"
"`~asyncio.create_task` and :func:`~asyncio.gather` directly. (Contributed by "
"Yury Selivanov and others in :gh:`90908`.)"
msgstr ""
"添加了 :class:`~asyncio.TaskGroup` 類別，為一個會持有任務群組並在退出時等待全"
"部完成的\\ :ref:`非同步情境管理器 (asynchronous context manager) <async-"
"context-managers>`。對於新程式碼，建議直接使用 :func:`~asyncio.create_task` "
"和 :func:`~asyncio.gather`。（由 Yury Selivanov 和其他人在 :gh:`90908` 中貢"
"獻。）"

#: ../../whatsnew/3.11.rst:584
msgid ""
"Added :func:`~asyncio.timeout`, an asynchronous context manager for setting "
"a timeout on asynchronous operations. For new code this is recommended over "
"using :func:`~asyncio.wait_for` directly. (Contributed by Andrew Svetlov in :"
"gh:`90927`.)"
msgstr ""
"新增 :func:`~asyncio.timeout`，是一個用來為一個非同步操作設置超時的非同步情境"
"管理器，新的程式建議直接使用它以取代 :func:`~asyncio.wait_for`。（由 Andrew "
"Svetlov 於 :gh:`90927` 貢獻。）"

#: ../../whatsnew/3.11.rst:589
msgid ""
"Added the :class:`~asyncio.Runner` class, which exposes the machinery used "
"by :func:`~asyncio.run`. (Contributed by Andrew Svetlov in :gh:`91218`.)"
msgstr ""
"新增 :class:`~asyncio.Runner` 類別，它會對外公布了 :func:`~asyncio.run` 的使"
"用機制。（由 Andrew Svetlov 於 :gh:`91218` 貢獻。）"

#: ../../whatsnew/3.11.rst:593
msgid ""
"Added the :class:`~asyncio.Barrier` class to the synchronization primitives "
"in the asyncio library, and the related :exc:`~asyncio.BrokenBarrierError` "
"exception. (Contributed by Yves Duprat and Andrew Svetlov in :gh:`87518`.)"
msgstr ""
"於 asyncio 函式庫的同步化原始物件中新增 :class:`~asyncio.Barrier` 類別與和其"
"相關的 :exc:`~asyncio.BrokenBarrierError` 例外。（由 Yves Duprat 和 Andrew "
"Svetlov in :gh:`87518` 貢獻。）"

#: ../../whatsnew/3.11.rst:598
msgid ""
"Added keyword argument *all_errors* to :meth:`asyncio.loop."
"create_connection` so that multiple connection errors can be raised as an :"
"exc:`ExceptionGroup`."
msgstr ""
"在 :meth:`asyncio.loop.create_connection` 新增關鍵字引數 *all_errors*，這樣多"
"個連接錯誤就可以一起用一個 :exc:`ExceptionGroup` 來引發。"

#: ../../whatsnew/3.11.rst:601
msgid ""
"Added the :meth:`asyncio.StreamWriter.start_tls` method for upgrading "
"existing stream-based connections to TLS. (Contributed by Ian Good in :issue:"
"`34975`.)"
msgstr ""
"新增 :meth:`asyncio.StreamWriter.start_tls` 方法，用來將已存在的串流連線升級"
"至 TLS。（由 Ian Good 於 :issue:`34975` 中貢獻。）"

#: ../../whatsnew/3.11.rst:605
msgid ""
"Added raw datagram socket functions to the event loop: :meth:`~asyncio.loop."
"sock_sendto`, :meth:`~asyncio.loop.sock_recvfrom` and :meth:`~asyncio.loop."
"sock_recvfrom_into`. These have implementations in :class:`~asyncio."
"SelectorEventLoop` and :class:`~asyncio.ProactorEventLoop`. (Contributed by "
"Alex Grönholm in :issue:`46805`.)"
msgstr ""
"在事件迴圈增加原始資料元 (raw datagram) socket 函式：:meth:`~asyncio.loop."
"sock_sendto`、:meth:`~asyncio.loop.sock_recvfrom` 和 :meth:`~asyncio.loop."
"sock_recvfrom_into`。以上在 :class:`~asyncio.SelectorEventLoop` 和 :class:"
"`~asyncio.ProactorEventLoop` 中都有實作。（由 Alex Grönholm 在 :issue:"
"`46805` 中貢獻。）"

#: ../../whatsnew/3.11.rst:613
msgid ""
"Added :meth:`~asyncio.Task.cancelling` and :meth:`~asyncio.Task.uncancel` "
"methods to :class:`~asyncio.Task`. These are primarily intended for internal "
"use, notably by :class:`~asyncio.TaskGroup`."
msgstr ""
"於 :class:`~asyncio.Task` 新增 :meth:`~asyncio.Task.cancelling` 和 :meth:"
"`~asyncio.Task.uncancel` 方法。這些預期是只用於內部，尤其是 :class:`~asyncio."
"TaskGroup`。"

#: ../../whatsnew/3.11.rst:622
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.11.rst:624
msgid ""
"Added non parallel-safe :func:`~contextlib.chdir` context manager to change "
"the current working directory and then restore it on exit. Simple wrapper "
"around :func:`~os.chdir`. (Contributed by Filipe Laíns in :issue:`25625`)"
msgstr ""
"添加了非平行安全的 :func:`~contextlib.chdir` 情境管理器來更改當前工作目錄，然"
"後在退出時恢復它。:func:`~os.chdir` 的簡單包裝器。（由 Filipe Laíns 在 :"
"issue:`25625` 中貢獻）"

#: ../../whatsnew/3.11.rst:632
msgid "dataclasses"
msgstr "dataclasses"

#: ../../whatsnew/3.11.rst:634
msgid ""
"Change field default mutability check, allowing only defaults which are :"
"term:`hashable` instead of any object which is not an instance of :class:"
"`dict`, :class:`list` or :class:`set`. (Contributed by Eric V. Smith in :"
"issue:`44674`.)"
msgstr ""
"更改欄位預設的可變性檢查 (mutability check)，僅允許預設值是 :term:`hashable` "
"而不是任何非 :class:`dict`、:class:`list` 或 :class:`set` 實例的物件。（由 "
"Eric V. Smith 在 :issue:`44674` 中貢獻。）"

#: ../../whatsnew/3.11.rst:643
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.11.rst:645
msgid ""
"Add :attr:`datetime.UTC`, a convenience alias for :attr:`datetime.timezone."
"utc`. (Contributed by Kabir Kwatra in :gh:`91973`.)"
msgstr ""
"新增 :attr:`datetime.UTC`，一個 :attr:`datetime.timezone.utc` 的方便別名。"
"（由 Kabir Kwatra 於 :gh:`91973` 所貢獻。）"

#: ../../whatsnew/3.11.rst:648
msgid ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` "
"and :meth:`datetime.datetime.fromisoformat` can now be used to parse most "
"ISO 8601 formats (barring only those that support fractional hours and "
"minutes). (Contributed by Paul Ganssle in :gh:`80010`.)"
msgstr ""
":meth:`datetime.date.fromisoformat`、:meth:`datetime.time.fromisoformat` 和 :"
"meth:`datetime.datetime.fromisoformat` 現在可以用來剖析大部分的 ISO 8601 格式"
"（除了那些支援分數形式的小時與分鐘）。（由 Paul Ganssle 於 :gh:`80010` 中所貢"
"獻。）"

#: ../../whatsnew/3.11.rst:657
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.11.rst:659
msgid ""
"Renamed :class:`!EnumMeta` to :class:`~enum.EnumType` (:class:`!EnumMeta` "
"kept as an alias)."
msgstr ""
":class:`!EnumMeta` 更名為 :class:`~enum.EnumType`\\ （:class:`!EnumMeta` 保留"
"為別名）。"

#: ../../whatsnew/3.11.rst:662
msgid ""
"Added :class:`~enum.StrEnum`, with members that can be used as (and must be) "
"strings."
msgstr "增加 :class:`~enum.StrEnum`，枚舉 (enum) 內的成員必須是字串。"

#: ../../whatsnew/3.11.rst:665
msgid ""
"Added :class:`~enum.ReprEnum`, which only modifies the :meth:`~object."
"__repr__` of members while returning their literal values (rather than "
"names) for :meth:`~object.__str__` and :meth:`~object.__format__` (used by :"
"func:`str`, :func:`format` and :term:`f-string`\\s)."
msgstr ""
"新增 :class:`~enum.ReprEnum`，它只修改成員的 :meth:`~object.__repr__`，同時回"
"傳成員的文本值 (literal value)（而不是名稱），以用於（為 :func:`str`、:func:"
"`format` 和 :term:`f-string` 所使用的）\\ :meth:`~object.__str__` 和 :meth:"
"`~object.__format__`。"

#: ../../whatsnew/3.11.rst:671
msgid ""
"Changed :class:`~enum.IntEnum`, :class:`~enum.IntFlag` and :class:`~enum."
"StrEnum` to now inherit from :class:`~enum.ReprEnum`, so their :func:`str` "
"output now matches :func:`format` (both ``str(AnIntEnum.ONE)`` and "
"``format(AnIntEnum.ONE)`` return ``'1'``, whereas before ``str(AnIntEnum."
"ONE)`` returned ``'AnIntEnum.ONE'``."
msgstr ""
"更改 :class:`~enum.IntEnum`、:class:`~enum.IntFlag` 和 :class:`~enum."
"StrEnum` 以繼承自 :class:`~enum.ReprEnum`，所以它們的 :func:`str` 輸出現在"
"與 :func:`format` 相符（``str(AnIntEnum.ONE)`` 和 ``format(AnIntEnum.ONE)`` "
"都回傳 ``'1'``，但過去 ``str(AnIntEnum.ONE)`` 會回傳 ``'AnIntEnum.ONE'``）。"

#: ../../whatsnew/3.11.rst:677
msgid ""
"Changed :meth:`Enum.__format__() <enum.Enum.__format__>` (the default for :"
"func:`format`, :meth:`str.format` and :term:`f-string`\\s) of enums with "
"mixed-in types (e.g. :class:`int`, :class:`str`) to also include the class "
"name in the output, not just the member's key. This matches the existing "
"behavior of :meth:`enum.Enum.__str__`, returning e.g. ``'AnEnum.MEMBER'`` "
"for an enum ``AnEnum(str, Enum)`` instead of just ``'MEMBER'``."
msgstr ""
"改變了具有混合型別（例如 :class:`int`、:class:`str`）枚舉的（被 :func:"
"`format`、:meth:`str.format` 和 :term:`f-string` 預設使用的） :meth:`Enum."
"__format__() <enum.Enum.__format__>`，以在輸出中也包含類別名稱，而不僅有成員"
"的鍵。這與 :meth:`enum.Enum.__str__` 的現有行為相符，例如用於枚舉 "
"``AnEnum(str, Enum)`` 則會回傳 ``'AnEnum.MEMBER'`` 而不僅是 ``'MEMBER'``。"

#: ../../whatsnew/3.11.rst:685
msgid ""
"Added a new *boundary* class parameter to :class:`~enum.Flag` enums and the :"
"class:`~enum.FlagBoundary` enum with its options, to control how to handle "
"out-of-range flag values."
msgstr ""
"新增 *boundary* 類別參數與其選項到 :class:`~enum.Flag` 枚舉和 :class:`~enum."
"FlagBoundary` 枚舉以控制處理超出範圍旗標數值的方法。"

#: ../../whatsnew/3.11.rst:689
msgid ""
"Added the :func:`~enum.verify` enum decorator and the :class:`~enum."
"EnumCheck` enum with its options, to check enum classes against several "
"specific constraints."
msgstr ""
"新增了 :func:`~enum.verify` 枚舉裝飾器和 :class:`~enum.EnumCheck` 枚舉及其選"
"項，以根據幾個特定限制檢查枚舉類別。"

#: ../../whatsnew/3.11.rst:693
msgid ""
"Added the :func:`~enum.member` and :func:`~enum.nonmember` decorators, to "
"ensure the decorated object is/is not converted to an enum member."
msgstr ""
"新增 :func:`~enum.member` 與 :func:`~enum.nonmember` 裝飾器以確保被裝飾的物件"
"會/不會被轉換成一個枚舉成員。"

#: ../../whatsnew/3.11.rst:696
msgid ""
"Added the :func:`~enum.property` decorator, which works like :func:"
"`property` except for enums. Use this instead of :func:`types."
"DynamicClassAttribute`."
msgstr ""
"新增 :func:`~enum.property` 裝飾器，它的作用類似 :func:`property` 但是是用於"
"枚舉，用以替代 :func:`types.DynamicClassAttribute`。"

#: ../../whatsnew/3.11.rst:700
msgid ""
"Added the :func:`~enum.global_enum` enum decorator, which adjusts :meth:"
"`~object.__repr__` and :meth:`~object.__str__` to show values as members of "
"their module rather than the enum class. For example, ``'re.ASCII'`` for "
"the :data:`~re.ASCII` member of :class:`re.RegexFlag` rather than "
"``'RegexFlag.ASCII'``."
msgstr ""
"新增 :func:`~enum.global_enum` 枚舉裝飾器，用來調整 :meth:`~object.__repr__` "
"和 :meth:`~object.__str__` 以模組成員形式而非枚舉類別來顯示值。例如，:class:"
"`re.RegexFlag` 的 :data:`~re.ASCII` 成員的 ``'re.ASCII'``，而非 ``'RegexFlag."
"ASCII'``。"

#: ../../whatsnew/3.11.rst:706
msgid ""
"Enhanced :class:`~enum.Flag` to support :func:`len`, iteration and :keyword:"
"`in`/:keyword:`not in` on its members. For example, the following now works: "
"``len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)``"
msgstr ""
"強化 :class:`~enum.Flag` 以支援使用 :func:`len`、疊代 (iteration) 和 :"
"keyword:`in`/:keyword:`not in` 於其成員。例如，以下程式現在能夠作用了："
"``len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)``"

#: ../../whatsnew/3.11.rst:711
msgid ""
"Changed :class:`~enum.Enum` and :class:`~enum.Flag` so that members are now "
"defined before :meth:`~object.__init_subclass__` is called; :func:`dir` now "
"includes methods, etc., from mixed-in data types."
msgstr ""
"更改了 :class:`~enum.Enum` 和 :class:`~enum.Flag` 以在呼叫 :meth:`~object."
"__init_subclass__` 之前就定義成員；:func:`dir` 現在包括來自混合資料型別的方"
"法。"

#: ../../whatsnew/3.11.rst:716
msgid ""
"Changed :class:`~enum.Flag` to only consider primary values (power of two) "
"canonical while composite values (``3``, ``6``, ``10``, etc.) are considered "
"aliases; inverted flags are coerced to their positive equivalent."
msgstr ""
"更改 :class:`~enum.Flag` 以僅考慮主要值（2 的次方）規範，而複合值（``3``、"
"``6``、``10`` 等）被視為別名；倒置旗標 (inverted flags) 會被強制轉換為正等價"
"的值。"

#: ../../whatsnew/3.11.rst:725
msgid "fcntl"
msgstr "fcntl"

#: ../../whatsnew/3.11.rst:727
msgid ""
"On FreeBSD, the :data:`!F_DUP2FD` and :data:`!F_DUP2FD_CLOEXEC` flags "
"respectively are supported, the former equals to ``dup2`` usage while the "
"latter set the ``FD_CLOEXEC`` flag in addition."
msgstr ""
"FreeBSD 上，:data:`!F_DUP2FD` 和 :data:`!F_DUP2FD_CLOEXEC` 旗標分別有被支援，"
"前者等同於 ``dup2`` 用法，而後者設定了 ``FD_CLOEXEC`` 旗標。"

#: ../../whatsnew/3.11.rst:735
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.11.rst:737
msgid ""
"Support :PEP:`515`-style initialization of :class:`~fractions.Fraction` from "
"string.  (Contributed by Sergey B Kirpichev in :issue:`44258`.)"
msgstr ""
"支援有 :PEP:`515` 風格的 :class:`~fractions.Fraction` 以字串初始化。（Sergey "
"B Kirpichev 於 :issue:`44258` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:740
msgid ""
":class:`~fractions.Fraction` now implements an ``__int__`` method, so that "
"an ``isinstance(some_fraction, typing.SupportsInt)`` check passes. "
"(Contributed by Mark Dickinson in :issue:`44547`.)"
msgstr ""
":class:`~fractions.Fraction` 現在有實作了一個 ``__int__`` 方法，因此 "
"``isinstance(some_fraction, typing.SupportsInt)`` 的檢查會通過。（由 Mark "
"Dickinson 在 :issue:`44547` 中貢獻。）"

#: ../../whatsnew/3.11.rst:748
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.11.rst:750
msgid ""
":func:`functools.singledispatch` now supports :data:`types.UnionType` and :"
"data:`typing.Union` as annotations to the dispatch argument.::"
msgstr ""
":func:`functools.singledispatch` 現在支援 :data:`types.UnionType` 和 :data:"
"`typing.Union` 作為調度 (dispatch) 引數的標註。\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:775
msgid "(Contributed by Yurii Karabas in :issue:`46014`.)"
msgstr "（由 Yurii Karabas 於 :issue:`46014` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:781
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.11.rst:783
msgid ""
":func:`hashlib.blake2b` and :func:`hashlib.blake2s` now prefer `libb2`_ over "
"Python's vendored copy. (Contributed by Christian Heimes in :issue:`47095`.)"
msgstr ""
":func:`hashlib.blake2b` 與 :func:`hashlib.blake2s` 現在偏好使用 `libb2`_ 多"
"於 Python 自發行版的複製。（由 Christian Heimes 於 :issue:`47095` 中所貢"
"獻。）"

#: ../../whatsnew/3.11.rst:787
msgid ""
"The internal ``_sha3`` module with SHA3 and SHAKE algorithms now uses "
"*tiny_sha3* instead of the *Keccak Code Package* to reduce code and binary "
"size. The :mod:`hashlib` module prefers optimized SHA3 and SHAKE "
"implementations from OpenSSL. The change affects only installations without "
"OpenSSL support. (Contributed by Christian Heimes in :issue:`47098`.)"
msgstr ""
"帶有 SHA3 和 SHAKE 演算法的內部 ``_sha3`` 模組現在使用 *tiny_sha3* 而不是 "
"*Keccak 程式碼套件*\\ 來減少程式碼和二進位檔案大小。:mod:`hashlib` 模組更喜歡"
"來自 OpenSSL 的 SHA3 和 SHAKE 最佳化實作。此更改僅影響沒有 OpenSSL 支援的安"
"裝。（由 Christian Heimes 在 :issue:`47098` 中貢獻。）"

#: ../../whatsnew/3.11.rst:794
msgid ""
"Add :func:`hashlib.file_digest`, a helper function for efficient hashing of "
"files or file-like objects. (Contributed by Christian Heimes in :gh:`89313`.)"
msgstr ""
"新增 :func:`hashlib.file_digest`，是個能夠為檔案或類檔案物件做高效率雜湊的幫"
"助函式。（由 Christian Heimes 於 :gh:`89313` 中貢獻。）"

#: ../../whatsnew/3.11.rst:802
msgid "IDLE and idlelib"
msgstr "IDLE 與 idlelib"

#: ../../whatsnew/3.11.rst:804
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"在 `.pyi` 檔案施用語法突顯 (syntax highlight)。（由 Alex Waygood 與 Terry "
"Jan Reedy 於 :issue:`45447` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:807
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr ""
"當帶有輸入與輸出地儲存 Shell 時，也會包含提示字元。（由 Terry Jan Reedy 於 :"
"gh:`95191` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:814
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.11.rst:816
msgid ""
"Add :func:`~inspect.getmembers_static` to return all members without "
"triggering dynamic lookup via the descriptor protocol. (Contributed by "
"Weipeng Hong in :issue:`30533`.)"
msgstr ""
"添加 :func:`~inspect.getmembers_static` 以回傳所有成員，而不會通過描述器協議 "
"(descriptor protocol) 觸發動態查找。 （由 Weipeng Hong 在 :issue:`30533` 中貢"
"獻。）"

#: ../../whatsnew/3.11.rst:820
msgid ""
"Add :func:`~inspect.ismethodwrapper` for checking if the type of an object "
"is a :class:`~types.MethodWrapperType`. (Contributed by Hakan Çelik in :"
"issue:`29418`.)"
msgstr ""
"新增 :func:`inspect.ismethodwrapper`，用來檢查一個物件的型別是否為 :class:"
"`~types.MethodWrapperType`。（由 Hakan Çelik 於 :issue:`29418` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:824
msgid ""
"Change the frame-related functions in the :mod:`inspect` module to return "
"new :class:`~inspect.FrameInfo` and :class:`~inspect.Traceback` class "
"instances (backwards compatible with the previous :term:`named tuple`-like "
"interfaces) that includes the extended :pep:`657` position information (end "
"line number, column and end column). The affected functions are:"
msgstr ""
"更改 :mod:`inspect` 模組中與幀相關的函數以回傳新的 :class:`~inspect."
"FrameInfo` 和 :class:`~inspect.Traceback` 類別實例（向後相容之前類似於 :term:"
"`named tuple` 的介面），包括擴充的 :pep:`657` 位置資訊（結束行號、欄和結束"
"欄）。受影響的功能是："

#: ../../whatsnew/3.11.rst:830
msgid ":func:`inspect.getframeinfo`"
msgstr ":func:`inspect.getframeinfo`"

#: ../../whatsnew/3.11.rst:831
msgid ":func:`inspect.getouterframes`"
msgstr ":func:`inspect.getouterframes`"

#: ../../whatsnew/3.11.rst:832
msgid ":func:`inspect.getinnerframes`,"
msgstr ":func:`inspect.getinnerframes`,"

#: ../../whatsnew/3.11.rst:833
msgid ":func:`inspect.stack`"
msgstr ":func:`inspect.stack`"

#: ../../whatsnew/3.11.rst:834
msgid ":func:`inspect.trace`"
msgstr ":func:`inspect.trace`"

#: ../../whatsnew/3.11.rst:836
msgid "(Contributed by Pablo Galindo in :gh:`88116`.)"
msgstr "（由 Pablo Galindo 於 :gh:`88116` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:842
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.11.rst:844
msgid ""
"Add :func:`locale.getencoding` to get the current locale encoding. It is "
"similar to ``locale.getpreferredencoding(False)`` but ignores the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"新增 :func:`locale.getencoding` 以取得當前的區域編碼 (locale encoding)。和 "
"``locale.getpreferredencoding(False)`` 類似但不考慮 :ref:`Python UTF-8 模式 "
"<utf8-mode>`。"

#: ../../whatsnew/3.11.rst:852
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.11.rst:854
msgid ""
"Added :func:`~logging.getLevelNamesMapping` to return a mapping from logging "
"level names (e.g. ``'CRITICAL'``) to the values of their corresponding :ref:"
"`levels` (e.g. ``50``, by default). (Contributed by Andrei Kulakovin in :gh:"
"`88024`.)"
msgstr ""
"新增 :func:`~logging.getLevelNamesMapping` 以回傳一個日誌級別名稱（例如 "
"``'CRITICAL'``）指到對應的 :ref:`levels` 數值（例如，預設為 ``50``）的映射。"
"（由 Andrei Kulakovin 於 :gh:`88024` 中貢獻。）"

#: ../../whatsnew/3.11.rst:859
msgid ""
"Added a :meth:`~logging.handlers.SysLogHandler.createSocket` method to :"
"class:`~logging.handlers.SysLogHandler`, to match :meth:`SocketHandler."
"createSocket() <logging.handlers.SocketHandler.createSocket>`. It is called "
"automatically during handler initialization and when emitting an event, if "
"there is no active socket. (Contributed by Kirill Pinchuk in :gh:`88457`.)"
msgstr ""
"添加了一個 :meth:`~logging.handlers.SysLogHandler.createSocket` 方法到 :"
"class:`~logging.handlers.SysLogHandler`，以匹配 :meth:`SocketHandler."
"createSocket() <logging.handlers.SocketHandler.createSocket>` 。如果沒有已啟"
"用的 socket，它會在處理程式初始化期間和發出一個事件時自動呼叫。 （由 Kirill "
"Pinchuk 在 :gh:`88457` 中貢獻。）"

#: ../../whatsnew/3.11.rst:871
msgid "math"
msgstr "math"

#: ../../whatsnew/3.11.rst:873
msgid ""
"Add :func:`math.exp2`: return 2 raised to the power of x. (Contributed by "
"Gideon Mitchell in :issue:`45917`.)"
msgstr ""
"新增 :func:`math.exp2`：回傳 2 的 x 次方。（由 Gideon Mitchell 於 :issue:"
"`45917` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:876
msgid ""
"Add :func:`math.cbrt`: return the cube root of x. (Contributed by Ajith "
"Ramachandran in :issue:`44357`.)"
msgstr ""
"新增 :func:`math.cbrt`：回傳 x 的立方根。（由 Ajith Ramachandran 於 :issue:"
"`44357` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:879
msgid ""
"The behaviour of two :func:`math.pow` corner cases was changed, for "
"consistency with the IEEE 754 specification. The operations ``math.pow(0.0, -"
"math.inf)`` and ``math.pow(-0.0, -math.inf)`` now return ``inf``. Previously "
"they raised :exc:`ValueError`. (Contributed by Mark Dickinson in :issue:"
"`44339`.)"
msgstr ""
"為了與 IEEE 754 規範保持一致，更改了兩個 :func:`math.pow` 邊角案例 (corner "
"case) 的行為。``math.pow(0.0, -math.inf)`` 和 ``math.pow(-0.0, -math.inf)`` "
"現在回傳 ``inf``，之前它們會引發 :exc:`ValueError`。（由 Mark Dickinson 在 :"
"issue:`44339` 中貢獻。）"

#: ../../whatsnew/3.11.rst:885
msgid ""
"The :data:`math.nan` value is now always available. (Contributed by Victor "
"Stinner in :issue:`46917`.)"
msgstr ""
":data:`math.nan` 現為隨時可用。（由 Victor Stinner 於 :issue:`46917` 中所貢"
"獻。）"

#: ../../whatsnew/3.11.rst:892
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.11.rst:894
msgid ""
"A new function ``operator.call`` has been added, such that ``operator."
"call(obj, *args, **kwargs) == obj(*args, **kwargs)``. (Contributed by Antony "
"Lee in :issue:`44019`.)"
msgstr ""
"新增 ``operator.call`` 函式，使得 ``operator.call(obj, *args, **kwargs) == "
"obj(*args, **kwargs)``。（由 Antony Lee 於 :issue:`44019` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:902
msgid "os"
msgstr "os"

#: ../../whatsnew/3.11.rst:904
msgid ""
"On Windows, :func:`os.urandom` now uses ``BCryptGenRandom()``, instead of "
"``CryptGenRandom()`` which is deprecated. (Contributed by Dong-hee Na in :"
"issue:`44611`.)"
msgstr ""
"在 Windows 上，:func:`os.urandom` 現在使用 ``BCryptGenRandom()`` 以取代被棄用"
"的 ``CryptGenRandom()``。（由 Dong-hee Na 於 :issue:`44611` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:912
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.11.rst:914
msgid ""
":meth:`~pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` return only "
"directories if *pattern* ends with a pathname components separator: :data:"
"`~os.sep` or :data:`~os.altsep`. (Contributed by Eisuke Kawasima in :issue:"
"`22276` and :issue:`33392`.)"
msgstr ""
"如果 *pattern* 以路徑名稱元件分隔符號 :data:`~os.sep` 或 :data:`~os.altsep` "
"結尾，:meth:`~pathlib.Path.glob` 和 :meth:`~pathlib.Path.rglob` 只回傳目錄。"
"（由 Eisuke Kawasima 於 :issue:`22276` 與 :issue:`33392` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:923
msgid "re"
msgstr "re"

#: ../../whatsnew/3.11.rst:925
msgid ""
"Atomic grouping (``(?>...)``) and possessive quantifiers (``*+``, ``++``, ``?"
"+``, ``{m,n}+``) are now supported in regular expressions. (Contributed by "
"Jeffrey C. Jacobs and Serhiy Storchaka in :issue:`433030`.)"
msgstr ""
"現在規則運算式 (regular expression) 是有支援原子性群組 (atomic grouping) "
"(``(?>...)``) 和佔有性量詞 (possessive quantifier) (``*+``, ``++``, ``?+``, "
"``{m,n}+``) 的。 （由 Jeffrey C. Jacobs 和 Serhiy Storchaka 在 :issue:"
"`433030` 中貢獻。）"

#: ../../whatsnew/3.11.rst:933
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.11.rst:935
msgid ""
"Add optional parameter *dir_fd* in :func:`shutil.rmtree`. (Contributed by "
"Serhiy Storchaka in :issue:`46245`.)"
msgstr ""
"新增 :func:`shutil.rmtree` 的可選參數 *dir_fd*。（由 Serhiy Storchaka 於 :"
"issue:`46245` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:942
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.11.rst:944
msgid ""
"Add CAN Socket support for NetBSD. (Contributed by Thomas Klausner in :issue:"
"`30512`.)"
msgstr ""
"新增 NetBSD 對於 CAN Socket 的支援。（由 Thomas Klausner 於 :issue:`30512` 中"
"所貢獻。）"

#: ../../whatsnew/3.11.rst:947
msgid ""
":meth:`~socket.create_connection` has an option to raise, in case of failure "
"to connect, an :exc:`ExceptionGroup` containing all errors instead of only "
"raising the last error. (Contributed by Irit Katriel in :issue:`29980`.)"
msgstr ""
"當連接失敗時，:meth:`~socket.create_connection` 有個選項可以引發一個包含所有"
"錯誤的 :exc:`ExceptionGroup`，而非只引發最後一個錯誤。（由 Irit Katriel 於 :"
"issue:`29980` 中貢獻。）"

#: ../../whatsnew/3.11.rst:956
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.11.rst:958
msgid ""
"You can now disable the authorizer by passing :const:`None` to :meth:"
"`~sqlite3.Connection.set_authorizer`. (Contributed by Erlend E. Aasland in :"
"issue:`44491`.)"
msgstr ""
"現在可以透過將 :const:`None` 傳遞給 :meth:`~sqlite3.Connection."
"set_authorizer` 來停用 authorizer。（由  Erlend E. Aasland 於 :issue:`44491` "
"中貢獻。）"

#: ../../whatsnew/3.11.rst:962
msgid ""
"Collation name :meth:`~sqlite3.Connection.create_collation` can now contain "
"any Unicode character.  Collation names with invalid characters now raise :"
"exc:`UnicodeEncodeError` instead of :exc:`sqlite3.ProgrammingError`. "
"(Contributed by Erlend E. Aasland in :issue:`44688`.)"
msgstr ""
"定序 (collation) 名稱 :meth:`~sqlite3.Connection.create_collation` 現在可以包"
"含任何 Unicode 字元。帶有無效字元的定序名稱現在會引發 :exc:"
"`UnicodeEncodeError` 而不是 :exc:`sqlite3.ProgrammingError`。（由 Erlend E. "
"Aasland 在 :issue:`44688` 中貢獻。）"

#: ../../whatsnew/3.11.rst:967
msgid ""
":mod:`sqlite3` exceptions now include the SQLite extended error code as :"
"attr:`~sqlite3.Error.sqlite_errorcode` and the SQLite error name as :attr:"
"`~sqlite3.Error.sqlite_errorname`. (Contributed by Aviv Palivoda, Daniel "
"Shahaf, and Erlend E. Aasland in :issue:`16379` and :issue:`24139`.)"
msgstr ""
":mod:`sqlite3` 例外現在包含 SQLite 擴充錯誤碼和 SQLite 錯誤名稱（分別為 :"
"attr:`~sqlite3.Error.sqlite_errorcode` 和 :attr:`~sqlite3.Error."
"sqlite_errorname`）。（由 Aviv Palivoda、Daniel Shahaf 和 Erlend E. Aasland "
"在 :issue:`16379` 和 :issue:`24139` 中貢獻。）"

#: ../../whatsnew/3.11.rst:973
msgid ""
"Add :meth:`~sqlite3.Connection.setlimit` and :meth:`~sqlite3.Connection."
"getlimit` to :class:`sqlite3.Connection` for setting and getting SQLite "
"limits by connection basis. (Contributed by Erlend E. Aasland in :issue:"
"`45243`.)"
msgstr ""
"將 :meth:`~sqlite3.Connection.setlimit` 和 :meth:`~sqlite3.Connection."
"getlimit` 新增到 :class:`sqlite3.Connection` 以根據連線來設定和取得 SQLite 限"
"制。（由 Erlend E. Aasland 在 :issue:`45243` 中貢獻。）"

#: ../../whatsnew/3.11.rst:978
msgid ""
":mod:`sqlite3` now sets :attr:`sqlite3.threadsafety` based on the default "
"threading mode the underlying SQLite library has been compiled with. "
"(Contributed by Erlend E. Aasland in :issue:`45613`.)"
msgstr ""
":mod:`sqlite3` 現在會基於底層 SQLite 函式庫編譯時所使用的預設執行緒模式來設"
"定 :attr:`sqlite3.threadsafety`。（由 Erlend E. Aasland 在 :issue:`45613` 中"
"貢獻。）"

#: ../../whatsnew/3.11.rst:982
msgid ""
":mod:`sqlite3` C callbacks now use unraisable exceptions if callback "
"tracebacks are enabled. Users can now register an :func:`unraisable hook "
"handler <sys.unraisablehook>` to improve their debug experience. "
"(Contributed by Erlend E. Aasland in :issue:`45828`.)"
msgstr ""
":mod:`sqlite3` 如果啟用回呼回溯 (callback traceback)，C 回呼現在使用無法被引"
"發的例外。使用者現在可以註冊一個\\ :func:`無法被引發的掛鈎處理程式 "
"(unraisable hook handler) <sys.unraisablehook>` 來改善他們的除錯體驗。（由 "
"Erlend E. Aasland 在 :issue:`45828` 中貢獻。）"

#: ../../whatsnew/3.11.rst:988
msgid ""
"Fetch across rollback no longer raises :exc:`~sqlite3.InterfaceError`. "
"Instead we leave it to the SQLite library to handle these cases. "
"(Contributed by Erlend E. Aasland in :issue:`44092`.)"
msgstr ""
"跨越不同回滾 (rollback) 的拿取動作不再引發 :exc:`~sqlite3.InterfaceError`，我"
"們將其留給 SQLite 函式庫來處理這些情況。（由 Erlend E. Aasland 在 :issue:"
"`44092` 中貢獻。）"

#: ../../whatsnew/3.11.rst:992
msgid ""
"Add :meth:`~sqlite3.Connection.serialize` and :meth:`~sqlite3.Connection."
"deserialize` to :class:`sqlite3.Connection` for serializing and "
"deserializing databases. (Contributed by Erlend E. Aasland in :issue:"
"`41930`.)"
msgstr ""
"將 :meth:`~sqlite3.Connection.serialize` 和 :meth:`~sqlite3.Connection."
"deserialize` 新增到 :class:`sqlite3.Connection` 以用於序列化和反序列化資料"
"庫。（由 Erlend E. Aasland 在 :issue:`41930` 中貢獻。）"

#: ../../whatsnew/3.11.rst:997
msgid ""
"Add :meth:`~sqlite3.Connection.create_window_function` to :class:`sqlite3."
"Connection` for creating aggregate window functions. (Contributed by Erlend "
"E. Aasland in :issue:`34916`.)"
msgstr ""
"於 :class:`sqlite3.Connection` 加入 :meth:`~sqlite3.Connection."
"create_window_function` 已建立聚合視窗函式 (aggregate window function)。（由 "
"Erlend E. Aasland 於 :issue:`34916` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1001
msgid ""
"Add :meth:`~sqlite3.Connection.blobopen` to :class:`sqlite3.Connection`. :"
"class:`sqlite3.Blob` allows incremental I/O operations on blobs. "
"(Contributed by Aviv Palivoda and Erlend E. Aasland in :issue:`24905`.)"
msgstr ""
"在 :class:`sqlite3.Connection` 新增 :meth:`~sqlite3.Connection.blobopen`。 :"
"class:`sqlite3.Blob` 允許對 blob 進行增量 I/O 操作 (incremental I/O "
"operations)。（由 Aviv Palivoda 和 Erlend E. Aasland 在 :issue:`24905` 中貢"
"獻。）"

#: ../../whatsnew/3.11.rst:1009
msgid "string"
msgstr "string"

#: ../../whatsnew/3.11.rst:1011
msgid ""
"Add :meth:`~string.Template.get_identifiers` and :meth:`~string.Template."
"is_valid` to :class:`string.Template`, which respectively return all valid "
"placeholders, and whether any invalid placeholders are present. (Contributed "
"by Ben Kehoe in :gh:`90465`.)"
msgstr ""
"新增 :meth:`~string.Template.get_identifiers` 和 :meth:`~string.Template."
"is_valid` 於 :class:`string.Template`，分別能夠回傳所有合格的預留位置 "
"(placeholder) 與是否有任何不合格的預留位置存在。（由 Ben Kehoe 於 :gh:"
"`90465` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1021
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.11.rst:1023
msgid ""
":func:`sys.exc_info` now derives the ``type`` and ``traceback`` fields from "
"the ``value`` (the exception instance), so when an exception is modified "
"while it is being handled, the changes are reflected in the results of "
"subsequent calls to :func:`!exc_info`. (Contributed by Irit Katriel in :"
"issue:`45711`.)"
msgstr ""
":func:`sys.exc_info` 現在從 ``value``\\ （例外實例）衍生出 ``type`` 和 "
"``traceback`` 欄位，因此當例外在處理過程中被修改時，變更會反映在 :func:`!"
"exc_info` 後續呼叫的結果中。 （由 Irit Katriel 在 :issue:`45711` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1029
msgid ""
"Add :func:`sys.exception` which returns the active exception instance "
"(equivalent to ``sys.exc_info()[1]``). (Contributed by Irit Katriel in :"
"issue:`46328`.)"
msgstr ""
"新增會回傳活躍例外實例 (active exception instance) 的 :func:`sys."
"exception`\\ （等價於 ``sys.exc_info()[1]``\\ ）。（由 Irit Katriel 於 :"
"issue:`46328` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1033
msgid ""
"Add the :data:`sys.flags.safe_path <sys.flags>` flag. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"新增 :data:`sys.flags.safe_path <sys.flags>` 旗標。（由 Victor Stinner 於 :"
"gh:`57684` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1040
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.11.rst:1042
msgid ""
"Three new :ref:`installation schemes <installation_paths>` (*posix_venv*, "
"*nt_venv* and *venv*) were added and are used when Python creates new "
"virtual environments or when it is running from a virtual environment. The "
"first two schemes (*posix_venv* and *nt_venv*) are OS-specific for non-"
"Windows and Windows, the *venv* is essentially an alias to one of them "
"according to the OS Python runs on. This is useful for downstream "
"distributors who modify :func:`sysconfig.get_preferred_scheme`. Third party "
"code that creates new virtual environments should use the new *venv* "
"installation scheme to determine the paths, as does :mod:`venv`. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""
"新增了三個\\ :ref:`安裝方案 <installation_paths>`\\ （*posix_venv*、"
"*nt_venv* 和 *venv*），它們在 Python 建立新的虛擬環境或在虛擬環境中運行時使"
"用。前兩個方案（*posix_venv* 和 *nt_venv*）是非 Windows 和 Windows 作業系統所"
"特有的，*venv* 本質上會根據 Python 運行的操作系統來做為其中之一的別名。這對修"
"改 :func:`sysconfig.get_preferred_scheme` 的下游發布者很有用。建立新虛擬環境"
"的第三方程式碼應該使用新的 *venv* 安裝方案來確定路徑，就像 :mod:`venv` 一樣。"
"（由 Miro Hrončok 在 :issue:`45413` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1059
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.11.rst:1061
msgid ""
":class:`~tempfile.SpooledTemporaryFile` objects now fully implement the "
"methods of :class:`io.BufferedIOBase` or :class:`io.TextIOBase` (depending "
"on file mode). This lets them work correctly with APIs that expect file-like "
"objects, such as compression modules. (Contributed by Carey Metcalfe in :gh:"
"`70363`.)"
msgstr ""
":class:`~tempfile.SpooledTemporaryFile` 物件現在完整實作了 :class:`io."
"BufferedIOBase` 或 :class:`io.TextIOBase` 的方法（取決於檔案模式），這使它們"
"能夠正確地使用需要類檔案物件的 API，例如壓縮模組。（由 Carey Metcalfe 在 :gh:"
"`70363` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1072
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.11.rst:1074
msgid ""
"On Unix, if the ``sem_clockwait()`` function is available in the C library "
"(glibc 2.30 and newer), the :meth:`threading.Lock.acquire` method now uses "
"the monotonic clock (:data:`time.CLOCK_MONOTONIC`) for the timeout, rather "
"than using the system clock (:data:`time.CLOCK_REALTIME`), to not be "
"affected by system clock changes. (Contributed by Victor Stinner in :issue:"
"`41710`.)"
msgstr ""
"在 Unix 上，如果 ``sem_clockwait()`` 函式在 C 函式庫（glibc 2.30 與其更新的版"
"本）中可被使用，則 :meth:`threading.Lock.acquire` 方法現在會使用單調時鐘 (:"
"data:`time. CLOCK_MONOTONIC`) 用於超時 (timeout)，而不是使用系統時鐘 (:data:"
"`time.CLOCK_REALTIME`)，以免受系統時鐘變化的影響。 由 Victor Stinner 在 :"
"issue:`41710` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1085
msgid "time"
msgstr "time"

#: ../../whatsnew/3.11.rst:1087
msgid ""
"On Unix, :func:`time.sleep` now uses the ``clock_nanosleep()`` or "
"``nanosleep()`` function, if available, which has a resolution of 1 "
"nanosecond (10\\ :sup:`-9` seconds), rather than using ``select()`` which "
"has a resolution of 1 microsecond (10\\ :sup:`-6` seconds). (Contributed by "
"Benjamin Szőke and Victor Stinner in :issue:`21302`.)"
msgstr ""
"在 Unix 上，如果可用的話，:func:`time.sleep` 現在會使用 "
"``clock_nanosleep()`` 或 ``nanosleep()`` 函式，其解析度為 1 納秒（10\\ :sup:"
"`-9` 秒），而不是使用解析度為 1 微秒（10\\ :sup:`-6` 秒）的 ``select()``。"
"（由 Benjamin Szőke 和 Victor Stinner 在 :issue:`21302` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1093
msgid ""
"On Windows 8.1 and newer, :func:`time.sleep` now uses a waitable timer based "
"on `high-resolution timers <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/kernel/high-resolution-timers>`_ which has a resolution of "
"100 nanoseconds (10\\ :sup:`-7` seconds). Previously, it had a resolution of "
"1 millisecond (10\\ :sup:`-3` seconds). (Contributed by Benjamin Szőke, Dong-"
"hee Na, Eryk Sun and Victor Stinner in :issue:`21302` and :issue:`45429`.)"
msgstr ""
"在 Windows 8.1 或更新的平台上，:func:`time.sleep` 現在使用了一個基於\\ `高解"
"析度計時器 <https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/"
"high-resolution-timers>`_\\ 的可等待 (waitable) 計時器，解析度為 100 奈秒"
"（即 10\\ :sup:`-7` 秒）。在這之前，它只有 1 微秒（10\\ :sup:`-3` 秒） 的解析"
"度。（由 Benjamin Szőke、Dong-hee Na、Eryk Sun 和 Victor Stinner 於 :issue:"
"`21302` 與 :issue:`45429` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1104
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.11.rst:1106
msgid ""
"Added method ``info_patchlevel()`` which returns the exact version of the "
"Tcl library as a named tuple similar to :data:`sys.version_info`. "
"(Contributed by Serhiy Storchaka in :gh:`91827`.)"
msgstr ""
"新增了 ``info_patchlevel()`` 方法，它會回傳 Tcl 函式庫的確切版本以作為類似"
"於 :data:`sys.version_info` 的附名元組。（由 Serhiy Storchaka 在 :gh:`91827` "
"中貢獻。）"

#: ../../whatsnew/3.11.rst:1114
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.11.rst:1116
msgid ""
"Add :func:`traceback.StackSummary.format_frame_summary` to allow users to "
"override which frames appear in the traceback, and how they are formatted. "
"(Contributed by Ammar Askar in :issue:`44569`.)"
msgstr ""
"新增 :func:`traceback.StackSummary.format_frame_summary` 以允許使用者覆蓋回溯"
"中出現的幀及它們的格式。（由 Ammar Askar 在 :issue:`44569` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1121
msgid ""
"Add :func:`traceback.TracebackException.print`, which prints the formatted :"
"exc:`~traceback.TracebackException` instance to a file. (Contributed by Irit "
"Katriel in :issue:`33809`.)"
msgstr ""
"新增 :func:`traceback.TracebackException.print`，它會印出格式化的 :exc:"
"`~traceback.TracebackException` 實例至一個檔案。（由 Irit Katriel 在 :issue:"
"`33809` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1129
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.11.rst:1131
msgid "For major changes, see :ref:`new-feat-related-type-hints-311`."
msgstr "重大變更請見 :ref:`new-feat-related-type-hints-311`。"

#: ../../whatsnew/3.11.rst:1133
msgid ""
"Add :func:`typing.assert_never` and :class:`typing.Never`. :func:`typing."
"assert_never` is useful for asking a type checker to confirm that a line of "
"code is not reachable. At runtime, it raises an :exc:`AssertionError`. "
"(Contributed by Jelle Zijlstra in :gh:`90633`.)"
msgstr ""
"新增 :func:`typing.assert_never` 和 :class:`typing.Never`。 :func:`typing."
"assert_never` 可用於要型別檢查器確認某行程式碼是否不可觸及。在運行時間，它會"
"引發 :exc:`AssertionError`。（由 Jelle Zijlstra 在 :gh:`90633` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1139
msgid ""
"Add :func:`typing.reveal_type`. This is useful for asking a type checker "
"what type it has inferred for a given expression. At runtime it prints the "
"type of the received value. (Contributed by Jelle Zijlstra in :gh:`90572`.)"
msgstr ""
"新增 :func:`typing.reveal_type`，這可用於請求型別檢查器為給定運算式推斷出什麼"
"型別。在運行時間它會印出接收到的值的型別。（由 Jelle Zijlstra 在 :gh:`90572` "
"中貢獻。）"

#: ../../whatsnew/3.11.rst:1144
msgid ""
"Add :func:`typing.assert_type`. This is useful for asking a type checker to "
"confirm that the type it has inferred for a given expression matches the "
"given type. At runtime it simply returns the received value. (Contributed by "
"Jelle Zijlstra in :gh:`90638`.)"
msgstr ""
"新增 :func:`typing.assert_type`，這可用於要型別檢查器確認它為給定運算式推斷的"
"型別是否與給定型別相符。在運行時間，它只會回傳接收到的值。（由 Jelle "
"Zijlstra 在 :gh:`90638` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1149
msgid ""
":data:`typing.TypedDict` types can now be generic. (Contributed by Samodya "
"Abeysiriwardane in :gh:`89026`.)"
msgstr ""
":data:`typing.TypedDict` 型別現可為泛型。（由 Samodya Abeysiriwardane 於 :gh:"
"`89026` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1152
msgid ""
":class:`~typing.NamedTuple` types can now be generic. (Contributed by Serhiy "
"Storchaka in :issue:`43923`.)"
msgstr ""
":class:`~typing.NamedTuple` 型別現可為泛型。（由 Serhiy Storchaka 於 :issue:"
"`43923` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1155
msgid ""
"Allow subclassing of :class:`typing.Any`. This is useful for avoiding type "
"checker errors related to highly dynamic class, such as mocks. (Contributed "
"by Shantanu Jain in :gh:`91154`.)"
msgstr ""
"允許繼承 :class:`typing.Any`，這能有效避免與高度動態類別（例如 mock）相關的型"
"別檢查器錯誤。（由 Shantanu Jain 在 :gh:`91154` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1159
msgid ""
"The :func:`typing.final` decorator now sets the ``__final__`` attributed on "
"the decorated object. (Contributed by Jelle Zijlstra in :gh:`90500`.)"
msgstr ""
":func:`typing.final` 裝飾器現在會在被裝飾的物件上設定 ``__final__`` 屬性。"
"（由 Serhiy Storchaka 於 :gh:`90500` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1163
msgid ""
"The :func:`typing.get_overloads` function can be used for introspecting the "
"overloads of a function. :func:`typing.clear_overloads` can be used to clear "
"all registered overloads of a function. (Contributed by Jelle Zijlstra in :"
"gh:`89263`.)"
msgstr ""
":func:`typing.get_overloads` 函式可用於自我檢查 (introspect) 一個函式的過載 "
"(overload)。:func:`typing.clear_overloads` 可用於清除一個函式的所有已註冊過"
"載。（由 Jelle Zijlstra 在 :gh:`89263` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1168
msgid ""
"The :meth:`~object.__init__` method of :class:`~typing.Protocol` subclasses "
"is now preserved. (Contributed by Adrian Garcia Badarasco in :gh:`88970`.)"
msgstr ""
":class:`~typing.Protocol` 子類別的 :meth:`~object.__init__` 方法現在被保留。"
"（由 Adrian Garcia Badarasco 在 :gh:`88970` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1171
msgid ""
"The representation of empty tuple types (``Tuple[()]``) is simplified. This "
"affects introspection, e.g. ``get_args(Tuple[()])`` now evaluates to ``()`` "
"instead of ``((),)``. (Contributed by Serhiy Storchaka in :gh:`91137`.)"
msgstr ""
"空元組型別 (``Tuple[()]``) 的表示法得到簡化，這會影響自我檢查 "
"(introspection)，例如 ``get_args(Tuple[()])`` 的求值現在會是 ``()`` 而不是 "
"``((),)``。（由 Serhiy Storchaka 在 :gh:`91137` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1176
msgid ""
"Loosen runtime requirements for type annotations by removing the callable "
"check in the private ``typing._type_check`` function. (Contributed by "
"Gregory Beauregard in :gh:`90802`.)"
msgstr ""
"通過刪除私有 ``typing._type_check`` 函式中的可呼叫檢查，放寬型別標註的運行時"
"間要求。（由 Gregory Beauregard 在 :gh:`90802` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1180
msgid ""
":func:`typing.get_type_hints` now supports evaluating strings as forward "
"references in :ref:`PEP 585 generic aliases <types-genericalias>`. "
"(Contributed by Niklas Rosenstein in :gh:`85542`.)"
msgstr ""
"作為\\ :ref:`PEP 585 泛化別名 <types-genericalias>`\\ 中的前向參照，:func:"
"`typing.get_type_hints` 現支援了為字串求值 (evaluate)。（由 Niklas "
"Rosenstein 在 :gh:`85542` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1184
msgid ""
":func:`typing.get_type_hints` no longer adds :data:`~typing.Optional` to "
"parameters with ``None`` as a default. (Contributed by Nikita Sobolev in :gh:"
"`90353`.)"
msgstr ""
":func:`typing.get_type_hints` 不再將 :data:`~typing.Optional` 新增到預設為 "
"``None`` 的參數中。（由 Nikita Sobolev 在 :gh:`90353` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1188
msgid ""
":func:`typing.get_type_hints` now supports evaluating bare stringified :data:"
"`~typing.ClassVar` annotations. (Contributed by Gregory Beauregard in :gh:"
"`90711`.)"
msgstr ""
":func:`typing.get_type_hints` 現在支援為無修飾 (bare) 字串化 (stringified) "
"的 :data:`~typing.ClassVar` 標註來求值。（由 Gregory Beauregard 在 :gh:"
"`90711` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1192
msgid ""
":func:`typing.no_type_check` no longer modifies external classes and "
"functions. It also now correctly marks classmethods as not to be type "
"checked. (Contributed by Nikita Sobolev in :gh:`90729`.)"
msgstr ""
":func:`typing.no_type_check` 不再修改外部類別和函式。它現在也正確地將類別方法"
"標記為不需進行型別檢查。（由 Nikita Sobolev 在 :gh:`90729` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1200
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.11.rst:1202
msgid ""
"The Unicode database has been updated to version 14.0.0. (Contributed by "
"Benjamin Peterson in :issue:`45190`)."
msgstr ""
"Unicode 資料庫被更新為 14.0.0 版本。（Benjamin Peterson 於 :issue:`45190` 中"
"所貢獻。）"

#: ../../whatsnew/3.11.rst:1209
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.11.rst:1211
msgid ""
"Added methods :meth:`~unittest.TestCase.enterContext` and :meth:`~unittest."
"TestCase.enterClassContext` of class :class:`~unittest.TestCase`, method :"
"meth:`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` of class :class:"
"`~unittest.IsolatedAsyncioTestCase` and function :func:`unittest."
"enterModuleContext`. (Contributed by Serhiy Storchaka in :issue:`45046`.)"
msgstr ""
"新增 :class:`~unittest.TestCase` 類別的 :meth:`~unittest.TestCase."
"enterContext` 與 :meth:`~unittest.TestCase.enterClassContext` 方法、 :class:"
"`~unittest.IsolatedAsyncioTestCase` 類別 的 :meth:`~unittest."
"IsolatedAsyncioTestCase.enterAsyncContext` 方法、:func:`unittest."
"enterModuleContext` 函式。（由 Serhiy Storchaka 於 :issue:`45046` 貢獻。）"

#: ../../whatsnew/3.11.rst:1223
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.11.rst:1225
msgid ""
"When new Python virtual environments are created, the *venv* :ref:`sysconfig "
"installation scheme <installation_paths>` is used to determine the paths "
"inside the environment. When Python runs in a virtual environment, the same "
"installation scheme is the default. That means that downstream distributors "
"can change the default sysconfig install scheme without changing behavior of "
"virtual environments. Third party code that also creates new virtual "
"environments should do the same. (Contributed by Miro Hrončok in :issue:"
"`45413`.)"
msgstr ""
"建立新的 Python 虛擬環境時，*venv* :ref:`sysconfig 安裝方案 "
"<installation_paths>`\\ 會被用於確定環境內的路徑。當 Python 在虛擬環境中運行"
"時，預設使用相同的安裝方案。這意味著下游發布者可以在不改變虛擬環境行為的情況"
"下更改預設的 sysconfig 安裝方案。建立新虛擬環境的第三方程式碼也應該這樣做。"
"（由 Miro Hrončok 在 :issue:`45413` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1239
msgid "warnings"
msgstr "warnings"

#: ../../whatsnew/3.11.rst:1241
msgid ""
":func:`warnings.catch_warnings` now accepts arguments for :func:`warnings."
"simplefilter`, providing a more concise way to locally ignore warnings or "
"convert them to errors. (Contributed by Zac Hatfield-Dodds in :issue:"
"`47074`.)"
msgstr ""
":func:`warnings.catch_warnings` 現在接受 :func:`warnings.simplefilter` 的引"
"數，提供了一種更簡潔的方法來在本地端忽略警告或將它們轉換為錯誤。 （由 Zac "
"Hatfield-Dodds 在 :issue:`47074` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1249
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.11.rst:1251
msgid ""
"Added support for specifying member name encoding for reading metadata in a :"
"class:`~zipfile.ZipFile`'s directory and file headers. (Contributed by "
"Stephen J. Turnbull and Serhiy Storchaka in :issue:`28080`.)"
msgstr ""
"新增了對指定成員名稱編碼的支援，以便在 :class:`~zipfile.ZipFile` 的目錄和檔案"
"標頭中讀取元資料 (metadata)。（由 Stephen J. Turnbull 和 Serhiy Storchaka "
"在 :issue:`28080` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1255
msgid ""
"Added :meth:`ZipFile.mkdir() <zipfile.ZipFile.mkdir>` for creating new "
"directories inside ZIP archives. (Contributed by Sam Ezeh in :gh:`49083`.)"
msgstr ""
"新增 :meth:`ZipFile.mkdir() <zipfile.ZipFile.mkdir>` 以在 ZIP 歸檔中建立新的"
"目錄。（由 Sam Ezeh 於 :gh:`49083` 貢獻。）"

#: ../../whatsnew/3.11.rst:1259
msgid ""
"Added :attr:`~zipfile.Path.stem`, :attr:`~zipfile.Path.suffix` and :attr:"
"`~zipfile.Path.suffixes` to :class:`zipfile.Path`. (Contributed by Miguel "
"Brito in :gh:`88261`.)"
msgstr ""
"於 :class:`zipfile.Path` 新增 :attr:`~zipfile.Path.stem`、:attr:`~zipfile."
"Path.suffix` 和 :attr:`~zipfile.Path.suffixes`。（由 Miguel Brito 於 :gh:"
"`88261` 貢獻。）"

#: ../../whatsnew/3.11.rst:1267
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.11.rst:1269
msgid ""
"This section covers specific optimizations independent of the :ref:"
"`whatsnew311-faster-cpython` project, which is covered in its own section."
msgstr ""
"這個部分會涵蓋到特定的最佳化，但獨立於擁有自己一個說明的\\ :ref:`whatsnew311-"
"faster-cpython` 計畫。"

#: ../../whatsnew/3.11.rst:1272
msgid ""
"The compiler now optimizes simple :ref:`printf-style % formatting <old-"
"string-formatting>` on string literals containing only the format codes "
"``%s``, ``%r`` and ``%a`` and makes it as fast as a corresponding :term:`f-"
"string` expression. (Contributed by Serhiy Storchaka in :issue:`28307`.)"
msgstr ""
"編譯器現在對僅包含格式程式碼 ``%s``、``%r`` 和 ``%a`` 的字串文本 (string "
"literal) 進行簡單的 :ref:`printf 風格 % 格式化 (printf-style % formatting) "
"<old-string-formatting>` 最佳化並使其與相應的 :term:`f-string` 運算式一樣快。"
"（由 Serhiy Storchaka 在 :issue:`28307` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1278
msgid ""
"Integer division (``//``) is better tuned for optimization by compilers. It "
"is now around 20% faster on x86-64 when dividing an :class:`int` by a value "
"smaller than ``2**30``. (Contributed by Gregory P. Smith and Tim Peters in :"
"gh:`90564`.)"
msgstr ""
"整數除法 (``//``) 為了編譯器最佳化而被調校過。現在將 :class:`int` 除以小於 "
"``2**30`` 的值時，在 x86-64 上快了大約 20%。（由 Gregory P. Smith 和 Tim "
"Peters 在 :gh:`90564` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1283
msgid ""
":func:`sum` is now nearly 30% faster for integers smaller than ``2**30``. "
"(Contributed by Stefan Behnel in :gh:`68264`.)"
msgstr ""
"針對小於 ``2**30`` 的整數，:func:`sum` 現在快了將近 30%。（由 Stefan Behnel "
"於 :gh:`68264` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1286
msgid ""
"Resizing lists is streamlined for the common case, speeding up :meth:`list."
"append` by ≈15% and simple :term:`list comprehension`\\s by up to 20-30% "
"(Contributed by Dennis Sweeney in :gh:`91165`.)"
msgstr ""
"調整 list 大小在常見情況下增進了效能，為 :meth:`list.append` 加快了約 15% 並"
"為簡單的 :term:`list comprehension` 加快了高達 20-30%（由 Dennis Sweeney 在 :"
"gh:`91165` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1291
msgid ""
"Dictionaries don't store hash values when all keys are Unicode objects, "
"decreasing :class:`dict` size. For example, ``sys.getsizeof(dict."
"fromkeys(\"abcdefg\"))`` is reduced from 352 bytes to 272 bytes (23% "
"smaller) on 64-bit platforms. (Contributed by Inada Naoki in :issue:`46845`.)"
msgstr ""
"當所有鍵都是 Unicode 物件時，字典不存儲雜湊值，減少了 :class:`dict` 的大小。"
"例如，``sys.getsizeof(dict.fromkeys(\"abcdefg\"))`` 在 64-bit 平台上從 352 位"
"元組減少到 272 位元組（減少 23%）。（由 Inada Naoki 在 :issue:`46845` 中貢"
"獻。）"

#: ../../whatsnew/3.11.rst:1297
msgid ""
"Using :class:`asyncio.DatagramProtocol` is now orders of magnitude faster "
"when transferring large files over UDP, with speeds over 100 times higher "
"for a ≈60 MiB file. (Contributed by msoxzw in :gh:`91487`.)"
msgstr ""
"使用 :class:`asyncio.DatagramProtocol` 以透過 UDP 傳輸大文件時，現在速度提高"
"了幾個數量級，傳輸 ≈60 MiB 檔案的速度提高了 100 多倍。（由 msoxzw 在 :gh:"
"`91487` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1302
msgid ""
":mod:`math` functions :func:`~math.comb` and :func:`~math.perm` are now ≈10 "
"times faster for large arguments (with a larger speedup for larger *k*). "
"(Contributed by Serhiy Storchaka in :issue:`37295`.)"
msgstr ""
":mod:`math` 函式 :func:`~math.comb` 和 :func:`~math.perm` 針對較大引數現在快"
"了 ≈10 倍（對於更大的 *k* 有更大的加速）。（由 Serhiy Storchaka 在 :issue:"
"`37295` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1306
msgid ""
"The :mod:`statistics` functions :func:`~statistics.mean`, :func:`~statistics."
"variance` and :func:`~statistics.stdev` now consume iterators in one pass "
"rather than converting them to a :class:`list` first. This is twice as fast "
"and can save substantial memory. (Contributed by Raymond Hettinger in :gh:"
"`90415`.)"
msgstr ""
":mod:`statistics` 函式 :func:`~statistics.mean`、:func:`~statistics."
"variance` 和 :func:`~statistics.stdev` 現在會一次性的消耗疊代器，而不是先將它"
"們轉換為 :class:`list`，這讓速度提升為兩倍並可以節省大量記憶體空間。（由 "
"Raymond Hettinger 在 :gh:`90415` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1312
msgid ""
":func:`unicodedata.normalize` now normalizes pure-ASCII strings in constant "
"time. (Contributed by Dong-hee Na in :issue:`44987`.)"
msgstr ""
":func:`unicodedata.normalize` 現在在常數時間內規範化 (normalize) 純 ASCII 字"
"串。（由 Dong-hee Na 在 :issue:`44987` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1320
msgid "Faster CPython"
msgstr "更快的 CPython"

#: ../../whatsnew/3.11.rst:1322
msgid ""
"CPython 3.11 is on average `25% faster <https://github.com/faster-cpython/"
"ideas#published-results>`_ than CPython 3.10 when measured with the "
"`pyperformance <https://github.com/python/pyperformance>`_ benchmark suite, "
"and compiled with GCC on Ubuntu Linux. Depending on your workload, the "
"speedup could be up to 10-60% faster."
msgstr ""
"當使用基準量測套裝軟體 `pyperformance <https://github.com/python/"
"pyperformance>`_ 量測並以 GCC 於 Ubuntu Linux 上編譯，Python 3.11 平均比 "
"Python 3.10 `快了 25% <https://github.com/faster-cpython/ideas#published-"
"results>`_。根據程式工作量可能有所不同，加速程度可能高達 10-60%。"

#: ../../whatsnew/3.11.rst:1328
msgid ""
"This project focuses on two major areas in Python: faster startup and faster "
"runtime. Other optimizations not under this project are listed in "
"`Optimizations`_."
msgstr ""
"這個計畫著重於 Python 的兩個地方：更快的啟動 (faster startup) 與更快的運行程"
"式 (faster runtime)。其他不在此計畫的最佳化項目列於 `Optimizations`_。"

#: ../../whatsnew/3.11.rst:1335
msgid "Faster Startup"
msgstr "更快的啟動"

#: ../../whatsnew/3.11.rst:1340
msgid "Frozen imports / Static code objects"
msgstr "凍結引入 (Frozen imports) / 靜態程式碼物件 (Static code objects)"

#: ../../whatsnew/3.11.rst:1342
msgid ""
"Python caches bytecode in the :ref:`__pycache__<tut-pycache>` directory to "
"speed up module loading."
msgstr ""
"Python 將位元組碼於 :ref:`__pycache__<tut-pycache>` 目錄中存為快取來加速模組"
"的載入。"

#: ../../whatsnew/3.11.rst:1345
msgid "Previously in 3.10, Python module execution looked like this:"
msgstr "在先前的 3.10 中，執行 Python 模組會像是這樣："

#: ../../whatsnew/3.11.rst:1351
msgid ""
"In Python 3.11, the core modules essential for Python startup are "
"\"frozen\". This means that their code objects (and bytecode) are statically "
"allocated by the interpreter. This reduces the steps in module execution "
"process to this:"
msgstr ""
"在 Python 3.11 中，核心模組在 Python 啟動時必須被「凍結」，這意味著它們的程式"
"碼物件（和位元組碼）是由直譯器靜態分配的。這將模組執行過程中的步驟減少為："

#: ../../whatsnew/3.11.rst:1359
msgid ""
"Interpreter startup is now 10-15% faster in Python 3.11. This has a big "
"impact for short-running programs using Python."
msgstr ""
"在 Python 3.11 中直譯器啟動速度快了 10-15%。這對於使用 Python 所撰寫的短暫程"
"式有著巨大影響。"

#: ../../whatsnew/3.11.rst:1362
msgid ""
"(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in numerous "
"issues.)"
msgstr ""
"（由 Eric Snow、Guido van Rossum 與 Kumar Aditya 於多個 issue 中貢獻。）"

#: ../../whatsnew/3.11.rst:1368
msgid "Faster Runtime"
msgstr "更快的運行程式"

#: ../../whatsnew/3.11.rst:1373
msgid "Cheaper, lazy Python frames"
msgstr "所需資源更少 (cheaper) 且惰性的 (lazy)) Python 幀 (frame)"

#: ../../whatsnew/3.11.rst:1375
msgid ""
"Python frames are created whenever Python calls a Python function. This "
"frame holds execution information. The following are new frame optimizations:"
msgstr ""
"每當 Python 呼叫 Python 函數時，就會建立 Python 幀。該幀保存執行資訊。以下是"
"針對幀而做的新最佳化："

#: ../../whatsnew/3.11.rst:1378
msgid "Streamlined the frame creation process."
msgstr "使幀的建立過程更有效率。"

#: ../../whatsnew/3.11.rst:1379
msgid ""
"Avoided memory allocation by generously re-using frame space on the C stack."
msgstr "在 C 堆疊 (stack) 中盡量重複利用幀的空間來避免記憶體分配。"

#: ../../whatsnew/3.11.rst:1380
msgid ""
"Streamlined the internal frame struct to contain only essential information. "
"Frames previously held extra debugging and memory management information."
msgstr ""
"讓內部幀結構只包含必要資訊，使其更加精簡。在過去，幀必須帶有額外的偵錯與記憶"
"體管理的資訊。"

#: ../../whatsnew/3.11.rst:1383
msgid ""
"Old-style frame objects are now created only when requested by debuggers or "
"by Python introspection functions such as ``sys._getframe`` or ``inspect."
"currentframe``. For most user code, no frame objects are created at all. As "
"a result, nearly all Python functions calls have sped up significantly. We "
"measured a 3-7% speedup in pyperformance."
msgstr ""
"舊式幀物件現在僅在除錯器或 Python 自我檢查函式（例如 ``sys._getframe`` 或 "
"``inspect.currentframe``）請求時才建立。對於大多數使用者程式碼，根本不會建立"
"任何幀物件。結果幾乎所有 Python 函式呼叫都顯著加速。我們以 pyperformance 測得"
"了 3-7% 的加速。"

#: ../../whatsnew/3.11.rst:1389
msgid "(Contributed by Mark Shannon in :issue:`44590`.)"
msgstr "（由 Mark Shannon 於 :issue:`44590` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1396
msgid "Inlined Python function calls"
msgstr "行內 Python 函式呼叫"

#: ../../whatsnew/3.11.rst:1398
msgid ""
"During a Python function call, Python will call an evaluating C function to "
"interpret that function's code. This effectively limits pure Python "
"recursion to what's safe for the C stack."
msgstr ""
"在 Python 函式呼叫期間，Python 將呼叫一個正在求值的 C 函式來直譯該函式的程式"
"碼，這有效地將純 Python 遞迴限制在對 C 堆疊的安全範圍內。"

#: ../../whatsnew/3.11.rst:1402
msgid ""
"In 3.11, when CPython detects Python code calling another Python function, "
"it sets up a new frame, and \"jumps\" to the new code inside the new frame. "
"This avoids calling the C interpreting function altogether."
msgstr ""
"在 3.11 中，當 CPython 檢測到 Python 程式碼呼叫另一個 Python 函式時，它會設立"
"一個新框架 (frame)，並「跳轉」到新框架內的新程式碼，這避免了呼叫整個 C 直譯函"
"式。"

#: ../../whatsnew/3.11.rst:1406
msgid ""
"Most Python function calls now consume no C stack space. This speeds up most "
"of such calls. In simple recursive functions like fibonacci or factorial, a "
"1.7x speedup was observed. This also means recursive functions can recurse "
"significantly deeper (if the user increases the recursion limit). We "
"measured a 1-3% improvement in pyperformance."
msgstr ""
"現在大多數 Python 函式的呼叫不會佔用 C 堆疊空間，這加快了大多數此類呼叫的速"
"度。在斐波那契 (fibonacci) 或階乘等簡單遞迴函式中，觀察到 1.7 倍的加速。這也"
"意味著遞迴函式可以遞迴得更深（如果使用者有增加遞迴限制）。我們在 "
"pyperformance 測得 1-3% 的改進。"

#: ../../whatsnew/3.11.rst:1412
msgid "(Contributed by Pablo Galindo and Mark Shannon in :issue:`45256`.)"
msgstr "（由 Pablo Galindo 與 Mark Shannon 於 :issue:`45256` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1418
msgid "PEP 659: Specializing Adaptive Interpreter"
msgstr "PEP 659：特化的適應性直譯器"

#: ../../whatsnew/3.11.rst:1420
msgid ""
":pep:`659` is one of the key parts of the faster CPython project. The "
"general idea is that while Python is a dynamic language, most code has "
"regions where objects and types rarely change. This concept is known as "
"*type stability*."
msgstr ""
":pep:`659` 是加速 CPython 專案的關鍵部分之一。一般的想法是，雖然 Python 是一"
"種動態語言，但大多數程式碼都有物件和型別很少去更改的區域。這個概念被稱為\\ *"
"型別穩定 (type stability)*\\ 。"

#: ../../whatsnew/3.11.rst:1424
msgid ""
"At runtime, Python will try to look for common patterns and type stability "
"in the executing code. Python will then replace the current operation with a "
"more specialized one. This specialized operation uses fast paths available "
"only to those use cases/types, which generally outperform their generic "
"counterparts. This also brings in another concept called *inline caching*, "
"where Python caches the results of expensive operations directly in the "
"bytecode."
msgstr ""
"在運行時間，Python 將嘗試在執行中的程式碼內尋找常用模式和型別穩定，然後 "
"Python 將用更特化的操作替換當前操作。這種特化操作運用了僅適用於那些用例/型別"
"的快速路徑，這通常優於它們的泛用對應 (generic counterparts)。這也引入了另一個"
"稱為\\ *行內快取 (inline caching)*\\ 的概念，其中 Python 將繁重操作的結果直接"
"快取在位元組碼中。"

#: ../../whatsnew/3.11.rst:1431
msgid ""
"The specializer will also combine certain common instruction pairs into one "
"superinstruction. This reduces the overhead during execution."
msgstr ""
"特化程式 (specializer) 還將某些常用指示 (common instruction) 組合成一個超級指"
"示 (superinstruction)，這減少了執行期間的開銷。"

#: ../../whatsnew/3.11.rst:1434
msgid ""
"Python will only specialize when it sees code that is \"hot\" (executed "
"multiple times). This prevents Python from wasting time for run-once code. "
"Python can also de-specialize when code is too dynamic or when the use "
"changes. Specialization is attempted periodically, and specialization "
"attempts are not too expensive. This allows specialization to adapt to new "
"circumstances."
msgstr ""
"Python 只會在看到「熱」（被多次執行的）程式碼時特化，這可以防止 Python 將時間"
"浪費在只運行一次的程式碼上。當程式碼過於動態或用途發生變化時，Python 也可以去"
"特化 (de-specialize)。特化會定期被嘗試執行，而嘗試的成本也不會太高，這讓特化"
"得以適應新的環境。"

#: ../../whatsnew/3.11.rst:1441
msgid ""
"(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler. See :"
"pep:`659` for more information. Implementation by Mark Shannon and Brandt "
"Bucher, with additional help from Irit Katriel and Dennis Sweeney.)"
msgstr ""
"（PEP 由 Mark Shannon 撰寫、概念啟發自 Stefan Brunthaler。詳情請見 :pep:"
"`659`。由 Mark Shannon 和 Brandt Bucher 實作，Irit Katriel 和 Dennis Sweeney "
"亦提供了額外的幫助。）"

#: ../../whatsnew/3.11.rst:1449
msgid "Operation"
msgstr "操作"

#: ../../whatsnew/3.11.rst:1449
msgid "Form"
msgstr "形式"

#: ../../whatsnew/3.11.rst:1449
msgid "Specialization"
msgstr "特化"

#: ../../whatsnew/3.11.rst:1449
msgid "Operation speedup (up to)"
msgstr "操作加速程度（上限）"

#: ../../whatsnew/3.11.rst:1449
msgid "Contributor(s)"
msgstr "貢獻者"

#: ../../whatsnew/3.11.rst:1452
msgid "Binary operations"
msgstr "二元操作"

#: ../../whatsnew/3.11.rst:1452
msgid "``x+x; x*x; x-x;``"
msgstr "``x+x; x*x; x-x;``"

#: ../../whatsnew/3.11.rst:1452
msgid ""
"Binary add, multiply and subtract for common types such as ``int``, "
"``float``, and ``str`` take custom fast paths for their underlying types."
msgstr ""
"常見型別如 ``int``、``float`` 與 ``str`` 的二元加法、乘法與減法，為底層型別採"
"取了特製的快速路徑。"

#: ../../whatsnew/3.11.rst:1452
msgid "10%"
msgstr "10%"

#: ../../whatsnew/3.11.rst:1452
msgid "Mark Shannon, Dong-hee Na, Brandt Bucher, Dennis Sweeney"
msgstr "Mark Shannon, Dong-hee Na, Brandt Bucher, Dennis Sweeney"

#: ../../whatsnew/3.11.rst:1457
msgid "Subscript"
msgstr "下標"

#: ../../whatsnew/3.11.rst:1457
msgid "``a[i]``"
msgstr "``a[i]``"

#: ../../whatsnew/3.11.rst:1457
msgid ""
"Subscripting container types such as ``list``, ``tuple`` and ``dict`` "
"directly index the underlying data structures."
msgstr ""
"下標容器型別如 ``list``、``tuple`` 和 ``dict`` 直接索引底層的資料結構。"

#: ../../whatsnew/3.11.rst:1461
msgid ""
"Subscripting custom ``__getitem__`` is also inlined similar to :ref:`inline-"
"calls`."
msgstr "下標自定義 ``__getitem__`` 也是行內的，類似於 :ref:`inline-calls`。"

#: ../../whatsnew/3.11.rst:1457 ../../whatsnew/3.11.rst:1464
msgid "10-25%"
msgstr "10-25%"

#: ../../whatsnew/3.11.rst:1457
msgid "Irit Katriel, Mark Shannon"
msgstr "Irit Katriel, Mark Shannon"

#: ../../whatsnew/3.11.rst:1464
msgid "Store subscript"
msgstr "儲存下標"

#: ../../whatsnew/3.11.rst:1464
msgid "``a[i] = z``"
msgstr "``a[i] = z``"

#: ../../whatsnew/3.11.rst:1464
msgid "Similar to subscripting specialization above."
msgstr "類似於上面的下標特化。"

#: ../../whatsnew/3.11.rst:1464
msgid "Dennis Sweeney"
msgstr "Dennis Sweeney"

#: ../../whatsnew/3.11.rst:1467
msgid "Calls"
msgstr "呼叫"

#: ../../whatsnew/3.11.rst:1467
msgid "``f(arg)`` ``C(arg)``"
msgstr "``f(arg)`` ``C(arg)``"

#: ../../whatsnew/3.11.rst:1467
msgid ""
"Calls to common builtin (C) functions and types such as ``len`` and ``str`` "
"directly call their underlying C version. This avoids going through the "
"internal calling convention."
msgstr ""
"常見內建 (C) 函式和型別的呼叫，例如 ``len`` 和 ``str``，會直接呼叫它們的 C 版"
"本底層，這避免了通過內部呼叫的慣例。"

#: ../../whatsnew/3.11.rst:1467
msgid "20%"
msgstr "20%"

#: ../../whatsnew/3.11.rst:1467
msgid "Mark Shannon, Ken Jin"
msgstr "Mark Shannon, Ken Jin"

#: ../../whatsnew/3.11.rst:1473
msgid "Load global variable"
msgstr "載入全域變數"

#: ../../whatsnew/3.11.rst:1473
msgid "``print`` ``len``"
msgstr "``print`` ``len``"

#: ../../whatsnew/3.11.rst:1473
msgid ""
"The object's index in the globals/builtins namespace is cached. Loading "
"globals and builtins require zero namespace lookups."
msgstr ""
"全域/內建之命名空間內的物件索引被快取起來。載入全域與內建變數不需要任何命名空"
"間的查找。"

#: ../../whatsnew/3.11.rst:1473
msgid "[1]_"
msgstr "[1]_"

#: ../../whatsnew/3.11.rst:1473 ../../whatsnew/3.11.rst:1477
#: ../../whatsnew/3.11.rst:1486
msgid "Mark Shannon"
msgstr "Mark Shannon"

#: ../../whatsnew/3.11.rst:1477
msgid "Load attribute"
msgstr "載入屬性"

#: ../../whatsnew/3.11.rst:1477
msgid "``o.attr``"
msgstr "``o.attr``"

#: ../../whatsnew/3.11.rst:1477
msgid ""
"Similar to loading global variables. The attribute's index inside the class/"
"object's namespace is cached. In most cases, attribute loading will require "
"zero namespace lookups."
msgstr ""
"和載入全域變數類似，類別/物件之命名空間內的屬性索引被快取起來。在大部分情況"
"中，載入屬性不需要任何命名空間的查找。"

#: ../../whatsnew/3.11.rst:1477
msgid "[2]_"
msgstr "[2]_"

#: ../../whatsnew/3.11.rst:1482
msgid "Load methods for call"
msgstr "載入要呼叫的方法"

#: ../../whatsnew/3.11.rst:1482
msgid "``o.meth()``"
msgstr "``o.meth()``"

#: ../../whatsnew/3.11.rst:1482
msgid ""
"The actual address of the method is cached. Method loading now has no "
"namespace lookups -- even for classes with long inheritance chains."
msgstr ""
"方法的真實記憶體地址被快取 (cache) 起來，方法的載入現在不需要命名空間的查找 "
"-- 即便有很長繼承鏈結的類別也是。"

#: ../../whatsnew/3.11.rst:1482
msgid "10-20%"
msgstr "10-20%"

#: ../../whatsnew/3.11.rst:1482
msgid "Ken Jin, Mark Shannon"
msgstr "Ken Jin, Mark Shannon"

#: ../../whatsnew/3.11.rst:1486
msgid "Store attribute"
msgstr "儲存屬性"

#: ../../whatsnew/3.11.rst:1486
msgid "``o.attr = z``"
msgstr "``o.attr = z``"

#: ../../whatsnew/3.11.rst:1486
msgid "Similar to load attribute optimization."
msgstr "和載入屬性的最佳化相似。"

#: ../../whatsnew/3.11.rst:1486
msgid "2% in pyperformance"
msgstr "2% 於 pyperformance 中"

#: ../../whatsnew/3.11.rst:1489
msgid "Unpack Sequence"
msgstr "拆解 (unpack) 序列"

#: ../../whatsnew/3.11.rst:1489
msgid "``*seq``"
msgstr "``*seq``"

#: ../../whatsnew/3.11.rst:1489
msgid ""
"Specialized for common containers such as ``list`` and ``tuple``. Avoids "
"internal calling convention."
msgstr "為像是 ``list`` 和 ``tuple`` 的常見容器所特化，避免了內部呼叫慣例。"

#: ../../whatsnew/3.11.rst:1489
msgid "8%"
msgstr "8%"

#: ../../whatsnew/3.11.rst:1489
msgid "Brandt Bucher"
msgstr "Brandt Bucher"

#: ../../whatsnew/3.11.rst:1493
msgid ""
"A similar optimization already existed since Python 3.8.  3.11 specializes "
"for more forms and reduces some overhead."
msgstr ""
"類似的最佳化自從 Python 3.8 就存在。3.11 特別處理了更多形式並減少效能開銷 "
"(overhead)。"

#: ../../whatsnew/3.11.rst:1496
msgid ""
"A similar optimization already existed since Python 3.10. 3.11 specializes "
"for more forms. Furthermore, all attribute loads should be sped up by :issue:"
"`45947`."
msgstr ""
"類似的最佳化自從 Python 3.10 就存在。3.11 特別處理了更多形式。此外，所有屬性"
"載入也被 :issue:`45947` 所加速。"

#: ../../whatsnew/3.11.rst:1504
msgid "Misc"
msgstr "雜項"

#: ../../whatsnew/3.11.rst:1506
msgid ""
"Objects now require less memory due to lazily created object namespaces. "
"Their namespace dictionaries now also share keys more freely. (Contributed "
"Mark Shannon in :issue:`45340` and :issue:`40116`.)"
msgstr ""
"物件現在因為使用了惰性建立的物件命名空間所以需要更少的記憶體。它們的命名空間"
"字典現在也更自由地共享鍵。（由 Mark Shannon 於 :issue:`45340` 和 :issue:"
"`40116` 貢獻。 ）"

#: ../../whatsnew/3.11.rst:1510
msgid ""
"A more concise representation of exceptions in the interpreter reduced the "
"time required for catching an exception by about 10%. (Contributed by Irit "
"Katriel in :issue:`45711`.)"
msgstr ""
"在直譯器內使用更簡潔的例外表示法將捕獲一個例外所需的時間減少了大約 10%。 由 "
"Irit Katriel 在 :issue:`45711` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1518
msgid "FAQ"
msgstr "FAQ"

#: ../../whatsnew/3.11.rst:1520
msgid "Q: How should I write my code to utilize these speedups?"
msgstr "問：我該如何在程式碼中獲取這些加速？"

#: ../../whatsnew/3.11.rst:1524
msgid ""
"A: You don't have to change your code. Write Pythonic code that follows "
"common best practices. The Faster CPython project optimizes for common code "
"patterns we observe."
msgstr ""
"答：你不需要改變你的程式碼。撰寫符合 Python 風格 (Pythonic) 且依循常見最佳實"
"踐的程式碼就好。CPython 加速計畫中，我們為所觀察到的常見程式編寫模式來做最佳"
"化。"

#: ../../whatsnew/3.11.rst:1527
msgid "Q: Will CPython 3.11 use more memory?"
msgstr "問：Python 3.11 會不會使用更多記憶體？"

#: ../../whatsnew/3.11.rst:1531
msgid ""
"A: Maybe not. We don't expect memory use to exceed 20% more than 3.10. This "
"is offset by memory optimizations for frame objects and object dictionaries "
"as mentioned above."
msgstr ""
"答：也許不會。我們預期不會有超出 3.10 20% 的記憶體使用量。這數字會和上述禎物"
"件與物件字典的記憶體最佳化而有所偏差。"

#: ../../whatsnew/3.11.rst:1534
msgid "Q: I don't see any speedups in my workload. Why?"
msgstr "問：我在我的程式當中沒感覺到任何加速，為什麼？"

#: ../../whatsnew/3.11.rst:1539
msgid ""
"A: Certain code won't have noticeable benefits. If your code spends most of "
"its time on I/O operations, or already does most of its computation in a C "
"extension library like numpy, there won't be significant speedup. This "
"project currently benefits pure-Python workloads the most."
msgstr ""
"答：某些程式中不會有顯著的好處。如果你的程式花了大部分的時間在 I/O 操作上，或"
"已經將大部分計算用像是 numpy 的 C 擴充函式庫處理，那就不會有明顯的加速。這個"
"計畫是對純 Python 的工作負荷最有幫助。"

#: ../../whatsnew/3.11.rst:1543
msgid ""
"Furthermore, the pyperformance figures are a geometric mean. Even within the "
"pyperformance benchmarks, certain benchmarks have slowed down slightly, "
"while others have sped up by nearly 2x!"
msgstr ""
"此外，pyperformance 數值為一個幾何平均數 (geometric mean)。即便在 "
"pyperformance 基準量測中，某些測試稍微慢了一些，但其他加快了將近兩倍！"

#: ../../whatsnew/3.11.rst:1546
msgid "Q: Is there a JIT compiler?"
msgstr "問：有用到 JIT 編譯器嗎？"

#: ../../whatsnew/3.11.rst:1548
msgid "A: No. We're still exploring other optimizations."
msgstr "答：沒有，我們還在探索其他最佳化方式。"

#: ../../whatsnew/3.11.rst:1554
msgid "About"
msgstr "關於"

#: ../../whatsnew/3.11.rst:1556
msgid ""
"Faster CPython explores optimizations for :term:`CPython`. The main team is "
"funded by Microsoft to work on this full-time. Pablo Galindo Salgado is also "
"funded by Bloomberg LP to work on the project part-time. Finally, many "
"contributors are volunteers from the community."
msgstr ""
"CPython 加速計畫探索了各種 :term:`CPython` 最佳化的可能性。主要團隊由微軟 "
"(microsoft) 所資助以全職發展該計畫，Pablo Galindo Salgado 亦由彭博有限合夥企"
"業 (Bloomberg LP) 資助來兼職開發，更有許許多多來自社群的自發性貢獻者。"

#: ../../whatsnew/3.11.rst:1565
msgid "CPython bytecode changes"
msgstr "CPython 位元組碼 (bytecode) 變更"

#: ../../whatsnew/3.11.rst:1567
msgid ""
"The bytecode now contains inline cache entries, which take the form of the "
"newly-added :opcode:`CACHE` instructions. Many opcodes expect to be followed "
"by an exact number of caches, and instruct the interpreter to skip over them "
"at runtime. Populated caches can look like arbitrary instructions, so great "
"care should be taken when reading or modifying raw, adaptive bytecode "
"containing quickened data."
msgstr ""
"位元組碼現在包含行內快取條目，它們採用新添加的 :opcode:`CACHE` 指示的形式。許"
"多操作碼預期後面要有確切數量的快取，並指示直譯器在運行時跳過它們。傳遞的 "
"(populated) 快取看起來像任意指示，因此在讀取或修改包含加速資料的原始且適應 "
"(adaptive) 位元組碼時應格外小心。"

#: ../../whatsnew/3.11.rst:1579
msgid "New opcodes"
msgstr "新增 opcode"

#: ../../whatsnew/3.11.rst:1581
msgid ""
":opcode:`ASYNC_GEN_WRAP`, :opcode:`RETURN_GENERATOR` and :opcode:`SEND`, "
"used in generators and co-routines."
msgstr ""
":opcode:`ASYNC_GEN_WRAP`、:opcode:`RETURN_GENERATOR` 和 :opcode:`SEND` 被用於"
"產生器與協程。"

#: ../../whatsnew/3.11.rst:1584
msgid ""
":opcode:`COPY_FREE_VARS`, which avoids needing special caller-side code for "
"closures."
msgstr ""
":opcode:`COPY_FREE_VARS`，避免了為閉包 (closure) 而生的特殊呼叫方 (caller-"
"side) 程式碼的需求。"

#: ../../whatsnew/3.11.rst:1587
msgid ""
":opcode:`JUMP_BACKWARD_NO_INTERRUPT`, for use in certain loops where "
"handling interrupts is undesirable."
msgstr ":opcode:`JUMP_BACKWARD_NO_INTERRUPT`，用於某些不需要處理中斷的循環。"

#: ../../whatsnew/3.11.rst:1590
msgid ":opcode:`MAKE_CELL`, to create :ref:`cell-objects`."
msgstr ":opcode:`MAKE_CELL` 被用於建立 :ref:`cell-objects`。"

#: ../../whatsnew/3.11.rst:1592
msgid ""
":opcode:`CHECK_EG_MATCH`  and  :opcode:`PREP_RERAISE_STAR`, to handle the :"
"ref:`new exception groups and except* <whatsnew311-pep654>` added in :pep:"
"`654`."
msgstr ""
":opcode:`CHECK_EG_MATCH` 和 :opcode:`PREP_RERAISE_STAR`，處理 :pep:`654` 所加"
"入的\\ :ref:`新增例外群組和 except* <whatsnew311-pep654>`。"

#: ../../whatsnew/3.11.rst:1596
msgid ":opcode:`PUSH_EXC_INFO`, for use in exception handlers."
msgstr ":opcode:`PUSH_EXC_INFO` 被用於例外處理函式。"

#: ../../whatsnew/3.11.rst:1598
msgid ""
":opcode:`RESUME`, a no-op, for internal tracing, debugging and optimization "
"checks."
msgstr ":opcode:`RESUME`，為無操作 (no-po)，用於內部追查、除錯和最佳化檢查。"

#: ../../whatsnew/3.11.rst:1605
msgid "Replaced opcodes"
msgstr "被取代的操作碼 (opcode)"

#: ../../whatsnew/3.11.rst:1608
msgid "Replaced Opcode(s)"
msgstr "被取代的操作碼"

#: ../../whatsnew/3.11.rst:1608
msgid "New Opcode(s)"
msgstr "新的操作碼"

#: ../../whatsnew/3.11.rst:1608
msgid "Notes"
msgstr "註記"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!BINARY_*`"
msgstr ":opcode:`!BINARY_*`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!INPLACE_*`"
msgstr ":opcode:`!INPLACE_*`"

#: ../../whatsnew/3.11.rst:1610
msgid ":opcode:`BINARY_OP`"
msgstr ":opcode:`BINARY_OP`"

#: ../../whatsnew/3.11.rst:1610
msgid "Replaced all numeric binary/in-place opcodes with a single opcode"
msgstr "以單一一個操作碼來取代所有數值的、二進位/原位 (in-place) 操作碼"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_FUNCTION`"
msgstr ":opcode:`!CALL_FUNCTION`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_FUNCTION_KW`"
msgstr ":opcode:`!CALL_FUNCTION_KW`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_METHOD`"
msgstr ":opcode:`!CALL_METHOD`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`CALL`"
msgstr ":opcode:`CALL`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`KW_NAMES`"
msgstr ":opcode:`KW_NAMES`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`PRECALL`"
msgstr ":opcode:`PRECALL`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`PUSH_NULL`"
msgstr ":opcode:`PUSH_NULL`"

#: ../../whatsnew/3.11.rst:1613
msgid ""
"Decouples argument shifting for methods from handling of keyword arguments; "
"allows better specialization of calls"
msgstr ""
"將方法的引數搬移 (argument shifting) 與關鍵字引數的處理分離開來；允許更好的呼"
"叫特化"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!DUP_TOP`"
msgstr ":opcode:`!DUP_TOP`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!DUP_TOP_TWO`"
msgstr ":opcode:`!DUP_TOP_TWO`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_TWO`"
msgstr ":opcode:`!ROT_TWO`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_THREE`"
msgstr ":opcode:`!ROT_THREE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_FOUR`"
msgstr ":opcode:`!ROT_FOUR`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_N`"
msgstr ":opcode:`!ROT_N`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`COPY`"
msgstr ":opcode:`COPY`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`SWAP`"
msgstr ":opcode:`SWAP`"

#: ../../whatsnew/3.11.rst:1618
msgid "Stack manipulation instructions"
msgstr "堆疊操作指示"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!JUMP_IF_NOT_EXC_MATCH`"
msgstr ":opcode:`!JUMP_IF_NOT_EXC_MATCH`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`CHECK_EXC_MATCH`"
msgstr ":opcode:`CHECK_EXC_MATCH`"

#: ../../whatsnew/3.11.rst:1625
msgid "Now performs check but doesn't jump"
msgstr "現在執行檢查但不跳位 (jump)"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!JUMP_ABSOLUTE`"
msgstr ":opcode:`!JUMP_ABSOLUTE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_IF_FALSE`"
msgstr ":opcode:`!POP_JUMP_IF_FALSE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_IF_TRUE`"
msgstr ":opcode:`!POP_JUMP_IF_TRUE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`JUMP_BACKWARD`"
msgstr ":opcode:`JUMP_BACKWARD`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`POP_JUMP_BACKWARD_IF_* <POP_JUMP_BACKWARD_IF_TRUE>`"
msgstr ":opcode:`POP_JUMP_BACKWARD_IF_* <POP_JUMP_BACKWARD_IF_TRUE>`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`POP_JUMP_FORWARD_IF_* <POP_JUMP_FORWARD_IF_TRUE>`"
msgstr ":opcode:`POP_JUMP_FORWARD_IF_* <POP_JUMP_FORWARD_IF_TRUE>`"

#: ../../whatsnew/3.11.rst:1627
msgid ""
"See [#bytecode-jump]_; ``TRUE``, ``FALSE``, ``NONE`` and ``NOT_NONE`` "
"variants for each direction"
msgstr ""
"參見 [#bytecode-jump]_；每個方向的 ``TRUE``、``FALSE``、``NONE`` 和 "
"``NOT_NONE`` 變體"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!SETUP_WITH`"
msgstr ":opcode:`!SETUP_WITH`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!SETUP_ASYNC_WITH`"
msgstr ":opcode:`!SETUP_ASYNC_WITH`"

#: ../../whatsnew/3.11.rst:1633
msgid ":opcode:`BEFORE_WITH`"
msgstr ":opcode:`BEFORE_WITH`"

#: ../../whatsnew/3.11.rst:1633
msgid ":keyword:`with` block setup"
msgstr ":keyword:`with` 區塊設置"

#: ../../whatsnew/3.11.rst:1637
msgid ""
"All jump opcodes are now relative, including the existing :opcode:"
"`JUMP_IF_TRUE_OR_POP` and :opcode:`JUMP_IF_FALSE_OR_POP`. The argument is "
"now an offset from the current instruction rather than an absolute location."
msgstr ""
"所有跳位操作碼 (jump opcode) 現在都是相對的，包括現有的 :opcode:"
"`JUMP_IF_TRUE_OR_POP` 和 :opcode:`JUMP_IF_FALSE_OR_POP`。該引數現在是當前指"
"示 (instruction) 的偏移量而不是絕對位置。"

#: ../../whatsnew/3.11.rst:1648
msgid "Changed/removed opcodes"
msgstr "有更動/被移除的 opcode"

#: ../../whatsnew/3.11.rst:1650
msgid ""
"Changed :opcode:`MATCH_CLASS` and :opcode:`MATCH_KEYS` to no longer push an "
"additional boolean value to indicate success/failure. Instead, ``None`` is "
"pushed on failure in place of the tuple of extracted values."
msgstr ""
"更改了 :opcode:`MATCH_CLASS` 和 :opcode:`MATCH_KEYS` ，不再推送一個額外的布林"
"值來表示成功/失敗。取而代之的是會在失敗時推送 ``None``，而非一個包含提取值的"
"元組。"

#: ../../whatsnew/3.11.rst:1655
msgid ""
"Changed opcodes that work with exceptions to reflect them now being "
"represented as one item on the stack instead of three (see :gh:`89874`)."
msgstr ""
"更改了運作於例外的操作碼以反映它們現在在堆疊中的表示為一項而不是三項（請參"
"閱 :gh:`89874`）。"

#: ../../whatsnew/3.11.rst:1659
msgid ""
"Removed :opcode:`!COPY_DICT_WITHOUT_KEYS`, :opcode:`!GEN_START`, :opcode:`!"
"POP_BLOCK`, :opcode:`!SETUP_FINALLY` and :opcode:`!YIELD_FROM`."
msgstr ""
"刪除 :opcode:`!COPY_DICT_WITHOUT_KEYS`、:opcode:`!GEN_START`、:opcode:`!"
"POP_BLOCK`、:opcode:`!SETUP_FINALLY` 和 :opcode:`!YIELD_FROM`。"

#: ../../whatsnew/3.11.rst:1667 ../../whatsnew/3.11.rst:2543
msgid "Deprecated"
msgstr "已棄用"

#: ../../whatsnew/3.11.rst:1669
msgid ""
"This section lists Python APIs that have been deprecated in Python 3.11."
msgstr "這個部分列出了在 Python 3.11 中棄用的 Python API。"

#: ../../whatsnew/3.11.rst:1671
msgid ""
"Deprecated C APIs are :ref:`listed separately <whatsnew311-c-api-"
"deprecated>`."
msgstr "被棄用的 C API 被\\ :ref:`獨立列出 <whatsnew311-c-api-deprecated>`。"

#: ../../whatsnew/3.11.rst:1678
msgid "Language/Builtins"
msgstr "語言/內建"

#: ../../whatsnew/3.11.rst:1680
msgid ""
"Chaining :class:`classmethod` descriptors (introduced in :issue:`19072`) is "
"now deprecated.  It can no longer be used to wrap other descriptors such as :"
"class:`property`.  The core design of this feature was flawed and caused a "
"number of downstream problems.  To \"pass-through\" a :class:`classmethod`, "
"consider using the :attr:`!__wrapped__` attribute that was added in Python "
"3.10. (Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""
"鏈接 :class:`classmethod` 描述器（在 :issue:`19072` 中引入）現已棄用。它不能"
"再用於包裝其他描述器，例如 :class:`property`。此功能的核心設計存在缺陷，並導"
"致了許多下游問題。要「傳遞通過 (pass-through)」\\ :class:`classmethod`，請考"
"慮使用 Python 3.10 中添加的 :attr:`!__wrapped__` 屬性。（由 Raymond "
"Hettinger 在 :gh:`89519` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1688
msgid ""
"Octal escapes in string and bytes literals with values larger than ``0o377`` "
"(255 in decimal) now produce a :exc:`DeprecationWarning`. In a future Python "
"version, they will raise a :exc:`SyntaxWarning` and eventually a :exc:"
"`SyntaxError`. (Contributed by Serhiy Storchaka in :gh:`81548`.)"
msgstr ""
"值大於 ``0o377``\\（十進位為 255）的字串和位元組文本值 (bytes literal) 中的八"
"進位跳脫 (octal escape) 現在會產生 :exc:`DeprecationWarning`。在未來的 "
"Python 版本中，他們將引發一個 :exc:`SyntaxWarning` 並最終引發一個 :exc:"
"`SyntaxError`。（由 Serhiy Storchaka 在 :gh:`81548` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1694
msgid ""
"The delegation of :func:`int` to :meth:`~object.__trunc__` is now "
"deprecated. Calling ``int(a)`` when ``type(a)`` implements :meth:`!"
"__trunc__` but not :meth:`~object.__int__` or :meth:`~object.__index__` now "
"raises a :exc:`DeprecationWarning`. (Contributed by Zackery Spytz in :issue:"
"`44977`.)"
msgstr ""
":func:`int` 到 :meth:`~object.__trunc__` 的授權 (delegation) 現已棄用。當 "
"``type(a)`` 有實作 :meth:`!__trunc__` 但沒有 :meth:`~object.__int__` 或 :"
"meth:`~object.__index__`，呼叫 ``int(a)`` 現在會引發一個 :exc:"
"`DeprecationWarning`。（由 Zackery Spytz 在 :issue:`44977` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1704
msgid "Modules"
msgstr "模組"

#: ../../whatsnew/3.11.rst:1708
msgid ""
":pep:`594` led to the deprecations of the following modules slated for "
"removal in Python 3.13:"
msgstr ":pep:`594` 引領下列模組的棄用，並排訂於 Python 3.13 移除："

#: ../../whatsnew/3.11.rst:1712
msgid ":mod:`aifc`"
msgstr ":mod:`aifc`"

#: ../../whatsnew/3.11.rst:1712
msgid ":mod:`chunk`"
msgstr ":mod:`chunk`"

#: ../../whatsnew/3.11.rst:1712
msgid ":mod:`msilib`"
msgstr ":mod:`msilib`"

#: ../../whatsnew/3.11.rst:1712
msgid ":mod:`pipes`"
msgstr ":mod:`pipes`"

#: ../../whatsnew/3.11.rst:1712
msgid ":mod:`telnetlib`"
msgstr ":mod:`telnetlib`"

#: ../../whatsnew/3.11.rst:1714
msgid ":mod:`audioop`"
msgstr ":mod:`audioop`"

#: ../../whatsnew/3.11.rst:1714
msgid ":mod:`crypt`"
msgstr ":mod:`crypt`"

#: ../../whatsnew/3.11.rst:1714
msgid ":mod:`nis`"
msgstr ":mod:`nis`"

#: ../../whatsnew/3.11.rst:1714
msgid ":mod:`sndhdr`"
msgstr ":mod:`sndhdr`"

#: ../../whatsnew/3.11.rst:1714
msgid ":mod:`uu`"
msgstr ":mod:`uu`"

#: ../../whatsnew/3.11.rst:1716
msgid ":mod:`cgi`"
msgstr ":mod:`cgi`"

#: ../../whatsnew/3.11.rst:1716
msgid ":mod:`imghdr`"
msgstr ":mod:`imghdr`"

#: ../../whatsnew/3.11.rst:1716
msgid ":mod:`nntplib`"
msgstr ":mod:`nntplib`"

#: ../../whatsnew/3.11.rst:1716
msgid ":mod:`spwd`"
msgstr ":mod:`spwd`"

#: ../../whatsnew/3.11.rst:1716
msgid ":mod:`xdrlib`"
msgstr ":mod:`xdrlib`"

#: ../../whatsnew/3.11.rst:1718
msgid ":mod:`cgitb`"
msgstr ":mod:`cgitb`"

#: ../../whatsnew/3.11.rst:1718
msgid ":mod:`mailcap`"
msgstr ":mod:`mailcap`"

#: ../../whatsnew/3.11.rst:1718
msgid ":mod:`ossaudiodev`"
msgstr ":mod:`ossaudiodev`"

#: ../../whatsnew/3.11.rst:1718
msgid ":mod:`sunau`"
msgstr ":mod:`sunau`"

#: ../../whatsnew/3.11.rst:1721
msgid ""
"(Contributed by Brett Cannon in :issue:`47061` and Victor Stinner in :gh:"
"`68966`.)"
msgstr ""
"（由 Brett Cannon 和 Victor Stinner 分別於 :issue:`47061` 與 :gh:`68966` 中所"
"貢獻。）"

#: ../../whatsnew/3.11.rst:1724
msgid ""
"The :mod:`asynchat`, :mod:`asyncore` and  :mod:`smtpd` modules have been "
"deprecated since at least Python 3.6. Their documentation and deprecation "
"warnings have now been updated to note they will be removed in Python 3.12. "
"(Contributed by Hugo van Kemenade in :issue:`47022`.)"
msgstr ""
":mod:`asynchat`、:mod:`asyncore` 和 :mod:`smtpd` 至少在 Python 3.6 以前就被棄"
"用，它們的文件與棄用警告現在已被更新為會提示它們即將於 Python 3.12 中移除。"
"（由 Hugo van Kemenade 於 :issue:`47022` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1729
msgid ""
"The :mod:`lib2to3` package and :ref:`2to3 <2to3-reference>` tool are now "
"deprecated and may not be able to parse Python 3.10 or newer. See :pep:"
"`617`, introducing the new PEG parser, for details. (Contributed by Victor "
"Stinner in :issue:`40360`.)"
msgstr ""
":mod:`lib2to3` 套件和 :ref:`2to3 <2to3-reference>` 工具現已棄用，可能無法剖"
"析 Python 3.10 或更新版本。有關詳細資訊請參閱 :pep:`617`，它引入了新的 PEG 剖"
"析器。（由 Victor Stinner 在 :issue:`40360` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1734
msgid ""
"Undocumented modules :mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!"
"sre_parse` are now deprecated. (Contributed by Serhiy Storchaka in :issue:"
"`47152`.)"
msgstr ""
"未被記錄於文件中的 :mod:`!sre_compile`、:mod:`!sre_constants` 和 :mod:`!"
"sre_parse` 模組現在已被棄用。（由 Serhiy Storchaka 在 :issue:`47152` 中貢"
"獻。）"

#: ../../whatsnew/3.11.rst:1742
msgid "Standard Library"
msgstr "標準函式庫"

#: ../../whatsnew/3.11.rst:1744
msgid ""
"The following have been deprecated in :mod:`configparser` since Python 3.2. "
"Their deprecation warnings have now been updated to note they will be "
"removed in Python 3.12:"
msgstr ""
"以下 :mod:`configparser` 相關項目已在 Python 3.2 中棄用，它們的棄用警告現在會"
"提示它們即將於 Python 3.12 中移除："

#: ../../whatsnew/3.11.rst:1748
msgid "the :class:`!configparser.SafeConfigParser` class"
msgstr ":class:`!configparser.SafeConfigParser` 類別"

#: ../../whatsnew/3.11.rst:1749
msgid "the :attr:`!configparser.ParsingError.filename` property"
msgstr ":attr:`!configparser.ParsingError.filename` 屬性"

#: ../../whatsnew/3.11.rst:1750
msgid "the :meth:`configparser.RawConfigParser.readfp` method"
msgstr ":meth:`configparser.RawConfigParser.readfp` 方法"

#: ../../whatsnew/3.11.rst:1752
msgid "(Contributed by Hugo van Kemenade in :issue:`45173`.)"
msgstr "（由 Hugo van Kemenade 於 :issue:`45173` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1754
msgid ""
":class:`!configparser.LegacyInterpolation` has been deprecated in the "
"docstring since Python 3.2, and is not listed in the :mod:`configparser` "
"documentation. It now emits a :exc:`DeprecationWarning` and will be removed "
"in Python 3.13. Use :class:`configparser.BasicInterpolation` or :class:"
"`configparser.ExtendedInterpolation` instead. (Contributed by Hugo van "
"Kemenade in :issue:`46607`.)"
msgstr ""
":class:`!configparser.LegacyInterpolation` 自 Python 3.2 起已在文件字串中棄"
"用，並且未在 :mod:`configparser` 文檔中列出。它現在會發出一個 :exc:"
"`DeprecationWarning` 並將在 Python 3.13 中刪除。請改用 :class:`configparser."
"BasicInterpolation` 或 :class:`configparser.ExtendedInterpolation`。（由 "
"Hugo van Kemenade 在 :issue:`46607` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1761
msgid ""
"The older set of :mod:`importlib.resources` functions were deprecated in "
"favor of the replacements added in Python 3.9 and will be removed in a "
"future Python version, due to not supporting resources located within "
"package subdirectories:"
msgstr ""
"舊的 :mod:`importlib.resources` 函式集因為不支援定位套件子目錄中的資源而被棄"
"用、並將在未來的 Python 版本中刪除，取而代之的是在 Python 3.9 中添加的替代方"
"案："

#: ../../whatsnew/3.11.rst:1766
msgid ":func:`importlib.resources.contents`"
msgstr ":func:`importlib.resources.contents`"

#: ../../whatsnew/3.11.rst:1767
msgid ":func:`importlib.resources.is_resource`"
msgstr ":func:`importlib.resources.is_resource`"

#: ../../whatsnew/3.11.rst:1768
msgid ":func:`importlib.resources.open_binary`"
msgstr ":func:`importlib.resources.open_binary`"

#: ../../whatsnew/3.11.rst:1769
msgid ":func:`importlib.resources.open_text`"
msgstr ":func:`importlib.resources.open_text`"

#: ../../whatsnew/3.11.rst:1770
msgid ":func:`importlib.resources.read_binary`"
msgstr ":func:`importlib.resources.read_binary`"

#: ../../whatsnew/3.11.rst:1771
msgid ":func:`importlib.resources.read_text`"
msgstr ":func:`importlib.resources.read_text`"

#: ../../whatsnew/3.11.rst:1772
msgid ":func:`importlib.resources.path`"
msgstr ":func:`importlib.resources.path`"

#: ../../whatsnew/3.11.rst:1774
msgid ""
"The :func:`locale.getdefaultlocale` function is deprecated and will be "
"removed in Python 3.13. Use :func:`locale.setlocale`, :func:`locale."
"getpreferredencoding(False) <locale.getpreferredencoding>` and :func:`locale."
"getlocale` functions instead. (Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
":func:`locale.getdefaultlocale` 函式已被棄用且將於 Python 3.13 中移除。請改"
"用 :func:`locale.setlocale`、:func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>` 和 :func:`locale.getlocale`。（Victor Stinner "
"於 :gh:`90817` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1780
msgid ""
"The :func:`locale.resetlocale` function is deprecated and will be removed in "
"Python 3.13. Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. "
"(Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
":func:`locale.resetlocale` 函式已棄用並將於 Python 3.13 中移除，請改用 "
"``locale.setlocale(locale.LC_ALL, \"\")``。（由 Victor Stinner 於 :gh:"
"`90817` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1784
msgid ""
"Stricter rules will now be applied for numerical group references and group "
"names in :ref:`regular expressions <re-syntax>`. Only sequences of ASCII "
"digits will now be accepted as a numerical reference, and the group name in :"
"class:`bytes` patterns and replacement strings can only contain ASCII "
"letters, digits and underscores. For now, a deprecation warning is raised "
"for syntax violating these rules. (Contributed by Serhiy Storchaka in :gh:"
"`91760`.)"
msgstr ""
"現在將對\\ :ref:`規則運算式 <re-syntax>`\\ 中的數值群組參照 (numerical group "
"references) 和群組名稱套用更嚴格的規則。現在只接受 ASCII 數字序列作為數值參"
"照，並且 :class:`bytes` 模式 (pattern) 的群組名稱和替換字串中只能包含 ASCII "
"字母、數字和底線。目前，會針對違反這些規則的語法發出棄用警告。（由 Serhiy "
"Storchaka 在 :gh:`91760` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1792
msgid ""
"In the :mod:`re` module, the :func:`!re.template` function and the "
"corresponding :data:`!re.TEMPLATE` and :data:`!re.T` flags are deprecated, "
"as they were undocumented and lacked an obvious purpose. They will be "
"removed in Python 3.13. (Contributed by Serhiy Storchaka and Miro Hrončok "
"in :gh:`92728`.)"
msgstr ""
"在 :mod:`re` 模組中，:func:`!re.template` 函式和相應的 :data:`!re.TEMPLATE` "
"和 :data:`!re.T` 旗標被棄用，因為它們沒被記錄於文件中並且缺乏明顯的目的。它們"
"將在 Python 3.13 中被刪除。（由 Serhiy Storchaka 和 Miro Hrončok 在 :gh:"
"`92728` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1798
msgid ""
":func:`turtle.settiltangle` has been deprecated since Python 3.1; it now "
"emits a deprecation warning and will be removed in Python 3.13. Use :func:"
"`turtle.tiltangle` instead (it was earlier incorrectly marked as deprecated, "
"and its docstring is now corrected). (Contributed by Hugo van Kemenade in :"
"issue:`45837`.)"
msgstr ""
":func:`turtle.settiltangle` 自 Python 3.1 以來已被棄用；它現在會發出棄用警"
"告，並將在 Python 3.13 中刪除。請改用 :func:`turtle.tiltangle`\\ （它之前被錯"
"誤地標記為已棄用，其文件字串現在已更正）。（由 Hugo van Kemenade 在 :issue:"
"`45837` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1804
msgid ""
":class:`typing.Text`, which exists solely to provide compatibility support "
"between Python 2 and Python 3 code, is now deprecated. Its removal is "
"currently unplanned, but users are encouraged to use :class:`str` instead "
"wherever possible. (Contributed by Alex Waygood in :gh:`92332`.)"
msgstr ""
"僅用於支援 Python 2 和 Python 3 程式碼間相容性的 :class:`typing.Text` 現已棄"
"用。目前未計劃刪除它，但鼓勵用戶盡可能使用 :class:`str` 代替。（由 Alex "
"Waygood 在 :gh:`92332` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1810
msgid ""
"The keyword argument syntax for constructing :data:`typing.TypedDict` types "
"is now deprecated. Support will be removed in Python 3.13. (Contributed by "
"Jingchen Ye in :gh:`90224`.)"
msgstr ""
"用於建構 :data:`typing.TypedDict` 型別的關鍵字引數語法現已棄用。將在 Python "
"3.13 中停止支援。（由 Jingchen Ye 在 :gh:`90224` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1814
msgid ""
":class:`!webbrowser.MacOSX` is deprecated and will be removed in Python "
"3.13. It is untested, undocumented, and not used by :mod:`webbrowser` "
"itself. (Contributed by Dong-hee Na in :issue:`42255`.)"
msgstr ""
":class:`!webbrowser.MacOSX` 已被棄用且將於 Python 3.13 中移除。它並沒有被測試"
"過、沒紀錄於文件、也沒有被 :mod:`webbrowser` 本身使用。（由 Dong-hee Na 於 :"
"issue:`42255`。）"

#: ../../whatsnew/3.11.rst:1818
msgid ""
"The behavior of returning a value from a :class:`~unittest.TestCase` and :"
"class:`~unittest.IsolatedAsyncioTestCase` test methods (other than the "
"default ``None`` value) is now deprecated."
msgstr ""
"回傳從 :class:`~unittest.TestCase` 和 :class:`~unittest."
"IsolatedAsyncioTestCase` 測試方法（預設的 ``None`` 值除外）給定值的行為現已棄"
"用。"

#: ../../whatsnew/3.11.rst:1822
msgid ""
"Deprecated the following not-formally-documented :mod:`unittest` functions, "
"scheduled for removal in Python 3.13:"
msgstr ""
"棄用以下並沒有正式紀錄於文件中的 :mod:`unittest` 函式，並預計於 Python 3.13 "
"中移除："

#: ../../whatsnew/3.11.rst:1825
msgid ":func:`!unittest.findTestCases`"
msgstr ":func:`!unittest.findTestCases`"

#: ../../whatsnew/3.11.rst:1826
msgid ":func:`!unittest.makeSuite`"
msgstr ":func:`!unittest.makeSuite`"

#: ../../whatsnew/3.11.rst:1827
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ":func:`!unittest.getTestCaseNames`"

#: ../../whatsnew/3.11.rst:1829
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr "改用 :class:`~unittest.TestLoader` 方法："

#: ../../whatsnew/3.11.rst:1831
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromModule`"

#: ../../whatsnew/3.11.rst:1832
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromTestCase`"

#: ../../whatsnew/3.11.rst:1833
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ":meth:`unittest.TestLoader.getTestCaseNames`"

#: ../../whatsnew/3.11.rst:1835
msgid "(Contributed by Erlend E. Aasland in :issue:`5846`.)"
msgstr "（由 Erlend E. Aasland 於 :issue:`5846` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1842 ../../whatsnew/3.11.rst:2571
msgid "Pending Removal in Python 3.12"
msgstr "Python 3.12 中待決議的移除項目"

#: ../../whatsnew/3.11.rst:1844
msgid ""
"The following Python APIs have been deprecated in earlier Python releases, "
"and will be removed in Python 3.12."
msgstr "下列 API 已在先前的 Python 發布版本中棄用，並將於 Python 3.12 中移除。"

#: ../../whatsnew/3.11.rst:1847
msgid ""
"C APIs pending removal are :ref:`listed separately <whatsnew311-c-api-"
"pending-removal>`."
msgstr ""
"待定的 C API 移除項目為\\ :ref:`獨立列出的 <whatsnew311-c-api-pending-"
"removal>`。"

#: ../../whatsnew/3.11.rst:1850
msgid "The :mod:`asynchat` module"
msgstr ":mod:`asynchat` 模組"

#: ../../whatsnew/3.11.rst:1851
msgid "The :mod:`asyncore` module"
msgstr ":mod:`asyncore` 模組"

#: ../../whatsnew/3.11.rst:1852
msgid "The :ref:`entire distutils package <distutils-deprecated>`"
msgstr ":ref:`整個 distutils 套件 <distutils-deprecated>`"

#: ../../whatsnew/3.11.rst:1853
msgid "The :mod:`imp` module"
msgstr ":mod:`imp` 模組"

#: ../../whatsnew/3.11.rst:1854
msgid "The :class:`typing.io <typing.IO>` namespace"
msgstr ":class:`typing.io <typing.IO>` 命名空間"

#: ../../whatsnew/3.11.rst:1855
msgid "The :class:`typing.re <typing.Pattern>` namespace"
msgstr ":class:`typing.re <typing.Pattern>` 命名空間"

#: ../../whatsnew/3.11.rst:1856
msgid ":func:`!cgi.log`"
msgstr ":func:`!cgi.log`"

#: ../../whatsnew/3.11.rst:1857
msgid ":func:`importlib.find_loader`"
msgstr ":func:`importlib.find_loader`"

#: ../../whatsnew/3.11.rst:1858
msgid ":meth:`importlib.abc.Loader.module_repr`"
msgstr ":meth:`importlib.abc.Loader.module_repr`"

#: ../../whatsnew/3.11.rst:1859
msgid ":meth:`importlib.abc.MetaPathFinder.find_module`"
msgstr ":meth:`importlib.abc.MetaPathFinder.find_module`"

#: ../../whatsnew/3.11.rst:1860
msgid ":meth:`importlib.abc.PathEntryFinder.find_loader`"
msgstr ":meth:`importlib.abc.PathEntryFinder.find_loader`"

#: ../../whatsnew/3.11.rst:1861
msgid ":meth:`importlib.abc.PathEntryFinder.find_module`"
msgstr ":meth:`importlib.abc.PathEntryFinder.find_module`"

#: ../../whatsnew/3.11.rst:1862
msgid ":meth:`!importlib.machinery.BuiltinImporter.find_module`"
msgstr ":meth:`!importlib.machinery.BuiltinImporter.find_module`"

#: ../../whatsnew/3.11.rst:1863
msgid ":meth:`!importlib.machinery.BuiltinLoader.module_repr`"
msgstr ":meth:`!importlib.machinery.BuiltinLoader.module_repr`"

#: ../../whatsnew/3.11.rst:1864
msgid ":meth:`!importlib.machinery.FileFinder.find_loader`"
msgstr ":meth:`!importlib.machinery.FileFinder.find_loader`"

#: ../../whatsnew/3.11.rst:1865
msgid ":meth:`!importlib.machinery.FileFinder.find_module`"
msgstr ":meth:`!importlib.machinery.FileFinder.find_module`"

#: ../../whatsnew/3.11.rst:1866
msgid ":meth:`!importlib.machinery.FrozenImporter.find_module`"
msgstr ":meth:`!importlib.machinery.FrozenImporter.find_module`"

#: ../../whatsnew/3.11.rst:1867
msgid ":meth:`!importlib.machinery.FrozenLoader.module_repr`"
msgstr ":meth:`!importlib.machinery.FrozenLoader.module_repr`"

#: ../../whatsnew/3.11.rst:1868
msgid ":meth:`importlib.machinery.PathFinder.find_module`"
msgstr ":meth:`importlib.machinery.PathFinder.find_module`"

#: ../../whatsnew/3.11.rst:1869
msgid ":meth:`!importlib.machinery.WindowsRegistryFinder.find_module`"
msgstr ":meth:`!importlib.machinery.WindowsRegistryFinder.find_module`"

#: ../../whatsnew/3.11.rst:1870
msgid ":func:`importlib.util.module_for_loader`"
msgstr ":func:`importlib.util.module_for_loader`"

#: ../../whatsnew/3.11.rst:1871
msgid ":func:`!importlib.util.set_loader_wrapper`"
msgstr ":func:`!importlib.util.set_loader_wrapper`"

#: ../../whatsnew/3.11.rst:1872
msgid ":func:`!importlib.util.set_package_wrapper`"
msgstr ":func:`!importlib.util.set_package_wrapper`"

#: ../../whatsnew/3.11.rst:1873
msgid ":class:`pkgutil.ImpImporter`"
msgstr ":class:`pkgutil.ImpImporter`"

#: ../../whatsnew/3.11.rst:1874
msgid ":class:`pkgutil.ImpLoader`"
msgstr ":class:`pkgutil.ImpLoader`"

#: ../../whatsnew/3.11.rst:1875
msgid ":meth:`pathlib.Path.link_to`"
msgstr ":meth:`pathlib.Path.link_to`"

#: ../../whatsnew/3.11.rst:1876
msgid ":func:`!sqlite3.enable_shared_cache`"
msgstr ":func:`!sqlite3.enable_shared_cache`"

#: ../../whatsnew/3.11.rst:1877
msgid ":func:`!sqlite3.OptimizedUnicode`"
msgstr ":func:`!sqlite3.OptimizedUnicode`"

#: ../../whatsnew/3.11.rst:1878
msgid ":envvar:`PYTHONTHREADDEBUG` environment variable"
msgstr ":envvar:`PYTHONTHREADDEBUG` 環境變數"

#: ../../whatsnew/3.11.rst:1879
msgid "The following deprecated aliases in :mod:`unittest`:"
msgstr ":mod:`unittest` 中被棄用的別名："

#: ../../whatsnew/3.11.rst:1882
msgid "Deprecated alias"
msgstr "已棄用的別名"

#: ../../whatsnew/3.11.rst:1882
msgid "Method Name"
msgstr "方法名稱"

#: ../../whatsnew/3.11.rst:1882
msgid "Deprecated in"
msgstr "棄用於"

#: ../../whatsnew/3.11.rst:1884
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.11.rst:1884 ../../whatsnew/3.11.rst:1891
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.11.rst:1884 ../../whatsnew/3.11.rst:1885
#: ../../whatsnew/3.11.rst:1886 ../../whatsnew/3.11.rst:1887
#: ../../whatsnew/3.11.rst:1888 ../../whatsnew/3.11.rst:1889
#: ../../whatsnew/3.11.rst:1890
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.11.rst:1885
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.11.rst:1885
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.11.rst:1886
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.11.rst:1886 ../../whatsnew/3.11.rst:1892
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.11.rst:1887
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.11.rst:1887 ../../whatsnew/3.11.rst:1893
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.11.rst:1888
msgid "``failUnlessAlmostEqual``"
msgstr "``failUnlessAlmostEqual``"

#: ../../whatsnew/3.11.rst:1888 ../../whatsnew/3.11.rst:1894
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.11.rst:1889
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.11.rst:1889 ../../whatsnew/3.11.rst:1895
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.11.rst:1890
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.11.rst:1890
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.11.rst:1891
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.11.rst:1891 ../../whatsnew/3.11.rst:1892
#: ../../whatsnew/3.11.rst:1893 ../../whatsnew/3.11.rst:1894
#: ../../whatsnew/3.11.rst:1895 ../../whatsnew/3.11.rst:1896
#: ../../whatsnew/3.11.rst:1897
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.11.rst:1892
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.11.rst:1893
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.11.rst:1894
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.11.rst:1895
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.11.rst:1896
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.11.rst:1896
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.11.rst:1897
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.11.rst:1897
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.11.rst:1898
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.11.rst:1898
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.11.rst:1898
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.11.rst:1905 ../../whatsnew/3.11.rst:2597
msgid "Removed"
msgstr "已移除"

#: ../../whatsnew/3.11.rst:1907
msgid "This section lists Python APIs that have been removed in Python 3.11."
msgstr "此部分列出 Python 3.11 中移除的 Python API。"

#: ../../whatsnew/3.11.rst:1909
msgid ""
"Removed C APIs are :ref:`listed separately <whatsnew311-c-api-removed>`."
msgstr "被移除的 C API 被\\ :ref:`獨立列出 <whatsnew311-c-api-removed>`。"

#: ../../whatsnew/3.11.rst:1911
msgid ""
"Removed the :func:`!@asyncio.coroutine` :term:`decorator` enabling legacy "
"generator-based coroutines to be compatible with :keyword:`async` / :keyword:"
"`await` code. The function has been deprecated since Python 3.8 and the "
"removal was initially scheduled for Python 3.10. Use :keyword:`async def` "
"instead. (Contributed by Illia Volochii in :issue:`43216`.)"
msgstr ""
"刪除了 :func:`!@asyncio.coroutine` :term:`decorator` 使遺留的基於生成器的協"
"程 (generator-based coroutine) 與 :keyword:`async` / :keyword:`await` 程式碼"
"相容。該函數自 Python 3.8 起已被棄用，計劃於 Python 3.10 刪除。請改用 :"
"keyword:`async def`。（由 Illia Volochii 在 :issue:`43216` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1918
msgid ""
"Removed :class:`!asyncio.coroutines.CoroWrapper` used for wrapping legacy "
"generator-based coroutine objects in the debug mode. (Contributed by Illia "
"Volochii in :issue:`43216`.)"
msgstr ""
"移除除錯模式中用於包裝遺留基於產生器之協程物件的 :class:`!asyncio.coroutines."
"CoroWrapper`。（由 Illia Volochii 於 :issue:`43216` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1922
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint`, disabled in Python 3.9, is now "
"entirely removed. This is because of the behavior of the socket option "
"``SO_REUSEADDR`` in UDP. (Contributed by Hugo van Kemenade in :issue:"
"`45129`.)"
msgstr ""
"因為有重大的安全性考量，Python 3.9 中停用的 :meth:`asyncio.loop."
"create_datagram_endpoint` 之 *reuse_address* 參數目前已經移除。這是因為 UDP "
"socket 選項 ``SO_REUSEADDR`` 的行為所致。（由 Hugo van Kemenade 於 :issue:"
"`45129` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1928
msgid ""
"Removed the :mod:`!binhex` module, deprecated in Python 3.9. Also removed "
"the related, similarly-deprecated :mod:`binascii` functions:"
msgstr ""
"移除 Python 3.9 中棄用的 :mod:`!binhex` 模組，與其相關且相似的 :mod:"
"`binascii` 函式也一併被移除："

#: ../../whatsnew/3.11.rst:1931
msgid ":func:`!binascii.a2b_hqx`"
msgstr ":func:`!binascii.a2b_hqx`"

#: ../../whatsnew/3.11.rst:1932
msgid ":func:`!binascii.b2a_hqx`"
msgstr ":func:`!binascii.b2a_hqx`"

#: ../../whatsnew/3.11.rst:1933
msgid ":func:`!binascii.rlecode_hqx`"
msgstr ":func:`!binascii.rlecode_hqx`"

#: ../../whatsnew/3.11.rst:1934
msgid ":func:`!binascii.rldecode_hqx`"
msgstr ":func:`!binascii.rldecode_hqx`"

#: ../../whatsnew/3.11.rst:1936
msgid "The :func:`binascii.crc_hqx` function remains available."
msgstr ":func:`binascii.crc_hqx` 維持可用。"

#: ../../whatsnew/3.11.rst:1938
msgid "(Contributed by Victor Stinner in :issue:`45085`.)"
msgstr "（由 Victor Stinner 於 :issue:`45085` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1940
msgid ""
"Removed the :mod:`distutils` ``bdist_msi`` command deprecated in Python 3.9. "
"Use ``bdist_wheel`` (wheel packages) instead. (Contributed by Hugo van "
"Kemenade in :issue:`45124`.)"
msgstr ""
"移除 Python 3.9 中棄用的 :mod:`distutils` ``bdist_msi`` 命令。請改用 "
"``bdist_wheel``\\ （wheel 套件）。（由 Hugo van Kemenade 於 :issue:`45124` 中"
"貢獻。）"

#: ../../whatsnew/3.11.rst:1944
msgid ""
"Removed the :meth:`~object.__getitem__` methods of :class:`xml.dom.pulldom."
"DOMEventStream`, :class:`wsgiref.util.FileWrapper` and :class:`fileinput."
"FileInput`, deprecated since Python 3.9. (Contributed by Hugo van Kemenade "
"in :issue:`45132`.)"
msgstr ""
"將 :class:`xml.dom.pulldom.DOMEventStream`、:class:`wsgiref.util."
"FileWrapper` 和 :class:`fileinput.FileInput` 自 Python 3.9 中棄用的 :meth:"
"`~object.__getitem__` 方法移除。(由 Hugo van Kemenade 在 :issue:`45132` 中貢"
"獻。)"

#: ../../whatsnew/3.11.rst:1949
msgid ""
"Removed the deprecated :mod:`gettext` functions :func:`!lgettext`, :func:`!"
"ldgettext`, :func:`!lngettext` and :func:`!ldngettext`. Also removed the :"
"func:`!bind_textdomain_codeset` function, the :meth:`!NullTranslations."
"output_charset` and :meth:`!NullTranslations.set_output_charset` methods, "
"and the *codeset* parameter of :func:`!translation` and :func:`!install`, "
"since they are only used for the :func:`!l*gettext` functions. (Contributed "
"by Dong-hee Na and Serhiy Storchaka in :issue:`44235`.)"
msgstr ""
"刪除了已棄用的 :mod:`gettext` 函式 :func:`!lgettext`、:func:`!ldgettext`、:"
"func:`!lngettext` 和 :func:`!ldngettext`，也刪除了 :func:`!"
"bind_textdomain_codeset` 函式、:meth:`!NullTranslations.output_charset` 和 :"
"meth:`!NullTranslations.set_output_charset` 方法，以及 :func:`!translation` "
"和 :func:`!install` 的 *codeset* 參數，因為它們僅被用於 :func:`!l*gettext` 函"
"式。 （由 Dong-hee Na 和 Serhiy Storchaka 在 :issue:`44235` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1959
msgid "Removed from the :mod:`inspect` module:"
msgstr "於 :mod:`inspect` 模組中移除："

#: ../../whatsnew/3.11.rst:1961
msgid ""
"The :func:`!getargspec` function, deprecated since Python 3.0; use :func:"
"`inspect.signature` or :func:`inspect.getfullargspec` instead."
msgstr ""
"Python 3.0 中棄用的 :func:`!getargspec`；改用 :func:`inspect.signature` 或 :"
"func:`inspect.getfullargspec`。"

#: ../../whatsnew/3.11.rst:1964
msgid ""
"The :func:`!formatargspec` function, deprecated since Python 3.5; use the :"
"func:`inspect.signature` function or the :class:`inspect.Signature` object "
"directly."
msgstr ""
"Python 3.5 中棄用的 :func:`!formatargspec` 函式；請直接用 :func:`inspect."
"signature` 函式或 :class:`inspect.Signature` 物件。"

#: ../../whatsnew/3.11.rst:1968
msgid ""
"The undocumented :meth:`!Signature.from_builtin` and :meth:`!Signature."
"from_function` methods, deprecated since Python 3.5; use the :meth:"
"`Signature.from_callable() <inspect.Signature.from_callable>` method instead."
msgstr ""
"Python 3.5 中停用且沒有被紀錄於文件上的 :meth:`!Signature.from_builtin` 和 :"
"meth:`!Signature.from_function` 方法；改用 :meth:`Signature.from_callable() "
"<inspect.Signature.from_callable>` 方法。"

#: ../../whatsnew/3.11.rst:1973
msgid "(Contributed by Hugo van Kemenade in :issue:`45320`.)"
msgstr "（由 Hugo van Kemenade 於 :issue:`45320` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:1975
msgid ""
"Removed the :meth:`~object.__class_getitem__` method from :class:`pathlib."
"PurePath`, because it was not used and added by mistake in previous "
"versions. (Contributed by Nikita Sobolev in :issue:`46483`.)"
msgstr ""
"自 :class:`pathlib.PurePath` 中移除 :meth:`~object.__class_getitem__` 方法，"
"因為它是前一版本中誤加且沒被使用。（由 Nikita Sobolev 於 :issue:`46483` 中所"
"貢獻。）"

#: ../../whatsnew/3.11.rst:1980
msgid ""
"Removed the :class:`!MailmanProxy` class in the :mod:`smtpd` module, as it "
"is unusable without the external :mod:`!mailman` package. (Contributed by "
"Dong-hee Na in :issue:`35800`.)"
msgstr ""
"移除 :mod:`smtpd` 模組中的 :class:`!MailmanProxy` 類別，因為它無法獨立於外部"
"套件 :mod:`!mailman` 使用。（由 Dong-hee Na 於 :issue:`35800` 貢獻。）"

#: ../../whatsnew/3.11.rst:1984
msgid ""
"Removed the deprecated :meth:`!split` method of :class:`!_tkinter."
"TkappType`. (Contributed by Erlend E. Aasland in :issue:`38371`.)"
msgstr ""
"移除 :class:`!_tkinter.TkappType` 已被棄用的 :meth:`!split` 方法。（由 "
"Erlend E. Aasland 於 :issue:`38371` 貢獻。）"

#: ../../whatsnew/3.11.rst:1987
msgid ""
"Removed namespace package support from :mod:`unittest` discovery. It was "
"introduced in Python 3.4 but has been broken since Python 3.7. (Contributed "
"by Inada Naoki in :issue:`23882`.)"
msgstr ""
"從 :mod:`unittest` 中刪除了命名空間套件支援。它在 Python 3.4 中引入，但自 "
"Python 3.7 以來已無法運作。（由 Inada Naoki 在 :issue:`23882` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1991
msgid ""
"Removed the undocumented private :meth:`!float.__set_format__()` method, "
"previously known as :meth:`!float.__setformat__()` in Python 3.7. Its "
"docstring said: \"You probably don't want to use this function. It exists "
"mainly to be used in Python's test suite.\" (Contributed by Victor Stinner "
"in :issue:`46852`.)"
msgstr ""
"將未被記錄於文件中的私有方法 :meth:`!float.__set_format__()` 移除，它過去是 "
"Python 3.7 中的 :meth:`!float.__setformat__()`。它的文件字串 (docstring) 說"
"到：「你大概不會想要使用這個函式，它只為了讓 Python 測試系列套件 (suite) 使用"
"而存在。」（由 Victor Stinner 於 :issue:`46852` 中貢獻。）"

#: ../../whatsnew/3.11.rst:1997
msgid ""
"The :option:`!--experimental-isolated-subinterpreters` configure flag (and "
"corresponding :c:macro:`!EXPERIMENTAL_ISOLATED_SUBINTERPRETERS` macro) have "
"been removed."
msgstr ""
"移除 :option:`!--experimental-isolated-subinterpreters` 配置旗標（與對應的 :"
"c:macro:`!EXPERIMENTAL_ISOLATED_SUBINTERPRETERS` 巨集）。"

#: ../../whatsnew/3.11.rst:2001
msgid ""
"`Pynche <https://pypi.org/project/pynche/>`_ --- The Pythonically Natural "
"Color and Hue Editor --- has been moved out of ``Tools/scripts`` and is "
"`being developed independently <https://gitlab.com/warsaw/pynche/-/tree/"
"main>`_ from the Python source tree."
msgstr ""
"`Pynche <https://pypi.org/project/pynche/>`_ --- Python 風格的自然色彩與色調"
"編輯器 --- 已被移出 ``Tools/scripts``，`獨立開發 <https://gitlab.com/warsaw/"
"pynche/-/tree/main>`_\\ 於 Python 原始碼之外。"

#: ../../whatsnew/3.11.rst:2011 ../../whatsnew/3.11.rst:2241
msgid "Porting to Python 3.11"
msgstr "移植至 Python 3.11"

#: ../../whatsnew/3.11.rst:2013
msgid ""
"This section lists previously described changes and other bugfixes in the "
"Python API that may require changes to your Python code."
msgstr ""
"本部分列出了之前描述的 Python API 中可能需要你去更改 Python 程式碼的變更和其"
"他錯誤修復。"

#: ../../whatsnew/3.11.rst:2016
msgid ""
"Porting notes for the C API are :ref:`listed separately <whatsnew311-c-api-"
"porting>`."
msgstr "C API 的移植被\\ :ref:`獨立列出 <whatsnew311-c-api-porting>`。"

#: ../../whatsnew/3.11.rst:2019
msgid ""
":func:`open`, :func:`io.open`, :func:`codecs.open` and :class:`fileinput."
"FileInput` no longer accept ``'U'`` (\"universal newline\") in the file "
"mode. In Python 3, \"universal newline\" mode is used by default whenever a "
"file is opened in text mode, and the ``'U'`` flag has been deprecated since "
"Python 3.3. The :ref:`newline parameter <open-newline-parameter>` to these "
"functions controls how universal newlines work. (Contributed by Victor "
"Stinner in :issue:`37330`.)"
msgstr ""
":func:`open`、:func:`io.open`、:func:`codecs.open` 和 :class:`fileinput."
"FileInput` 不再接受 ``'U'``\\ （\"universal newline\"，通用換行符）文件模式。"
"在 Python 3 中，每當以文本模式 (text mode) 打開檔案時，預設情況下會使用「通用"
"換行符」模式，並且自 Python 3.3 以來就不推薦使用 ``'U'`` 旗標。這些函式的 :"
"ref:`newline 參數 <open-newline-parameter>`\\ 控制了通用換行符的作用方式。"
"（由 Victor Stinner 在 :issue:`37330` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2028
msgid ""
":class:`ast.AST` node positions are now validated when provided to :func:"
"`compile` and other related functions. If invalid positions are detected, a :"
"exc:`ValueError` will be raised. (Contributed by Pablo Galindo in :gh:"
"`93351`)"
msgstr ""
":class:`ast.AST` 節點位置現在會在提供給 :func:`compile` 和其他相關函式時被驗"
"證。如果檢測到無效位置，則會引發 :exc:`ValueError`。（由 Pablo Galindo 在 :"
"gh:`93351` 中貢獻）"

#: ../../whatsnew/3.11.rst:2032
msgid ""
"Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor` "
"executors to :meth:`asyncio.loop.set_default_executor` following a "
"deprecation in Python 3.8. (Contributed by Illia Volochii in :issue:`43234`.)"
msgstr ""
"在 Python 3.8 中棄用後，禁止將非 :class:`concurrent.futures."
"ThreadPoolExecutor` 執行器傳遞給 :meth:`asyncio.loop.set_default_executor`。"
"（由 Illia Volochii 在 :issue:`43234` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2037
msgid ""
":mod:`calendar`: The :class:`calendar.LocaleTextCalendar` and :class:"
"`calendar.LocaleHTMLCalendar` classes now use :func:`locale.getlocale`, "
"instead of using :func:`locale.getdefaultlocale`, if no locale is specified. "
"(Contributed by Victor Stinner in :issue:`46659`.)"
msgstr ""
":mod:`calendar`：:class:`calendar.LocaleTextCalendar` 和 :class:`calendar."
"LocaleHTMLCalendar` 類別如果沒有指定語言環境，現在會使用 :func:`locale."
"getlocale` 而非 :func:`locale.getdefaultlocale`。（由 Victor Stinner 在 :"
"issue:`46659` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2043
msgid ""
"The :mod:`pdb` module now reads the :file:`.pdbrc` configuration file with "
"the ``'UTF-8'`` encoding. (Contributed by Srinivas Reddy Thatiparthy (శ్రీనివాస్  "
"రెడ్డి తాటిపర్తి) in :issue:`41137`.)"
msgstr ""
":mod:`pdb` 模組現在會讀取 ``'UTF-8'`` 編碼的 :file:`.pdbrc` 配置檔案。"
"（Srinivas Reddy Thatiparthy (శ్రీనివాస్  రెడ్డి తాటిపర్తి) 於 :issue:`41137` 貢獻。）"

#: ../../whatsnew/3.11.rst:2047
msgid ""
"The *population* parameter of :func:`random.sample` must be a sequence, and "
"automatic conversion of :class:`set`\\s to :class:`list`\\s is no longer "
"supported. Also, if the sample size is larger than the population size, a :"
"exc:`ValueError` is raised. (Contributed by Raymond Hettinger in :issue:"
"`40465`.)"
msgstr ""
":func:`random.sample` 的 *population* 參數必須是一個序列，不再支援 :class:"
"`set` 到 :class:`list` 的自動轉換。此外，如果抽樣大小大於總體大小，則會引發 :"
"exc:`ValueError`。（由 Raymond Hettinger 在 :issue:`40465` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2053
msgid ""
"The *random* optional parameter of :func:`random.shuffle` was removed. It "
"was previously an arbitrary random function to use for the shuffle; now, :"
"func:`random.random` (its previous default) will always be used."
msgstr ""
"刪除了 :func:`random.shuffle` 的 *random* 可選參數。它以前是用於隨機排列 "
"(shuffle) 的任意隨機函式；現在都會使用 :func:`random.random`\\ （這是它以前的"
"預設值）。"

#: ../../whatsnew/3.11.rst:2057
msgid ""
"In :mod:`re` :ref:`re-syntax`, global inline flags (e.g. ``(?i)``) can now "
"only be used at the start of regular expressions. Using them elsewhere has "
"been deprecated since Python 3.6. (Contributed by Serhiy Storchaka in :issue:"
"`47066`.)"
msgstr ""
"在 :mod:`re` :ref:`re-syntax` 中，全域行內旗標（例如 ``(?i)``）現在只能在規則"
"運算式的開頭使用。自 Python 3.6 以來，在其他地方使用它們已被棄用。 （由 "
"Serhiy Storchaka 在 :issue:`47066` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2062
msgid ""
"In the :mod:`re` module, several long-standing bugs where fixed that, in "
"rare cases, could cause capture groups to get the wrong result. Therefore, "
"this could change the captured output in these cases. (Contributed by Ma Lin "
"in :issue:`35859`.)"
msgstr ""
"在 :mod:`re` 模組中修復了幾個長期存在的錯誤，在極少數情況下，這些錯誤可能會導"
"致捕獲群組 (capture group) 得到錯誤的結果。因此，這可能會在這些情況下更改捕獲"
"的輸出。（Ma Lin 在 :issue:`35859` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2071
msgid "Build Changes"
msgstr "建置變更"

#: ../../whatsnew/3.11.rst:2073
msgid ""
"CPython now has :pep:`11` :pep:`Tier 3 support <11#tier-3>` for cross "
"compiling to the `WebAssembly <https://webassembly.org/>`_ platforms "
"`Emscripten <https://emscripten.org/>`_ (``wasm32-unknown-emscripten``, i.e. "
"Python in the browser) and `WebAssembly System Interface (WASI) <https://"
"wasi.dev/>`_ (``wasm32-unknown-wasi``). The effort is inspired by previous "
"work like `Pyodide <https://pyodide.org/>`_. These platforms provide a "
"limited subset of POSIX APIs; Python standard libraries features and modules "
"related to networking, processes, threading, signals, mmap, and users/groups "
"are not available or don't work. (Emscripten contributed by Christian Heimes "
"and Ethan Smith in :gh:`84461` and WASI contributed by Christian Heimes in :"
"gh:`90473`; platforms promoted in :gh:`95085`)"
msgstr ""
"CPython 現在有 :pep:`11` :pep:`Tier 3 支援 <11#tier-3>` 以用於交叉編譯至 "
"`WebAssembly <https://webassembly.org/>`_ 平台 `Emscripten <https://"
"emscripten.org/>`_\\ （``wasm32-unknown-emscripten``，即瀏覽器中的 Python）"
"和 `WebAssembly 系統介面 (WASI) <https://wasi.dev/>`_ (``wasm32-unknown-"
"wasi``)。這個靈感來自過往的貢獻，例如 `Pyodide <https://pyodide.org/>`_。這些"
"平台提供了有限的 POSIX API 子集；Python 標準函式庫功能和與網路、行程、執行"
"緒、訊號、mmap、用戶/群組相關的模組不開放使用或無法正常使用。（Emscripten 由 "
"Christian Heimes 和 Ethan Smith 在 :gh:`84461` 貢獻，WASI 由 Christian "
"Heimes 在 :gh:`90473` 貢獻；平台在 :gh:`95085` 中推廣）"

#: ../../whatsnew/3.11.rst:2087
msgid "Building Python now requires:"
msgstr "建置 Python 現在必須要有："

#: ../../whatsnew/3.11.rst:2089
msgid ""
"A `C11 <https://en.cppreference.com/w/c/11>`_ compiler. `Optional C11 "
"features <https://en.wikipedia.org/wiki/"
"C11_(C_standard_revision)#Optional_features>`_ are not required. "
"(Contributed by Victor Stinner in :issue:`46656`.)"
msgstr ""
"`C11 <https://en.cppreference.com/w/c/11>`_ 編譯器。`可選的 C11 特性 "
"<https://en.wikipedia.org/wiki/"
"C11_(C_standard_revision)#Optional_features>`_ 並非必要。（由 Victor Stinner "
"於 :issue:`46656` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2095
msgid ""
"Support for `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ floating "
"point numbers. (Contributed by Victor Stinner in :issue:`46917`.)"
msgstr ""
"對 `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ 浮點數的支援（由 "
"Victor Stinner 於 :issue:`46917` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2099
msgid ""
"Support for `floating point Not-a-Number (NaN) <https://en.wikipedia.org/"
"wiki/NaN#Floating_point>`_, as the :c:macro:`!Py_NO_NAN` macro has been "
"removed. (Contributed by Victor Stinner in :issue:`46656`.)"
msgstr ""
"支援\\ `浮點非數字 (floating point NaN) <https://en.wikipedia.org/wiki/"
"NaN#Floating_point>`_，因為 :c:macro:`!Py_NO_NAN` 巨集已被刪除。 （由 Victor "
"Stinner 在 :issue:`46656` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2104
msgid ""
"A `C99 <https://en.cppreference.com/w/c/99>`_ ``<math.h>`` header file "
"providing the :c:func:`!copysign`, :c:func:`!hypot`, :c:func:`!isfinite`, :c:"
"func:`!isinf`, :c:func:`!isnan`, and :c:func:`!round` functions (contributed "
"by Victor Stinner in :issue:`45440`); and a :c:data:`!NAN` constant or the :"
"c:func:`!__builtin_nan` function (Contributed by Victor Stinner in :issue:"
"`46640`)."
msgstr ""
"`C99 <https://en.cppreference.com/w/c/99>`_ ``<math.h>`` 標頭檔提供了 :c:"
"func:`!copysign`、:c:func:`!hypot`、:c:func:`!isfinite`、:c:func:`!isinf`、:"
"c:func:`!isnan` 和 :c:func:`!round` 函數（由 Victor Stinner 在 :issue:"
"`45440` 中貢獻)；和一個 :c:data:`!NAN` 常數或 :c:func:`!__builtin_nan` 函式"
"（由 Victor Stinner 在 :issue:`46640` 中貢獻）。"

#: ../../whatsnew/3.11.rst:2112
msgid ""
"The :mod:`tkinter` package now requires `Tcl/Tk <https://www.tcl.tk>`_ "
"version 8.5.12 or newer. (Contributed by Serhiy Storchaka in :issue:`46996`.)"
msgstr ""
":mod:`tkinter` 套件現在必須要有 `Tcl/Tk <https://www.tcl.tk>`_ 8.5.12 或更新"
"的版本。（由 Serhiy Storchaka 於 :issue:`46996` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2116
msgid ""
"Build dependencies, compiler flags, and linker flags for most stdlib "
"extension modules are now detected by :program:`configure`. libffi, libnsl, "
"libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk, and uuid flags are "
"detected by `pkg-config <https://www.freedesktop.org/wiki/Software/pkg-"
"config/>`_ (when available). :mod:`tkinter` now requires a pkg-config "
"command to detect development settings for `Tcl/Tk`_ headers and libraries. "
"(Contributed by Christian Heimes and Erlend Egeberg Aasland in :issue:"
"`45847`, :issue:`45747`, and :issue:`45763`.)"
msgstr ""
"大多數 stdlib 擴充模組的依賴套件、編譯器旗標 (compiler flag) 和鏈接器旗標 "
"(linker flags) 現在可以透過 :program:`configure` 檢測出來。（當可用時）\\ "
"`pkg-config <https://www.freedesktop.org/wiki/Software/pkg-config/>`_ 會檢測"
"出 libffi、libnsl、libsqlite3、zlib、bzip2、liblzma、libcrypt、Tcl/Tk 和 "
"uuid 旗標。:mod:`tkinter` 現在需要一個 pkg-config 命令來檢測 `Tcl/Tk`_ 標頭檔"
"和函式庫的開發設定。（由 Christian Heimes 和 Erlend Egeberg Aasland 在 :"
"issue:`45847`、:issue:`45747` 和 :issue:`45763` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2126
msgid ""
"libpython is no longer linked against libcrypt. (Contributed by Mike Gilbert "
"in :issue:`45433`.)"
msgstr ""
"libpython 不再鏈接到 libcrypt。 （由 Mike Gilbert 在 :issue:`45433` 中貢"
"獻。）"

#: ../../whatsnew/3.11.rst:2129
msgid ""
"CPython can now be built with the `ThinLTO <https://clang.llvm.org/docs/"
"ThinLTO.html>`_ option via passing ``thin`` to :option:`--with-lto`, i.e. "
"``--with-lto=thin``. (Contributed by Dong-hee Na and Brett Holman in :issue:"
"`44340`.)"
msgstr ""
"CPython 現在可以透過將 ``thin`` 傳遞給 :option:`--with-lto`\\ （也就是 ``--"
"with-lto=thin``\\ ）來以 `ThinLTO <https://clang.llvm.org/docs/ThinLTO."
"html>`_ 選項建置。（由 Dong-hee Na 與 Brett Holman 於 :issue:`44340` 中所貢"
"獻。）"

#: ../../whatsnew/3.11.rst:2134
msgid ""
"Freelists for object structs can now be disabled. A new :program:`configure` "
"option :option:`!--without-freelists` can be used to disable all freelists "
"except empty tuple singleton. (Contributed by Christian Heimes in :issue:"
"`45522`.)"
msgstr ""
"物件結構的空閒列表現在可被禁用。一個新的 :program:`configure` 選項 :option:`!"
"—without-freelists` 可用於禁用除空元組單例之外的所有空閒列表。（由 Christian "
"Heimes 在 :issue:`45522` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2139
msgid ""
"``Modules/Setup`` and ``Modules/makesetup`` have been improved and tied up. "
"Extension modules can now be built through ``makesetup``. All except some "
"test modules can be linked statically into a main binary or library. "
"(Contributed by Brett Cannon and Christian Heimes in :issue:`45548`, :issue:"
"`45570`, :issue:`45571`, and :issue:`43974`.)"
msgstr ""
"``Modules/Setup`` 和 ``Modules/makesetup`` 已得到改進和綁定。現在可以通過 "
"``makesetup`` 建置擴充模組。除了一些測試模組外，所有模組都可以靜態鏈接到主要"
"的二進制文件或函式庫中。（由 Brett Cannon 和 Christian Heimes 在 :issue:"
"`45548`、:issue:`45570`、:issue:`45571` 和 :issue:`43974` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2146
msgid ""
"Use the environment variables :envvar:`!TCLTK_CFLAGS` and :envvar:`!"
"TCLTK_LIBS` to manually specify the location of Tcl/Tk headers and "
"libraries. The :program:`configure` options :option:`!--with-tcltk-includes` "
"and :option:`!--with-tcltk-libs` have been removed."
msgstr ""
"使用環境變數 :envvar:`!TCLTK_CFLAGS` 和 :envvar:`!TCLTK_LIBS` 以手動指定 Tcl/"
"Tk 標頭檔和函式庫的位置。:program:`configure` 選項 :option:`!—with-tcltk-"
"includes` 和 :option:`!—with-tcltk-libs` 已被刪除。"

#: ../../whatsnew/3.11.rst:2152
msgid ""
"On RHEL 7 and CentOS 7 the development packages do not provide ``tcl.pc`` "
"and ``tk.pc``; use ``TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"``. The "
"directory ``Misc/rhel7`` contains ``.pc`` files and instructions on how to "
"build Python with RHEL 7's and CentOS 7's Tcl/Tk and OpenSSL."
msgstr ""
"RHEL 7 和 CentOS 7 上的開發套件並無提供 ``tcl.pc`` 和 ``tk.pc``；要使用 "
"``TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"``。目錄 ``Misc/rhel7`` 包含 ``."
"pc`` 檔案與如何使用 RHEL 7 和 CentOS 7 的 Tcl/Tk 與 OpenSSL 建置 Python 的指"
"示。"

#: ../../whatsnew/3.11.rst:2157
msgid ""
"CPython will now use 30-bit digits by default for the Python :class:`int` "
"implementation. Previously, the default was to use 30-bit digits on "
"platforms with ``SIZEOF_VOID_P >= 8``, and 15-bit digits otherwise. It's "
"still possible to explicitly request use of 15-bit digits via either the :"
"option:`--enable-big-digits` option to the configure script or (for Windows) "
"the ``PYLONG_BITS_IN_DIGIT`` variable in ``PC/pyconfig.h``, but this option "
"may be removed at some point in the future. (Contributed by Mark Dickinson "
"in :issue:`45569`.)"
msgstr ""
"CPython 現在預設使用 30-bit 數字來實作 Python :class:`int`。以前，在 "
"``SIZEOF_VOID_P >= 8`` 的平台上預設使用 30-bit 數字，否則使用 15-bit 數字，但"
"仍能通過配置腳本的 :option:`--enable-big-digits` 選項或（於 Windows）\\ ``PC/"
"pyconfig.h`` 中的 ``PYLONG_BITS_IN_DIGIT`` 變數來明確請求使用 15-bit 數字，但"
"此選項可能會在將來的某個時候被刪除。 （由 Mark Dickinson 在 :issue:`45569` 中"
"貢獻。）"

#: ../../whatsnew/3.11.rst:2170
msgid "C API Changes"
msgstr "C API 變更"

#: ../../whatsnew/3.11.rst:2177
msgid ""
"Add a new :c:func:`PyType_GetName` function to get type's short name. "
"(Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"新增 :c:func:`PyType_GetName` 函式來取得型別的短名。（由 Hai Shi 於 :issue:"
"`42035` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2180
msgid ""
"Add a new :c:func:`PyType_GetQualName` function to get type's qualified "
"name. (Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"新增 :c:func:`PyType_GetQualName` 函式來取得型別的合格名稱 (qualified name)。"
"（由 Hai Shi 於 :issue:`42035` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2183
msgid ""
"Add new :c:func:`PyThreadState_EnterTracing` and :c:func:"
"`PyThreadState_LeaveTracing` functions to the limited C API to suspend and "
"resume tracing and profiling. (Contributed by Victor Stinner in :issue:"
"`43760`.)"
msgstr ""
"在受限 C API (limited C API) 中新增 :c:func:`PyThreadState_EnterTracing` 和 :"
"c:func:`PyThreadState_LeaveTracing` 函式來中止和繼續追蹤 (tracing) 和性能分"
"析 (profiling)。（由 Victor Stinner 於 :issue:`43760` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2188
msgid ""
"Added the :c:data:`Py_Version` constant which bears the same value as :c:"
"macro:`PY_VERSION_HEX`. (Contributed by  Gabriele N. Tornetta in :issue:"
"`43931`.)"
msgstr ""
"添加了 :c:data:`Py_Version` 常數，其值與 :c:macro:`PY_VERSION_HEX` 相同。"
"（由 Gabriele N. Tornetta 在 :issue:`43931` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2192
msgid ""
":c:type:`Py_buffer` and APIs are now part of the limited API and the stable "
"ABI:"
msgstr ":c:type:`Py_buffer` 與 API 目前是受限 API 與穩定 ABI 中的一部分："

#: ../../whatsnew/3.11.rst:2195
msgid ":c:func:`PyObject_CheckBuffer`"
msgstr ":c:func:`PyObject_CheckBuffer`"

#: ../../whatsnew/3.11.rst:2196
msgid ":c:func:`PyObject_GetBuffer`"
msgstr ":c:func:`PyObject_GetBuffer`"

#: ../../whatsnew/3.11.rst:2197
msgid ":c:func:`PyBuffer_GetPointer`"
msgstr ":c:func:`PyBuffer_GetPointer`"

#: ../../whatsnew/3.11.rst:2198
msgid ":c:func:`PyBuffer_SizeFromFormat`"
msgstr ":c:func:`PyBuffer_SizeFromFormat`"

#: ../../whatsnew/3.11.rst:2199
msgid ":c:func:`PyBuffer_ToContiguous`"
msgstr ":c:func:`PyBuffer_ToContiguous`"

#: ../../whatsnew/3.11.rst:2200
msgid ":c:func:`PyBuffer_FromContiguous`"
msgstr ":c:func:`PyBuffer_FromContiguous`"

#: ../../whatsnew/3.11.rst:2201
msgid ":c:func:`PyBuffer_CopyData`"
msgstr ":c:func:`PyBuffer_CopyData`"

#: ../../whatsnew/3.11.rst:2202
msgid ":c:func:`PyBuffer_IsContiguous`"
msgstr ":c:func:`PyBuffer_IsContiguous`"

#: ../../whatsnew/3.11.rst:2203
msgid ":c:func:`PyBuffer_FillContiguousStrides`"
msgstr ":c:func:`PyBuffer_FillContiguousStrides`"

#: ../../whatsnew/3.11.rst:2204
msgid ":c:func:`PyBuffer_FillInfo`"
msgstr ":c:func:`PyBuffer_FillInfo`"

#: ../../whatsnew/3.11.rst:2205
msgid ":c:func:`PyBuffer_Release`"
msgstr ":c:func:`PyBuffer_Release`"

#: ../../whatsnew/3.11.rst:2206
msgid ":c:func:`PyMemoryView_FromBuffer`"
msgstr ":c:func:`PyMemoryView_FromBuffer`"

#: ../../whatsnew/3.11.rst:2207
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` type slots"
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` 與 :c:member:`~PyBufferProcs."
"bf_releasebuffer` 型別插槽 (type slot)"

#: ../../whatsnew/3.11.rst:2210
msgid "(Contributed by Christian Heimes in :issue:`45459`.)"
msgstr "（由 Christian Heimes 於 :issue:`45459` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2212
msgid ""
"Added the :c:data:`PyType_GetModuleByDef` function, used to get the module "
"in which a method was defined, in cases where this information is not "
"available directly (via :c:type:`PyCMethod`). (Contributed by Petr Viktorin "
"in :issue:`46613`.)"
msgstr ""
"新增 :c:data:`PyType_GetModuleByDef` 函式，它將被用於取得定義一個方法的模組，"
"以免這項資訊無法直接被取得（透過 :c:type:`PyCMethod`）。（由 Petr Viktorin "
"於 :issue:`46613` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2217
msgid ""
"Add new functions to pack and unpack C double (serialize and deserialize): :"
"c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, :c:func:`PyFloat_Pack8`, :c:"
"func:`PyFloat_Unpack2`, :c:func:`PyFloat_Unpack4` and :c:func:"
"`PyFloat_Unpack8`. (Contributed by Victor Stinner in :issue:`46906`.)"
msgstr ""
"新增函式以打包 (pack) 和取出 (unpack) C double（序列化和反序列化）：:c:func:"
"`PyFloat_Pack2`、:c:func:`PyFloat_Pack4`、:c:func:`PyFloat_Pack8`、:c:func:"
"`PyFloat_Unpack2` , :c:func:`PyFloat_Unpack4` 和 :c:func:`PyFloat_Unpack8`。"
"（由 Victor Stinner 在 :issue:`46906` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2223
msgid ""
"Add new functions to get frame object attributes: :c:func:"
"`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, :c:func:"
"`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."
msgstr ""
"新增取得幀物件屬性的函式：:c:func:`PyFrame_GetBuiltins`、:c:func:"
"`PyFrame_GetGenerator`、:c:func:`PyFrame_GetGlobals`、:c:func:"
"`PyFrame_GetLasti`。"

#: ../../whatsnew/3.11.rst:2227
msgid ""
"Added two new functions to get and set the active exception instance: :c:"
"func:`PyErr_GetHandledException` and :c:func:`PyErr_SetHandledException`. "
"These are alternatives to :c:func:`PyErr_SetExcInfo()` and :c:func:"
"`PyErr_GetExcInfo()` which work with the legacy 3-tuple representation of "
"exceptions. (Contributed by Irit Katriel in :issue:`46343`.)"
msgstr ""
"添加了兩個新函式來獲得和設置仍在作用的例外實例：:c:func:"
"`PyErr_GetHandledException` 和 :c:func:`PyErr_SetHandledException`。這些是 :"
"c:func:`PyErr_SetExcInfo()` 和 :c:func:`PyErr_GetExcInfo()` 的替代品，它們與"
"例外的遺留三元組表示法一起作用。（由 Irit Katriel 在 :issue:`46343` 中貢"
"獻。）"

#: ../../whatsnew/3.11.rst:2234
msgid ""
"Added the :c:member:`PyConfig.safe_path` member. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"新增 :c:member:`PyConfig.safe_path` 成員。（由 Victor Stinner 於 :gh:`57684` "
"中所貢獻。）"

#: ../../whatsnew/3.11.rst:2245
msgid ""
"Some macros have been converted to static inline functions to avoid `macro "
"pitfalls <https://gcc.gnu.org/onlinedocs/cpp/Macro-Pitfalls.html>`_. The "
"change should be mostly transparent to users, as the replacement functions "
"will cast their arguments to the expected types to avoid compiler warnings "
"due to static type checks. However, when the limited C API is set to >=3.11, "
"these casts are not done, and callers will need to cast arguments to their "
"expected types. See :pep:`670` for more details. (Contributed by Victor "
"Stinner and Erlend E. Aasland in :gh:`89653`.)"
msgstr ""
"一些巨集已轉換為行內靜態函式以避免\\ `巨集陷阱 (macro pitfalls) <https://gcc."
"gnu.org/onlinedocs/cpp/Macro-Pitfalls.html>`_。這種變化對用戶來說應該是透明"
"的，因為替換函式會將它們的引數轉換為預期的型別，以避免由於靜態型別檢查而產生"
"的編譯器警告。但是，當受限 C API 設置為 >=3.11 時，這些轉換不會完成，使用者需"
"要將引數轉換為他們期望的型別。有關更多詳細資訊，請參閱 :pep:`670`。 （由 "
"Victor Stinner 和 Erlend E. Aasland 在 :gh:`89653` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2256
msgid ""
":c:func:`PyErr_SetExcInfo()` no longer uses the ``type`` and ``traceback`` "
"arguments, the interpreter now derives those values from the exception "
"instance (the ``value`` argument). The function still steals references of "
"all three arguments. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_SetExcInfo()` 不再使用 ``type`` 和 ``traceback`` 引數，直譯器"
"現在從例外實例（``value`` 引數）中獲得這些值。該函式仍會偷用這三個引數的參"
"照。（由 Irit Katriel 在 :issue:`45711` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2262
msgid ""
":c:func:`PyErr_GetExcInfo()` now derives the ``type`` and ``traceback`` "
"fields of the result from the exception instance (the ``value`` field). "
"(Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_GetExcInfo()` 現在從例外實例的結果（``value`` 欄位）中導出 "
"``type`` 和 ``traceback`` 欄位。（由 Irit Katriel 在 :issue:`45711` 中貢"
"獻。）"

#: ../../whatsnew/3.11.rst:2266
msgid ""
":c:struct:`_frozen` has a new ``is_package`` field to indicate whether or "
"not the frozen module is a package.  Previously, a negative value in the "
"``size`` field was the indicator.  Now only non-negative values be used for "
"``size``. (Contributed by Kumar Aditya in :issue:`46608`.)"
msgstr ""
":c:struct:`_frozen` 有一個新的 ``is_package`` 欄位來表示凍結模組是否為一個套"
"件。以前 ``size`` 欄位中的負值是指標，現在只有非負值可用於 ``size``。 （由 "
"Kumar Aditya 在 :issue:`46608` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2272
msgid ""
":c:func:`_PyFrameEvalFunction` now takes ``_PyInterpreterFrame*`` as its "
"second parameter, instead of ``PyFrameObject*``. See :pep:`523` for more "
"details of how to use this function pointer type."
msgstr ""
":c:func:`_PyFrameEvalFunction` 現在將 ``_PyInterpreterFrame*`` 作為其第二個參"
"數，而不是 ``PyFrameObject*``。有關如何使用此函式指標型別的更多詳細資訊，請參"
"閱 :pep:`523`。"

#: ../../whatsnew/3.11.rst:2276
msgid ""
":c:func:`PyCode_New` and :c:func:`PyCode_NewWithPosOnlyArgs` now take an "
"additional ``exception_table`` argument. Using these functions should be "
"avoided, if at all possible. To get a custom code object: create a code "
"object using the compiler, then get a modified version with the ``replace`` "
"method."
msgstr ""
":c:func:`PyCode_New` 和 :c:func:`PyCode_NewWithPosOnlyArgs` 現在採用額外的 "
"``exception_table`` 引數。如果可能的話應該避免使用這些函數。要獲取自定義程式"
"碼物件，使用編譯器建立一個程式碼物件，然後使用 ``replace`` 方法來得到修改後的"
"版本。"

#: ../../whatsnew/3.11.rst:2282
msgid ""
":c:type:`PyCodeObject` no longer has the ``co_code``, ``co_varnames``, "
"``co_cellvars`` and ``co_freevars`` fields.  Instead, use :c:func:"
"`PyCode_GetCode`, :c:func:`PyCode_GetVarnames`, :c:func:`PyCode_GetCellvars` "
"and :c:func:`PyCode_GetFreevars` respectively to access them via the C API. "
"(Contributed by Brandt Bucher in :issue:`46841` and Ken Jin in :gh:`92154` "
"and :gh:`94936`.)"
msgstr ""
":c:type:`PyCodeObject` 不再會有 ``co_code``、``co_varnames``、"
"``co_cellvars`` 和 ``co_freevars`` 欄位。分別被改為透過 C API 的 :c:func:"
"`PyCode_GetCode`、:c:func:`PyCode_GetVarnames`、:c:func:`PyCode_GetCellvars` "
"和 :c:func:`PyCode_GetFreevars` 來存取。（由 Brandt Bucher 在 :issue:"
"`46841`、Ken Jin 在 :gh:`92154` 與 :gh:`94936` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2290
msgid ""
"The old trashcan macros (``Py_TRASHCAN_SAFE_BEGIN``/"
"``Py_TRASHCAN_SAFE_END``) are now deprecated. They should be replaced by the "
"new macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""
"舊的回收筒巨集 (trashcan macro) (``Py_TRASHCAN_SAFE_BEGIN``/"
"``Py_TRASHCAN_SAFE_END``) 現在已經被棄用，它們應被新的巨集 "
"``Py_TRASHCAN_BEGIN`` 和 ``Py_TRASHCAN_END`` 所取代。"

#: ../../whatsnew/3.11.rst:2294
msgid "A tp_dealloc function that has the old macros, such as::"
msgstr ""
"一個用到老舊巨集的 tp_dealloc 函式，像是：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:2305
msgid "should migrate to the new macros as follows::"
msgstr ""
"應該要搬遷到新的巨集，如下所示：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:2316
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in."
msgstr ""
"請注意 ``Py_TRASHCAN_BEGIN`` 有第二個引數，它應該是它所在的釋放函數 "
"(deallocation function)。"

#: ../../whatsnew/3.11.rst:2319
msgid ""
"To support older Python versions in the same codebase, you can define the "
"following macros and use them throughout the code (credit: these were copied "
"from the ``mypy`` codebase)::"
msgstr ""
"為支援舊版 Python 在同一份程式碼中，你可以定義以下巨集並在程式碼中使用它們"
"（要歸功於 ``mypy`` 程式碼，這些是從那邊複製過來的）：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:2331
msgid ""
"The :c:func:`PyType_Ready` function now raises an error if a type is defined "
"with the :const:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse function (:"
"c:member:`PyTypeObject.tp_traverse`). (Contributed by Victor Stinner in :"
"issue:`44263`.)"
msgstr ""
"如果一個型別是以 :const:`Py_TPFLAGS_HAVE_GC` 旗標來定義，但卻沒有遍歷函式 "
"(traverse function) (:c:member:`PyTypeObject.tp_traverse`)，那 :c:func:"
"`PyType_Ready` 函式現在會引發一個錯誤。（由 Victor Stinner 於 :issue:`44263` "
"中貢獻。）"

#: ../../whatsnew/3.11.rst:2336
msgid ""
"Heap types with the :const:`Py_TPFLAGS_IMMUTABLETYPE` flag can now inherit "
"the :pep:`590` vectorcall protocol.  Previously, this was only possible for :"
"ref:`static types <static-types>`. (Contributed by Erlend E. Aasland in :"
"issue:`43908`)"
msgstr ""
"帶有 :const:`Py_TPFLAGS_IMMUTABLETYPE` 旗標的堆積型別現在可以繼承 :pep:`590` "
"向量呼叫協定 (vectorcall protocol)。以前這僅適用於 :ref:`static types "
"<static-types>`。（由 Erlend E. Aasland 在 :issue:`43908` 中貢獻）。"

#: ../../whatsnew/3.11.rst:2341
msgid ""
"Since :c:func:`Py_TYPE()` is changed to a inline static function, "
"``Py_TYPE(obj) = new_type`` must be replaced with ``Py_SET_TYPE(obj, "
"new_type)``: see the :c:func:`Py_SET_TYPE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"由於 :c:func:`Py_TYPE()` 更改為行內靜態函式 (inline static function)，因此 "
"``Py_TYPE(obj) = new_type`` 必須替換為 ``Py_SET_TYPE(obj, new_type)``：參見 :"
"c:func:`Py_SET_TYPE()` 函式（自 Python 3.9 起可用）。為了向後相容，可以使用這"
"個巨集："

#: ../../whatsnew/3.11.rst:2353 ../../whatsnew/3.11.rst:2367
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "（由 Victor Stinner 於 :issue:`39573` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2355
msgid ""
"Since :c:func:`Py_SIZE()` is changed to a inline static function, "
"``Py_SIZE(obj) = new_size`` must be replaced with ``Py_SET_SIZE(obj, "
"new_size)``: see the :c:func:`Py_SET_SIZE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"由於 :c:func:`Py_SIZE()` 更改為行內靜態函式，因此 ``Py_SIZE(obj) = "
"new_size`` 必須替換為 ``Py_SET_SIZE(obj, new_size)``：參見 :c:func:"
"`Py_SET_SIZE()` 函式（自 Python 3.9 起可用）。為了向後相容，可以使用這個巨"
"集："

#: ../../whatsnew/3.11.rst:2369
msgid ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, ``<stdio."
"h>``, ``<errno.h>`` and ``<string.h>`` when the ``Py_LIMITED_API`` macro is "
"set to ``0x030b0000`` (Python 3.11) or higher. C extensions should "
"explicitly include the header files after ``#include <Python.h>``. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"當 ``Py_LIMITED_API`` 巨集被設定為 ``0x030b0000``\\ （Python 3.11）或以上，"
"``<Python.h>`` 不再會包含標頭檔 ``<stdlib.h>``、``<stdio.h>``、``<errno.h>`` "
"和 ``<string.h>``。C 擴充程式應該要清楚的在 ``#include <Python.h>`` 之後引入"
"標頭檔案。（由 Victor Stinner 於 :issue:`45434` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2375
msgid ""
"The non-limited API files ``cellobject.h``, ``classobject.h``, ``code.h``, "
"``context.h``, ``funcobject.h``, ``genobject.h`` and ``longintrepr.h`` have "
"been moved to the ``Include/cpython`` directory. Moreover, the ``eval.h`` "
"header file was removed. These files must not be included directly, as they "
"are already included in ``Python.h``: :ref:`Include Files <api-includes>`. "
"If they have been included directly, consider including ``Python.h`` "
"instead. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"非受限 API (non-limited API) 檔案 ``cellobject.h``、``classobject.h``、"
"``code.h``、``context.h``、``funcobject.h``、``genobject. h`` 和 "
"``longintrepr.h`` 已移至 ``Include/cpython`` 目錄。此外，``eval.h`` 標頭檔已"
"被刪除。不能直接引入這些文件，因為它們已被包含在 ``Python.h`` 中：:ref:`引入"
"檔案 <api-includes>`。如果它們已被直接引入，請考慮改為引入 ``Python.h``。 "
"（由 Victor Stinner 在 :issue:`35134` 中貢獻。）"

#: ../../whatsnew/3.11.rst:2383
msgid ""
"The :c:func:`PyUnicode_CHECK_INTERNED` macro has been excluded from the "
"limited C API. It was never usable there, because it used internal "
"structures which are not available in the limited C API. (Contributed by "
"Victor Stinner in :issue:`46007`.)"
msgstr ""
":c:func:`PyUnicode_CHECK_INTERNED` 巨集已從受限 C API 中移出，它從來沒辦法被"
"使用，因為它使用了受限 C API 不提供的內部結構。（由 Victor Stinner 於 :issue:"
"`46007` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2388
msgid ""
"The following frame functions and type are now directly available with "
"``#include <Python.h>``, it's no longer needed to add ``#include "
"<frameobject.h>``:"
msgstr ""
"以下用於幀 (frame) 的函式與型別現在可直接透過 ``#include <Python.h>`` 來使"
"用，不必再加上 ``#include <frameobject.h>``："

#: ../../whatsnew/3.11.rst:2392
msgid ":c:func:`PyFrame_Check`"
msgstr ":c:func:`PyFrame_Check`"

#: ../../whatsnew/3.11.rst:2393
msgid ":c:func:`PyFrame_GetBack`"
msgstr ":c:func:`PyFrame_GetBack`"

#: ../../whatsnew/3.11.rst:2394
msgid ":c:func:`PyFrame_GetBuiltins`"
msgstr ":c:func:`PyFrame_GetBuiltins`"

#: ../../whatsnew/3.11.rst:2395
msgid ":c:func:`PyFrame_GetGenerator`"
msgstr ":c:func:`PyFrame_GetGenerator`"

#: ../../whatsnew/3.11.rst:2396
msgid ":c:func:`PyFrame_GetGlobals`"
msgstr ":c:func:`PyFrame_GetGlobals`"

#: ../../whatsnew/3.11.rst:2397
msgid ":c:func:`PyFrame_GetLasti`"
msgstr ":c:func:`PyFrame_GetLasti`"

#: ../../whatsnew/3.11.rst:2398
msgid ":c:func:`PyFrame_GetLocals`"
msgstr ":c:func:`PyFrame_GetLocals`"

#: ../../whatsnew/3.11.rst:2399
msgid ":c:type:`PyFrame_Type`"
msgstr ":c:type:`PyFrame_Type`"

#: ../../whatsnew/3.11.rst:2401
msgid "(Contributed by Victor Stinner in :gh:`93937`.)"
msgstr "（由 Victor Stinner 於 :gh:`93937` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2405
msgid ""
"The :c:type:`PyFrameObject` structure members have been removed from the "
"public C API."
msgstr ":c:type:`PyFrameObject` 結構成員已經從公開的 C API 中移除。"

#: ../../whatsnew/3.11.rst:2408
msgid ""
"While the documentation notes that the :c:type:`PyFrameObject` fields are "
"subject to change at any time, they have been stable for a long time and "
"were used in several popular extensions."
msgstr ""
"雖然文件指出 :c:type:`PyFrameObject` 欄位隨時可能發生變化，但它們已經穩定了很"
"長時間，並被用於幾個流行的擴充套件中。"

#: ../../whatsnew/3.11.rst:2412
msgid ""
"In Python 3.11, the frame struct was reorganized to allow performance "
"optimizations. Some fields were removed entirely, as they were details of "
"the old implementation."
msgstr ""
"Python 3.11 中，幀的結構被重新編制來為性能做最佳化，有些作為舊版實作細節的欄"
"位被整個移除。"

#: ../../whatsnew/3.11.rst:2416
msgid ":c:type:`PyFrameObject` fields:"
msgstr ":c:type:`PyFrameObject` 欄位："

#: ../../whatsnew/3.11.rst:2418
msgid "``f_back``: use :c:func:`PyFrame_GetBack`."
msgstr "``f_back``：使用 :c:func:`PyFrame_GetBack`。"

#: ../../whatsnew/3.11.rst:2419
msgid "``f_blockstack``: removed."
msgstr "``f_blockstack``：已移除。"

#: ../../whatsnew/3.11.rst:2420
msgid "``f_builtins``: use :c:func:`PyFrame_GetBuiltins`."
msgstr "``f_builtins``：使用 :c:func:`PyFrame_GetBuiltins`。"

#: ../../whatsnew/3.11.rst:2421
msgid "``f_code``: use :c:func:`PyFrame_GetCode`."
msgstr "``f_code``：使用 :c:func:`PyFrame_GetCode`。"

#: ../../whatsnew/3.11.rst:2422
msgid "``f_gen``: use :c:func:`PyFrame_GetGenerator`."
msgstr "``f_gen``：使用 :c:func:`PyFrame_GetGenerator`。"

#: ../../whatsnew/3.11.rst:2423
msgid "``f_globals``: use :c:func:`PyFrame_GetGlobals`."
msgstr "``f_globals``：使用 :c:func:`PyFrame_GetGlobals`。"

#: ../../whatsnew/3.11.rst:2424
msgid "``f_iblock``: removed."
msgstr "``f_iblock``：已移除。"

#: ../../whatsnew/3.11.rst:2425
msgid ""
"``f_lasti``: use :c:func:`PyFrame_GetLasti`. Code using ``f_lasti`` with "
"``PyCode_Addr2Line()`` should use :c:func:`PyFrame_GetLineNumber` instead; "
"it may be faster."
msgstr ""
"``f_lasti``：使用 :c:func:`PyFrame_GetLasti`。程式碼中 ``f_lasti`` 有與 "
"``PyCode_Addr2Line()`` 同時使用的部分應該改用 :c:func:"
"`PyFrame_GetLineNumber`；它可能會更快。"

#: ../../whatsnew/3.11.rst:2428
msgid "``f_lineno``: use :c:func:`PyFrame_GetLineNumber`"
msgstr "``f_lineno``：使用 :c:func:`PyFrame_GetLineNumber`"

#: ../../whatsnew/3.11.rst:2429
msgid "``f_locals``: use :c:func:`PyFrame_GetLocals`."
msgstr "``f_locals``：使用 :c:func:`PyFrame_GetLocals`。"

#: ../../whatsnew/3.11.rst:2430
msgid "``f_stackdepth``: removed."
msgstr "``f_stackdepth``：已移除。"

#: ../../whatsnew/3.11.rst:2431
msgid "``f_state``: no public API (renamed to ``f_frame.f_state``)."
msgstr "``f_state``：無公開 API（重新命名為 ``f_frame.f_state``）。"

#: ../../whatsnew/3.11.rst:2432
msgid "``f_trace``: no public API."
msgstr "``f_trace``：無公開 API。"

#: ../../whatsnew/3.11.rst:2433
msgid ""
"``f_trace_lines``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."
msgstr ""
"``f_trace_lines``：使用 ``PyObject_GetAttrString((PyObject*)frame, "
"“f_trace_lines”)``。"

#: ../../whatsnew/3.11.rst:2434
msgid ""
"``f_trace_opcodes``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."
msgstr ""
"``f_trace_opcodes``：使用 ``PyObject_GetAttrString((PyObject*)frame, "
"“f_trace_opcodes”)``。"

#: ../../whatsnew/3.11.rst:2435
msgid "``f_localsplus``: no public API (renamed to ``f_frame.localsplus``)."
msgstr "``f_localsplus``：無公開 API（重新命名為 ``f_frame.localsplus``）。"

#: ../../whatsnew/3.11.rst:2436
msgid "``f_valuestack``: removed."
msgstr "``f_valuestack``：已移除。"

#: ../../whatsnew/3.11.rst:2438
msgid ""
"The Python frame object is now created lazily. A side effect is that the "
"``f_back`` member must not be accessed directly, since its value is now also "
"computed lazily. The :c:func:`PyFrame_GetBack` function must be called "
"instead."
msgstr ""
"Python 幀物件的建立現為惰性的 (lazily)，一個副作用是 ``f_back`` 成員不能被直"
"接存取，因為其職的計算也是惰性的，要改呼叫 :c:func:`PyFrame_GetBack`。"

#: ../../whatsnew/3.11.rst:2443
msgid ""
"Debuggers that accessed the ``f_locals`` directly *must* call :c:func:"
"`PyFrame_GetLocals` instead. They no longer need to call :c:func:"
"`PyFrame_FastToLocalsWithError` or :c:func:`PyFrame_LocalsToFast`, in fact "
"they should not call those functions. The necessary updating of the frame is "
"now managed by the virtual machine."
msgstr ""
"直接存取 ``f_locals`` 的除錯器\\ *必須*\\ 改為呼叫 :c:func:"
"`PyFrame_GetLocals`。他們不再需要呼叫 :c:func:"
"`PyFrame_FastToLocalsWithError` 或 :c:func:`PyFrame_LocalsToFast`，事實上他們"
"不應該呼叫這些函式。框架的必要更新現在由虛擬機管理。"

#: ../../whatsnew/3.11.rst:2449
msgid "Code defining ``PyFrame_GetCode()`` on Python 3.8 and older::"
msgstr ""
"``PyFrame_GetCode()`` 在 Python 3.8 以前的程式定義：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:2459
msgid "Code defining ``PyFrame_GetBack()`` on Python 3.8 and older::"
msgstr ""
"``PyFrame_GetBack()`` 在 Python 3.8 以前的程式定義：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:2469
msgid ""
"Or use the `pythoncapi_compat project <https://github.com/python/"
"pythoncapi_compat>`__ to get these two functions on older Python versions."
msgstr ""
"或是使用 `pythoncapi_compat 計畫 <https://github.com/python/"
"pythoncapi_compat>`__\\ 來在舊版 Python 中取得它們。"

#: ../../whatsnew/3.11.rst:2473
msgid "Changes of the :c:type:`PyThreadState` structure members:"
msgstr ":c:type:`PyThreadState` 結構成員的改動："

#: ../../whatsnew/3.11.rst:2475
msgid ""
"``frame``: removed, use :c:func:`PyThreadState_GetFrame` (function added to "
"Python 3.9 by :issue:`40429`). Warning: the function returns a :term:`strong "
"reference`, need to call :c:func:`Py_XDECREF`."
msgstr ""
"``frame``：已移除，改用 :c:func:`PyThreadState_GetFrame`\\ （:issue:`40429` "
"於 Python 3.9 新增的函式）。警告：會回傳 :term:`strong reference` 的函式必須"
"呼叫 :c:func:`Py_XDECREF`。"

#: ../../whatsnew/3.11.rst:2479
msgid ""
"``tracing``: changed, use :c:func:`PyThreadState_EnterTracing` and :c:func:"
"`PyThreadState_LeaveTracing` (functions added to Python 3.11 by :issue:"
"`43760`)."
msgstr ""
"``tracing``：已變更，改用 :c:func:`PyThreadState_EnterTracing` 和 :c:func:"
"`PyThreadState_LeaveTracing`\\ （:issue:`43760` 於 Python 3.11 中新增的函"
"式）。"

#: ../../whatsnew/3.11.rst:2482
msgid ""
"``recursion_depth``: removed, use ``(tstate->recursion_limit - tstate-"
">recursion_remaining)`` instead."
msgstr ""
"``recursion_depth``：已移除，請改用 ``(tstate->recursion_limit - tstate-"
">recursion_remaining)``。"

#: ../../whatsnew/3.11.rst:2484
msgid "``stackcheck_counter``: removed."
msgstr "``stackcheck_counter``：已移除。"

#: ../../whatsnew/3.11.rst:2486
msgid "Code defining ``PyThreadState_GetFrame()`` on Python 3.8 and older::"
msgstr ""
"``PyThreadState_GetFrame()`` 在 Python 3.8 以前的程式定義：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:2496
msgid ""
"Code defining ``PyThreadState_EnterTracing()`` and "
"``PyThreadState_LeaveTracing()`` on Python 3.10 and older::"
msgstr ""
"``PyThreadState_EnterTracing()`` 與 ``PyThreadState_LeaveTracing()`` 在 "
"Python 3.10 以前的程式定義：\n"
"\n"
"::"

#: ../../whatsnew/3.11.rst:2522
msgid ""
"Or use `the pythoncapi_compat project <https://github.com/python/"
"pythoncapi_compat>`__ to get these functions on old Python functions."
msgstr ""
"或是使用 `pythoncapi_compat 計畫 <https://github.com/python/"
"pythoncapi_compat>`__\\ 來在舊版 Python 函式中取得它們。"

#: ../../whatsnew/3.11.rst:2526
msgid ""
"Distributors are encouraged to build Python with the optimized Blake2 "
"library `libb2`_."
msgstr "鼓勵發布者們使用最佳化過的 Blake2 函式庫 `libb2`_ 來建置 Python。"

#: ../../whatsnew/3.11.rst:2529
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to 1 "
"for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"初始化中若是要用 :c:member:`PyConfig.module_search_paths` 來初始化 :data:"
"`sys.path`，則現在 :c:member:`PyConfig.module_search_paths_set` 必須被設為 "
"1。否則，初始化會重新計算路徑並取代所有被加到 ``module_search_paths`` 的值。"

#: ../../whatsnew/3.11.rst:2534
msgid ""
":c:func:`PyConfig_Read` no longer calculates the initial search path, and "
"will not fill any values into :c:member:`PyConfig.module_search_paths`. To "
"calculate default paths and then modify them, finish initialization and use :"
"c:func:`PySys_GetObject` to retrieve :data:`sys.path` as a Python list "
"object and modify it directly."
msgstr ""
":c:func:`PyConfig_Read` 不再計算初始搜索路徑，並且不會將任何值填充到 :c:"
"member:`PyConfig.module_search_paths` 中。若要計算預設路徑然後修改它們，完成"
"初始化並使用 :c:func:`PySys_GetObject` 以取得 :data:`sys.path` 作為 Python 列"
"表物件並直接修改它。"

#: ../../whatsnew/3.11.rst:2545
msgid ""
"Deprecate the following functions to configure the Python initialization:"
msgstr "棄用以下用來配置 Python 初始化的函式："

#: ../../whatsnew/3.11.rst:2547
msgid ":c:func:`PySys_AddWarnOptionUnicode`"
msgstr ":c:func:`PySys_AddWarnOptionUnicode`"

#: ../../whatsnew/3.11.rst:2548
msgid ":c:func:`PySys_AddWarnOption`"
msgstr ":c:func:`PySys_AddWarnOption`"

#: ../../whatsnew/3.11.rst:2549
msgid ":c:func:`PySys_AddXOption`"
msgstr ":c:func:`PySys_AddXOption`"

#: ../../whatsnew/3.11.rst:2550
msgid ":c:func:`PySys_HasWarnOptions`"
msgstr ":c:func:`PySys_HasWarnOptions`"

#: ../../whatsnew/3.11.rst:2551
msgid ":c:func:`PySys_SetArgvEx`"
msgstr ":c:func:`PySys_SetArgvEx`"

#: ../../whatsnew/3.11.rst:2552
msgid ":c:func:`PySys_SetArgv`"
msgstr ":c:func:`PySys_SetArgv`"

#: ../../whatsnew/3.11.rst:2553
msgid ":c:func:`PySys_SetPath`"
msgstr ":c:func:`PySys_SetPath`"

#: ../../whatsnew/3.11.rst:2554
msgid ":c:func:`Py_SetPath`"
msgstr ":c:func:`Py_SetPath`"

#: ../../whatsnew/3.11.rst:2555
msgid ":c:func:`Py_SetProgramName`"
msgstr ":c:func:`Py_SetProgramName`"

#: ../../whatsnew/3.11.rst:2556
msgid ":c:func:`Py_SetPythonHome`"
msgstr ":c:func:`Py_SetPythonHome`"

#: ../../whatsnew/3.11.rst:2557
msgid ":c:func:`Py_SetStandardStreamEncoding`"
msgstr ":c:func:`Py_SetStandardStreamEncoding`"

#: ../../whatsnew/3.11.rst:2558
msgid ":c:func:`_Py_SetProgramFullPath`"
msgstr ":c:func:`_Py_SetProgramFullPath`"

#: ../../whatsnew/3.11.rst:2560
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`). (Contributed by Victor "
"Stinner in :gh:`88279`.)"
msgstr ""
"請改用 :ref:`Python 初始化配置 <init-config>`\\ 中新的 :c:type:`PyConfig` "
"API。（由 Victor Stinner 於 :gh:`88279` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2564
msgid ""
"Deprecate the ``ob_shash`` member of the :c:type:`PyBytesObject`. Use :c:"
"func:`PyObject_Hash` instead. (Contributed by Inada Naoki in :issue:`46864`.)"
msgstr ""
"棄用 :c:type:`PyBytesObject` 中的 ``ob_shash`` 成員。請改用 :c:func:"
"`PyObject_Hash`。（由 Inada Naoki 於 :issue:`46864` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2573
msgid ""
"The following C APIs have been deprecated in earlier Python releases, and "
"will be removed in Python 3.12."
msgstr "以下 C API 已於先前 Python 發布版本中棄用，並將於 Python 3.12 中移除。"

#: ../../whatsnew/3.11.rst:2576
msgid ":c:func:`PyUnicode_AS_DATA`"
msgstr ":c:func:`PyUnicode_AS_DATA`"

#: ../../whatsnew/3.11.rst:2577
msgid ":c:func:`PyUnicode_AS_UNICODE`"
msgstr ":c:func:`PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.11.rst:2578
msgid ":c:func:`PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.11.rst:2579
msgid ":c:func:`PyUnicode_AsUnicode`"
msgstr ":c:func:`PyUnicode_AsUnicode`"

#: ../../whatsnew/3.11.rst:2580
msgid ":c:func:`PyUnicode_FromUnicode`"
msgstr ":c:func:`PyUnicode_FromUnicode`"

#: ../../whatsnew/3.11.rst:2581
msgid ":c:func:`PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.11.rst:2582
msgid ":c:func:`PyUnicode_GET_SIZE`"
msgstr ":c:func:`PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.11.rst:2583
msgid ":c:func:`PyUnicode_GetSize`"
msgstr ":c:func:`PyUnicode_GetSize`"

#: ../../whatsnew/3.11.rst:2584
msgid ":c:func:`PyUnicode_IS_COMPACT`"
msgstr ":c:func:`PyUnicode_IS_COMPACT`"

#: ../../whatsnew/3.11.rst:2585
msgid ":c:func:`PyUnicode_IS_READY`"
msgstr ":c:func:`PyUnicode_IS_READY`"

#: ../../whatsnew/3.11.rst:2586
msgid ":c:func:`PyUnicode_READY`"
msgstr ":c:func:`PyUnicode_READY`"

#: ../../whatsnew/3.11.rst:2587
msgid ":c:func:`Py_UNICODE_WSTR_LENGTH`"
msgstr ":c:func:`Py_UNICODE_WSTR_LENGTH`"

#: ../../whatsnew/3.11.rst:2588
msgid ":c:func:`_PyUnicode_AsUnicode`"
msgstr ":c:func:`_PyUnicode_AsUnicode`"

#: ../../whatsnew/3.11.rst:2589
msgid ":c:macro:`PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.11.rst:2590
msgid ":c:type:`PyUnicodeObject`"
msgstr ":c:type:`PyUnicodeObject`"

#: ../../whatsnew/3.11.rst:2591
msgid ":c:func:`PyUnicode_InternImmortal()`"
msgstr ":c:func:`PyUnicode_InternImmortal()`"

#: ../../whatsnew/3.11.rst:2599
msgid ""
":c:func:`PyFrame_BlockSetup` and :c:func:`PyFrame_BlockPop` have been "
"removed. (Contributed by Mark Shannon in :issue:`40222`.)"
msgstr ""
"移除 :c:func:`PyFrame_BlockSetup` 和 :c:func:`PyFrame_BlockPop`。（由 Mark "
"Shannon 於 :issue:`40222` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2603
msgid "Remove the following math macros using the ``errno`` variable:"
msgstr "移除以下使用到 ``errno`` 變數的數學巨集："

#: ../../whatsnew/3.11.rst:2605
msgid "``Py_ADJUST_ERANGE1()``"
msgstr "``Py_ADJUST_ERANGE1()``"

#: ../../whatsnew/3.11.rst:2606
msgid "``Py_ADJUST_ERANGE2()``"
msgstr "``Py_ADJUST_ERANGE2()``"

#: ../../whatsnew/3.11.rst:2607
msgid "``Py_OVERFLOWED()``"
msgstr "``Py_OVERFLOWED()``"

#: ../../whatsnew/3.11.rst:2608
msgid "``Py_SET_ERANGE_IF_OVERFLOW()``"
msgstr "``Py_SET_ERANGE_IF_OVERFLOW()``"

#: ../../whatsnew/3.11.rst:2609
msgid "``Py_SET_ERRNO_ON_MATH_ERROR()``"
msgstr "``Py_SET_ERRNO_ON_MATH_ERROR()``"

#: ../../whatsnew/3.11.rst:2611
msgid "(Contributed by Victor Stinner in :issue:`45412`.)"
msgstr "（由 Victor Stinner 於 :issue:`45412` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2613
msgid ""
"Remove ``Py_UNICODE_COPY()`` and ``Py_UNICODE_FILL()`` macros, deprecated "
"since Python 3.3. Use ``PyUnicode_CopyCharacters()`` or ``memcpy()`` "
"(``wchar_t*`` string), and ``PyUnicode_Fill()`` functions instead. "
"(Contributed by Victor Stinner in :issue:`41123`.)"
msgstr ""
"移除在 Python 3.3 中棄用的 ``Py_UNICODE_COPY()`` 和 ``Py_UNICODE_FILL()``。請"
"改用 ``PyUnicode_CopyCharacters()`` 或 ``memcpy()``\\ （``wchar_t*`` 字串）"
"和 ``PyUnicode_Fill()`` 函式。（由 Victor Stinner 於 :issue:`41123` 中所貢"
"獻。）"

#: ../../whatsnew/3.11.rst:2618
msgid ""
"Remove the ``pystrhex.h`` header file. It only contains private functions. C "
"extensions should only include the main ``<Python.h>`` header file. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"移除 ``pystrhex.h`` 標頭檔案。它只有包含私有函式。C 的擴充應該只要引入主要的 "
"``<Python.h>`` 標頭檔案。（由 Victor Stinner 於 :issue:`45434` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2622
msgid ""
"Remove the ``Py_FORCE_DOUBLE()`` macro. It was used by the "
"``Py_IS_INFINITY()`` macro. (Contributed by Victor Stinner in :issue:"
"`45440`.)"
msgstr ""
"移除 ``Py_FORCE_DOUBLE()`` 巨集。它先前被用於 ``Py_IS_INFINITY()`` 巨集。"
"（由 Victor Stinner 於 :issue:`45440` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2626
msgid ""
"The following items are no longer available when :c:macro:`Py_LIMITED_API` "
"is defined:"
msgstr "當 :c:macro:`Py_LIMITED_API` 有被定義時，以下項目將無法被取得："

#: ../../whatsnew/3.11.rst:2629
msgid ":c:func:`PyMarshal_WriteLongToFile`"
msgstr ":c:func:`PyMarshal_WriteLongToFile`"

#: ../../whatsnew/3.11.rst:2630
msgid ":c:func:`PyMarshal_WriteObjectToFile`"
msgstr ":c:func:`PyMarshal_WriteObjectToFile`"

#: ../../whatsnew/3.11.rst:2631
msgid ":c:func:`PyMarshal_ReadObjectFromString`"
msgstr ":c:func:`PyMarshal_ReadObjectFromString`"

#: ../../whatsnew/3.11.rst:2632
msgid ":c:func:`PyMarshal_WriteObjectToString`"
msgstr ":c:func:`PyMarshal_WriteObjectToString`"

#: ../../whatsnew/3.11.rst:2633
msgid "the ``Py_MARSHAL_VERSION`` macro"
msgstr "``Py_MARSHAL_VERSION`` 巨集"

#: ../../whatsnew/3.11.rst:2635
msgid "These are not part of the :ref:`limited API <stable-abi-list>`."
msgstr "這些並非\\ :ref:`受限 API <stable-abi-list>` 的一部分。"

#: ../../whatsnew/3.11.rst:2637
msgid "(Contributed by Victor Stinner in :issue:`45474`.)"
msgstr "（由 Victor Stinner 於 :issue:`45474` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2639
msgid ""
"Exclude :c:func:`PyWeakref_GET_OBJECT` from the limited C API. It never "
"worked since the :c:type:`PyWeakReference` structure is opaque in the "
"limited C API. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"將 :c:func:`PyWeakref_GET_OBJECT` 排除於受限 C API 之外，它因為 :c:type:"
"`PyWeakReference` 結構在受限 C API 中過於晦澀而從未運作。（由 Victor Stinner "
"於 :issue:`35134` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2644
msgid ""
"Remove the ``PyHeapType_GET_MEMBERS()`` macro. It was exposed in the public "
"C API by mistake, it must only be used by Python internally. Use the "
"``PyTypeObject.tp_members`` member instead. (Contributed by Victor Stinner "
"in :issue:`40170`.)"
msgstr ""
"移除 ``PyHeapType_GET_MEMBERS()`` 巨集，它是不小心才被放到公開的 C API 中，應"
"該只能被 Python 內部所使用。請改用 ``PyTypeObject.tp_members``。（由 Victor "
"Stinner 於 :issue:`40170` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2649
msgid ""
"Remove the ``HAVE_PY_SET_53BIT_PRECISION`` macro (moved to the internal C "
"API). (Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""
"移除 ``HAVE_PY_SET_53BIT_PRECISION`` 巨集（移動至內部 C API）。（由 Victor "
"Stinner 於 :issue:`45412` 中所貢獻。）"

#: ../../whatsnew/3.11.rst:2655
msgid ""
"Remove the :c:type:`Py_UNICODE` encoder APIs, as they have been deprecated "
"since Python 3.3, are little used and are inefficient relative to the "
"recommended alternatives."
msgstr ""
"移除 :c:type:`Py_UNICODE` 編碼器 API，它們自從 Python 3.3 就被棄用，非常少用"
"且和推薦的替代方案已無太大關聯。"

#: ../../whatsnew/3.11.rst:2660
msgid "The removed functions are:"
msgstr "被移除的函式為："

#: ../../whatsnew/3.11.rst:2662
msgid ":func:`!PyUnicode_Encode`"
msgstr ":func:`!PyUnicode_Encode`"

#: ../../whatsnew/3.11.rst:2663
msgid ":func:`!PyUnicode_EncodeASCII`"
msgstr ":func:`!PyUnicode_EncodeASCII`"

#: ../../whatsnew/3.11.rst:2664
msgid ":func:`!PyUnicode_EncodeLatin1`"
msgstr ":func:`!PyUnicode_EncodeLatin1`"

#: ../../whatsnew/3.11.rst:2665
msgid ":func:`!PyUnicode_EncodeUTF7`"
msgstr ":func:`!PyUnicode_EncodeUTF7`"

#: ../../whatsnew/3.11.rst:2666
msgid ":func:`!PyUnicode_EncodeUTF8`"
msgstr ":func:`!PyUnicode_EncodeUTF8`"

#: ../../whatsnew/3.11.rst:2667
msgid ":func:`!PyUnicode_EncodeUTF16`"
msgstr ":func:`!PyUnicode_EncodeUTF16`"

#: ../../whatsnew/3.11.rst:2668
msgid ":func:`!PyUnicode_EncodeUTF32`"
msgstr ":func:`!PyUnicode_EncodeUTF32`"

#: ../../whatsnew/3.11.rst:2669
msgid ":func:`!PyUnicode_EncodeUnicodeEscape`"
msgstr ":func:`!PyUnicode_EncodeUnicodeEscape`"

#: ../../whatsnew/3.11.rst:2670
msgid ":func:`!PyUnicode_EncodeRawUnicodeEscape`"
msgstr ":func:`!PyUnicode_EncodeRawUnicodeEscape`"

#: ../../whatsnew/3.11.rst:2671
msgid ":func:`!PyUnicode_EncodeCharmap`"
msgstr ":func:`!PyUnicode_EncodeCharmap`"

#: ../../whatsnew/3.11.rst:2672
msgid ":func:`!PyUnicode_TranslateCharmap`"
msgstr ":func:`!PyUnicode_TranslateCharmap`"

#: ../../whatsnew/3.11.rst:2673
msgid ":func:`!PyUnicode_EncodeDecimal`"
msgstr ":func:`!PyUnicode_EncodeDecimal`"

#: ../../whatsnew/3.11.rst:2674
msgid ":func:`!PyUnicode_TransformDecimalToASCII`"
msgstr ":func:`!PyUnicode_TransformDecimalToASCII`"

#: ../../whatsnew/3.11.rst:2676
msgid ""
"See :pep:`624` for details and :pep:`migration guidance <624#alternative-"
"apis>`. (Contributed by Inada Naoki in :issue:`44029`.)"
msgstr ""
"詳情請見 :pep:`624` 與\\ :pep:`搬遷指南 <624#alternative-apis>`。（由 Inada "
"Naoki 於 :issue:`44029` 中所貢獻。）"
